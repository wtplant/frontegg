import { createConditionEvaluator } from '../condition.evaluator';
import { OperationEnum } from '../../operations/types';

describe('ConditionEvaluator', () => {
  it('should return false when condition operation is undefined', () => {
    const conditionEvaluator = createConditionEvaluator({
      condition: { op: 'not supported' as any, value: { string: 'test' }, negate: false, attribute: 'test' },
    });

    expect(conditionEvaluator({})).toEqual(false);
  });

  it('should return false when attribute value is undefined', () => {
    const attributeKey = 'vendorId';
    const attributes = { [attributeKey]: undefined };
    const conditionEvaluator = createConditionEvaluator({
      condition: { op: OperationEnum.Contains, value: { list: ['test'] }, negate: false, attribute: attributeKey },
    });

    expect(conditionEvaluator(attributes)).toEqual(false);
  });

  it('should return false when attribute value is undefined and negate is true', () => {
    const attributeKey = 'vendorId';
    const attributes = { [attributeKey]: undefined };
    const conditionEvaluator = createConditionEvaluator({
      condition: { op: OperationEnum.Contains, value: { list: ['test'] }, negate: true, attribute: attributeKey },
    });

    expect(conditionEvaluator(attributes)).toEqual(false);
  });

  it('should return false when attribute fails operation validation', () => {
    const attributeKey = 'vendorId';
    const attributes = { [attributeKey]: 'Vendor' };
    const conditionEvaluator = createConditionEvaluator({
      condition: { op: OperationEnum.Contains, value: { list: ['test'] }, negate: false, attribute: attributeKey },
    });

    expect(conditionEvaluator(attributes)).toEqual(false);
  });

  it('should return true when attribute succeeds operation validation', () => {
    const attributeKey = 'vendorId';
    const attributes = { [attributeKey]: 'testVendor' };
    const conditionEvaluator = createConditionEvaluator({
      condition: { op: OperationEnum.Contains, value: { list: ['test'] }, negate: false, attribute: attributeKey },
    });

    expect(conditionEvaluator(attributes)).toEqual(true);
  });

  it('should return false when attribute succeeds operation validation with negate', () => {
    const attributeKey = 'vendorId';
    const attributes = { [attributeKey]: 'testVendor' };
    const conditionEvaluator = createConditionEvaluator({
      condition: { op: OperationEnum.Contains, value: { list: ['test'] }, negate: true, attribute: attributeKey },
    });

    expect(conditionEvaluator(attributes)).toEqual(false);
  });
});
