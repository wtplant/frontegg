import { Condition } from './types';
import { useOperation } from '../operations/components/operation.resolver';
import { useSanitizer } from '../operations/components/sanitizers.resolver';

export interface CreateConditionEvaluatorPayload {
  condition: Condition;
}

export type ConditionEvaluator = (attributes: Record<string, unknown>) => boolean;

function failingConditionEvaluator(): ConditionEvaluator {
  return () => false;
}

export function createConditionEvaluator(payload: CreateConditionEvaluatorPayload): ConditionEvaluator {
  const sanitizer = useSanitizer(payload.condition.op);
  if (!sanitizer) {
    return failingConditionEvaluator();
  }

  const { isSanitized, sanitizedValue } = sanitizer(payload.condition.value);
  if (!isSanitized || sanitizedValue === undefined) {
    return failingConditionEvaluator();
  }

  const operation = useOperation(payload.condition.op, sanitizedValue);

  return (attributes: Record<string, unknown>) => {
    const attributeKey = payload.condition.attribute;
    const value = attributes[attributeKey];
    
    if (value === undefined || !operation) {
      return false;
    }

    const { isValid: result } = operation(value);

    return payload.condition.negate ? !result : result;
  };
}
