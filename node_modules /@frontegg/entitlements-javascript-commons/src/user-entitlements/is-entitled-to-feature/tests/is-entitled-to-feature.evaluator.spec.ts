import * as IsEntitledEvaluators from '../evaluators';
import { evaluateIsEntitledToFeature } from '../is-entitled-to-feature.evaluator';
import { EntitlementResult, NotEntitledJustification, NO_EXPIRATION_TIME, UserEntitlementsContext } from '../../types';

describe('evaluateIsEntitledToFeature', () => {
  const mockTruthyEvaluator = (): EntitlementResult => ({ isEntitled: true });
  const mockFalsyMissingFeatureEvaluator = (): EntitlementResult => ({
    isEntitled: false,
    justification: NotEntitledJustification.MISSING_PERMISSION,
  });
  const mockFalsyExpiredEvaluator = (): EntitlementResult => ({
    isEntitled: false,
    justification: NotEntitledJustification.BUNDLE_EXPIRED,
  });

  describe('entitled', () => {
    test('given all evaluators return truthy, feature is entitled', async () => {
      jest
        .spyOn(IsEntitledEvaluators, 'getIsEntitledEvaluators')
        .mockReturnValue([mockTruthyEvaluator, mockTruthyEvaluator]);
      const result = evaluateIsEntitledToFeature('feauture-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: true });
    });
    test('given some evaluators return truthy, feature is entitled', async () => {
      jest
        .spyOn(IsEntitledEvaluators, 'getIsEntitledEvaluators')
        .mockReturnValue([mockTruthyEvaluator, mockFalsyMissingFeatureEvaluator]);
      const result = evaluateIsEntitledToFeature('feauture-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: true });
    });
  });
  describe('not-entitled', () => {
    test('given user context is undefined', async () => {
      const result = evaluateIsEntitledToFeature('feauture-key', undefined);
      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
    test('given all evaluators return falsy with missing feature, feature is not entitled, justified with missing feature', async () => {
      jest
        .spyOn(IsEntitledEvaluators, 'getIsEntitledEvaluators')
        .mockReturnValue([mockFalsyMissingFeatureEvaluator, mockFalsyMissingFeatureEvaluator]);
      const result = evaluateIsEntitledToFeature('feauture-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
    test('given all evaluators return falsy, some with missing feature, some with bundle expired, feature is not entitled, justified with bundle expired', async () => {
      jest
        .spyOn(IsEntitledEvaluators, 'getIsEntitledEvaluators')
        .mockReturnValue([mockFalsyMissingFeatureEvaluator, mockFalsyExpiredEvaluator]);
      const result = evaluateIsEntitledToFeature('feauture-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.BUNDLE_EXPIRED });
    });
  });
});
