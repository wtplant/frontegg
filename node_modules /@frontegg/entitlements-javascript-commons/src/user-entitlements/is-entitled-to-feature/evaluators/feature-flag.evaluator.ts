import { Attributes, EntitlementResult, NotEntitledJustification, UserEntitlementsContext } from '../../types';
import { evaluateFeatureFlag } from '../../../feature-flags';
import { prepareAttributes } from '../../utils/attributes.utils';
import { TreatmentEnum } from '../../../rules';

export function featureFlagEvaluator(
  featureKey: string,
  userEntitlementsContext: UserEntitlementsContext,
  attributes: Attributes = {},
): EntitlementResult {
  const feature = userEntitlementsContext.features[featureKey];
  if (feature && feature.featureFlag) {
    const preparedAttributes = prepareAttributes(attributes);
    const { treatment } = evaluateFeatureFlag(feature.featureFlag, preparedAttributes);
    if (treatment === TreatmentEnum.True) {
      return { isEntitled: true };
    }
  }

  return {
    isEntitled: false,
    justification: NotEntitledJustification.MISSING_FEATURE,
  };
}
