import { NO_EXPIRATION_TIME, NotEntitledJustification } from '../../../types';
import { directEntitlementEvalutor } from '../direct-entitlement.evaluator';

describe('directEntitlementEvalutor', () => {
  describe('entitled', () => {
    test('feature is entitled with no expiration date', async () => {
      const result = directEntitlementEvalutor('feature-key', {
        features: {
          'feature-key': {
            expireTime: NO_EXPIRATION_TIME,
            linkedPermissions: [],
            planIds: [],
          },
        },
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: true });
    });

    test('feature is entitled with a valid expiration date', async () => {
      const result = directEntitlementEvalutor('feature-key', {
        features: {
          'feature-key': {
            expireTime: Date.now() + 3600,
            linkedPermissions: [],
            planIds: [],
          },
        },
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: true });
    });
  });
  describe('not-entitled', () => {
    test('feature is not entitled', async () => {
      const result = directEntitlementEvalutor('feature-key', {
        features: {
          'feature-key': {
            expireTime: null,
            linkedPermissions: [],
            planIds: [],
          },
        },
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });

    test('feature is entitled with an expired expiration date', async () => {
      const result = directEntitlementEvalutor('feature-key', {
        features: {
          'feature-key': {
            expireTime: Date.now() - 3600,
            linkedPermissions: [],
            planIds: [],
          },
        },
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.BUNDLE_EXPIRED });
    });

    test('feature does not exist', async () => {
      const result = directEntitlementEvalutor('feature-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
  });
});
