import * as AttributesUtils from '../../../utils/attributes.utils';
import * as FeatureFlagEvaluator from '../../../../feature-flags/feature-flag.evaluator';
import { TreatmentEnum } from '../../../../rules';
import { featureFlagEvaluator } from '../feature-flag.evaluator';
import { NotEntitledJustification } from '../../../types';
describe('featureFlagEvaluator', () => {
  beforeAll(async () => {
    jest.spyOn(AttributesUtils, 'prepareAttributes').mockReturnValue({ testAttribute: 'test-value' });
  });
  describe('entitled', () => {
    test('feature flag evaluation return truthy', async () => {
      jest.spyOn(FeatureFlagEvaluator, 'evaluateFeatureFlag').mockReturnValue({ treatment: TreatmentEnum.True });
      const result = featureFlagEvaluator('feature-key', {
        features: {
          'feature-key': {
            expireTime: null,
            linkedPermissions: [],
            planIds: [],
            featureFlag: { defaultTreatment: TreatmentEnum.True, on: true, offTreatment: TreatmentEnum.False },
          },
        },
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: true });
    });
  });
  describe('not-entitled', () => {
    test('feature flag evaluation return falsy', async () => {
      jest.spyOn(FeatureFlagEvaluator, 'evaluateFeatureFlag').mockReturnValue({ treatment: TreatmentEnum.False });
      const result = featureFlagEvaluator('feature-key', {
        features: {
          'feature-key': {
            expireTime: null,
            linkedPermissions: [],
            planIds: [],
            featureFlag: { defaultTreatment: TreatmentEnum.False, on: true, offTreatment: TreatmentEnum.False },
          },
        },
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
    test('feataure does not exist', async () => {
      const result = featureFlagEvaluator('feature-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
  });
});
