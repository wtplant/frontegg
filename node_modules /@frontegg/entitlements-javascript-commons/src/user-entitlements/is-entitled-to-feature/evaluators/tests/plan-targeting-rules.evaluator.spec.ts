import * as PlanEvaluator from '../../../../plans/plan.evaluator';
import { TreatmentEnum } from '../../../../rules';
import { NotEntitledJustification } from '../../../types';
import { planTargetingRulesEvalutor } from '../plan-targeting-rules.evaluator';
describe('planTargetingRulesEvalutor', () => {
  describe('entitled', () => {
    test('some of the plans targeting rules return truthy', async () => {
      jest.spyOn(PlanEvaluator, 'evaluatePlan').mockReturnValueOnce({ treatment: TreatmentEnum.True });
      jest.spyOn(PlanEvaluator, 'evaluatePlan').mockReturnValueOnce({ treatment: TreatmentEnum.False });

      const result = planTargetingRulesEvalutor('feature-key', {
        features: {
          'feature-key': {
            expireTime: null,
            linkedPermissions: [],
            planIds: ['plan-1', 'plan-2'],
          },
        },
        permissions: {},
        plans: {
          'plan-1': {
            defaultTreatment: TreatmentEnum.True,
          },
          'plan-2': {
            defaultTreatment: TreatmentEnum.False,
          },
        },
      });

      expect(result).toEqual({ isEntitled: true });
    });
  });
  describe('not-entitled', () => {
    test('all of the plans targeting rules return falsy', async () => {
      jest.spyOn(PlanEvaluator, 'evaluatePlan').mockReturnValueOnce({ treatment: TreatmentEnum.False });
      jest.spyOn(PlanEvaluator, 'evaluatePlan').mockReturnValueOnce({ treatment: TreatmentEnum.False });

      const result = planTargetingRulesEvalutor('feature-key', {
        features: {
          'feature-key': {
            expireTime: null,
            linkedPermissions: [],
            planIds: ['plan-1', 'plan-2'],
          },
        },
        permissions: {},
        plans: {
          'plan-1': {
            defaultTreatment: TreatmentEnum.False,
          },
          'plan-2': {
            defaultTreatment: TreatmentEnum.False,
          },
        },
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });

    test('feature does not exist', async () => {
      const result = planTargetingRulesEvalutor('feature-key', {
        features: {},
        permissions: {},
        plans: {},
      });

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
  });
});
