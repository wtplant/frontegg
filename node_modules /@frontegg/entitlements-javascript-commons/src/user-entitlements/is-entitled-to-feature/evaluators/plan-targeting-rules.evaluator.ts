import { Attributes, EntitlementResult, NotEntitledJustification, UserEntitlementsContext } from '../../types';
import { prepareAttributes } from '../../utils/attributes.utils';
import { TreatmentEnum } from '../../../rules';
import { evaluatePlan } from '../../../plans';

export function planTargetingRulesEvalutor(
  featureKey: string,
  userEntitlementsContext: UserEntitlementsContext,
  attributes: Attributes = {},
): EntitlementResult {
  const feature = userEntitlementsContext.features[featureKey];
  if (feature && feature.planIds && feature.planIds.length > 0) {
    const preparedAttributes = prepareAttributes(attributes);
    const plans = userEntitlementsContext.plans;
    for (const planId of feature.planIds) {
      const plan = plans[planId];
      if (plan) {
        const { treatment } = evaluatePlan(plan, preparedAttributes);
        if (treatment === TreatmentEnum.True) {
          return { isEntitled: true };
        }
      }
    }
  }

  return {
    isEntitled: false,
    justification: NotEntitledJustification.MISSING_FEATURE,
  };
}
