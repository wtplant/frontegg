import { EntitlementResult, NotEntitledJustification, UserEntitlementsContext, Attributes } from '../types';
import { getResult, shouldContinue } from '../utils';
import { getIsEntitledEvaluators } from './evaluators';
export function evaluateIsEntitledToFeature(
  featureKey: string,
  userEntitlementsContext?: UserEntitlementsContext,
  attributes: Attributes = {},
): EntitlementResult {
  if (!userEntitlementsContext) {
    return { isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE };
  }

  const entitlementResults: EntitlementResult[] = [];
  for (const evaluator of getIsEntitledEvaluators()) {
    entitlementResults.push(evaluator(featureKey, userEntitlementsContext, attributes));
    if (!shouldContinue(entitlementResults)) {
      break;
    }
  }

  return getResult(entitlementResults);
}
