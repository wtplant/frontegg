import * as AttributesUtils from '../attributes.utils';
import { Attributes, FronteggAttributes, JwtAttributes } from '../../types';
describe('prepareAttributes', () => {
  test('given custom & jwt attributes, expected is merged & flatten attributes record', () => {
    const attributes: Attributes = {
      custom: {
        customAttribute: 'some-value',
      },
      jwt: {
        id: 'user-1',
        tenantId: 'tenant-1',
        email: 'test@email.com',
        email_verified: true,
        dummyAttribute: 'dummy',
      },
    };

    const expectedPreparedAttributes = {
      customAttribute: 'some-value',
      'frontegg.userId': 'user-1',
      'frontegg.tenantId': 'tenant-1',
      'frontegg.email': 'test@email.com',
      'frontegg.emailVerified': true,
      'jwt.id': 'user-1',
      'jwt.tenantId': 'tenant-1',
      'jwt.email': 'test@email.com',
      'jwt.email_verified': true,
      'jwt.dummyAttribute': 'dummy',
    };

    const preparedAttributes = AttributesUtils.prepareAttributes(attributes);

    expect(preparedAttributes).toEqual(expectedPreparedAttributes);
  });
});

describe('defaultFronteggAttributesMapper', () => {
  test('given jwt-attributes, expected mapped frontegg-attributes', async () => {
    const jwtAttributes: JwtAttributes = {
      id: 'user-1',
      tenantId: 'tenant-1',
      email: 'test@email.com',
      email_verified: true,
      dummyAttribute: 'dummy',
    };

    const expectedFronteggAttributes: FronteggAttributes = {
      userId: 'user-1',
      tenantId: 'tenant-1',
      email: 'test@email.com',
      emailVerified: true,
    };

    const mappedAttributes = AttributesUtils.defaultFronteggAttributesMapper(jwtAttributes);

    expect(mappedAttributes).toEqual(expectedFronteggAttributes);
  });
});

describe('modifyObjectKeysWithPrefix', () => {
  test('given object and prefix, object keys should altered with prefix', async () => {
    const prefix = 'test.';
    const obj = {
      property: 'value',
    };

    const expectedModifiedObject = {
      'test.property': 'value',
    };

    const modifiedObject = AttributesUtils.modifyObjectKeysWithPrefix(obj, prefix);

    expect(modifiedObject).toEqual(expectedModifiedObject);
  });
});
