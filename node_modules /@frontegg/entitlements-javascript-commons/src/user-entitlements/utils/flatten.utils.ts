/** DISCLAIMER - THIS CODE BELONGS TO https://github.com/hughsk/flat  */
export interface FlattenOptions {
  delimiter?: string;
  maxDepth?: number;
  safe?: boolean;
  transformKey?: (key: string) => string;
}

export function flatten<TTraget, TResult>(target: TTraget, opts?: FlattenOptions): TResult {
  opts = opts || {};

  const delimiter = opts?.delimiter || '.';
  const maxDepth = opts?.maxDepth;
  const transformKey = opts?.transformKey || keyIdentity;
  const output = {};

  function step(object, prev?, currentDepth?) {
    currentDepth = currentDepth || 1;
    Object.keys(object).forEach(function (key) {
      const value = object[key];
      const isarray = opts?.safe && Array.isArray(value);
      const type = Object.prototype.toString.call(value);
      const isbuffer = isBuffer(value);
      const isobject = type === '[object Object]' || type === '[object Array]';

      const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
      if (
        !isarray &&
        !isbuffer &&
        isobject &&
        Object.keys(value).length &&
        (!opts?.maxDepth || (maxDepth && currentDepth < maxDepth))
      ) {
        return step(value, newKey, currentDepth + 1);
      }

      output[newKey] = value;
    });
  }

  step(target);

  return output as TResult;
}

function isBuffer(obj) {
  return obj && obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj);
}

function keyIdentity(key) {
  return key;
}
