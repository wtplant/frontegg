import { Attributes, JwtAttributes, FronteggAttributes } from '../types';
import { flatten } from './flatten.utils';
/**
 *  Merges both `custom` and `jwt` records, map Frontegg attributes and modifies record keys with corrisponding prefixes
 *
 *  Example:
 *  Input: { 'custom': { 'customAttribute': 'someValue' }, 'jwt': { 'email': 'user@email.com', other: 'some-vaule' } }
 *  Output: { 'customAttribute': 'someValue', 'frontegg.email': 'user@email.com', 'jwt.email': 'user@email.com', 'jwt.other': 'some-vaule' }
 */
export function prepareAttributes(
  attributes: Attributes = {},
  customFronteggAttributesMapper?: (jwtAttributes: JwtAttributes) => FronteggAttributes,
): Record<string, unknown> {
  const { custom = {}, jwt = {} } = attributes;
  const flatJwtAttributes = flatten<JwtAttributes, JwtAttributes>(jwt);
  const fronteggAttributes = customFronteggAttributesMapper
    ? customFronteggAttributesMapper(jwt)
    : defaultFronteggAttributesMapper(jwt);
  const fronteggAttributesPrefix = 'frontegg.';
  const jwtAttributesPrefix = 'jwt.';

  return {
    ...custom,
    ...modifyObjectKeysWithPrefix(fronteggAttributes, fronteggAttributesPrefix),
    ...modifyObjectKeysWithPrefix(flatJwtAttributes, jwtAttributesPrefix),
  };
}

export function defaultFronteggAttributesMapper(jwt: JwtAttributes): FronteggAttributes {
  return {
    email: jwt.email as string,
    emailVerified: jwt.email_verified as boolean,
    tenantId: jwt.tenantId as string,
    userId: jwt.id as string,
  };
}

export function modifyObjectKeysWithPrefix(object: Record<string, unknown>, prefix: string): Record<string, unknown> {
  return Object.keys(object).reduce((modifiedObject, currentKey) => {
    modifiedObject[`${prefix}${currentKey}`] = object[currentKey];
    return modifiedObject;
  }, {});
}
