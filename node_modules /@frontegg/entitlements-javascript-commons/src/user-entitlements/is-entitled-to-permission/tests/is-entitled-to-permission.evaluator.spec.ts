import { evaluateIsEntitledToPermissions } from '../is-entitled-to-permission.evaluator';
import { NO_EXPIRATION_TIME, NotEntitledJustification, UserEntitlementsContext } from '../../types';
import * as IsEntitledToFeatureEvaluator from '../../is-entitled-to-feature/is-entitled-to-feature.evaluator';
describe('evaluateIsEntitledToPermission', () => {
  describe('entitled', () => {
    test('permission granted, no linked feature/s to it', async () => {
      const userEntitlementContext: UserEntitlementsContext = {
        features: {},
        plans: {},

        permissions: { 'test.permission': true },
      };
      const result = evaluateIsEntitledToPermissions('test.permission', userEntitlementContext, {});

      expect(result).toEqual({ isEntitled: true });
    });
    test('permission granted with linked feature/s, feature is entitled', async () => {
      jest.spyOn(IsEntitledToFeatureEvaluator, 'evaluateIsEntitledToFeature').mockReturnValue({ isEntitled: true });

      const userEntitlementContext: UserEntitlementsContext = {
        features: {
          'test-feature': { planIds: [], expireTime: NO_EXPIRATION_TIME, linkedPermissions: ['test.permission'] },
        },
        plans: {},

        permissions: { 'test.permission': true },
      };

      const result = evaluateIsEntitledToPermissions('test.permission', userEntitlementContext, {});

      expect(result).toEqual({ isEntitled: true });
    });
  });

  describe('not entitled', () => {
    test('given user context is undefined', async () => {
      const result = evaluateIsEntitledToPermissions('test.permission', undefined);
      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_PERMISSION });
    });
    test('permission not granted', async () => {
      const userEntitlementContext: UserEntitlementsContext = {
        features: {},
        plans: {},
        permissions: {},
      };
      const result = evaluateIsEntitledToPermissions('test.permission', userEntitlementContext, {});

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_PERMISSION });
    });
    test('permission granted with linked feature/s, no feature is entiteld', async () => {
      jest
        .spyOn(IsEntitledToFeatureEvaluator, 'evaluateIsEntitledToFeature')
        .mockReturnValue({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });

      const userEntitlementContext: UserEntitlementsContext = {
        features: { 'test-feature': { planIds: [], expireTime: null, linkedPermissions: ['test.permission'] } },
        plans: {},
        permissions: { 'test.permission': true },
      };

      const result = evaluateIsEntitledToPermissions('test.permission', userEntitlementContext, {});

      expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.MISSING_FEATURE });
    });
    test('permission granted with linked feature/s, no feature is entiteld with expired bundle', async () => {
      jest
        .spyOn(IsEntitledToFeatureEvaluator, 'evaluateIsEntitledToFeature')
        .mockReturnValue({ isEntitled: false, justification: NotEntitledJustification.BUNDLE_EXPIRED });
    });

    const userEntitlementContext: UserEntitlementsContext = {
      features: {
        'test-feature': { planIds: [], expireTime: Date.now() - 3600, linkedPermissions: ['test.permission'] },
      },
      plans: {},
      permissions: { 'test.permission': true },
    };

    const result = evaluateIsEntitledToPermissions('test.permission', userEntitlementContext, {});

    expect(result).toEqual({ isEntitled: false, justification: NotEntitledJustification.BUNDLE_EXPIRED });
  });
});
