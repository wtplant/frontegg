import { evaluateIsEntitledToFeature } from '../is-entitled-to-feature/is-entitled-to-feature.evaluator';
import { UserEntitlementsContext, Attributes, EntitlementResult, NotEntitledJustification } from '../types';
import { getResult, shouldContinue } from '../utils';
import { checkPermission } from '../utils/permissions.utils';

export function evaluateIsEntitledToPermissions(
  permissionKey: string,
  userEntitlementsContext?: UserEntitlementsContext,
  attributes?: Attributes,
): EntitlementResult {
  if (!userEntitlementsContext) {
    return { isEntitled: false, justification: NotEntitledJustification.MISSING_PERMISSION };
  }

  const hasPermission = checkPermission(userEntitlementsContext.permissions, permissionKey);
  if (!hasPermission) {
    return { isEntitled: false, justification: NotEntitledJustification.MISSING_PERMISSION };
  }

  const linkedFeatures = getLinkedFeatures(permissionKey, userEntitlementsContext);

  if (!linkedFeatures.length) {
    return { isEntitled: true };
  }

  const entitlementResults: EntitlementResult[] = [];
  for (const featureKey of linkedFeatures) {
    entitlementResults.push(evaluateIsEntitledToFeature(featureKey, userEntitlementsContext, attributes));

    if (!shouldContinue(entitlementResults)) {
      break;
    }
  }

  return getResult(entitlementResults);
}

function getLinkedFeatures(permissionKey: string, userEntitlementsContext: UserEntitlementsContext): string[] {
  return Object.keys(userEntitlementsContext.features).filter((featureKey) =>
    userEntitlementsContext.features[featureKey].linkedPermissions.includes(permissionKey),
  );
}
