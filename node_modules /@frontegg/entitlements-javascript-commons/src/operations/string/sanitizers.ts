import { OperationEnum, Sanitizer, SanitizersMapper } from '../types';
import { ListStringOperationPayload, SingleStringOperationPayload, StringOperationPayload } from './types';

const isString = (value: unknown): value is string => typeof value === 'string';

export const sanitizeSingleString: Sanitizer<SingleStringOperationPayload> = (value) => {
  const sanitizedValue = value.string !== undefined && isString(value.string) ? { string: value.string } : undefined;

  return {
    isSanitized: !!sanitizedValue,
    sanitizedValue,
  };
};

export const sanitizeListString: Sanitizer<ListStringOperationPayload> = (value) => {
  const sanitizedValue =
    value.list !== undefined && (<unknown[]>value.list).every((str) => isString(str))
      ? { list: value.list as string[] }
      : undefined;

  return {
    isSanitized: !!sanitizedValue,
    sanitizedValue,
  };
};

export const StringSanitizersMapper: SanitizersMapper<StringOperationPayload> = {
  [OperationEnum.Matches]: sanitizeSingleString,
  [OperationEnum.Contains]: sanitizeListString,
  [OperationEnum.StartsWith]: sanitizeListString,
  [OperationEnum.EndsWith]: sanitizeListString,
  [OperationEnum.InList]: sanitizeListString,
};
