import { OperationHandler } from '../types';
import { ListStringOperationPayload, SingleStringOperationPayload } from './types';

export function useStartsWithOperation(payload: ListStringOperationPayload): OperationHandler {
  return (attribute: string) => ({ isValid: payload.list.some((value) => attribute.startsWith(value)) });
}

export function useEndsWithOperation(payload: ListStringOperationPayload): OperationHandler {
  return (attribute: string) => ({ isValid: payload.list.some((value) => attribute.endsWith(value)) });
}

export function useContainsOperation(payload: ListStringOperationPayload): OperationHandler {
  return (attribute: string) => ({ isValid: payload.list.some((value) => attribute.includes(value)) });
}

export function useInListOperation(payload: ListStringOperationPayload): OperationHandler {
  return (attribute: string) => ({ isValid: payload.list.includes(attribute) });
}

export function useMatchesOperation(payload: SingleStringOperationPayload): OperationHandler {
  return (attribute: string) => {
    let expression: RegExp;

    try {
      expression = new RegExp(payload.string);
    } catch (e) {
      return { isValid: false };
    }

    return { isValid: expression.test(attribute) };
  };
}
