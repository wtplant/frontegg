import { OperationEnum, Sanitizer, SanitizersMapper } from '../types';
import { BetweenDateOperationPayload, DateOperationPayload, SingleDateOperationPayload } from './types';

type RawDateValue = Date | string | number;

export const sanitizeDateValue = (value: Date | string | number): Date => {
  return new Date(value);
};

export const isValidDate = (value: unknown): boolean => value instanceof Date && !isNaN(value as unknown as number);

export const sanitizeSingleDate: Sanitizer<SingleDateOperationPayload> = (value) => {
  const sanitizedDateValue = value.date ? sanitizeDateValue(value.date as RawDateValue) : undefined;
  const sanitizedValue =
    sanitizedDateValue && isValidDate(sanitizedDateValue) ? { date: sanitizedDateValue } : undefined;

  return {
    isSanitized: !!sanitizedValue,
    sanitizedValue,
  };
};

export const sanitizeDateRange: Sanitizer<BetweenDateOperationPayload> = (value) => {
  const sanitizedStartValue = value.start ? sanitizeDateValue(value.start as RawDateValue) : undefined;
  const sanitizedEndValue = value.end ? sanitizeDateValue(value.end as RawDateValue) : undefined;
  const sanitizedValue =
    sanitizedStartValue && sanitizedEndValue && isValidDate(sanitizedStartValue) && isValidDate(sanitizedEndValue)
      ? { start: sanitizedStartValue, end: sanitizedEndValue }
      : undefined;

  return {
    isSanitized: !!sanitizedValue,
    sanitizedValue,
  };
};

export const DateSanitizersMapper: SanitizersMapper<DateOperationPayload> = {
  [OperationEnum.On]: sanitizeSingleDate,
  [OperationEnum.OnOrAfter]: sanitizeSingleDate,
  [OperationEnum.OnOrBefore]: sanitizeSingleDate,
  [OperationEnum.BetweenDate]: sanitizeDateRange,
};
