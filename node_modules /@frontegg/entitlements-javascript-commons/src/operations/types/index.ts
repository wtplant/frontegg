import { OperationEnum } from './operation.enum';
import { StringOperationPayload } from '../string';
import { NumericOperationPayload } from '../numeric';
import { DateOperationPayload } from '../date';
import { BooleanOperationPayload } from '../boolean/types';

export interface OperationResult {
  isValid: boolean;
}

export type RawConditionValue = Record<string, unknown>;
export type ConditionValue =
  | StringOperationPayload
  | NumericOperationPayload
  | DateOperationPayload
  | BooleanOperationPayload;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type OperationHandler = (attribute: any) => OperationResult;
export type OperationContextEnricher = (value: ConditionValue) => OperationHandler;
export type OperationsMapper = { [key in OperationEnum]?: OperationContextEnricher };

export interface SanitizationResult<T extends ConditionValue> {
  isSanitized: boolean;
  sanitizedValue: T | undefined;
}
export type Sanitizer<T extends ConditionValue> = (value: RawConditionValue) => SanitizationResult<T>;
export type SanitizersMapper<T extends ConditionValue> = { [key in OperationEnum]?: Sanitizer<T> };

export * from './operation.enum';
