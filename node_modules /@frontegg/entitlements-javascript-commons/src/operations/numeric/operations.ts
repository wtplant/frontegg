import { OperationHandler } from '../types';
import { BetweenNumericOperationPayload, SingleNumericOperationPayload } from './types';

export function useEqualsOperation(payload: SingleNumericOperationPayload): OperationHandler {
  return (attribute: number) => ({ isValid: attribute === payload.number });
}

export function useGreaterThanOperation(payload: SingleNumericOperationPayload): OperationHandler {
  return (attribute: number) => ({ isValid: attribute > payload.number });
}

export function useGreaterThanEqualOperation(payload: SingleNumericOperationPayload): OperationHandler {
  return (attribute: number) => ({ isValid: attribute >= payload.number });
}

export function useLesserThanOperation(payload: SingleNumericOperationPayload): OperationHandler {
  return (attribute: number) => ({ isValid: attribute < payload.number });
}

export function useLesserThanEqualOperation(payload: SingleNumericOperationPayload): OperationHandler {
  return (attribute: number) => ({ isValid: attribute <= payload.number });
}

export function useBetweenNumericOperation(payload: BetweenNumericOperationPayload): OperationHandler {
  return (attribute: number) => ({ isValid: attribute >= payload.start && attribute <= payload.end });
}
