import {
  useBetweenNumericOperation,
  useEqualsOperation,
  useGreaterThanEqualOperation,
  useGreaterThanOperation,
  useLesserThanEqualOperation,
  useLesserThanOperation,
} from '../index';
import { fc, test } from '@fast-check/jest';

describe('Numeric operations', () => {
  test.prop([fc.integer(), fc.integer()], { verbose: true })(
    'should return true if the numbers equal',
    (number, attribute) => {
      const result = useEqualsOperation({ number })(attribute);
      return (number === attribute) === result.isValid;
    },
  );

  test.prop([fc.integer(), fc.integer()], { verbose: true })(
    'should return correct validity value when attribute is greater than the given number',
    (number, attribute) => {
      const result = useGreaterThanOperation({ number })(attribute);

      return attribute > number === result.isValid;
    },
  );

  test.prop([fc.integer(), fc.integer()], { verbose: true })(
    'should return correct validity value when attribute is greater or equals to given number',
    (number, attribute) => {
      const result = useGreaterThanEqualOperation({ number })(attribute);

      return attribute >= number === result.isValid;
    },
  );

  test.prop([fc.integer(), fc.integer()], { verbose: true })(
    'should return correct validity value when attribute is lesser than then given number',
    (number, attribute) => {
      const result = useLesserThanOperation({ number })(attribute);

      return attribute < number === result.isValid;
    },
  );

  test.prop([fc.integer(), fc.integer()], { verbose: true })(
    'should return correct validity value when attribute is lesser or equals to given number',
    (number, attribute) => {
      const result = useLesserThanEqualOperation({ number })(attribute);

      return attribute <= number === result.isValid;
    },
  );

  test.prop([fc.integer(), fc.integer(), fc.integer()], { verbose: true })(
    'should return correct validity value when attribute is between the given numbers',
    (start, end, attribute) => {
      const result = useBetweenNumericOperation({ start, end })(attribute);

      return (attribute >= start && attribute <= end) === result.isValid;
    },
  );
});
