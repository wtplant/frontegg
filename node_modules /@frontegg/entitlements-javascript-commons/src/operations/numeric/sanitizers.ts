import { OperationEnum, Sanitizer, SanitizersMapper } from '../types';
import { BetweenNumericOperationPayload, NumericOperationPayload, SingleNumericOperationPayload } from './types';

const isNumber = (value: unknown): value is number => typeof value === 'number';

export const sanitizeSingleNumber: Sanitizer<SingleNumericOperationPayload> = (value) => {
  const sanitizedValue = value.number !== undefined && isNumber(value.number) ? { number: value.number } : undefined;

  return {
    isSanitized: !!sanitizedValue,
    sanitizedValue,
  };
};

export const sanitizeNumericRange: Sanitizer<BetweenNumericOperationPayload> = (value) => {
  const sanitizedValue =
    value.start !== undefined && value.end !== undefined && isNumber(value.start) && isNumber(value.end)
      ? { start: value.start, end: value.end }
      : undefined;

  return {
    isSanitized: !!sanitizedValue,
    sanitizedValue,
  };
};

export const NumericSanitizersMapper: SanitizersMapper<NumericOperationPayload> = {
  [OperationEnum.Equal]: sanitizeSingleNumber,
  [OperationEnum.GreaterThan]: sanitizeSingleNumber,
  [OperationEnum.GreaterThanEqual]: sanitizeSingleNumber,
  [OperationEnum.LesserThan]: sanitizeSingleNumber,
  [OperationEnum.LesserThanEqual]: sanitizeSingleNumber,
  [OperationEnum.BetweenNumeric]: sanitizeNumericRange,
};
