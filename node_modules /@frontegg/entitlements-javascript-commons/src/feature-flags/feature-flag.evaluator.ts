import { FeatureFlag, FeatureFlagEvaluationResult } from './types';
import { createRuleEvaluator, Rule, RuleEvaluationResultEnum } from '../rules';

export function evaluateFeatureFlag(
  featureFlag: FeatureFlag,
  attributes: Record<string, unknown>,
): FeatureFlagEvaluationResult {
  if (!featureFlag.on) {
    return { treatment: featureFlag.offTreatment };
  }

  const treatableRule = findTreatableRule(featureFlag, attributes);
  if (treatableRule) {
    return { treatment: treatableRule.treatment };
  }

  return { treatment: featureFlag.defaultTreatment };
}

function findTreatableRule(featureFlag: FeatureFlag, attributes: Record<string, unknown>): Rule | undefined {
  return featureFlag.rules?.find((rule) => {
    const evaluator = createRuleEvaluator({ rule });
    const result = evaluator(attributes);

    return result === RuleEvaluationResultEnum.Treatable;
  });
}
