import { ConditionLogicEnum, TreatmentEnum } from '../../rules';
import { evaluateFeatureFlag } from '../feature-flag.evaluator';
import { FeatureFlag } from '../types';
import { OperationEnum } from '../../operations/types';

type FeatureFlagCreator = (data?: Partial<FeatureFlag>) => FeatureFlag;
const featureFlagFactory: FeatureFlagCreator = (data?: Partial<FeatureFlag>) => ({
  on: false,
  offTreatment: TreatmentEnum.False,
  defaultTreatment: TreatmentEnum.False,
  ...data,
});

describe('evaluateFeatureFlag', () => {
  describe('off treatment', () => {
    it('should return false when feature flag is turned off and offTreatment is false', () => {
      const featureFlag: FeatureFlag = featureFlagFactory({
        rules: [
          {
            treatment: TreatmentEnum.True,
            conditions: [
              {
                attribute: 'test',
                op: 'not supported' as any,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
        ],
      });

      const result = evaluateFeatureFlag(featureFlag, {});

      expect(result).toEqual({ treatment: TreatmentEnum.False });
    });

    it('should return true when feature flag is turned off and offTreatment is true', () => {
      const featureFlag: FeatureFlag = featureFlagFactory({
        offTreatment: TreatmentEnum.True,
        rules: [
          {
            treatment: TreatmentEnum.True,
            conditions: [
              {
                attribute: 'test',
                op: 'not supported' as any,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
        ],
      });

      const result = evaluateFeatureFlag(featureFlag, {});

      expect(result).toEqual({ treatment: TreatmentEnum.True });
    });
  });

  describe('default treatment', () => {
    it('should return false when feature flag is turned on and no rule is valid and defaultTreatment is false', () => {
      const featureFlag: FeatureFlag = featureFlagFactory({
        on: true,
        rules: [
          {
            treatment: TreatmentEnum.True,
            conditions: [
              {
                attribute: 'test',
                op: 'not supported' as any,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
        ],
      });

      const result = evaluateFeatureFlag(featureFlag, {});

      expect(result).toEqual({ treatment: TreatmentEnum.False });
    });

    it('should return true when feature flag is turned on and no rule is valid and defaultTreatment is true', () => {
      const featureFlag: FeatureFlag = featureFlagFactory({
        on: true,
        defaultTreatment: TreatmentEnum.True,
        rules: [
          {
            treatment: TreatmentEnum.True,
            conditions: [
              {
                attribute: 'test',
                op: 'not supported' as any,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
        ],
      });

      const result = evaluateFeatureFlag(featureFlag, {});

      expect(result).toEqual({ treatment: TreatmentEnum.True });
    });
  });

  describe('complete evaluation', () => {
    it('should return false according to first treatable rule when feature flag is turned on', () => {
      const featureFlag: FeatureFlag = featureFlagFactory({
        on: true,
        rules: [
          {
            treatment: TreatmentEnum.False,
            conditions: [
              {
                attribute: 'attribute',
                op: OperationEnum.InList,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
        ],
      });

      const result = evaluateFeatureFlag(featureFlag, { attribute: 'test' });

      expect(result).toEqual({ treatment: TreatmentEnum.False });
    });

    it('should return true according to first treatable rule when feature flag is turned on', () => {
      const featureFlag: FeatureFlag = featureFlagFactory({
        on: true,
        rules: [
          {
            treatment: TreatmentEnum.False,
            conditions: [
              {
                attribute: 'test',
                op: 'not supported' as any,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
          {
            treatment: TreatmentEnum.True,
            conditions: [
              {
                attribute: 'attribute',
                op: OperationEnum.InList,
                value: { list: ['test'] },
                negate: false,
              },
            ],
            conditionLogic: ConditionLogicEnum.And,
          },
        ],
      });

      const result = evaluateFeatureFlag(featureFlag, { attribute: 'test' });

      expect(result).toEqual({ treatment: TreatmentEnum.True });
    });
  });
});
