import { EnhancedStore, EntitledToOptions, Entitlement, StepUpOptions, IsSteppedUpOptions } from '@frontegg/redux-store';
import { FronteggAppOptions, FronteggCheckoutDialogOptions, LocalizationsOverrides, LoadEntitlementsCallback } from '@frontegg/types';
import { IFeatureFlagsAttributes } from '@frontegg/rest-api';
import { CustomAttributes } from '@frontegg/entitlements-javascript-commons';
declare type FronteggAppContainers = {
    adminPortalEl: HTMLElement;
    loginBoxEl: HTMLElement;
    checkoutDialogEl: HTMLElement;
    adminPortalContainer: HTMLElement;
    loginBoxContainer: HTMLElement;
    checkoutDialogContainer: HTMLElement;
};
export declare class FronteggApp {
    readonly name: string;
    readonly iframeRendering: boolean;
    options: FronteggAppOptions;
    loading: boolean;
    cdnUrl: string;
    customElementName: string;
    adminPortalEl?: HTMLElement;
    adminPortalRenderer?: any;
    loginBoxEl?: HTMLElement;
    checkoutDialogEl?: HTMLElement;
    checkoutDialogRenderer?: any;
    adminPortalContainer?: HTMLElement;
    loginBoxContainer?: HTMLElement;
    checkoutDialogContainer?: HTMLElement;
    loginBoxRenderer?: any;
    store: EnhancedStore;
    loadingListeners: (() => void)[];
    updateLocalizations?: (localizations: LocalizationsOverrides) => void;
    constructor(_options: FronteggAppOptions, name: string, iframeRendering?: boolean, allowMultipleRenderers?: boolean);
    /**
     * Set entitlements related options in context holder according to frontegg options
     * @param entitlementsOptions - entitlements options from frontegg options
     */
    private setEntitlementsOptions;
    private setSessionContext;
    loadAdminBoxMetadata: () => Promise<void>;
    /**
     * Loading required information on first load, mainly for refresh token and initial data.
     * In case of hosted login - we let the user decide if he wants to load the user on first load or keep the old behaviour of loading
     * The user by loginWithRedirect on demand. This param loadUserOnFirstLoad is mainly to not breaking an API and give 2 options.
     */
    requestAuthorize: () => Promise<void>;
    loadFeatureFlags: () => Promise<void>;
    /**
     * @internal use loadFeatureFlags instead
     * @description need for testing on dashboard builder
     * @param previewFeatureFlags
     */
    setFeatureFlagsForPreview: (previewFeatureFlags: IFeatureFlagsAttributes) => void;
    /**
     * @param flags keys to check
     * @returns an array of feature flags on/off boolean values
     */
    private queryFeatureFlags;
    initContainers(elements: FronteggAppContainers): Promise<void>;
    updateLocalizationsSetter: (localizationUpdateFn: (localizations: LocalizationsOverrides) => void) => void;
    updateMetadata(metadata: FronteggAppOptions['metadata']): void;
    addOnLoadedListener(listener: () => void): void;
    ready(listener: () => void): void;
    loginWithRedirect(): void;
    logout(): void;
    loadScript(component: string): Promise<unknown>;
    loadLoginBox(): Promise<void>;
    showAdminPortal(): Promise<void>;
    hideAdminPortal(): void;
    showCheckoutDialog(opts: FronteggCheckoutDialogOptions): Promise<void>;
    hideCheckoutDialog(): void;
    /**
     * @returns entitlements store data
     */
    private getEntitlementsFromStore;
    /**
     * @returns user store data
     */
    private getUserFromStore;
    /**
     * @param customAttributes consumer attributes
     * @returns is entitled query data including: entitltments state, final attributes (consumer and frontegg) and API version to use
     */
    private getEntitlementsQueryData;
    /**
      @param key feature key
      @param customAttributes user attributes
      @returns if the user is entitled to the given feature. Attaching the justification if not
      @throws when entitlement is not enabled via frontegg options
    */
    getFeatureEntitlements(key: string, customAttributes?: CustomAttributes): Entitlement;
    /**
      @param key permission key
      @param customAttributes user attributes
      @returns if the user is entitled to the given permission. Attaching the justification if not
      @throws when entitlement is not enabled via frontegg options
    */
    getPermissionEntitlements(key: string, customAttributes?: CustomAttributes): Entitlement;
    /**
      @param options - including permission or feature key
      @param customAttributes user attributes
      @returns if the user is entitled to the given permission or feature. Attaching the justification if not
      @throws when entitlement is not enabled via frontegg options
    */
    getEntitlements(options: EntitledToOptions, customAttributes?: CustomAttributes): Entitlement;
    /**
     * Load entitlements
     * @param callback called on request completed with true if succeeded, false if failed
     */
    loadEntitlements(callback?: LoadEntitlementsCallback): void;
    /**
     * Redirects to the step up page with the max age param and set the redirect url in the local storage
     * @param options.maxAge optional max age
     */
    stepUp(options?: StepUpOptions): void;
    /**
     * @param options.maxAge optional max age
     * @return true when user is stepped up, false otherwise
     */
    isSteppedUp(options?: IsSteppedUpOptions): boolean;
    close(): void;
}
export {};
