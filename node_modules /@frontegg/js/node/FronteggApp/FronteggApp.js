"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FronteggApp = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reduxStore = require("@frontegg/redux-store");
var FronteggTypes = _interopRequireWildcard(require("@frontegg/types"));
var _utils = require("../utils");
var _AppHolder = require("../AppHolder");
var FronteggRestApi = _interopRequireWildcard(require("@frontegg/rest-api"));
var _version = _interopRequireDefault(require("../version"));
var _mockFlagsList = require("../utils/mockFlagsList");
var _utils2 = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var FronteggApp = /*#__PURE__*/function () {
  function FronteggApp(_options, name) {
    var _this = this,
      _this$options$authOpt3,
      _options$authOptions;
    var iframeRendering = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var allowMultipleRenderers = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    (0, _classCallCheck2["default"])(this, FronteggApp);
    this.name = void 0;
    this.iframeRendering = void 0;
    this.options = void 0;
    this.loading = true;
    this.cdnUrl = "https://assets.frontegg.com/admin-box/".concat(_version["default"].cdnVersion);
    this.customElementName = '';
    this.adminPortalEl = void 0;
    this.adminPortalRenderer = void 0;
    this.loginBoxEl = void 0;
    this.checkoutDialogEl = void 0;
    this.checkoutDialogRenderer = void 0;
    this.adminPortalContainer = void 0;
    this.loginBoxContainer = void 0;
    this.checkoutDialogContainer = void 0;
    this.loginBoxRenderer = void 0;
    this.store = void 0;
    this.loadingListeners = [];
    this.updateLocalizations = void 0;
    this.loadAdminBoxMetadata = /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
      var Get, _data$rows$0$configur, _data$rows, _data$rows$, data;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            Get = FronteggRestApi.fetch.Get;
            if (_this.options.metadata) {
              _context.next = 12;
              break;
            }
            _context.prev = 2;
            _context.next = 5;
            return Get("/metadata", {
              entityName: 'adminBox'
            });
          case 5:
            data = _context.sent;
            _this.options.metadata = (_data$rows$0$configur = data == null ? void 0 : (_data$rows = data.rows) == null ? void 0 : (_data$rows$ = _data$rows[0]) == null ? void 0 : _data$rows$.configuration) != null ? _data$rows$0$configur : {};
            _context.next = 12;
            break;
          case 9:
            _context.prev = 9;
            _context.t0 = _context["catch"](2);
            console.error('failed to get admin portal metadata', _context.t0);
          case 12:
            FronteggTypes.Metadata.set(_this.options.metadata, _this.name);
          case 13:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[2, 9]]);
    }));
    this.requestAuthorize = /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
      var _this$options$authOpt, _this$options$authOpt2;
      var shouldRequestHostedLoginAuthorize;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            shouldRequestHostedLoginAuthorize = (_this$options$authOpt = _this.options.authOptions) == null ? void 0 : (_this$options$authOpt2 = _this$options$authOpt.hostedLoginOptions) == null ? void 0 : _this$options$authOpt2.loadUserOnFirstLoad;
            if (!_this.options.builderMode && _this.options.framework !== 'nextjs') {
              if (_this.options.hostedLoginBox && !_this.options.customLoginBox) {
                if (shouldRequestHostedLoginAuthorize) {
                  _this.store.dispatch({
                    type: 'auth/requestHostedLoginAuthorizeV2',
                    payload: {
                      shouldRedirectToLogin: false,
                      firstTime: true
                    }
                  });
                }
              } else {
                _this.store.dispatch({
                  type: 'auth/requestAuthorize',
                  payload: true
                });
              }
            }
          case 2:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    this.loadFeatureFlags = /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
      var flags;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            if (!(_this.options.previewMode || _this.options.builderMode)) {
              _context3.next = 4;
              break;
            }
            FronteggRestApi.FeatureFlags.set(_mockFlagsList.mockFlagsList, _this.name);
            _context3.next = 15;
            break;
          case 4:
            _context3.prev = 4;
            _context3.next = 7;
            return FronteggRestApi.loadFeatureFlags();
          case 7:
            flags = _context3.sent;
            if (_this.options.overrideFeatureFlags) {
              Object.assign(flags, _this.options.overrideFeatureFlags);
            }
            FronteggRestApi.FeatureFlags.set(flags, _this.name);
            _context3.next = 15;
            break;
          case 12:
            _context3.prev = 12;
            _context3.t0 = _context3["catch"](4);
            console.error('failed to get admin portal feature flags', _context3.t0);
          case 15:
          case "end":
            return _context3.stop();
        }
      }, _callee3, null, [[4, 12]]);
    }));
    this.setFeatureFlagsForPreview = function (previewFeatureFlags) {
      FronteggRestApi.FeatureFlags.set(Object.assign({}, _mockFlagsList.mockFlagsList, previewFeatureFlags), _this.name);
    };
    this.queryFeatureFlags = function (flags) {
      return FronteggRestApi.FeatureFlags.getFeatureFlags(flags, _this.name);
    };
    this.updateLocalizationsSetter = function (localizationUpdateFn) {
      _this.updateLocalizations = localizationUpdateFn;
    };
    this.getEntitlementsFromStore = function () {
      var _this$store$getState$;
      return (_this$store$getState$ = _this.store.getState().auth.user) == null ? void 0 : _this$store$getState$.entitlements;
    };
    this.getUserFromStore = function () {
      return _this.store.getState().auth.user;
    };
    this.getEntitlementsQueryData = function (customAttributes) {
      var user = _this.getUserFromStore();
      var entitlements = _this.getEntitlementsFromStore();
      var attributes = {
        custom: customAttributes,
        jwt: user
      };
      var _this$queryFeatureFla = _this.queryFeatureFlags([FronteggRestApi.USE_ENTITLEMENTS_V2_ENDPOINT_FF]),
        _this$queryFeatureFla2 = (0, _slicedToArray2["default"])(_this$queryFeatureFla, 1),
        useEntitlementsV2 = _this$queryFeatureFla2[0];
      return {
        entitlements: entitlements,
        attributes: attributes,
        isV2: useEntitlementsV2
      };
    };
    var appName = (0, _utils.formatName)(name);
    var customElementName = "frontegg-app-".concat(appName);
    this.iframeRendering = iframeRendering;
    this.name = appName;
    this.options = Object.assign({}, _options, {
      contextOptions: Object.assign({
        requestCredentials: 'include'
      }, _options.contextOptions)
    });
    if (this.options.cdnUrl) {
      this.cdnUrl = this.options.cdnUrl;
    }
    this.customElementName = customElementName;
    var authOptions = this.options.authOptions ? Object.assign({}, this.options.authOptions, {
      hostedLoginBox: this.options.hostedLoginBox
    }) : {
      hostedLoginBox: this.options.hostedLoginBox
    };
    authOptions.disableSilentRefresh = (_this$options$authOpt3 = this.options.authOptions) == null ? void 0 : _this$options$authOpt3.disableSilentRefresh;
    if (this.options.store) {
      this.store = this.options.store;
      if (!allowMultipleRenderers && this.options.store.getState().root.appName !== name) {
        throw Error('Mismatch in store names');
      }
    } else {
      var _this$options$authOpt4, _this$options$auditsO;
      this.store = (0, _reduxStore.createFronteggStore)({
        context: this.options.contextOptions,
        appName: this.name
      }, this, this.options.previewMode, authOptions, {
        auth: (_this$options$authOpt4 = this.options.authOptions) != null ? _this$options$authOpt4 : {},
        audits: (_this$options$auditsO = this.options.auditsOptions) != null ? _this$options$auditsO : {}
      }, false, this.options.urlStrategy);
    }
    _AppHolder.AppHolder.setInstance(appName, this);
    this.setEntitlementsOptions(_options.entitlementsOptions);
    this.setSessionContext({
      enableSessionPerTenant: (_options$authOptions = _options.authOptions) == null ? void 0 : _options$authOptions.enableSessionPerTenant
    });

    // for feature flags (for entitlements)
    FronteggRestApi.ContextHolder.setAppName(appName);
  }

  /**
   * Set entitlements related options in context holder according to frontegg options
   * @param entitlementsOptions - entitlements options from frontegg options
   */
  (0, _createClass2["default"])(FronteggApp, [{
    key: "setEntitlementsOptions",
    value: function setEntitlementsOptions(entitlementsOptions) {
      FronteggRestApi.ContextHolder.setEntitlementsOptions(Object.assign({}, entitlementsOptions));
    }
  }, {
    key: "setSessionContext",
    value: function setSessionContext(sessionContext) {
      FronteggRestApi.ContextHolder.setSessionContext(Object.assign({}, sessionContext));
    }
  }, {
    key: "initContainers",
    value: function () {
      var _initContainers = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(elements) {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              this.adminPortalEl = elements.adminPortalEl;
              this.loginBoxEl = elements.loginBoxEl;
              this.checkoutDialogEl = elements.checkoutDialogEl;
              this.adminPortalContainer = elements.adminPortalContainer;
              this.loginBoxContainer = elements.loginBoxContainer;
              this.checkoutDialogContainer = elements.checkoutDialogContainer;
              try {
                if (this.options.framework !== 'nextjs') {
                  document.body.classList.add('frontegg-loading');
                }
              } catch (e) {
                console.error('Failed to add frontegg-loading to body classList');
              }

              // feature flags loading should be called before requestAuthorize because it uses ff
              _context4.next = 9;
              return this.loadFeatureFlags();
            case 9:
              _context4.next = 11;
              return Promise.all([this.loadAdminBoxMetadata(), this.requestAuthorize()]);
            case 11:
              if (!this.options.previewMode && !this.options.customLoginBox) {
                this.loadLoginBox();
                (0, _utils2.loadGTM)(this.name);
              }
              if (!this.options.lazyLoadAdminPortal) {
                this.loadScript('FronteggAdminPortal');
              }
            case 13:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function initContainers(_x) {
        return _initContainers.apply(this, arguments);
      }
      return initContainers;
    }()
  }, {
    key: "updateMetadata",
    value: function updateMetadata(metadata) {
      FronteggTypes.Metadata.set(metadata, this.name);
      if (metadata != null && metadata.localizations) {
        var _this$updateLocalizat;
        (_this$updateLocalizat = this.updateLocalizations) == null ? void 0 : _this$updateLocalizat.call(this, metadata.localizations);
      }
    }
  }, {
    key: "addOnLoadedListener",
    value: function addOnLoadedListener(listener) {
      if (!this.loading) {
        listener();
        return;
      }
      this.loadingListeners.push(listener);
    }
  }, {
    key: "ready",
    value: function ready(listener) {
      if (this.loading) {
        listener();
      } else {
        this.addOnLoadedListener(listener);
      }
    }
  }, {
    key: "loginWithRedirect",
    value: function loginWithRedirect() {
      this.store.dispatch({
        type: 'auth/setState',
        payload: {
          isLoading: true
        }
      });
      this.store.dispatch({
        type: 'auth/requestHostedLoginAuthorize'
      });
    }
  }, {
    key: "logout",
    value: function logout() {
      this.store.dispatch({
        type: 'auth/setState',
        payload: {
          isLoading: true
        }
      });
      this.store.dispatch({
        type: 'auth/logout'
      });
    }
  }, {
    key: "loadScript",
    value: function loadScript(component) {
      var _this2 = this;
      return new Promise(function (resolve, reject) {
        // TODO: prevent this behavior if development
        if (window[component]) {
          resolve(window[component]);
          return;
        }

        

        var entries = {
          FronteggLoginBox: 'login-box/index.js',
          FronteggAdminPortal: 'admin-portal/index.js'
        };
        var script = document.createElement('script');
        script.src = "".concat(_this2.cdnUrl, "/").concat(entries[component]);
        script.setAttribute('id', "".concat(component, "Script"));
        script.setAttribute('cdn-url', _this2.cdnUrl);
        script.onload = function () {
          if (window["".concat(component, "Init")]) {
            resolve(window["".concat(component, "Init")]({
              FronteggRestApi: FronteggRestApi,
              FronteggTypes: FronteggTypes
            }));
          } else {
            resolve(window[component]);
          }
        };
        script.onerror = function (e) {
          // eslint-disable-next-line no-console
          console.log('Profile page error', e);
          reject(e);
        };
        document.body.append(script);
      });
    }
  }, {
    key: "loadLoginBox",
    value: function () {
      var _loadLoginBox = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        var FronteggLoginBox;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.loadScript('FronteggLoginBox');
            case 2:
              FronteggLoginBox = _context5.sent;
              FronteggLoginBox.render(this.loginBoxEl, {
                injector: this,
                options: this.options
              });
              this.loading = false;
              this.loadingListeners.forEach(function (listener) {
                try {
                  listener();
                } catch (e) {
                  console.error('Failed to call loadLoginBoxListener', e);
                }
              });
              this.loadingListeners = [];
            case 7:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function loadLoginBox() {
        return _loadLoginBox.apply(this, arguments);
      }
      return loadLoginBox;
    }()
  }, {
    key: "showAdminPortal",
    value: function () {
      var _showAdminPortal = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        var FronteggAdminPortal;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              FronteggRestApi.ContextHolder.setRequestSource(FronteggRestApi.RequestSource.AdminPortal);
              _context6.next = 3;
              return this.loadScript('FronteggAdminPortal');
            case 3:
              FronteggAdminPortal = _context6.sent;
              this.adminPortalRenderer = FronteggAdminPortal.render(this.adminPortalEl, {
                injector: this,
                options: this.options
              });
            case 5:
            case "end":
              return _context6.stop();
          }
        }, _callee6, this);
      }));
      function showAdminPortal() {
        return _showAdminPortal.apply(this, arguments);
      }
      return showAdminPortal;
    }()
  }, {
    key: "hideAdminPortal",
    value: function hideAdminPortal() {
      try {
        var _this$adminPortalRend;
        var searchParams = new URLSearchParams(window.location.search);
        (_this$adminPortalRend = this.adminPortalRenderer) == null ? void 0 : _this$adminPortalRend.unmount();
        // unmount is removing url search params, therefore we need to restore them after unmount
        (0, _utils.restoreSearchParams)(searchParams);
        FronteggRestApi.ContextHolder.setRequestSource(null);
      } catch (e) {
        console.error('Failed to unmount admin portal', e);
      }
    }
  }, {
    key: "showCheckoutDialog",
    value: function () {
      var _showCheckoutDialog = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(opts) {
        var FronteggAdminPortal;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) switch (_context7.prev = _context7.next) {
            case 0:
              _context7.next = 2;
              return this.loadScript('FronteggAdminPortal');
            case 2:
              FronteggAdminPortal = _context7.sent;
              this.checkoutDialogRenderer = FronteggAdminPortal.renderCheckoutDialog(this.checkoutDialogEl, Object.assign({
                injector: this
              }, opts, {
                options: this.options
              }));
            case 4:
            case "end":
              return _context7.stop();
          }
        }, _callee7, this);
      }));
      function showCheckoutDialog(_x2) {
        return _showCheckoutDialog.apply(this, arguments);
      }
      return showCheckoutDialog;
    }()
  }, {
    key: "hideCheckoutDialog",
    value: function hideCheckoutDialog() {
      try {
        var _this$checkoutDialogR;
        (_this$checkoutDialogR = this.checkoutDialogRenderer) == null ? void 0 : _this$checkoutDialogR.unmount();
      } catch (e) {
        console.error('Failed to unmount checkout dialog', e);
      }
    }

    /**
     * @returns entitlements store data
     */
  }, {
    key: "getFeatureEntitlements",
    value:
    /**
      @param key feature key
      @param customAttributes user attributes
      @returns if the user is entitled to the given feature. Attaching the justification if not
      @throws when entitlement is not enabled via frontegg options
    */
    function getFeatureEntitlements(key, customAttributes) {
      var _this$getEntitlements = this.getEntitlementsQueryData(customAttributes),
        entitlements = _this$getEntitlements.entitlements,
        attributes = _this$getEntitlements.attributes,
        isV2 = _this$getEntitlements.isV2;
      return (0, _reduxStore.getFeatureEntitlements)(entitlements, key, attributes, isV2);
    }

    /**
      @param key permission key
      @param customAttributes user attributes
      @returns if the user is entitled to the given permission. Attaching the justification if not
      @throws when entitlement is not enabled via frontegg options
    */
  }, {
    key: "getPermissionEntitlements",
    value: function getPermissionEntitlements(key, customAttributes) {
      var _this$getEntitlements2 = this.getEntitlementsQueryData(customAttributes),
        entitlements = _this$getEntitlements2.entitlements,
        attributes = _this$getEntitlements2.attributes,
        isV2 = _this$getEntitlements2.isV2;
      return (0, _reduxStore.getPermissionEntitlements)(entitlements, key, attributes, isV2);
    }

    /**
      @param options - including permission or feature key
      @param customAttributes user attributes
      @returns if the user is entitled to the given permission or feature. Attaching the justification if not
      @throws when entitlement is not enabled via frontegg options
    */
  }, {
    key: "getEntitlements",
    value: function getEntitlements(options, customAttributes) {
      // we use permissionKey (options key) to decide if the user is using permission key or feature key
      if ('permissionKey' in options) {
        return this.getPermissionEntitlements(options.permissionKey, customAttributes);
      }
      return this.getFeatureEntitlements(options.featureKey, customAttributes);
    }

    /**
     * Load entitlements
     * @param callback called on request completed with true if succeeded, false if failed
     */
  }, {
    key: "loadEntitlements",
    value: function loadEntitlements(callback) {
      this.store.dispatch({
        type: 'auth/loadEntitlements',
        payload: {
          callback: callback
        }
      });
    }

    /**
     * Redirects to the step up page with the max age param and set the redirect url in the local storage
     * @param options.maxAge optional max age
     */
  }, {
    key: "stepUp",
    value: function stepUp(options) {
      var state = this.store.getState();
      var _ref4 = (state == null ? void 0 : state.auth) || {},
        hostedLoginBox = _ref4.hostedLoginBox,
        stepUpUrl = _ref4.routes.stepUpUrl;
      if (hostedLoginBox) {
        this.store.dispatch({
          type: 'auth/stepUpHostedLogin',
          payload: options
        });
        return;
      }
      (0, _reduxStore.redirectByStepUpUrl)(stepUpUrl, state.auth.onRedirectTo, options == null ? void 0 : options.maxAge);
    }

    /**
     * @param options.maxAge optional max age
     * @return true when user is stepped up, false otherwise
     */
  }, {
    key: "isSteppedUp",
    value: function isSteppedUp() {
      var _this$store$getState;
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var _ref5 = ((_this$store$getState = this.store.getState()) == null ? void 0 : _this$store$getState.auth) || {},
        user = _ref5.user;
      return (0, _reduxStore.isSteppedUp)(user, options);
    }
  }, {
    key: "close",
    value: function close() {
      this.hideAdminPortal();
      this.hideCheckoutDialog();
    }
  }]);
  return FronteggApp;
}();
exports.FronteggApp = FronteggApp;