"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemeAdminByName = exports["default"] = exports.AdminPortalRenderer = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _reduxStore = require("@frontegg/redux-store");
var _types = require("@frontegg/types");
var _FronteggApp = require("../FronteggApp");
var _utils = require("../utils");
var getThemeAdminByName = function getThemeAdminByName(name) {
  var _name;
  // Load themes from window chunk to support cdn getThemeByName
  var adminPortalThemes = window['FronteggAdminPortal'].adminPortalStaticThemesDefaults;
  return (_name = adminPortalThemes[name]) != null ? _name : undefined;
};
exports.getThemeAdminByName = getThemeAdminByName;
var AdminPortalRenderer = /*#__PURE__*/function () {
  function AdminPortalRenderer(name, themeOptions, store, appOptions) {
    var allowMultipleRenderers = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    (0, _classCallCheck2["default"])(this, AdminPortalRenderer);
    this.app = void 0;
    this.options = void 0;
    this.store = void 0;
    this.setRoute = function () {};
    this.themeSetter = void 0;
    this.themeOptions = {};
    var contextOptions = {
      baseUrl: 'preview'
    };
    if (store) {
      this.store = store;
      if (!allowMultipleRenderers && store.getState().root.appName !== name) {
        throw Error('Mismatch in store names');
      }
    } else {
      this.store = (0, _reduxStore.createFronteggStore)({
        context: contextOptions,
        appName: name
      }, this, true, undefined, undefined, true);
    }
    this.options = Object.assign({
      themeOptions: themeOptions,
      iframeRendering: true,
      metadata: {},
      previewMode: true,
      builderMode: true,
      store: this.store,
      contextOptions: contextOptions
    }, appOptions);
    this.app = new _FronteggApp.FronteggApp(this.options, name, true);
    _types.Metadata.set({}, name);
  }
  (0, _createClass2["default"])(AdminPortalRenderer, [{
    key: "render",
    value: function () {
      var _render = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(adminPortalContainer) {
        var _this = this;
        var adminPortalEl, setThemeSetter, setStaticRouteSetter, FronteggAdminPortal;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              adminPortalEl = adminPortalContainer.querySelector('#root');
              if (!adminPortalEl) {
                adminPortalEl = adminPortalContainer.ownerDocument.createElement('div');
                adminPortalEl.setAttribute('id', 'root');
                adminPortalContainer.appendChild(adminPortalEl);
              }
              this.app.adminPortalContainer = adminPortalContainer;
              this.app.adminPortalEl = adminPortalEl;
              setThemeSetter = function setThemeSetter(themeSetter) {
                _this.themeSetter = themeSetter;
              };
              setStaticRouteSetter = function setStaticRouteSetter(setStaticRoute) {
                _this.setRoute = setStaticRoute;
              };
              _context.next = 8;
              return this.app.loadScript('FronteggAdminPortal');
            case 8:
              FronteggAdminPortal = _context.sent;
              this.app.adminPortalRenderer = FronteggAdminPortal.renderPage(adminPortalEl, {
                options: this.options,
                injector: this.app,
                setThemeSetter: setThemeSetter,
                setStaticRouteSetter: setStaticRouteSetter
              });
              this.app.loading = false;
              _context.next = 13;
              return (0, _utils.waitThemeSetter)(this);
            case 13:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function render(_x) {
        return _render.apply(this, arguments);
      }
      return render;
    }()
  }, {
    key: "setStaticRoute",
    value: function setStaticRoute(staticRoute) {
      var _this$setRoute;
      (_this$setRoute = this.setRoute) == null ? void 0 : _this$setRoute.call(this, staticRoute);
    }
  }, {
    key: "unmount",
    value: function unmount() {
      try {
        var _this$app$adminPortal;
        (_this$app$adminPortal = this.app.adminPortalRenderer) == null ? void 0 : _this$app$adminPortal.unmount();
      } catch (e) {
        console.error('Failed to unmount admin Portal renderer', e);
      }
    }
  }, {
    key: "setTheme",
    value: function setTheme(themeOptions) {
      var _this$themeSetter;
      this.themeOptions = themeOptions;
      if (!this.themeSetter) {
        console.warn('this.themeSetter is not defined yet');
      }
      (_this$themeSetter = this.themeSetter) == null ? void 0 : _this$themeSetter.call(this, this.themeOptions);
    }
  }]);
  return AdminPortalRenderer;
}();
exports.AdminPortalRenderer = AdminPortalRenderer;
var _default = AdminPortalRenderer;
exports["default"] = _default;