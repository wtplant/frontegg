import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import _wrapNativeSuper from "@babel/runtime/helpers/esm/wrapNativeSuper";
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
import { FronteggApp } from './FronteggApp';
import { AppHolder } from './AppHolder';
import { createElement } from './utils';
export var initialize = function initialize(options) {
  var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'default';
  var createdApp = new FronteggApp(options, name);
  if (typeof document !== 'undefined') {
    var _document$querySelect;
    if (!options.contextOptions.baseUrl) {
      var error = new Error('Edit <FronteggProvider/> options { ContextOptions: { baseUrl: "" } } in order to connect your application');
      document.body.innerHTML = "";
      alert(error.message);
      throw error;
    }
    if (!customElements.get('frontegg-app')) {
      var FronteggAppContainer = /*#__PURE__*/function (_HTMLElement) {
        _inherits(FronteggAppContainer, _HTMLElement);
        var _super = _createSuper(FronteggAppContainer);
        function FronteggAppContainer() {
          var _this;
          _classCallCheck(this, FronteggAppContainer);
          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          _this = _super.call.apply(_super, [this].concat(args));
          _this.app = null;
          return _this;
        }
        _createClass(FronteggAppContainer, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            this.updateContent();
          }
        }, {
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(name, oldValue, newValue) {
            if (name === 'app-name') {
              if (oldValue === null) {
                return;
              }
              if (oldValue === newValue) {
                return;
              }
              this.innerHTML = '';
              if (newValue === null) {
                this.remove();
              } else {
                this.updateContent();
              }
            }
            console.debug('attributeChangedCallback', name, oldValue, newValue);
          }
        }, {
          key: "updateContent",
          value: function updateContent() {
            var _this$getAttribute;
            var appName = (_this$getAttribute = this.getAttribute('app-name')) != null ? _this$getAttribute : 'default';
            var app = AppHolder.getInstance(appName);
            if (app === null) {
              throw Error("FronteggApp not found for appName: '".concat(appName, "'"));
            }
            this.setAttribute('id', "frontegg-app-".concat(app.name));
            var adminPortalContainer = createElement(this, 'div', {
              id: "frontegg-admin-portal-container-".concat(app.name)
            });
            var loginBoxContainer = createElement(this, 'div', {
              id: "frontegg-login-box-container-".concat(app.name)
            });
            var checkoutDialogContainer = createElement(this, 'div', {
              id: "frontegg-checkout-dialog-container-".concat(app.name)
            });
            var adminBoxShadowEl = adminPortalContainer.attachShadow({
              mode: 'open'
            });
            var loginBoxShadowEl = loginBoxContainer.attachShadow({
              mode: 'open'
            });
            var checkoutDialogShadowEl = checkoutDialogContainer.attachShadow({
              mode: 'open'
            });
            var adminPortalEl = createElement(adminBoxShadowEl, 'div', {
              id: "frontegg-admin-portal-".concat(app.name),
              "class": 'frontegg-root-content'
            });
            var loginBoxEl = createElement(loginBoxShadowEl, 'div', {
              id: "frontegg-login-box-".concat(app.name),
              "class": 'frontegg-root-content'
            });
            var checkoutDialogEl = createElement(checkoutDialogShadowEl, 'div', {
              id: "frontegg-checkout-dialog-".concat(app.name),
              "class": 'frontegg-root-content'
            });
            app.initContainers({
              adminPortalEl: adminPortalEl,
              loginBoxEl: loginBoxEl,
              adminPortalContainer: adminPortalContainer,
              loginBoxContainer: loginBoxContainer,
              checkoutDialogContainer: checkoutDialogContainer,
              checkoutDialogEl: checkoutDialogEl
            });
          }
        }], [{
          key: "observedAttributes",
          get: function get() {
            return ['app-name'];
          }
        }]);
        return FronteggAppContainer;
      }( /*#__PURE__*/_wrapNativeSuper(HTMLElement));
      customElements.define('frontegg-app', FronteggAppContainer);
    }
    (_document$querySelect = document.querySelector("frontegg-app[app-name=\"".concat(createdApp.name, "\"]"))) == null ? void 0 : _document$querySelect.remove();
    var element = document.createElement('frontegg-app');
    element.setAttribute('app-name', createdApp.name);
    document.body.appendChild(element);
  }
  return createdApp;
};