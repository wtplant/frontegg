import { IAddUser, IChangePassword, ILoadUsers, IResendActivationLink, ITeamUserRole, ITeamStats, ITeamUser, IUpdateProfile, IUpdateUser, IDeleteUser, ITeamUserPermission, IResendInvitationLink, IInviteUserLinkResponse, ICreateOrUpdateInviteUserLink, IInviteLinkConfiguration, IUpdateUserExpiration, ITemporaryUserConfiguration } from './interfaces';
import { PaginationResult } from '../interfaces';
import { IUserProfile } from "../users/interfaces";
/****************************************s*
 * Profile Api
 *****************************************/
/**
 * change user password by providing current password and the new password.
 *
 * @throws exception if the current password incorrect or new password validation failed.
 * ``authorized user``
 */
export declare function getProfile(params?: object): Promise<IUserProfile>;
/**
 * update user profile by providing updated fields.
 * ``authorized user``
 * @deprecated
 * use updateUserProfileV2 from users
 */
export declare function updateProfile(body: Partial<IUpdateProfile>): Promise<IUserProfile>;
/**
 * update user profile image
 * ``authorized user``
 */
export declare function updateProfileImage(body: FormData): Promise<string>;
/**
 * change user password by providing current password and the new password.
 *
 * @throws exception if the current password incorrect or new password validation failed.
 * ``authorized user``
 */
export declare function changePassword(body: IChangePassword): Promise<void>;
/*****************************************
 * Team Api
 *****************************************/
/**
 * load users from team-management-service
 *
 * ``authorized user``
 */
export declare function loadUsers(params: ILoadUsers): Promise<PaginationResult<ITeamUser>>;
/**
 * add user to team, invitation link will be sent to the added user.
 *
 * ``authorized user``
 */
export declare function addUser(body: IAddUser): Promise<ITeamUser>;
/**
 * delete user from team, user will be deleted.
 *
 * ``authorized user``
 */
export declare function deleteUser(body: IDeleteUser): Promise<ITeamUser>;
/**
 * edit user roles in team
 *
 * ``authorized user``
 */
export declare function updateUser(body: IUpdateUser): Promise<ITeamUser>;
/**
 * update user expiration time
 *
 * ``authorized user``
 */
export declare function updateUserExpirationTime(body: IUpdateUserExpiration): Promise<void>;
/**
 * set user as permanent
 */
export declare function setPermanentUser(userId: string): Promise<void>;
/**
 * get temporary user configuration
 */
export declare function getTemporaryUserConfiguration(): Promise<ITemporaryUserConfiguration>;
/**
 * create link to invite user
 *
 * ``authorized user``
 */
export declare function createInviteUserLink(body: ICreateOrUpdateInviteUserLink): Promise<IInviteUserLinkResponse>;
/**
 * update link to invite user
 *
 * ``authorized user``
 */
export declare function updateInviteUserLink(body: ICreateOrUpdateInviteUserLink): Promise<IInviteUserLinkResponse>;
/**
 * delete link to invite user
 *
 * ``authorized user``
 */
export declare function deleteInviteUserLink(): Promise<void>;
/**
 * get link to invite user
 *
 * ``authorized user``
 */
export declare function getInviteUserLink(): Promise<IInviteUserLinkResponse>;
/**
 * get invite link configuration
 *
 */
export declare function getInviteLinkConfiguration(): Promise<IInviteLinkConfiguration>;
/**
 * load available roles that can be assigned to team users from team-management-service
 *
 * ``authorized user``
 */
export declare function loadAvailableRoles(): Promise<ITeamUserRole[]>;
export declare function loadAvailablePermissions(): Promise<ITeamUserPermission[]>;
/**
 * load users stats from team-management-service
 *
 * ``authorized user``
 */
export declare function loadStats(): Promise<ITeamStats>;
/**
 * resend activation link to specific user
 *
 * ``authorized user``
 */
export declare function resendActivationLink(body: IResendActivationLink): Promise<void>;
/**
 * resend accept join tenant invitation link to specific user
 *
 * ``authorized user``
 */
export declare function resendInvitationLink(body: IResendInvitationLink): Promise<void>;
/**
 * resend accept join all pending tenant for current hierarchy invitation link to specific user
 *
 * ``authorized user``
 */
export declare function resendInvitationLinkToAllTenants(body: IResendInvitationLink): Promise<void>;
