import { QueryFilter, QuerySort } from "../interfaces";
import { IRole } from "../roles/interfaces";
export declare enum UserManagedByEnum {
    FRONTEGG = "frontegg",
    SCIM2 = "scim2"
}
export declare type ITeamUserTenant = {
    tenantId: string;
    roles: IRole[];
};
export declare type ITeamUser = {
    id: string;
    email: string;
    name: string;
    phone?: string;
    profileImage?: string;
    profileImageUrl?: string;
    tenantId: string;
    vendorId: string;
    roleIds: string[];
    roles: IRole[];
    activatedForTenant: boolean;
    createdAt: string;
    customData?: any;
    lastLogin?: string;
    mfaEnabled?: boolean;
    tenants?: ITeamUserTenant;
    verified?: boolean;
    managedBy?: UserManagedByEnum;
    temporaryExpirationDate?: Date;
};
export declare type ITeamUserRole = {
    vendorId?: string;
    tenantId?: string | null;
    id: string;
    description: string;
    key: string;
    name: string;
    permissions?: string[];
    permissionLevel?: number;
};
export declare type ITeamUserPermission = {
    description: string;
    fePermission: boolean;
    id: string;
    key: string;
    name: string;
    roleIds: string[];
    createdAt: Date;
    updatedAt: Date;
    categoryId: string;
};
export interface ISamlRolesGroup {
    id: string;
    group: string;
    roleIds: string[];
}
export declare type ITeamStats = {
    totalItems: number;
    addedThisWeek: number;
    superAdmins: number;
};
export declare type IUpdateProfile = {
    title: "Mr" | "Miss" | "Mrs" | "Ms";
    name: string;
    country: string;
    phoneNumber: string;
    dateOfBirth: number;
    profilePicture: string;
};
export declare type IUpdateProfileImage = {
    profileImage: string;
};
export declare type IChangePassword = {
    password: string;
    newPassword: string;
};
export declare type ILoadUsers = {
    silentLoading?: boolean;
    filter?: QueryFilter[];
    sort?: QuerySort[];
    pageOffset: number;
    pageSize?: number;
};
export declare type IAddUser = {
    name?: string;
    email: string;
    phone?: string;
    roleIds: string[];
    expirationInSeconds?: number;
};
export declare type IDeleteUser = {
    userId: string;
};
export declare type IUpdateUser = Partial<ITeamUser>;
export declare type IResendActivationLink = {
    userId: string;
};
export declare type IResendInvitationLink = {
    email: string;
};
export declare type ISendResetPasswordLink = {
    userId: string;
};
export declare type ICreateOrUpdateInviteUserLink = {
    expiresInMinutes?: number;
    shouldSendEmail?: boolean;
};
/**
 * invite config
 */
export declare type IInviteUserLinkResponse = {
    id: string;
    vendorId: string;
    tenantId: string;
    userId?: string;
    token: string;
    expires: Date;
    shouldSendEmail?: boolean;
};
/**
 * vendor config
 */
export declare type IInviteLinkConfiguration = {
    tenantInvitationsAllowed: boolean;
    emailsEnabled: boolean;
};
/**
 * user expiration config
 */
export declare type IUpdateUserExpiration = {
    userId: string;
    expirationInSeconds: number;
};
/**
 * vendor config
 */
export declare type ITemporaryUserConfiguration = {
    enabled: boolean;
};
