import * as auth from "./auth";
import { AuthStrategyEnum, MachineToMachineAuthStrategy, SocialLoginProviders } from "./auth";
import * as teams from "./teams";
import * as metadata from "./metadata";
import * as reports from "./reports";
import * as notifications from "./notifications";
import * as audits from "./audits";
import * as fetch from "./fetch";
import * as connectivity from "./connectivity";
import * as tenants from "./tenants";
import * as accountSettings from "./account-settings";
import * as roles from "./roles";
import * as subscriptions from "./subscriptions";
import { ISubscriptionCancellationPolicy, ISubscriptionStatus, PaymentMethodType, ProviderType } from "./subscriptions";
import { FronteggApiError } from "./error";
import * as vendor from "./vendor";
import * as subTenants from "./sub-tenants";
import * as featureFlags from "./feature-flags";
import * as directory from "./directory";
import * as impersonate from "./impersonate";
import * as groups from "./groups";
import * as users from "./users";
import * as entitlements from "./entitlements";
import * as securityCenter from "./security-center";
import * as userPhoneNumbers from "./user-phone-numbers";
import { ContextHolder, FronteggContext } from "./ContextHolder";
export * from "./interfaces";
export * from "./auth/interfaces";
export { setTabTenantInSessionStorage, getTabTenantFromSessionStorage, getCurrentUserTenantsFunction } from './auth';
export * from "./teams/interfaces";
export * from "./metadata/interfaces";
export * from "./reports/interfaces";
export * from "./connectivity/interfaces";
export * from "./notifications/interfaces";
export * from "./audits/interfaces";
export * from "./tenants/interfaces";
export * from "./account-settings/interfaces";
export * from "./roles/interfaces";
export * from "./subscriptions/interfaces";
export * from "./vendor/interfaces";
export * from "./sub-tenants/interfaces";
export * from "./routers";
export * from "./feature-flags/index";
export * from "./feature-flags/interfaces";
export * from "./directory/index";
export * from "./directory/interfaces";
export * from "./impersonate/interfaces";
export * from "./groups/interfaces";
export * from "./groups/enums";
export * from "./users/interfaces";
export * from "./entitlements/interfaces";
export * from "./security-center/interfaces";
export * from "./user-phone-numbers/interfaces";
declare const api: {
    auth: typeof auth;
    teams: typeof teams;
    metadata: typeof metadata;
    reports: typeof reports;
    connectivity: typeof connectivity;
    notifications: typeof notifications;
    audits: typeof audits;
    tenants: typeof tenants;
    accountSettings: typeof accountSettings;
    roles: typeof roles;
    subscriptions: typeof subscriptions;
    vendor: typeof vendor;
    subTenants: typeof subTenants;
    featureFlags: typeof featureFlags;
    directory: typeof directory;
    impersonate: typeof impersonate;
    groups: typeof groups;
    users: typeof users;
    entitlements: typeof entitlements;
    securityCenter: typeof securityCenter;
    userPhoneNumbers: typeof userPhoneNumbers;
};
export { fetch, ContextHolder, FronteggContext, api, FronteggApiError, AuthStrategyEnum, SocialLoginProviders, ISubscriptionCancellationPolicy, ISubscriptionStatus, PaymentMethodType, ProviderType, MachineToMachineAuthStrategy, };
declare const _default: {
    fetch: typeof fetch;
    ContextHolder: typeof ContextHolder;
    FronteggContext: {
        getContext: () => import("./interfaces").ContextOptions;
        getAccessToken: () => string | null;
        getUser: () => import("./users/interfaces").IGetUsersV2Response | null;
        onRedirectTo: (path: string, opts: import("./interfaces").RedirectOptions) => void;
        logout: (callback?: (() => void) | undefined) => void;
    };
    api: {
        auth: typeof auth;
        teams: typeof teams;
        metadata: typeof metadata;
        reports: typeof reports;
        connectivity: typeof connectivity;
        notifications: typeof notifications;
        audits: typeof audits;
        tenants: typeof tenants;
        accountSettings: typeof accountSettings;
        roles: typeof roles;
        subscriptions: typeof subscriptions;
        vendor: typeof vendor;
        subTenants: typeof subTenants;
        featureFlags: typeof featureFlags;
        directory: typeof directory;
        impersonate: typeof impersonate;
        groups: typeof groups;
        users: typeof users;
        entitlements: typeof entitlements;
        securityCenter: typeof securityCenter;
        userPhoneNumbers: typeof userPhoneNumbers;
    };
    FronteggApiError: typeof FronteggApiError;
    AuthStrategyEnum: typeof auth.AuthStrategyEnum;
    MachineToMachineAuthStrategy: typeof auth.MachineToMachineAuthStrategy;
    SocialLoginProviders: typeof auth.SocialLoginProviders;
    ISubscriptionCancellationPolicy: typeof subscriptions.ISubscriptionCancellationPolicy;
    ISubscriptionStatus: typeof subscriptions.ISubscriptionStatus;
    PaymentMethodType: typeof subscriptions.PaymentMethodType;
    ProviderType: typeof subscriptions.ProviderType;
};
export default _default;
