import { ISaveSecurityPolicyMfa, ISaveSecurityPolicyLockout, ISecurityPolicyMfa, ISecurityPolicyLockout, ISecurityPolicyCaptcha, ISecurityPolicyPasswordHistory, ISaveSecurityPolicyPasswordHistory, ISecurityPolicyPasswordConfig, ISecurityPolicy, DomainRestriction, DomainRestrictionConfig, CreateDomainRestriction, UpdateDomainRestrictionsConfig, IpRestriction, IPRestrictionsConfig, BulkCreateIpRestriction, CreateIpRestriction, GetIPRestrictionsParams, IPValidResponse } from './interfaces';
import { FronteggPaginationResult } from '../../interfaces';
/**
 * Get global secure access configuration
 */
export declare function getGlobalSecurityPolicy(): Promise<ISecurityPolicy>;
/**
 * Get Mfa configuration from security policy
 */
export declare function getMfaPolicy(): Promise<ISecurityPolicyMfa>;
/**
 * Get Vendor Mfa configuration from security policy
 */
export declare function getVendorMfaPolicy(): Promise<ISecurityPolicyMfa>;
/**
 * Create/Update Mfa configuration from security policy
 */
export declare function saveMfaPolicy(body: ISaveSecurityPolicyMfa): Promise<ISecurityPolicyMfa>;
/**
 * Get Lockout configuration from security policy
 */
export declare function getLockoutPolicy(): Promise<ISecurityPolicyLockout>;
/**
 * Get Vendor Lockout configuration from security policy
 */
export declare function getVendorLockoutPolicy(): Promise<ISecurityPolicyLockout>;
/**
 * Create/Update Lockout configuration from security policy
 */
export declare function saveLockoutPolicy(body: ISaveSecurityPolicyLockout): Promise<ISecurityPolicyLockout>;
/**
 * Get Captcha configuration from security policy
 */
export declare function getCaptchaPolicy(): Promise<ISecurityPolicyCaptcha | null>;
/**
 * Get Password History configuration from security policy
 */
export declare function getPasswordHistoryPolicy(): Promise<ISecurityPolicyPasswordHistory>;
/**
 * Get Vendor Password History configuration from security policy
 */
export declare function getVendorPasswordHistoryPolicy(): Promise<ISecurityPolicyPasswordHistory>;
/**
 * Create/Update Password History configuration from security policy
 */
export declare function savePasswordHistoryPolicy(body: ISaveSecurityPolicyPasswordHistory): Promise<ISecurityPolicyPasswordHistory>;
/**
 * load vendor password configuration.
 */
export declare function getPasswordConfigPolicy(): Promise<ISecurityPolicyPasswordConfig>;
/**
 * Get domain restrictions for tenant
 */
export declare function getDomainRestrictions(): Promise<{
    items: DomainRestriction[];
}>;
/**
 *  Get domain restrictions config for tenant
 */
export declare function getDomainRestrictionsConfig(): Promise<DomainRestrictionConfig>;
/**
 * Create domain restriction for tenant
 */
export declare function createDomainRestriction(body: CreateDomainRestriction): Promise<DomainRestriction>;
/**
 * Update  domain restrictions config for tenant
 */
export declare function updateDomainRestrictionConfig(body: UpdateDomainRestrictionsConfig): Promise<DomainRestrictionConfig>;
/**
 * Delete domain restriction for tenant by id
 */
export declare function deleteDomainRestriction(id: string): Promise<void>;
/**
 * Get ip restrictions for tenant
 */
export declare function getIPRestrictions(params: GetIPRestrictionsParams): Promise<FronteggPaginationResult<IpRestriction[]>>;
/**
 *  Get ip restrictions config for tenant
 */
export declare function getIPRestrictionsConfig(): Promise<IPRestrictionsConfig>;
/**
 * Create ip restriction for tenant
 */
export declare function createIPRestriction(body: CreateIpRestriction): Promise<void>;
/**
 * Create bulk ip restrictions for tenant
 */
export declare function bulkCreateIPRestriction(body: BulkCreateIpRestriction): Promise<void>;
/**
 * Update ip restrictions config for tenant
 */
export declare function updateIPRestrictionConfig(body: IPRestrictionsConfig): Promise<void>;
/**
 * Delete ip restriction for tenant by id
 */
export declare function deleteIPRestriction(id: string): Promise<void>;
/**
 * Test current user ip restriction
 */
export declare function testCurrentIp(): Promise<IPValidResponse>;
/**
 * Test current user ip restriction is in allow list
 */
export declare function testCurrentIpInAllowList(): Promise<IPValidResponse>;
