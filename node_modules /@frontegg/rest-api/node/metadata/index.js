"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getAdminBoxMetadata = getAdminBoxMetadata;
exports.getAuditsMetadata = void 0;
exports.getCurrentUserIpMetadata = getCurrentUserIpMetadata;
exports.getSamlMetadata = exports.getNotificationsMetadata = exports.getIpAdressMetadata = void 0;
exports.updateAdminBoxMetadata = updateAdminBoxMetadata;

var _fetch = require("../fetch");

async function getMetadata(body) {
  var _data$rows, _data$rows2;

  const data = await (0, _fetch.Get)('/metadata', body);
  if (data != null && (_data$rows = data.rows) != null && _data$rows[0]) return data == null ? void 0 : (_data$rows2 = data.rows) == null ? void 0 : _data$rows2[0];
  throw new Error(`metadata not found: ${body.entityName}`);
}

async function getAdminBoxMetadata() {
  return (0, _fetch.Get)('/metadata/admin-box');
}

async function updateAdminBoxMetadata(body) {
  return (0, _fetch.Post)('/metadata/admin-box', body);
}

async function getIpMetadata(ip) {
  const data = await (0, _fetch.Get)(`/metadata/ip/${ip}`);
  if (data) return data;
  throw new Error(`ip metadata not found`);
}

async function getCurrentUserIpMetadata() {
  const data = await (0, _fetch.Get)(`/metadata/ipme`);
  if (data) return data;
  throw new Error(`ip metadata not found`);
}

const getNotificationsMetadata = async () => getMetadata({
  entityName: 'notifications'
});

exports.getNotificationsMetadata = getNotificationsMetadata;

const getSamlMetadata = async () => getMetadata({
  entityName: 'saml'
});

exports.getSamlMetadata = getSamlMetadata;

const getAuditsMetadata = async () => getMetadata({
  entityName: 'audits'
});

exports.getAuditsMetadata = getAuditsMetadata;

const getIpAdressMetadata = async ip => getIpMetadata(ip);

exports.getIpAdressMetadata = getIpAdressMetadata;