"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.putSMSSubscriptions = exports.putEmailSubscriptions = exports.postWebhooksConfiguration = exports.postWebhookTest = exports.postWebhookRetry = exports.postSlackConfiguration = exports.postSlackCode = exports.postSMSConfiguration = exports.postEmailConfiguration = exports.patchSMSConfiguration = exports.patchEmailConfiguration = exports.getWebhooksConfigurations = exports.getWebhookLog = exports.getSlackScope = exports.getSlackConfiguration = exports.getSlackChannels = exports.getSMSConfiguration = exports.getEmailConfiguration = exports.getChannelMaps = exports.getCategories = exports.deleteWebhooksConfiguration = exports.deleteSlackConfiguration = exports.deleteSMSSubscriptions = exports.deleteSMSConfiguration = exports.deleteEmailSubscriptions = exports.deleteEmailConfiguration = void 0;

var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));

var _constants = require("../constants");

var _fetch = require("../fetch");

const _excluded = ["eventKey"],
      _excluded2 = ["eventKey"];

const getSlackConfiguration = () => {
  return (0, _fetch.Get)(`${_constants.urls.integrations.configurations.v1}/slack`);
};

exports.getSlackConfiguration = getSlackConfiguration;

const getSlackScope = () => {
  return (0, _fetch.Get)(`${_constants.urls.integrations.configurations.v1}/slack/applications`);
};

exports.getSlackScope = getSlackScope;

const getSlackChannels = () => {
  return (0, _fetch.Get)(`${_constants.urls.integrations.configurations.v1}/slack/channels`);
};

exports.getSlackChannels = getSlackChannels;

const postSlackConfiguration = data => {
  if (data.id) {
    return (0, _fetch.Patch)(`${_constants.urls.integrations.configurations.v1}/slack/subscription/${data.id}`, data);
  }

  return (0, _fetch.Post)(`${_constants.urls.integrations.configurations.v1}/slack/subscriptions`, data);
};

exports.postSlackConfiguration = postSlackConfiguration;

const deleteSlackConfiguration = data => {
  return (0, _fetch.Delete)(`${_constants.urls.integrations.configurations.v1}/slack/subscriptions/${data.id}`);
};

exports.deleteSlackConfiguration = deleteSlackConfiguration;

const postSlackCode = code => {
  return (0, _fetch.Post)(`${_constants.urls.integrations.configurations.v1}/slack/applications/registrations`, {
    code
  });
};

exports.postSlackCode = postSlackCode;

const getEmailConfiguration = () => {
  return (0, _fetch.Get)(`${_constants.urls.integrations.configurations.v1}/emails`);
};

exports.getEmailConfiguration = getEmailConfiguration;

const postEmailConfiguration = _ref => {
  let {
    eventKey
  } = _ref,
      data = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  return (0, _fetch.Post)(`${_constants.urls.integrations.configurations.v1}/emails/${eventKey}`, data);
};

exports.postEmailConfiguration = postEmailConfiguration;

const patchEmailConfiguration = ({
  eventKey,
  enabled
}) => {
  return (0, _fetch.Patch)(`${_constants.urls.integrations.configurations.v1}/emails/${eventKey}`, {
    enabled
  });
};

exports.patchEmailConfiguration = patchEmailConfiguration;

const deleteEmailSubscriptions = (eventKey, subscriptionId) => {
  return (0, _fetch.Delete)(`${_constants.urls.integrations.configurations.v1}/emails/${eventKey}/subscriptions/${subscriptionId}`);
};

exports.deleteEmailSubscriptions = deleteEmailSubscriptions;

const putEmailSubscriptions = (subscriptionId, eventKey, data) => {
  return (0, _fetch.Put)(`${_constants.urls.integrations.configurations.v1}/emails/${eventKey}/subscriptions/${subscriptionId}`, data);
};

exports.putEmailSubscriptions = putEmailSubscriptions;

const deleteEmailConfiguration = eventKey => {
  return (0, _fetch.Delete)(`${_constants.urls.integrations.configurations.v1}/emails/${eventKey}`);
};

exports.deleteEmailConfiguration = deleteEmailConfiguration;

const getSMSConfiguration = () => {
  return (0, _fetch.Get)(`${_constants.urls.integrations.configurations.v2}/sms`);
};

exports.getSMSConfiguration = getSMSConfiguration;

const postSMSConfiguration = _ref2 => {
  let {
    eventKey
  } = _ref2,
      data = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);
  return (0, _fetch.Post)(`${_constants.urls.integrations.configurations.v2}/sms/${eventKey}`, data);
};

exports.postSMSConfiguration = postSMSConfiguration;

const patchSMSConfiguration = ({
  eventKey,
  enabled
}) => {
  return (0, _fetch.Patch)(`${_constants.urls.integrations.configurations.v2}/sms/${eventKey}`, {
    enabled
  });
};

exports.patchSMSConfiguration = patchSMSConfiguration;

const deleteSMSSubscriptions = (eventKey, subscriptionId) => {
  return (0, _fetch.Delete)(`${_constants.urls.integrations.configurations.v2}/sms/${eventKey}/subscriptions/${subscriptionId}`);
};

exports.deleteSMSSubscriptions = deleteSMSSubscriptions;

const putSMSSubscriptions = (subscriptionId, eventKey, data) => {
  return (0, _fetch.Put)(`${_constants.urls.integrations.configurations.v2}/sms/${eventKey}/subscriptions/${subscriptionId}`, data);
};

exports.putSMSSubscriptions = putSMSSubscriptions;

const deleteSMSConfiguration = eventKey => {
  return (0, _fetch.Delete)(`${_constants.urls.integrations.configurations.v2}/sms/${eventKey}`);
};

exports.deleteSMSConfiguration = deleteSMSConfiguration;

const getWebhooksConfigurations = () => {
  return (0, _fetch.Get)(_constants.urls.webhooks.v1);
};

exports.getWebhooksConfigurations = getWebhooksConfigurations;

const postWebhooksConfiguration = data => {
  if (data._id) {
    return (0, _fetch.Patch)(`${_constants.urls.webhooks.v1}/${data._id}`, data);
  } else {
    return (0, _fetch.Post)(`${_constants.urls.webhooks.v1}/custom`, data);
  }
};

exports.postWebhooksConfiguration = postWebhooksConfiguration;

const deleteWebhooksConfiguration = id => {
  return (0, _fetch.Delete)(`${_constants.urls.webhooks.v1}/${id}`);
};

exports.deleteWebhooksConfiguration = deleteWebhooksConfiguration;

const getWebhookLog = (id, offset = 0, limit = 10) => {
  const query = new URLSearchParams({
    id,
    offset: `${offset}`,
    limit: `${limit}`
  });
  return (0, _fetch.Get)(`${_constants.urls.webhooks.v1}/logs/?${query.toString()}`);
};

exports.getWebhookLog = getWebhookLog;

const postWebhookTest = data => {
  return (0, _fetch.Post)(`${_constants.urls.webhooks.v1}/test`, data);
};

exports.postWebhookTest = postWebhookTest;

const postWebhookRetry = id => {
  return (0, _fetch.Post)(`${_constants.urls.webhooks.v1}/logs/${id}/retries`);
};

exports.postWebhookRetry = postWebhookRetry;

const getCategories = () => {
  return (0, _fetch.Get)(`${_constants.urls.events.configurations.v1}/categories`);
};

exports.getCategories = getCategories;

const getChannelMaps = channels => {
  return (0, _fetch.Get)(_constants.urls.events.configurations.v1, {
    channels
  });
};

exports.getChannelMaps = getChannelMaps;