"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHierarchyMetadata = getHierarchyMetadata;
exports.getParentTenants = getParentTenants;
exports.getParentTenantsById = getParentTenantsById;
exports.getSubTenants = getSubTenants;
exports.getSubTenantsAsTree = getSubTenantsAsTree;
exports.getTenants = getTenants;
exports.getTenantsUsersCount = getTenantsUsersCount;
exports.searchSubTenants = searchSubTenants;
exports.switchTenant = switchTenant;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _fetch = require("../fetch");

var _constants = require("../constants");

var _utils = require("../auth/utils");

var _ContextHolder = require("../ContextHolder");

async function switchTenant(body) {
  if (_ContextHolder.ContextHolder.isSessionPerTenantEnabled()) {
    (0, _utils.setTabTenantInSessionStorage)(body.tenantId);
  }

  return (0, _fetch.Put)(`${_constants.urls.identity.users.v1}/tenant`, body);
}

async function getTenants() {
  return (0, _fetch.Get)(`${_constants.urls.identity.users.v2}/me/tenants`);
}

async function getSubTenants(options) {
  return (0, _fetch.Get)(_constants.urls.tenants.hierarchy.v1, undefined, {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}

async function getSubTenantsAsTree(options) {
  return (0, _fetch.Get)(_constants.urls.tenants.hierarchy.tree.v1, undefined, {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}

async function getParentTenants(options) {
  return (0, _fetch.Get)(_constants.urls.tenants.hierarchy.parents.v1, undefined, {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}

async function getParentTenantsById(tenantId, options) {
  return (0, _fetch.Get)(`${_constants.urls.tenants.hierarchy.parents.v1}/${tenantId}`, undefined, {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}

async function getTenantsUsersCount(body, options) {
  return (0, _fetch.Post)(`${_constants.urls.identity.tenants.users.v1}/count`, body, {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}

async function searchSubTenants(params, options) {
  return (0, _fetch.Get)(_constants.urls.tenants.hierarchy.v2, params, {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}

async function getHierarchyMetadata(params, options) {
  return (0, _fetch.Get)(_constants.urls.tenants.hierarchy.metadata.v2, (0, _extends2.default)({}, params, {
    _tenantIds: params._tenantIds.join(',')
  }), {
    headers: (0, _fetch.extractHeadersFromOptions)(options)
  });
}