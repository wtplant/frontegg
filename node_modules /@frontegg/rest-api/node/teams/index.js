"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.addUser = addUser;
exports.changePassword = changePassword;
exports.createInviteUserLink = createInviteUserLink;
exports.deleteInviteUserLink = deleteInviteUserLink;
exports.deleteUser = deleteUser;
exports.getInviteLinkConfiguration = getInviteLinkConfiguration;
exports.getInviteUserLink = getInviteUserLink;
exports.getProfile = getProfile;
exports.getTemporaryUserConfiguration = getTemporaryUserConfiguration;
exports.loadAvailablePermissions = loadAvailablePermissions;
exports.loadAvailableRoles = loadAvailableRoles;
exports.loadStats = loadStats;
exports.loadUsers = loadUsers;
exports.resendActivationLink = resendActivationLink;
exports.resendInvitationLink = resendInvitationLink;
exports.resendInvitationLinkToAllTenants = resendInvitationLinkToAllTenants;
exports.setPermanentUser = setPermanentUser;
exports.updateInviteUserLink = updateInviteUserLink;
exports.updateProfile = updateProfile;
exports.updateProfileImage = updateProfileImage;
exports.updateUser = updateUser;
exports.updateUserExpirationTime = updateUserExpirationTime;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _fetch = require("../fetch");

var _constants = require("../constants");

async function getProfile(params) {
  return (0, _fetch.Get)(`${_constants.urls.identity.users.v2}/me`, params != null ? params : {
    addRoles: true
  });
}

async function updateProfile(body) {
  return (0, _fetch.Put)(`${_constants.urls.identity.users.v2}/me`, body);
}

async function updateProfileImage(body) {
  return (0, _fetch.Put)(`${_constants.urls.team.profile.v1}/me/image/v1`, body, {
    responseType: 'plain',
    contentType: undefined
  });
}

async function changePassword(body) {
  return (0, _fetch.Post)(`${_constants.urls.identity.users.v1}/passwords/change`, body);
}

async function loadUsers(params) {
  var _params$sort, _params$sort$0$id, _params$sort2, _params$sort2$, _params$sort3, _params$sort3$;

  const filters = (params.filter || []).reduce((p, n) => (0, _extends2.default)({}, p, {
    [n.id]: n.value
  }), {});
  const sorts = (_params$sort = params.sort) != null && _params$sort.length ? {
    sortBy: (_params$sort$0$id = (_params$sort2 = params.sort) == null ? void 0 : (_params$sort2$ = _params$sort2[0]) == null ? void 0 : _params$sort2$.id) != null ? _params$sort$0$id : 'name',
    sortDirection: (_params$sort3 = params.sort) != null && (_params$sort3$ = _params$sort3[0]) != null && _params$sort3$.desc ? 'desc' : 'asc'
  } : null;
  return (0, _fetch.Get)(_constants.urls.team.members.v1, (0, _extends2.default)({
    pageOffset: params.pageOffset,
    pageSize: params.pageSize
  }, filters, sorts));
}

async function addUser(body) {
  return (0, _fetch.Post)(_constants.urls.identity.users.v2, (0, _extends2.default)({}, body, {
    provider: 'local'
  }));
}

async function deleteUser(body) {
  return (0, _fetch.Delete)(`${_constants.urls.team.members.v1}/${body.userId}`);
}

async function updateUser(body) {
  return (0, _fetch.Put)(_constants.urls.team.members.v1, body);
}

async function updateUserExpirationTime(body) {
  const {
    userId,
    expirationInSeconds
  } = body;
  return (0, _fetch.Put)(`${_constants.urls.identity.users.temporary.v1}/${userId}`, {
    expirationInSeconds
  });
}

async function setPermanentUser(userId) {
  return (0, _fetch.Delete)(`${_constants.urls.identity.users.temporary.v1}/${userId}`);
}

async function getTemporaryUserConfiguration() {
  return (0, _fetch.Get)(_constants.urls.identity.users.temporary.configuration.v1);
}

async function createInviteUserLink(body) {
  return (0, _fetch.Post)(_constants.urls.identity.tenants.invites.user.v1, (0, _extends2.default)({}, body));
}

async function updateInviteUserLink(body) {
  return (0, _fetch.Patch)(_constants.urls.identity.tenants.invites.user.v1, (0, _extends2.default)({}, body));
}

async function deleteInviteUserLink() {
  return (0, _fetch.Delete)(_constants.urls.identity.tenants.invites.user.v1);
}

async function getInviteUserLink() {
  return (0, _fetch.Get)(_constants.urls.identity.tenants.invites.user.v1);
}

async function getInviteLinkConfiguration() {
  return (0, _fetch.Get)(_constants.urls.identity.tenants.invites.configuration.v1);
}

async function loadAvailableRoles() {
  return (0, _fetch.Get)(_constants.urls.team.roles.v1);
}

async function loadAvailablePermissions() {
  return (0, _fetch.Get)(_constants.urls.identity.permissions.v1);
}

async function loadStats() {
  return (0, _fetch.Get)(`${_constants.urls.team.stats.v1}/members`);
}

async function resendActivationLink(body) {
  return (0, _fetch.Post)(`${_constants.urls.team.members.v1}/${body.userId}/resendActivationEmail`, {});
}

async function resendInvitationLink(body) {
  return (0, _fetch.Post)(_constants.urls.identity.users.v2, (0, _extends2.default)({}, body, {
    provider: 'local'
  }));
}

async function resendInvitationLinkToAllTenants(body) {
  return (0, _fetch.Post)(_constants.urls.identity.users.invitation.resendAll.v1, (0, _extends2.default)({}, body));
}