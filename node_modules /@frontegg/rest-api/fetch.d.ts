import { ContextOptions, UserJwtOptions } from './interfaces';
interface RequestOptions {
    url: string;
    method: 'GET' | 'POST' | 'PATCH' | 'PUT' | 'DELETE';
    body?: any;
    params?: any;
    contentType?: string;
    responseType?: 'json' | 'plain' | 'blob';
    headers?: Record<string, string>;
    credentials?: RequestCredentials;
}
export declare function getBaseUrl(context: ContextOptions, url: string, withFronteggPrefix?: boolean): string;
export declare function getMetadataHeaders(context: ContextOptions): Record<string, string>;
export declare function getScopedTenant(): string | null;
export declare const Get: (url: string, params?: any, opts?: Pick<RequestOptions, "body" | "params" | "contentType" | "responseType" | "headers" | "credentials"> | undefined) => Promise<any>;
export declare const Post: (url: string, body?: any, opts?: Pick<RequestOptions, "body" | "params" | "contentType" | "responseType" | "headers" | "credentials"> | undefined) => Promise<any>;
export declare const Patch: (url: string, body?: any, opts?: Pick<RequestOptions, "body" | "params" | "contentType" | "responseType" | "headers" | "credentials"> | undefined) => Promise<any>;
export declare const Put: (url: string, body?: any, opts?: Pick<RequestOptions, "body" | "params" | "contentType" | "responseType" | "headers" | "credentials"> | undefined) => Promise<any>;
export declare const Delete: (url: string, body?: any, opts?: Pick<RequestOptions, "body" | "params" | "contentType" | "responseType" | "headers" | "credentials"> | undefined) => Promise<any>;
export declare const PostDownload: (url: string, body?: any, params?: any, opts?: any) => Promise<any>;
export declare const extractHeadersFromOptions: (options?: UserJwtOptions) => {
    Authorization?: string;
};
export {};
