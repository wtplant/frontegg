import { IDownloadReport, IGetReport, IGetReports, IRenderReport, IRenderReportResponse, IReportRecord, IScheduleReport, ISendReport } from './interfaces';
/**
 * Get all active tenant reports from reports service by active vendor.
 * Optional: pass filters and sort options to reports.
 *
 * @returns list of reports objects
 */
export declare function getReports(body: IGetReports): Promise<IReportRecord[]>;
/**
 * Get report record by id.
 *
 * @returns list of report object
 * @throws exception if report not found.
 */
export declare function getReport(body: IGetReport): Promise<IReportRecord>;
/**
 * Render report by id.
 * Optional: pass data filters if exists to render report by specific data.
 *
 * @returns html content of the rendered reports
 * @throws exception if report not found or the data api unreached.
 */
export declare function renderReport({ dataFilters, ...body }: IRenderReport): Promise<IRenderReportResponse>;
/**
 * schedule report by providing cron expression and data filters.
 *
 * @returns the updated report object
 * @throws exception if report not found or the data api unreached.
 */
export declare function scheduleReport({ templateId, dataFilters, ...body }: IScheduleReport): Promise<IReportRecord>;
/**
 * download report as file in specific format.
 * this function will add a href element with url to trigger file download.
 * Optional: pass data filters if exists to generate report by specific data.
 *
 * @throws exception if report not found or the data api unreached.
 */
export declare function downloadReport({ dataFilters, ...body }: IDownloadReport): Promise<void>;
/**
 * send report to specific email address.
 * Optional: pass data filters if exists to send report by specific data.
 *
 * @throws exception if report not found or the data api unreached.
 */
export declare function sendReport(body: ISendReport): Promise<void>;
