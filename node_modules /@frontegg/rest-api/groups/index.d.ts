import { ICreateGroup, ICreateGroupResponse, IGetGroup, IGetGroupQueryOptions, IGetGroupsByIds, IGroupConfigResponse, IGroupResponse, IUpdateGroup, IUpdateGroupConfig, IUpdateGroupRoles, IUpdateGroupUsers } from "./interfaces";
/**
 * Get group by given id
 */
export declare function getGroupById({ groupId }: IGetGroup, query?: IGetGroupQueryOptions): Promise<IGroupResponse>;
/**
 * Get all tenant groups
 */
export declare function getGroups(query?: IGetGroupQueryOptions): Promise<IGroupResponse[]>;
/**
 * Get groups by ids
 */
export declare function getGroupsByIds(body: IGetGroupsByIds, params?: IGetGroupQueryOptions): Promise<IGroupResponse[]>;
/**
 * Create new group
 */
export declare function createGroup(body: ICreateGroup): Promise<ICreateGroupResponse>;
/**
 * Update existing group by Id
 */
export declare function updateGroup({ groupId, ...body }: IUpdateGroup): Promise<void>;
/**
 * Delete existing group by Id
 */
export declare function deleteGroup(groupId: string): Promise<void>;
/**
 * Add roles to existing group
 */
export declare function addRolesToGroup(groupId: string, body: IUpdateGroupRoles): Promise<void>;
/**
 * Delete roles from existing group
 */
export declare function deleteRolesFromGroup(groupId: string, body: IUpdateGroupRoles): Promise<void>;
/**
 * Add users to existing group
 */
export declare function addUsersToGroup(groupId: string, body: IUpdateGroupUsers): Promise<void>;
/**
 * Delete users from existing group
 */
export declare function deleteUsersFromGroup(groupId: string, body: IUpdateGroupUsers): Promise<void>;
/**
 * Get or create default groups configuration
 */
export declare function getGroupConfiguration(): Promise<IGroupConfigResponse>;
/**
 * Create or update groups configuration
 */
export declare function updateGroupConfiguration(body: IUpdateGroupConfig): Promise<IGroupConfigResponse>;
