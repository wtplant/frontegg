export declare type IGetMetadata = Pick<IBaseMetadata, 'entityName'>;
interface IBaseMetadata {
    entityName: 'saml' | 'notifications' | 'audits';
    id: string;
    createdAt: string;
    updatedAt: string;
    properties: any[];
    vendorId: string;
}
export declare type IMetadataTheme = {
    id: string;
    name: string;
    styles: any;
};
export interface INotificationMetadata extends IBaseMetadata {
    entityName: 'notifications';
    channels: string[];
    channelsConfig: string[];
    severities: any[];
    theme: IMetadataTheme;
}
export interface ISamlMetadata extends IBaseMetadata {
    entityName: 'saml';
    isActive: boolean;
    configuration: {
        acsUrl: string;
        spEntityId: string;
    };
}
export interface IAuditsMetadata extends IBaseMetadata {
    entityName: 'audits';
    theme: IMetadataTheme;
}
export interface IMetadataIp {
    latitude: number;
    longitude: number;
    ip: string;
    city: string | null;
    country_name: string | null;
    country_code: string | null;
    zip: string | null;
    location: {
        country_flag?: string | null;
        country_flag_emoji?: string | null;
    };
}
export interface CommitChangeDto {
    type: string;
    payload: unknown;
}
export interface CommitChangesRequest {
    actions: CommitChangeDto[];
}
export {};
