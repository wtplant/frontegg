"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadInvoices = loadInvoices;
exports.subscriptionInvoicesSagas = subscriptionInvoicesSagas;
exports.subscriptionInvoicesSagasMock = subscriptionInvoicesSagasMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _index = require("./index");
var _restApi = require("@frontegg/rest-api");
var _dummy = require("../../dummy");
var _utils = require("../../../utils");
function* subscriptionInvoicesSagas() {
  yield (0, _effects.takeEvery)(_index.invoicesActions.loadInvoices, loadInvoices);
  yield (0, _effects.takeEvery)(_index.invoicesActions.downloadInvoice, downloadInvoice);
}
function* loadInvoices() {
  yield (0, _effects.put)(_index.invoicesActions.setLoading(true));
  try {
    const responseInvoices = yield (0, _effects.call)(_restApi.api.subscriptions.getSubscriptionInvoices);
    const invoices = responseInvoices.map(invoice => ({
      id: invoice.id,
      externalId: invoice.externalId,
      subscriptionId: invoice.subscriptionId,
      paymentDate: new Date(Date.parse(invoice.paymentDate)),
      totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2),
      currency: invoice.currency || 'usd',
      paid: invoice.paid || false,
      receiptNumber: invoice.receiptNumber
    }));
    yield (0, _effects.put)(_index.invoicesActions.setState({
      loading: false,
      fetching: false,
      invoices
    }));
  } catch (e) {
    yield (0, _effects.put)(_index.invoicesActions.setError((0, _utils.errorHandler)(e)));
  }
}
function* downloadInvoice({
  payload
}) {
  yield (0, _effects.put)(_index.invoicesActions.setInvoiceDownloadState({
    loading: true,
    error: null
  }));
  try {
    yield (0, _effects.call)(_restApi.api.subscriptions.getSubscriptionInvoicePdf, payload.invoiceId, payload.filename);
    yield (0, _effects.put)(_index.invoicesActions.setInvoiceDownloadState({
      loading: false,
      error: null
    }));
  } catch (e) {
    yield (0, _effects.put)(_index.invoicesActions.setInvoiceDownloadState({
      loading: false,
      error: (0, _utils.errorHandler)(e, null)
    }));
  }
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadInvoicesMock() {
  yield (0, _effects.put)(_index.invoicesActions.setLoading(true));
  yield (0, _effects.delay)(500);
  const selectPlanTitle = 'Premium';
  yield (0, _effects.put)(_index.invoicesActions.setState({
    loading: false,
    fetching: false,
    invoices: _dummy.invoicesMock.map(invoice => (0, _extends2.default)({}, invoice, {
      selectedPlan: selectPlanTitle,
      paymentDate: new Date(Date.parse(invoice.paymentDate)),
      totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2)
    }))
  }));
  yield (0, _effects.put)(_index.invoicesActions.setLoading(false));
}
function* subscriptionInvoicesSagasMock() {
  yield (0, _effects.takeEvery)(_index.invoicesActions.loadInvoices, loadInvoicesMock);
}