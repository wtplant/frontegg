"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadPaymentMethod = loadPaymentMethod;
exports.subscriptionsPaymentMethodSagas = subscriptionsPaymentMethodSagas;
exports.subscriptionsPaymentMethodSagasMock = subscriptionsPaymentMethodSagasMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _index = require("./index");
var _restApi = require("@frontegg/rest-api");
var _dummy = require("../../dummy");
var _utils = require("../../../utils");
function* subscriptionsPaymentMethodSagas() {
  yield (0, _effects.takeEvery)(_index.subscriptionsPaymentMethodActions.loadPaymentMethod, loadPaymentMethod);
  yield (0, _effects.takeEvery)(_index.subscriptionsPaymentMethodActions.submitPaymentMethod, submitPaymentMethod);
  yield (0, _effects.takeEvery)(_index.subscriptionsPaymentMethodActions.submitPaymentMethodError, submitPaymentMethodError);
  yield (0, _effects.takeEvery)(_index.subscriptionsPaymentMethodActions.submitPaymentMethodSuccess, submitPaymentMethodSuccess);
  yield (0, _effects.takeEvery)(_index.subscriptionsPaymentMethodActions.updatePaymentMethodBillingDetails, updateBillingDetails);
}
function* loadPaymentMethod() {
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setLoading(true));
  try {
    const paymentMethods = yield (0, _effects.call)(_restApi.api.subscriptions.getPaymentMethods);
    const paymentMethod = paymentMethods[0];
    yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setState({
      paymentMethod,
      loading: false,
      fetching: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setError((0, _utils.errorHandler)(e)));
  }
}
function* updateBillingDetails({
  payload
}) {
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setLoading(true));
  const {
    id,
    email,
    address,
    callback
  } = payload;
  try {
    yield (0, _effects.call)(_restApi.api.subscriptions.updatePaymentMethodBillingDetails, id, (0, _extends2.default)({
      email
    }, address));
    yield (0, _effects.call)(loadPaymentMethod);
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setError((0, _utils.errorHandler)(e)));
    callback == null ? void 0 : callback(false);
  }
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setLoading(false));
}
function* submitPaymentMethod() {
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setLoading(true));
}
function* submitPaymentMethodError({
  payload: error
}) {
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setError(error));
}
function* submitPaymentMethodSuccess() {
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.loadPaymentMethod());
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadPaymentMethodMock() {
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setLoading(true));
  yield (0, _effects.delay)(500);
  const paymentMethod = _dummy.paymentMethodsMock[0];
  yield (0, _effects.put)(_index.subscriptionsPaymentMethodActions.setState({
    paymentMethod,
    loading: false,
    fetching: false
  }));
}
function* subscriptionsPaymentMethodSagasMock() {
  yield (0, _effects.takeEvery)(_index.subscriptionsPaymentMethodActions.loadPaymentMethod, loadPaymentMethodMock);
}