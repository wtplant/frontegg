"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscriptionsPaymentMethodReducer = exports.subscriptionsPaymentMethodActions = exports.initialPaymentMethodState = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _utils = require("../../utils");
var _constants = require("../../../constants");
var _toolkit = require("@reduxjs/toolkit");
const initialPaymentMethodState = {
  loading: false,
  error: null,
  fetching: true
};
exports.initialPaymentMethodState = initialPaymentMethodState;
const reducers = (0, _extends2.default)({}, (0, _utils.createModuleCaseReducers)(), {
  setState: {
    prepare: payload => ({
      payload
    }),
    reducer: (state, action) => (0, _extends2.default)({}, state, action.payload)
  }
});
const {
  reducer,
  actions: paymentActions,
  name
} = (0, _toolkit.createSlice)({
  name: `${_constants.subscriptionsStoreName}/billing/payment`,
  initialState: initialPaymentMethodState,
  reducers
});
exports.subscriptionsPaymentMethodReducer = reducer;
const actions = (0, _extends2.default)({
  loadPaymentMethod: (0, _toolkit.createAction)(`${name}/loadPaymentMethod`),
  submitPaymentMethod: (0, _toolkit.createAction)(`${name}/submitPaymentMethod`),
  submitPaymentMethodError: (0, _toolkit.createAction)(`${name}/submitPaymentMethodError`),
  submitPaymentMethodSuccess: (0, _toolkit.createAction)(`${name}/submitPaymentMethodSuccess`),
  updatePaymentMethodBillingDetails: (0, _toolkit.createAction)(`${name}/updateBillingDetails`, payload => ({
    payload
  }))
}, paymentActions);
//TODO: refactor to general code-style like export type ConnectivityActions = DispatchedActions;
exports.subscriptionsPaymentMethodActions = actions;