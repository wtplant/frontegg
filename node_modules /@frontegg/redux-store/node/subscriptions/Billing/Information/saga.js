"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadBillingInformation = loadBillingInformation;
exports.loadSummaries = loadSummaries;
exports.loadSummariesMock = loadSummariesMock;
exports.subscriptionBillingInformationSagas = subscriptionBillingInformationSagas;
exports.subscriptionBillingInformationSagasMock = subscriptionBillingInformationSagasMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _index = require("./index");
var _general = require("../../general.interfaces");
var _mapper = require("../../mapper");
var _dummy = require("../../dummy");
var _utils = require("../../../utils");
var _loadSubscription = require("../Subscription/loadSubscription.saga");
function* subscriptionBillingInformationSagas() {
  yield (0, _effects.takeEvery)(_index.informationActions.loadBillingInformation, loadBillingInformation);
}
function* loadBillingInformation() {
  yield loadBillingInformationAction(false);
}
function* loadBillingInformationAction(forceActive) {
  const paymentProvider = yield (0, _effects.select)(state => {
    var _state$subscriptions$;
    return (_state$subscriptions$ = state.subscriptions.config.config) == null ? void 0 : _state$subscriptions$.paymentProvider;
  });
  const tenantId = yield (0, _effects.select)(state => {
    var _state$auth, _state$auth$user;
    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;
  });
  if (!paymentProvider || !tenantId) {
    yield (0, _effects.put)(_index.informationActions.setError(!paymentProvider ? 'Internal feature failure' : 'Not authorized'));
    return;
  }
  yield loadSummaries(tenantId, forceActive);
}
function* loadSummaries(tenantId, forceActive) {
  yield (0, _effects.put)(_index.informationActions.setLoading(true));
  try {
    var _planResponse$price, _planResponse$price2;
    const summary = yield (0, _effects.call)(_restApi.api.subscriptions.getSubscriptionSummaries, tenantId);
    const {
      currentPlanId,
      externallyManaged
    } = summary;
    let subscriptionResponse = null;
    let planResponse;
    if (!externallyManaged) {
      [, planResponse] = yield (0, _effects.all)([(0, _effects.call)(_loadSubscription.loadSubscription), (0, _effects.call)(_restApi.api.subscriptions.getSubscriptionPlan, currentPlanId)]);
      subscriptionResponse = yield (0, _effects.select)(state => state.subscriptions.billing.subscription.subscription || null);
    } else {
      planResponse = yield (0, _effects.call)(_restApi.api.subscriptions.getSubscriptionPlan, currentPlanId);
    }
    yield (0, _effects.put)(_index.informationActions.setState((0, _extends2.default)({
      loading: false,
      fetching: false,
      summary
    }, subscriptionResponse ? {
      subscription: {
        id: subscriptionResponse.id,
        externalId: subscriptionResponse.externalId,
        startDate: subscriptionResponse.startDate,
        currentPeriodStart: subscriptionResponse.currentPeriodStart,
        currentPeriodEnd: subscriptionResponse.currentPeriodEnd,
        status: forceActive ? _general.SubscriptionStatus.ACTIVE : (0, _mapper.toSubscriptionStatus)(subscriptionResponse.status),
        cancellation: subscriptionResponse.cancellation && (0, _mapper.toSubscriptionCancellation)(subscriptionResponse.cancellation),
        trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null
      }
    } : {}, planResponse ? {
      plan: {
        id: planResponse.id,
        name: planResponse.name,
        description: planResponse.description,
        price: ((_planResponse$price = planResponse.price) == null ? void 0 : _planResponse$price.amount) || 0,
        currency: ((_planResponse$price2 = planResponse.price) == null ? void 0 : _planResponse$price2.currency) || 'usd',
        recurringInterval: 'month',
        slug: planResponse.slug
      }
    } : {})));
  } catch (e) {
    yield (0, _effects.put)(_index.informationActions.setError((0, _utils.errorHandler)(e)));
  }
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadBillingInformationMock() {
  yield loadSummariesMock();
}
function* loadSummariesMock() {
  var _planResponseMock$0$p, _planResponseMock$0$p2;
  yield (0, _effects.put)(_index.informationActions.setLoading(true));
  yield (0, _effects.delay)(500);
  yield (0, _effects.put)(_index.informationActions.setState({
    loading: false,
    fetching: false,
    summary: {
      subscriptionId: _dummy.subscriptionResponseMock.id,
      paymentMethodId: 'mockPaymentMethodId',
      tenantConfigurationId: 'mockTenantConfigurationId',
      providerType: _restApi.ProviderType.Stripe,
      externallyManaged: false,
      currentPlanId: _dummy.planResponseMock[0].id,
      defaultPlanId: _dummy.planResponseMock[0].id
    },
    plan: (0, _extends2.default)({}, _dummy.planResponseMock[0], {
      price: (_planResponseMock$0$p = _dummy.planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p.amount,
      currency: (_planResponseMock$0$p2 = _dummy.planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p2.currency,
      recurringInterval: 'month'
    })
  }));
}
function* subscriptionBillingInformationSagasMock() {
  yield (0, _effects.takeEvery)(_index.informationActions.loadBillingInformation, loadBillingInformationMock);
}