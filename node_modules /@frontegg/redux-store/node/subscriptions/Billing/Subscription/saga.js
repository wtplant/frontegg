"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.subscriptionSagas = subscriptionSagas;
exports.subscriptionSagasMock = subscriptionSagasMock;
var _effects = require("redux-saga/effects");
var _index = require("./index");
var _restApi = require("@frontegg/rest-api");
var _dummy = require("../../dummy");
var _saga = require("../Information/saga");
var _utils = require("../../../utils");
var _loadSubscription = require("./loadSubscription.saga");
function* subscriptionSagas() {
  yield (0, _effects.takeEvery)(_index.subscriptionActions.load, loadSubscriptionTenant);
  yield (0, _effects.takeEvery)(_index.subscriptionActions.cancelSubscription, cancelSubscription);
  yield (0, _effects.takeEvery)(_index.subscriptionActions.renewSubscription, renewSubscription);
}
function* loadSubscriptionTenant() {
  const tenantId = yield (0, _effects.select)(state => {
    var _state$auth, _state$auth$user;
    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;
  });
  yield (0, _saga.loadSummaries)(tenantId);
}
function* cancelSubscription() {
  const {
    subscription
  } = yield (0, _effects.select)(state => state.subscriptions.billing.subscription);
  if (!subscription) {
    yield (0, _effects.put)(_index.subscriptionActions.setCancellationError('Subscription not found.'));
    return;
  }
  if (subscription != null && subscription.externallyManaged) {
    yield (0, _effects.put)(_index.subscriptionActions.setCancellationError('Billing is externally managed.'));
    return;
  }
  const {
    id: subscriptionId,
    cancellation,
    status
  } = subscription || {};
  const isCancellable = !cancellation && status === _restApi.ISubscriptionStatus.ACTIVE;
  if (isCancellable) {
    try {
      yield (0, _effects.put)(_index.subscriptionActions.setCancellationLoading(true));
      yield (0, _effects.call)(_restApi.api.subscriptions.cancelManagedSubscription, subscriptionId);
      yield (0, _loadSubscription.loadSubscription)();
      yield (0, _effects.put)(_index.subscriptionActions.setCancellationLoading(false));
    } catch (e) {
      yield (0, _effects.put)(_index.subscriptionActions.setCancellationError((0, _utils.errorHandler)(e)));
    }
  }
}
function* renewSubscription() {
  const {
    subscription
  } = yield (0, _effects.select)(state => state.subscriptions.billing.subscription);
  if (!subscription) {
    yield (0, _effects.put)(_index.subscriptionActions.setCancellationError('Subscription not found.'));
    return;
  }
  if (subscription != null && subscription.externallyManaged) {
    yield (0, _effects.put)(_index.subscriptionActions.setCancellationError('Billing is externally managed'));
    return;
  }
  const {
    id: subscriptionId,
    cancellation
  } = subscription || {};
  const renewable = (cancellation == null ? void 0 : cancellation.policy) === _restApi.ISubscriptionCancellationPolicy.AT_PERIOD_END;
  if (renewable) {
    try {
      yield (0, _effects.put)(_index.subscriptionActions.setRenewalLoading(true));
      yield (0, _effects.call)(_restApi.api.subscriptions.renewManagedSubscription, subscriptionId);
      yield (0, _loadSubscription.loadSubscription)();
      yield (0, _effects.put)(_index.subscriptionActions.setRenewalLoading(false));
    } catch (e) {
      yield (0, _effects.put)(_index.subscriptionActions.setCancellationError((0, _utils.errorHandler)(e)));
    }
  }
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadMock() {
  yield (0, _effects.put)(_index.subscriptionActions.setLoading(true));
  yield (0, _effects.delay)(500);
  yield (0, _effects.put)(_index.subscriptionActions.setState({
    subscription: _dummy.subscriptionResponseMock,
    fetching: false,
    loading: false,
    error: null
  }));
}
function* subscriptionSagasMock() {
  yield (0, _effects.takeEvery)(_index.subscriptionActions.load, loadMock);
}