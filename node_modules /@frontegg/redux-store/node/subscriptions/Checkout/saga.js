"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.checkoutSagas = checkoutSagas;
exports.checkoutSagasMock = checkoutSagasMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _index = require("./index");
var _restApi = require("@frontegg/rest-api");
var _Subscription = require("../Billing/Subscription");
var _saga = require("../Billing/Information/saga");
var _saga2 = require("../Billing/PaymentMethod/saga");
var _saga3 = require("../Billing/Invoices/saga");
var _utils = require("../../utils");
function* checkoutSagas() {
  yield (0, _effects.takeEvery)(_index.checkoutActions.loadCheckout, loadCheckout);
  yield (0, _effects.takeEvery)(_index.checkoutActions.resetCheckout, resetCheckout);
  yield (0, _effects.takeEvery)(_index.checkoutActions.submitCheckout, submitCheckout);
  yield (0, _effects.takeEvery)(_index.checkoutActions.confirmCheckout, confirmPlan);
  yield (0, _effects.takeEvery)(_index.checkoutActions.errorCheckout, errorCheckout);
}
function* loadCheckout() {
  yield (0, _effects.put)(_index.checkoutActions.setState({
    fetching: false,
    loading: false,
    error: null,
    confirmed: false
  }));
}
function* resetCheckout() {
  yield (0, _effects.put)(_index.checkoutActions.setState({
    loading: false,
    error: null,
    confirmed: false
  }));
}

/**
 * Based on payment provider type
 */
function* submitCheckout() {
  yield (0, _effects.put)(_index.checkoutActions.setState({
    loading: true,
    error: null
  }));
}
function* confirmPlan({
  payload: {
    paymentMethodId,
    planId
  }
}) {
  const subscription = yield (0, _effects.select)(state => state.subscriptions.billing.subscription.subscription);
  const summary = yield (0, _effects.select)(state => state.subscriptions.billing.information.summary);
  const isTrialing = (subscription == null ? void 0 : subscription.status) === _restApi.ISubscriptionStatus.TRIALING;
  const hasPaymentMethod = !!(summary != null && summary.paymentMethodId);
  if (!subscription) {
    yield (0, _effects.put)(_index.checkoutActions.setState({
      loading: false,
      error: 'Subscription not found'
    }));
    return;
  }
  yield (0, _effects.put)(_index.checkoutActions.setState({
    loading: true,
    error: null
  }));
  if (isTrialing && hasPaymentMethod) {
    yield confirmCheckout();
    yield (0, _effects.put)(_Subscription.subscriptionActions.setState({
      subscription: (0, _extends2.default)({}, subscription, {
        status: _restApi.ISubscriptionStatus.ACTIVE
      })
    }));
    return;
  }
  try {
    yield (0, _effects.call)(_restApi.api.subscriptions.updateManagedSubscription, subscription.id, {
      paymentMethodId,
      planId
    });
    yield (0, _effects.all)([(0, _saga.loadBillingInformation)(), (0, _saga2.loadPaymentMethod)(), (0, _saga3.loadInvoices)()]);
    yield confirmCheckout();
  } catch (e) {
    yield (0, _effects.put)(_index.checkoutActions.setState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
  }
}
function* confirmCheckout() {
  yield (0, _effects.put)(_index.checkoutActions.setState({
    loading: false,
    error: null,
    confirmed: true
  }));
}
function* errorCheckout({
  payload
}) {
  yield (0, _effects.put)(_index.checkoutActions.setState({
    loading: false,
    error: payload
  }));
}

/*********************************
 *  Preview Sagas
 *********************************/

function* checkoutSagasMock() {
  yield (0, _effects.takeEvery)(_index.checkoutActions.resetCheckout, resetCheckout);
}