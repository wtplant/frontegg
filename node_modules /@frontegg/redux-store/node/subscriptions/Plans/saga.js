"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plansSagas = plansSagas;
exports.plansSagasMock = plansSagasMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _index = require("./index");
var _restApi = require("@frontegg/rest-api");
var _dummy = require("../dummy");
var _utils = require("../../utils");
function* plansSagas() {
  yield (0, _effects.takeEvery)(_index.plansActions.loadPlans, loadPlans);
}
function* loadPlans() {
  yield (0, _effects.put)(_index.plansActions.setLoading(true));
  try {
    const products = yield (0, _effects.call)(_restApi.api.subscriptions.getSubscriptionPlans);
    const plans = products.map(item => {
      var _item$price, _item$price2;
      return {
        id: item.id,
        name: item.name,
        description: item.description,
        price: ((_item$price = item.price) == null ? void 0 : _item$price.amount) || 0,
        currency: ((_item$price2 = item.price) == null ? void 0 : _item$price2.currency) || 'usd',
        recurringInterval: 'month',
        slug: item.slug
      };
    });
    yield (0, _effects.put)(_index.plansActions.setState({
      fetching: false,
      loading: false,
      plans
    }));
  } catch (e) {
    yield (0, _effects.put)(_index.plansActions.setError((0, _utils.errorHandler)(e)));
  }
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadPlansMock() {
  yield (0, _effects.put)(_index.plansActions.setLoading(true));
  yield (0, _effects.delay)(500);
  yield (0, _effects.put)(_index.plansActions.setState({
    fetching: false,
    loading: false,
    plans: _dummy.planResponseMock.map(item => {
      var _item$price3, _item$price4;
      return (0, _extends2.default)({}, item, {
        price: ((_item$price3 = item.price) == null ? void 0 : _item$price3.amount) || 0,
        currency: ((_item$price4 = item.price) == null ? void 0 : _item$price4.currency) || 'usd',
        recurringInterval: 'month'
      });
    })
  }));
}
function* plansSagasMock() {
  yield (0, _effects.takeEvery)(_index.plansActions.loadPlans, loadPlansMock);
}