"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configSagas = configSagas;
exports.configSagasMock = configSagasMock;
var _effects = require("redux-saga/effects");
var _index = require("./index");
var _restApi = require("@frontegg/rest-api");
var _interfaces = require("../interfaces");
var _utils = require("../../utils");
function* configSagas() {
  yield (0, _effects.takeEvery)(_index.configActions.loadPaymentConfiguration, loadPaymentConfiguration);
}
function* loadPaymentConfiguration() {
  yield (0, _effects.put)(_index.configActions.setLoading(true));
  try {
    const response = yield (0, _effects.call)(_restApi.api.subscriptions.getPaymentProviders) || [];
    const stripePaymentProvider = response.find(paymentProvider => paymentProvider.status === '1' && paymentProvider.providerType === _restApi.ProviderType.Stripe);
    if (stripePaymentProvider) {
      yield loadStripePaymentConfiguration();
    } else {
      yield (0, _effects.put)(_index.configActions.setError('Payment provider not configured'));
    }
  } catch (e) {
    yield (0, _effects.put)(_index.configActions.setError((0, _utils.errorHandler)(e)));
  }
}
function* loadStripePaymentConfiguration() {
  yield (0, _effects.put)(_index.configActions.setLoading(true));
  try {
    const response = yield (0, _effects.call)(_restApi.api.subscriptions.getStripePaymentProviderConfiguration);
    yield (0, _effects.put)(_index.configActions.setState({
      loading: false,
      fetching: false,
      config: {
        paymentProvider: _interfaces.PaymentProvider.STRIPE,
        apiKey: response.publishableKey
      }
    }));
  } catch (e) {
    yield (0, _effects.put)(_index.configActions.setError((0, _utils.errorHandler)(e)));
  }
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadPaymentConfigurationMock() {
  yield (0, _effects.put)(_index.configActions.setLoading(true));
  yield (0, _effects.delay)(500);
  yield (0, _effects.put)(_index.configActions.setState({
    loading: false,
    fetching: false,
    config: {
      paymentProvider: _interfaces.PaymentProvider.STRIPE,
      apiKey: ''
    }
  }));
}
function* configSagasMock() {
  yield (0, _effects.takeEvery)(_index.configActions.loadPaymentConfiguration, loadPaymentConfigurationMock);
}