"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  createFronteggStore: true,
  bindActionCreators: true,
  FronteggNativeModule: true
};
Object.defineProperty(exports, "FronteggNativeModule", {
  enumerable: true,
  get: function () {
    return _FronteggNativeModule.default;
  }
});
Object.defineProperty(exports, "bindActionCreators", {
  enumerable: true,
  get: function () {
    return _toolkit.bindActionCreators;
  }
});
exports.createFronteggStore = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _auth = _interopRequireWildcard(require("../auth"));
var _toolkit = require("@reduxjs/toolkit");
var _reduxSagaTools = require("./redux-saga-tools");
Object.keys(_reduxSagaTools).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _reduxSagaTools[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _reduxSagaTools[key];
    }
  });
});
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _audits = _interopRequireDefault(require("../audits"));
var oldAuditsStore = _interopRequireWildcard(require("../audits/backward-compatibility"));
var _connectivity = _interopRequireDefault(require("../connectivity"));
var _subscriptions = _interopRequireDefault(require("../subscriptions"));
var _vendor = _interopRequireDefault(require("../vendor"));
var _redux = require("./redux");
Object.keys(_redux).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _redux[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _redux[key];
    }
  });
});
var _FronteggNativeModule = _interopRequireDefault(require("./FronteggNativeModule"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const initialState = {
  context: undefined,
  urlStrategy: 'path',
  previewMode: false,
  appName: 'default'
};
const {
  reducer: rootReducer
} = (0, _toolkit.createSlice)({
  name: 'root',
  initialState,
  reducers: {
    setContext: {
      prepare: context => ({
        payload: context
      }),
      reducer: (state, {
        payload
      }) => {
        _restApi.ContextHolder.setContext(payload);
        return (0, _extends2.default)({}, state, {
          context: payload
        });
      }
    }
  }
});
const createFronteggStore = (rootInitialState, storeHolder, previewMode = false, authInitialState, overrideInitialState, builderMode = false, urlStrategy = 'path') => {
  const isSSR = typeof window === 'undefined';
  let holder = storeHolder;
  if (isSSR && storeHolder == null) {
    throw Error('createFronteggStore(initState, storeHolder) failed, storeHolder must not be null in Server-Side rendering');
  }
  if (!holder) {
    holder = window;
  }
  if (!holder.store) {
    var _overrideInitialState, _authInitialState$rou, _overrideInitialState2, _overrideInitialState3, _overrideInitialState4, _overrideInitialState5, _overrideInitialState6, _overrideInitialState7, _overrideInitialState8, _overrideInitialState9;
    if (!previewMode && !builderMode) {
      _restApi.ContextHolder.setContext(rootInitialState.context);
    }
    const sagaMiddleware = (0, _reduxSagaTools.createSagaMiddleware)();
    const middleware = [...(0, _toolkit.getDefaultMiddleware)({
      thunk: false,
      immutableCheck: false,
      serializableCheck: false
    }), sagaMiddleware];
    holder.store = (0, _toolkit.configureStore)({
      middleware,
      preloadedState: {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        root: (0, _extends2.default)({}, rootInitialState, {
          previewMode,
          urlStrategy: urlStrategy
        }),
        [_auth.default.storeName]: (0, _extends2.default)({}, _auth.default.initialState, authInitialState, (_overrideInitialState = overrideInitialState == null ? void 0 : overrideInitialState.auth) != null ? _overrideInitialState : {}, {
          routes: (0, _extends2.default)({}, _auth.default.initialState.routes, (_authInitialState$rou = authInitialState == null ? void 0 : authInitialState.routes) != null ? _authInitialState$rou : {}, (_overrideInitialState2 = overrideInitialState == null ? void 0 : (_overrideInitialState3 = overrideInitialState.auth) == null ? void 0 : _overrideInitialState3.routes) != null ? _overrideInitialState2 : {})
        }),
        [_audits.default.storeName]: (0, _extends2.default)({}, _audits.default.initialState, (_overrideInitialState4 = overrideInitialState == null ? void 0 : overrideInitialState.auditLogs) != null ? _overrideInitialState4 : {}, {
          auditLogsState: (0, _extends2.default)({}, _audits.default.initialState.auditLogsState, (_overrideInitialState5 = overrideInitialState == null ? void 0 : (_overrideInitialState6 = overrideInitialState.auditLogs) == null ? void 0 : _overrideInitialState6.auditLogsState) != null ? _overrideInitialState5 : {}),
          auditsMetadataState: (0, _extends2.default)({}, _audits.default.initialState.auditsMetadataState, (_overrideInitialState7 = overrideInitialState == null ? void 0 : (_overrideInitialState8 = overrideInitialState.auditLogs) == null ? void 0 : _overrideInitialState8.auditsMetadataState) != null ? _overrideInitialState7 : {})
        }),
        [oldAuditsStore.storeName]: (0, _extends2.default)({}, oldAuditsStore.initialState, (_overrideInitialState9 = overrideInitialState == null ? void 0 : overrideInitialState.audits) != null ? _overrideInitialState9 : {}),
        [_connectivity.default.storeName]: _connectivity.default.initialState,
        [_subscriptions.default.storeName]: _subscriptions.default.initialState,
        [_vendor.default.storeName]: _vendor.default.initialState
      },
      reducer: (0, _toolkit.combineReducers)({
        root: rootReducer,
        [_auth.default.storeName]: _auth.default.reducer,
        [_audits.default.storeName]: _audits.default.reducer,
        [oldAuditsStore.storeName]: oldAuditsStore.reducer,
        [_connectivity.default.storeName]: _connectivity.default.reducer,
        [_subscriptions.default.storeName]: _subscriptions.default.reducer,
        [_vendor.default.storeName]: _vendor.default.reducer
      })
    });
    const rootSaga = function* () {
      yield (0, _effects.all)([(0, _effects.call)(_auth.default.sagas), (0, _effects.call)(_audits.default.sagas), (0, _effects.call)(oldAuditsStore.sagas), (0, _effects.call)(_connectivity.default.sagas), (0, _effects.call)(_subscriptions.default.sagas), (0, _effects.call)(_vendor.default.sagas)]);
    };
    const rootMockSaga = function* () {
      yield (0, _effects.all)([(0, _effects.call)(_auth.default.mockSagas), (0, _effects.call)(_audits.default.mockSagas), (0, _effects.call)(_subscriptions.default.mockSagas)]);
    };
    if (previewMode) {
      holder.store.destroy = sagaMiddleware.run(rootMockSaga).cancel;
      holder.store.dispatch(_auth.authActions.requestAuthorize(true));
    } else {
      holder.store.destroy = sagaMiddleware.run(rootSaga).cancel;
    }

    /**
     * Using redux store subscribe causes unpredictable callback calls: https://redux.js.org/api/store#subscribelistener
     *
     * This function aim to prevent unnecessary update by calling the callback with the updated frontegg state only on state reference change.
     * This function protect from redux unnecessary updates by reference comparison
     * Developed for vanilla js SDK
     *
     * @param callback called with the updated frontegg state for every store refresh
     * @returns redux unsubscribe function
     */
    holder.store.subscribeStateChanged = callback => {
      let lastStoreState = holder.store.getState();
      return holder.store.subscribe(() => {
        const updatedState = holder.store.getState();
        if (lastStoreState != updatedState) {
          lastStoreState = updatedState;
          callback(updatedState);
        }
      });
    };
  }
  return holder.store;
};
exports.createFronteggStore = createFronteggStore;