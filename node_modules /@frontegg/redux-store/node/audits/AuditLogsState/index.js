"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.auditLogsState = exports.auditLogsReducers = exports.auditLogsActions = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _utils = require("../utils");
var _toolkit = require("@reduxjs/toolkit");
var _constants = require("../../constants");
const auditLogsState = {
  loading: true,
  pageOffset: 0,
  pageSize: 20,
  logs: [],
  sort: [],
  filter: [],
  totalPages: 0,
  isDownloadingCsv: false
};
exports.auditLogsState = auditLogsState;
const reducers = {
  setAuditLogsState: (0, _utils.typeReducerForKey)('auditLogsState'),
  resetAuditLogsState: state => (0, _extends2.default)({}, state, {
    auditLogsState
  })
};
exports.auditLogsReducers = reducers;
const actions = {
  exportAuditsCsv: (0, _toolkit.createAction)(`${_constants.auditsStoreName}/exportAuditsCsv`),
  loadAuditLogs: (0, _toolkit.createAction)(`${_constants.auditsStoreName}/loadAuditLogs`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.auditLogsActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};