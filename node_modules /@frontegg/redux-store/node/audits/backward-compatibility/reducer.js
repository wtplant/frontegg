"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.storeName = exports.reducer = exports.defaultItemsPerPage = exports.actions = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _toolkit = require("@reduxjs/toolkit");
var _initialState = require("./initialState");
const defaultItemsPerPage = 20;
exports.defaultItemsPerPage = defaultItemsPerPage;
const {
  name: storeName,
  actions: lifeCycleActions,
  reducer
} = (0, _toolkit.createSlice)({
  name: 'audits',
  initialState: _initialState.initialState,
  reducers: {
    setContext: (state, {
      payload
    }) => {
      state.context = payload;
    },
    startLoading: state => {
      state.isLoading = true;
    },
    setVirtualScroll: (state, {
      payload
    }) => {
      state.virtualScroll = payload;
    },
    startRefresh: state => {
      state.isLoading = true;
    },
    startFetching: state => {
      state.isFetchMore = true;
    },
    finishLoading: state => {
      state.isLoading = false;
    },
    startDownloadingCsv: state => {
      state.isDownloadingCsv = true;
    },
    stopDownloadingCsv: state => {
      state.isDownloadingCsv = false;
    },
    loadStatsSuccess: (state, {
      payload
    }) => {
      state.error = undefined;
      state.totalToday = payload.totalToday;
      state.severeThisWeek = payload.severeThisWeek;
    },
    loadItemFailedAction: (state, {
      payload
    }) => {
      state.error = (0, _extends2.default)({}, state.error, {
        [payload.name]: payload.error
      });
    },
    loadMetadataSuccess: (state, {
      payload
    }) => {
      state.error = {};
      state.headerProps = payload.properties;
      state.themeAudits = payload.theme ? payload.theme.styles : {};
    },
    loadAuditsSuccess: (state, {
      payload
    }) => {
      state.error = {};
      state.rowsData = payload.rowsData;
      state.lastUpdated = new Date();
      state.total = payload.total;
    },
    fetchMoreSuccess: (state, {
      payload
    }) => {
      state.error = {};
      state.offset = payload.offset;
      state.currentPage = payload.currentPage;
      state.isFetchMore = false;
    },
    setFilterData: (state, {
      payload
    }) => {
      state.filters = payload;
      state.currentPage = 0;
      state.offset = 0;
      state.isLoading = true;
    },
    textSearch: (state, {
      payload
    }) => {
      state.filter = payload;
      state.currentPage = 0;
      state.offset = 0;
      state.isLoading = true;
    },
    onPageChange: (state, {
      payload
    }) => {
      state.currentPage = payload - 1;
      state.offset = state.currentPage * defaultItemsPerPage;
      state.isLoading = true;
    },
    setDataSorting: (state, {
      payload
    }) => {
      state.sortBy = payload.sortBy;
      state.currentPage = 0;
      state.sortDirection = payload.sortDirection === 'asc' ? 'desc' : 'asc';
      state.offset = 0;
      state.isLoading = true;
    },
    setPredefinedFilters: (state, {
      payload
    }) => {
      state.predefinedFilters = payload;
      state.filters = Object.keys(payload).map(key => ({
        key,
        value: payload[key]
      }));
    }
  }
});
exports.reducer = reducer;
exports.storeName = storeName;
const actions = (0, _extends2.default)({}, lifeCycleActions, {
  initData: (0, _toolkit.createAction)(`${storeName}/initData`),
  loadAudits: (0, _toolkit.createAction)(`${storeName}/loadAudits`),
  removeFilter: (0, _toolkit.createAction)(`${storeName}/removeFilter`),
  filterData: (0, _toolkit.createAction)(`${storeName}/filterData`),
  exportCSV: (0, _toolkit.createAction)(`${storeName}/exportCSV`),
  deleteAudits: (0, _toolkit.createAction)(`${storeName}/deleteAudits`)
});
exports.actions = actions;