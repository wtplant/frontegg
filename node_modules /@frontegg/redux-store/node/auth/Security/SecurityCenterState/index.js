"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.securityCenterState = exports.securityCenterReducers = exports.securityCenterActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _constants = require("../../../constants");
var _utils = require("../../utils");
const securityCenterState = {
  loaders: {},
  errors: {},
  recommendations: undefined,
  insights: undefined,
  score: 0,
  breachedPasswordUsersTable: {
    users: [],
    usersPageOffset: 0,
    totalUsersItems: 0,
    totalUsersPages: 0,
    queryParams: {
      _offset: 0,
      _limit: 10
    }
  },
  unenrolledMfaUsersTable: {
    users: [],
    usersPageOffset: 0,
    totalUsersItems: 0,
    totalUsersPages: 0,
    queryParams: {
      _offset: 0,
      _limit: 10
    }
  },
  inactiveUsersTable: {
    users: [],
    usersPageOffset: 0,
    totalUsersItems: 0,
    totalUsersPages: 0,
    queryParams: {
      _offset: 0,
      _limit: 10,
      _maxInactiveSeconds: 7776000
    }
  }
};
exports.securityCenterState = securityCenterState;
const reducers = {
  setSecurityCenterState: (0, _utils.typeReducerForKey)('securityCenterState'),
  resetSecurityCenterState: (0, _utils.resetStateByKey)('securityCenterState', {
    securityCenterState
  }),
  setSecurityCenterStateLoader: (0, _utils.loadersReducerForKey)('securityCenterState'),
  setSecurityCenterStateError: (0, _utils.errorsReducerForKey)('securityCenterState')
};
exports.securityCenterReducers = reducers;
const actions = {
  loadRecommendations: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadRecommendations`),
  loadInsights: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadInsights`),
  sendResetBreachedPasswordEmail: (0, _toolkit.createAction)(`${_constants.authStoreName}/sendResetBreachedPasswordEmail`, payload => ({
    payload
  })),
  sendBulkResetBreachedPasswordEmails: (0, _toolkit.createAction)(`${_constants.authStoreName}/sendBulkResetBreachedPasswordEmails`, payload => ({
    payload
  })),
  loadBreachedPasswordUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadBreachedPasswordUsers`, payload => ({
    payload
  })),
  loadUnenrolledMfaUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadUnenrolledMfaUsers`, payload => ({
    payload
  })),
  loadInactiveUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadInactiveUsers`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.securityCenterActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};