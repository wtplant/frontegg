"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sessionsPolicySaga = sessionsPolicySaga;
exports.sessionsPolicySagaMock = sessionsPolicySagaMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../../reducer");
var _dummy = require("../../dummy");
var _saga = require("../SecurityCenterState/saga");
const _excluded = ["callback"],
  _excluded2 = ["callback"];
function* loadSessionPolicyState() {
  yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  try {
    const sessionsPolicy = yield (0, _effects.call)(_restApi.api.auth.getSessionConfigurations);
    yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
      configurations: sessionsPolicy,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      error: e,
      loading: false
    }));
  }
}
function* createOrUpdateSessionsPolicy({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  try {
    const {
        callback
      } = payload,
      rest = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded);
    yield (0, _effects.call)(_restApi.api.auth.createOrUpdateSessionConfigrations, rest);
    yield (0, _effects.put)(_reducer.actions.loadSessionsPolicy());
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
      error: e,
      loading: false
    }));
  }
}
function* sessionsPolicySaga() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadSessionsPolicy, loadSessionPolicyState);
  yield (0, _effects.takeLatest)(_reducer.actions.createOrUpdateSessionsPolicy, (0, _saga.securityCenterSagaWrapper)(createOrUpdateSessionsPolicy));
}
function* loadSessionPolicyStateMock() {
  yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  const sessionPolicyState = yield (0, _effects.select)(state => {
    var _state$auth$sessionsP, _state$auth;
    return (_state$auth$sessionsP = state == null ? void 0 : (_state$auth = state.auth) == null ? void 0 : _state$auth.sessionsPolicyState) != null ? _state$auth$sessionsP : _dummy.sessionsConfigDummies;
  });
  yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState((0, _extends2.default)({}, sessionPolicyState, {
    loading: false
  })));
}
function* createOrUpdateSessionsPolicyMock({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  const {
      callback
    } = payload,
    rest = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded2);
  callback == null ? void 0 : callback(true);
  yield (0, _effects.put)(_reducer.actions.setSessionsPolicyState({
    configurations: rest,
    loading: false
  }));
}
function* sessionsPolicySagaMock() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadSessionsPolicy, loadSessionPolicyStateMock);
  yield (0, _effects.takeLatest)(_reducer.actions.createOrUpdateSessionsPolicy, createOrUpdateSessionsPolicyMock);
}