"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.securityPolicyState = exports.securityPolicyReducers = exports.securityPolicyActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../../utils");
var _constants = require("../../../constants");
const securityPolicyState = {
  globalPolicy: {
    loading: true
  },
  publicPolicy: {
    loading: false
  },
  vendorMfaPolicy: {
    loading: true
  },
  mfaPolicy: {
    loading: true
  },
  vendorLockoutPolicy: {
    loading: true
  },
  lockoutPolicy: {
    loading: true
  },
  captchaPolicy: {
    loading: true
  },
  passwordHistoryPolicy: {
    loading: true
  },
  passwordPolicy: {
    loading: true
  },
  vendorPasswordHistoryPolicy: {
    loading: true
  },
  publicAuthStrategyPolicy: {
    loading: true
  }
};
exports.securityPolicyState = securityPolicyState;
const reducers = {
  setSecurityPolicyState: (0, _utils.typeReducerForKey)('securityPolicyState'),
  setSecurityPolicyGlobalState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'globalPolicy'),
  setSecurityPolicyPublicState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'publicPolicy'),
  setSecurityPolicyAuthStrategyPublicState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'publicAuthStrategyPolicy'),
  setSecurityPolicyMfaState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'mfaPolicy'),
  setSecurityPolicyVendorMfaState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'vendorMfaPolicy'),
  setSecurityPolicyVendorLockoutState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'vendorLockoutPolicy'),
  setSecurityPolicyVendorPasswordHistoryState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'vendorPasswordHistoryPolicy'),
  setSecurityPolicyLockoutState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'lockoutPolicy'),
  setSecurityPolicyCaptchaState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'captchaPolicy'),
  setSecurityPolicyPasswordHistoryState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'passwordHistoryPolicy'),
  setSecurityPolicyPasswordState: (0, _utils.typeReducerNestedKey)('securityPolicyState', 'passwordPolicy'),
  resetSecurityPolicyState: (0, _utils.resetStateByKey)('securityPolicyState', {
    securityPolicyState
  })
};
exports.securityPolicyReducers = reducers;
const actions = {
  loadSecurityPolicy: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicy`),
  loadPublicSecurityPolicy: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadPublicSecurityPolicy`),
  loadSecurityPolicyMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyMfa`),
  loadSecurityPolicyVendorMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyVendorMfa`),
  saveSecurityPolicyMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSecurityPolicyMfa`, payload => ({
    payload
  })),
  loadSecurityPolicyLockout: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyLockout`),
  loadSecurityPolicyVendorLockout: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyVendorLockout`),
  saveSecurityPolicyLockout: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSecurityPolicyLockout`, payload => ({
    payload
  })),
  loadSecurityPolicyCaptcha: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyCaptcha`),
  loadSecurityPolicyPasswordHistory: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyPasswordHistory`),
  loadSecurityPolicyVendorPasswordHistory: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSecurityPolicyVendorPasswordHistory`),
  saveSecurityPolicyPasswordHistory: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSecurityPolicyPasswordHistory`, payload => ({
    payload
  })),
  loadVendorPasswordConfig: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadVendorPasswordConfig`),
  loadPublicAuthStrategiesPolicy: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadPublicAuthStrategiesPolicy`)
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.securityPolicyActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};