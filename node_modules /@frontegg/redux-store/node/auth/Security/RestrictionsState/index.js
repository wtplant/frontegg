"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.restrictionsState = exports.restrictionsReducers = exports.restrictionsActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../../utils");
var _constants = require("../../../constants");
var _restApi = require("@frontegg/rest-api");
const restrictionsState = {
  ipRestrictions: {
    loading: false,
    pagination: {
      _offset: 0,
      _limit: 4,
      _filter: _restApi.RestrictionType.ALLOW
    },
    totalPages: 1,
    userIpValid: false
  },
  emailDomainRestrictions: {
    loading: true
  }
};
exports.restrictionsState = restrictionsState;
const reducers = {
  setRestrictionsState: (0, _utils.typeReducerForKey)('restrictionsState'),
  setIpRestrictionsState: (0, _utils.typeReducerNestedKey)('restrictionsState', 'ipRestrictions'),
  setEmailDomainRestrictionsState: (0, _utils.typeReducerNestedKey)('restrictionsState', 'emailDomainRestrictions')
};
exports.restrictionsReducers = reducers;
const actions = {
  checkIfUserIpValid: (0, _toolkit.createAction)(`${_constants.authStoreName}/checkIfUserIpValid`),
  addCurrentUserIpAndActivate: (0, _toolkit.createAction)(`${_constants.authStoreName}/addCurrentUserIpAndActivate`, payload => ({
    payload
  })),
  loadIpRestrictions: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadIpRestrictions`),
  saveIpRestriction: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveIpRestriction`, payload => ({
    payload
  })),
  saveIpRestrictionsConfig: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveIpRestrictionsConfig`, payload => ({
    payload
  })),
  deleteIpRestriction: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteIpRestriction`, payload => ({
    payload
  })),
  loadEmailDomainRestrictions: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadEmailDomainRestrictions`),
  saveEmailDomainRestriction: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveEmailDomainRestriction`, payload => ({
    payload
  })),
  saveEmailDomainRestrictionsConfig: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveEmailDomainRestrictionsConfig`, payload => ({
    payload
  })),
  deleteEmailDomainRestriction: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteEmailDomainRestriction`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.restrictionsActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};