"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.sessionsSaga = sessionsSaga;
exports.sessionsSagaMock = sessionsSagaMock;
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _dummy = require("../dummy");
function* loadCurrentUserSessions() {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    const sessions = yield (0, _effects.call)(_restApi.api.auth.getCurrentUserSessions);
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      sessions,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      error: e,
      loading: false
    }));
  }
}
function* loadCurrentUserSession() {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    const session = yield (0, _effects.call)(_restApi.api.auth.getCurrentUserSession);
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      currentSession: session,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      error: e,
      loading: false
    }));
  }
}
function* deleteUserSession({
  payload: {
    id
  }
}) {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    yield (0, _effects.call)(_restApi.api.auth.deleteSessionForUser, id);
    yield (0, _effects.put)(_reducer.actions.loadUserSessions());
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      error: e,
      loading: false
    }));
  }
}
function* revokeUserSessions({
  payload: {
    callback,
    userId
  }
}) {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    yield (0, _effects.call)(_restApi.api.auth.revokeSessionsForUser, userId);
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      error: e,
      loading: false
    }));
    callback == null ? void 0 : callback(false);
  }
}
function* deleteAllUserSessions() {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    yield (0, _effects.call)(_restApi.api.auth.deleteAllSessionsForUser);
    yield (0, _effects.put)(_reducer.actions.loadUserSessions());
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSessionsState({
      error: e,
      loading: false
    }));
  }
}
function* sessionsSaga() {
  yield (0, _effects.takeLatest)(_reducer.actions.loadUserSessions, loadCurrentUserSessions);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteUserSession, deleteUserSession);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteAllUserSessions, deleteAllUserSessions);
  yield (0, _effects.takeLatest)(_reducer.actions.loadCurrentUserSession, loadCurrentUserSession);
  yield (0, _effects.takeEvery)(_reducer.actions.revokeUserSessions, revokeUserSessions);
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadCurrentUserSessionsMock() {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    sessions: _dummy.sessionsMock,
    loading: false
  }));
}
function* deleteUserSessionMock({
  payload: {
    id
  }
}) {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  const currentSessions = yield (0, _effects.select)(state => {
    var _state$auth$sessionsS;
    return (_state$auth$sessionsS = state.auth.sessionsState.sessions) != null ? _state$auth$sessionsS : [];
  });
  const newSessions = currentSessions.filter(s => s.id !== id);
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    sessions: newSessions,
    loading: false
  }));
}
function* deleteAllUserSessionsMock() {
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    loading: true,
    error: null
  }));
  const newSessions = _dummy.sessionsMock.filter(s => s.current);
  yield (0, _effects.put)(_reducer.actions.setSessionsState({
    sessions: newSessions,
    loading: false
  }));
}
function* sessionsSagaMock() {
  yield (0, _effects.takeLatest)(_reducer.actions.loadUserSessions, loadCurrentUserSessionsMock);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteUserSession, deleteUserSessionMock);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteAllUserSessions, deleteAllUserSessionsMock);
}