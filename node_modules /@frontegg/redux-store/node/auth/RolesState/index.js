"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rolesState = exports.rolesReducers = exports.rolesActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../utils");
var _constants = require("../../constants");
const rolesState = {
  loaders: {},
  errors: {},
  roles: [],
  permissions: [],
  permissionCategories: []
};
exports.rolesState = rolesState;
const reducers = {
  setRolesState: (0, _utils.typeReducerForKey)('rolesState'),
  resetRolesState: (0, _utils.resetStateByKey)('rolesState', {
    rolesState
  }),
  setRolesStateLoader: (0, _utils.loadersReducerForKey)('rolesState'),
  setRolesStateError: (0, _utils.errorsReducerForKey)('rolesState')
};
exports.rolesReducers = reducers;
const actions = {
  loadRolesAndPermissions: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadRoles`, payload => ({
    payload
  })),
  addRole: (0, _toolkit.createAction)(`${_constants.authStoreName}/addRole`, payload => ({
    payload
  })),
  updateRole: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateRole`, payload => ({
    payload
  })),
  deleteRole: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteRole`, payload => ({
    payload
  })),
  attachPermissionsToRole: (0, _toolkit.createAction)(`${_constants.authStoreName}/attachPermissionsToRole`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.rolesActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};