"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rolesSagas = rolesSagas;
exports.rolesSagasMock = rolesSagasMock;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _dummy = require("../dummy");
var _utils = require("../../utils");
var _types = require("./types");
const _excluded = ["callback"],
  _excluded2 = ["callback"],
  _excluded3 = ["callback"],
  _excluded4 = ["callback"];
function* loadRolesAndPermissions({
  payload
}) {
  var _payload$silentLoadin;
  const key = _types.RolesStateKeys.LOAD_ROLES;
  yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
    key,
    value: !((_payload$silentLoadin = payload == null ? void 0 : payload.silentLoading) != null ? _payload$silentLoadin : false)
  }));
  try {
    const result = yield (0, _effects.all)([(0, _effects.call)(_restApi.api.roles.getRoles), (0, _effects.call)(_restApi.api.roles.getPermissions), (0, _effects.call)(_restApi.api.roles.getPermissionCategories)]);
    const [roles, permissions, permissionCategories] = result;
    const {
      selectedRole
    } = yield (0, _effects.select)(state => state.auth.rolesState);
    const updatedSelectedRole = roles == null ? void 0 : roles.find(({
      id: roleId
    }) => (selectedRole == null ? void 0 : selectedRole.id) === roleId);
    yield (0, _effects.put)(_reducer.actions.setRolesState({
      roles,
      permissions,
      permissionCategories,
      selectedRole: updatedSelectedRole
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setRolesStateError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* addRole(_ref) {
  let {
      payload: {
        callback
      }
    } = _ref,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  const key = _types.RolesStateKeys.ADD_ROLE;
  yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    const role = yield (0, _effects.call)(_restApi.api.roles.addRole, body);
    const roles = yield (0, _effects.call)(_restApi.api.roles.getRoles);
    yield (0, _effects.put)(_reducer.actions.loadRolesAndPermissions({
      silentLoading: true
    }));
    yield (0, _effects.put)(_reducer.actions.setRolesState({
      roles
    }));
    callback == null ? void 0 : callback(role);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setRolesStateError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* deleteRole(_ref2) {
  let {
      payload: {
        callback
      }
    } = _ref2,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);
  const key = _types.RolesStateKeys.DELETE_ROLE_DIALOG;
  yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    yield (0, _effects.call)(_restApi.api.roles.deleteRole, body);
    yield (0, _effects.put)(_reducer.actions.loadRolesAndPermissions({
      silentLoading: true
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setRolesStateError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(false, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* updateRole(_ref3) {
  let {
      payload: {
        callback
      }
    } = _ref3,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref3.payload, _excluded3);
  const key = _types.RolesStateKeys.EDIT_ROLE_DIALOG;
  yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    const role = yield (0, _effects.call)(_restApi.api.roles.updateRole, body);
    yield (0, _effects.put)(_reducer.actions.loadRolesAndPermissions({
      silentLoading: true
    }));
    callback == null ? void 0 : callback(role);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setRolesStateError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* attachPermissionsToRole(_ref4) {
  let {
      payload: {
        callback
      }
    } = _ref4,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref4.payload, _excluded4);
  const key = _types.RolesStateKeys.MANAGE_PERMISSIONS;
  yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    const role = yield (0, _effects.call)(_restApi.api.roles.attachPermissionsToRole, body);
    yield (0, _effects.put)(_reducer.actions.loadRolesAndPermissions({
      silentLoading: true
    }));
    callback == null ? void 0 : callback(role);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setRolesStateError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* rolesSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadRolesAndPermissions, loadRolesAndPermissions);
  yield (0, _effects.takeEvery)(_reducer.actions.addRole, addRole);
  yield (0, _effects.takeEvery)(_reducer.actions.deleteRole, deleteRole);
  yield (0, _effects.takeEvery)(_reducer.actions.updateRole, updateRole);
  yield (0, _effects.takeEvery)(_reducer.actions.attachPermissionsToRole, attachPermissionsToRole);
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadRolesAndPermissionsMock({
  payload
}) {
  var _payload$silentLoadin2;
  const key = _types.RolesStateKeys.LOAD_ROLES;
  yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
    key,
    value: !((_payload$silentLoadin2 = payload == null ? void 0 : payload.silentLoading) != null ? _payload$silentLoadin2 : false)
  }));
  try {
    yield (0, _effects.put)(_reducer.actions.setRolesState({
      roles: _dummy.rolesAdminViewerDemo
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setRolesStateError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* rolesSagasMock() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadRolesAndPermissions, loadRolesAndPermissionsMock);
}