"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deletePhoneNumber = deletePhoneNumber;
exports.loadPhoneNumbers = loadPhoneNumbers;
exports.preVerifyPhoneNumber = preVerifyPhoneNumber;
exports.setUpPhoneNumber = setUpPhoneNumber;
exports.smsSagas = smsSagas;
exports.verifyDeletePhoneNumber = verifyDeletePhoneNumber;
exports.verifyPhoneNumber = verifyPhoneNumber;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _reducer = require("../reducer");
var _restApi = require("@frontegg/rest-api");
var _effects = require("redux-saga/effects");
var _utils = require("../../utils");
const _excluded = ["callback"],
  _excluded2 = ["callback"],
  _excluded3 = ["callback", "phoneId"],
  _excluded4 = ["callback", "phoneId"],
  _excluded5 = ["callback"];
function* loadPhoneNumbers() {
  yield (0, _effects.put)(_reducer.actions.setSmsState({
    loading: true
  }));
  const queryParams = {
    _limit: 10,
    _offset: 0
  };
  try {
    const {
      items
    } = yield (0, _effects.call)(_restApi.api.userPhoneNumbers.getUserPhoneNumbers, queryParams);
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      phoneNumbers: items
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      error: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      loading: false
    }));
  }
}
function* setUpPhoneNumber(_ref) {
  let {
      payload: {
        callback
      }
    } = _ref,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setSmsState({
    loading: true
  }));
  try {
    const res = yield (0, _effects.call)(_restApi.api.userPhoneNumbers.createPhoneNumber, payload);
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      otcToken: res.otcToken
    }));
    yield (0, _effects.call)(loadPhoneNumbers);
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      loading: false
    }));
  }
}
function* verifyPhoneNumber(_ref2) {
  let {
      payload: {
        callback
      }
    } = _ref2,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);
  yield (0, _effects.put)(_reducer.actions.setSmsState({
    loading: true
  }));
  try {
    yield (0, _effects.call)(_restApi.api.userPhoneNumbers.verifyPhoneNumber, payload);
    yield (0, _effects.call)(loadPhoneNumbers);
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      loading: false
    }));
  }
}
function* deletePhoneNumber(_ref3) {
  let {
      payload: {
        callback,
        phoneId
      }
    } = _ref3,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref3.payload, _excluded3);
  yield (0, _effects.put)(_reducer.actions.setSmsState({
    loading: true
  }));
  try {
    const res = yield (0, _effects.call)(_restApi.api.userPhoneNumbers.deletePhoneNumber, phoneId);
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      otcToken: res.otcToken
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      loading: false
    }));
  }
}
function* verifyDeletePhoneNumber(_ref4) {
  let {
      payload: {
        callback,
        phoneId
      }
    } = _ref4,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref4.payload, _excluded4);
  yield (0, _effects.put)(_reducer.actions.setSmsState({
    loading: true
  }));
  try {
    yield (0, _effects.call)(_restApi.api.userPhoneNumbers.verifyDeletePhoneNumber, phoneId, payload);
    yield (0, _effects.call)(loadPhoneNumbers);
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      loading: false
    }));
  }
}
function* preVerifyPhoneNumber(_ref5) {
  let {
      payload: {
        callback
      }
    } = _ref5,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref5.payload, _excluded5);
  yield (0, _effects.put)(_reducer.actions.setSmsState({
    loading: true
  }));
  try {
    const res = yield (0, _effects.call)(_restApi.api.userPhoneNumbers.preVerifyPhoneNumber, payload);
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      otcToken: res.otcToken
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setSmsState({
      loading: false
    }));
  }
}
function* smsSagas() {
  yield (0, _effects.takeEvery)(_reducer.actions.loadPhoneNumbers, loadPhoneNumbers);
  yield (0, _effects.takeEvery)(_reducer.actions.setUpPhoneNumber, setUpPhoneNumber);
  yield (0, _effects.takeEvery)(_reducer.actions.verifyPhoneNumber, verifyPhoneNumber);
  yield (0, _effects.takeEvery)(_reducer.actions.deletePhoneNumber, deletePhoneNumber);
  yield (0, _effects.takeEvery)(_reducer.actions.verifyDeletePhoneNumber, verifyDeletePhoneNumber);
  yield (0, _effects.takeEvery)(_reducer.actions.preVerifyPhoneNumber, preVerifyPhoneNumber);
}