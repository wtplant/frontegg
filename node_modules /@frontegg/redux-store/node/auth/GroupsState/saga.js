"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupsSagas = groupsSagas;
exports.groupsSagasMock = groupsSagasMock;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _interfaces = require("./interfaces");
var _constants = require("../../constants");
var _dummy = require("../dummy");
var _utils = require("../../utils");
const _excluded = ["roleIds", "userIds"];
const selectGroupsState = () => (0, _effects.select)(_ => _[_constants.authStoreName].groupsState);
function* getTeamUsers({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.GET_TEAM_USERS;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const {
      items: users
    } = yield (0, _effects.call)(_restApi.api.users.getUsersV2, {
      _filter: payload.filter,
      _offset: payload.pageOffset,
      _limit: payload.pageSize,
      _includeSubTenants: false
    });
    yield (0, _effects.put)(_reducer.actions.setGroupsState({
      teamUsers: users
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* getGroupByIdSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.GET_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const group = yield (0, _effects.call)(_restApi.api.groups.getGroupById, {
      groupId: payload.groupId
    }, {
      _groupsRelations: _interfaces.GroupRelations.rolesAndUsers
    });
    yield (0, _effects.put)(_reducer.actions.setGroupsState({
      selectedGroup: group
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* loadGroups() {
  const key = _interfaces.GroupsStateKeys.GET_GROUPS;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const {
      groups
    } = yield (0, _effects.call)(_restApi.api.groups.getGroups, {
      _groupsRelations: _interfaces.GroupRelations.rolesAndUsers
    });
    yield (0, _effects.put)(_reducer.actions.setGroupsState((0, _extends2.default)({
      groups
    }, state.selectedGroup && {
      selectedGroup: groups.find(g => {
        var _state$selectedGroup;
        return g.id === ((_state$selectedGroup = state.selectedGroup) == null ? void 0 : _state$selectedGroup.id);
      })
    })));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* createGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.CREATE_GROUP;
  const {
      roleIds,
      userIds
    } = payload,
    createGroupPayload = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback;
    const response = yield (0, _effects.call)(_restApi.api.groups.createGroup, (0, _extends2.default)({
      name: createGroupPayload.name
    }, !!createGroupPayload.description && {
      description: createGroupPayload.description
    }, {
      color: createGroupPayload.color
    }));
    if (userIds != null && userIds.length) {
      yield (0, _effects.put)(_reducer.actions.addUsersToGroup({
        groupId: response.id,
        userIds
      }));
    }
    if (roleIds != null && roleIds.length) {
      yield (0, _effects.put)(_reducer.actions.addRolesToGroup({
        groupId: response.id,
        roleIds
      }));
    }
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e) {
    var _payload$callback2;
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, false);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* updateGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.UPDATE_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback3;
    yield (0, _effects.call)(_restApi.api.groups.updateGroup, payload);
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  } catch (e) {
    var _payload$callback4;
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    payload == null ? void 0 : (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, false);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* deleteGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.DELETE_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback5;
    yield (0, _effects.call)(_restApi.api.groups.deleteGroup, payload.groupId);
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback5 = payload.callback) == null ? void 0 : _payload$callback5.call(payload, true);
  } catch (e) {
    var _payload$callback6;
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    payload == null ? void 0 : (_payload$callback6 = payload.callback) == null ? void 0 : _payload$callback6.call(payload, false, e);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* addRolesToGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.ADD_ROLES_TO_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback7;
    yield (0, _effects.call)(_restApi.api.groups.addRolesToGroup, payload.groupId, {
      roleIds: payload.roleIds
    });
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback7 = payload.callback) == null ? void 0 : _payload$callback7.call(payload, true);
  } catch (e) {
    var _payload$callback8;
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    payload == null ? void 0 : (_payload$callback8 = payload.callback) == null ? void 0 : _payload$callback8.call(payload, false);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* deleteRolesFromGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.DELETE_ROLES_FROM_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback9;
    yield (0, _effects.call)(_restApi.api.groups.deleteRolesFromGroup, payload.groupId, {
      roleIds: payload.roleIds
    });
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback9 = payload.callback) == null ? void 0 : _payload$callback9.call(payload, true);
  } catch (e) {
    var _payload$callback10;
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    payload == null ? void 0 : (_payload$callback10 = payload.callback) == null ? void 0 : _payload$callback10.call(payload, false);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* addUsersToGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.ADD_USERS_TO_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback11;
    yield (0, _effects.call)(_restApi.api.groups.addUsersToGroup, payload.groupId, {
      userIds: payload.userIds
    });
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback11 = payload.callback) == null ? void 0 : _payload$callback11.call(payload, true);
  } catch (e) {
    var _payload$callback12;
    payload == null ? void 0 : (_payload$callback12 = payload.callback) == null ? void 0 : _payload$callback12.call(payload, false);
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* deleteUsersFromGroupSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.DELETE_USERS_FROM_GROUP;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback13;
    yield (0, _effects.call)(_restApi.api.groups.deleteUsersFromGroup, payload.groupId, {
      userIds: payload.userIds
    });
    yield (0, _effects.put)(_reducer.actions.loadGroups());
    payload == null ? void 0 : (_payload$callback13 = payload.callback) == null ? void 0 : _payload$callback13.call(payload, true);
  } catch (e) {
    var _payload$callback14;
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
    payload == null ? void 0 : (_payload$callback14 = payload.callback) == null ? void 0 : _payload$callback14.call(payload, false);
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* getGroupConfigurationSaga() {
  const key = _interfaces.GroupsStateKeys.GET_GROUP_CONFIGURATION;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const response = yield (0, _effects.call)(_restApi.api.groups.getGroupConfiguration);
    yield (0, _effects.put)(_reducer.actions.setGroupsState({
      groupsConfiguration: response
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* updateGroupConfigurationSaga({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.UPDATE_GROUP_CONFIGURATION;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    yield (0, _effects.call)(_restApi.api.groups.updateGroupConfiguration, payload);
    yield (0, _effects.put)(_reducer.actions.getGroupConfiguration());
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsError({
      key,
      value: (0, _utils.errorHandler)(e)
    }));
  } finally {
    yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* groupsSagas() {
  yield (0, _effects.takeLatest)(_reducer.actions.loadGroups, loadGroups);
  yield (0, _effects.takeLatest)(_reducer.actions.getGroupById, getGroupByIdSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.createGroup, createGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.updateGroup, updateGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteGroup, deleteGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.addRolesToGroup, addRolesToGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteRolesFromGroup, deleteRolesFromGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.addUsersToGroup, addUsersToGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteUsersFromGroup, deleteUsersFromGroupSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.getGroupConfiguration, getGroupConfigurationSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.updateGroupConfiguration, updateGroupConfigurationSaga);
  yield (0, _effects.takeLatest)(_reducer.actions.getTeamUsers, getTeamUsers);
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadGroupsMock() {
  const key = _interfaces.GroupsStateKeys.GET_GROUPS;
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  const groups = _dummy.allGroupsDummy;
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups
  }));
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* createGroupMock({
  payload
}) {
  var _payload$callback15;
  const key = _interfaces.GroupsStateKeys.CREATE_GROUP;
  const {
    groups
  } = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: [(0, _extends2.default)({}, payload, {
      id: `${payload.name}ID`,
      managedBy: _restApi.GroupManagedByEnum.FRONTEGG
    }), ...(groups != null ? groups : [])]
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback15 = payload.callback) == null ? void 0 : _payload$callback15.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* updateGroupMock({
  payload
}) {
  var _state$groups, _payload$name2, _payload$color, _payload$description, _payload$callback16;
  const key = _interfaces.GroupsStateKeys.UPDATE_GROUP;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: state == null ? void 0 : (_state$groups = state.groups) == null ? void 0 : _state$groups.map(group => {
      var _payload$name;
      return group.id === payload.groupId ? (0, _extends2.default)({}, payload, {
        id: payload.groupId,
        name: (_payload$name = payload == null ? void 0 : payload.name) != null ? _payload$name : '',
        managedBy: _restApi.GroupManagedByEnum.FRONTEGG
      }) : group;
    }),
    selectedGroup: (0, _extends2.default)({}, state == null ? void 0 : state.selectedGroup, {
      name: (_payload$name2 = payload == null ? void 0 : payload.name) != null ? _payload$name2 : '',
      color: (_payload$color = payload == null ? void 0 : payload.color) != null ? _payload$color : '',
      description: (_payload$description = payload == null ? void 0 : payload.description) != null ? _payload$description : ''
    })
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback16 = payload.callback) == null ? void 0 : _payload$callback16.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* deleteGroupMock({
  payload
}) {
  var _state$groups2, _payload$callback17;
  const key = _interfaces.GroupsStateKeys.DELETE_GROUP;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: state == null ? void 0 : (_state$groups2 = state.groups) == null ? void 0 : _state$groups2.filter(group => group.id !== payload.groupId)
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback17 = payload.callback) == null ? void 0 : _payload$callback17.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* addRolesToGroupMock({
  payload
}) {
  var _state$groups3, _payload$callback18;
  const key = _interfaces.GroupsStateKeys.ADD_ROLES_TO_GROUP;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: state == null ? void 0 : (_state$groups3 = state.groups) == null ? void 0 : _state$groups3.map(group => {
      var _group$roles;
      return group.id === payload.groupId ? (0, _extends2.default)({}, group, {
        roles: [...((_group$roles = group == null ? void 0 : group.roles) != null ? _group$roles : []), ...payload.roleIds.map(role => ({
          id: role,
          name: role
        }))]
      }) : group;
    })
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback18 = payload.callback) == null ? void 0 : _payload$callback18.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* deleteRolesFromGroupMock({
  payload
}) {
  var _state$groups4, _payload$callback19;
  const key = _interfaces.GroupsStateKeys.DELETE_ROLES_FROM_GROUP;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: state == null ? void 0 : (_state$groups4 = state.groups) == null ? void 0 : _state$groups4.map(group => {
      var _group$roles2;
      return group.id === payload.groupId ? (0, _extends2.default)({}, group, {
        roles: group == null ? void 0 : (_group$roles2 = group.roles) == null ? void 0 : _group$roles2.filter(role => !payload.roleIds.includes(role.id))
      }) : group;
    })
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback19 = payload.callback) == null ? void 0 : _payload$callback19.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* addUsersToGroupMock({
  payload
}) {
  var _state$groups5, _payload$callback20;
  const key = _interfaces.GroupsStateKeys.ADD_USERS_TO_GROUP;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: state == null ? void 0 : (_state$groups5 = state.groups) == null ? void 0 : _state$groups5.map(group => {
      var _group$users;
      return group.id === payload.groupId ? (0, _extends2.default)({}, group, {
        users: [...((_group$users = group == null ? void 0 : group.users) != null ? _group$users : []), ...payload.userIds.map(user => ({
          id: user,
          name: user
        }))]
      }) : group;
    })
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback20 = payload.callback) == null ? void 0 : _payload$callback20.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* deleteUsersFromGroupMock({
  payload
}) {
  var _state$groups6, _payload$callback21;
  const key = _interfaces.GroupsStateKeys.DELETE_USERS_FROM_GROUP;
  const state = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield (0, _effects.put)(_reducer.actions.setGroupsState({
    groups: state == null ? void 0 : (_state$groups6 = state.groups) == null ? void 0 : _state$groups6.map(group => {
      var _group$users2;
      return group.id === payload.groupId ? (0, _extends2.default)({}, group, {
        users: group == null ? void 0 : (_group$users2 = group.users) == null ? void 0 : _group$users2.filter(user => !payload.userIds.includes(user.id))
      }) : group;
    })
  }));
  yield (0, _effects.delay)(500);
  payload == null ? void 0 : (_payload$callback21 = payload.callback) == null ? void 0 : _payload$callback21.call(payload, true);
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* getGroupConfigurationMock() {
  const key = _interfaces.GroupsStateKeys.GET_GROUP_CONFIGURATION;
  const {
    groupsConfiguration
  } = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  if (groupsConfiguration) {
    yield (0, _effects.put)(_reducer.actions.setGroupsState({
      groupsConfiguration: (0, _extends2.default)({}, groupsConfiguration)
    }));
  }
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* updateGroupConfigurationMock({
  payload
}) {
  const key = _interfaces.GroupsStateKeys.UPDATE_GROUP_CONFIGURATION;
  const {
    groupsConfiguration
  } = yield selectGroupsState();
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: true
  }));
  if (groupsConfiguration) {
    yield (0, _effects.put)(_reducer.actions.setGroupsState({
      groupsConfiguration: (0, _extends2.default)({}, groupsConfiguration, payload)
    }));
  }
  yield (0, _effects.put)(_reducer.actions.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* groupsSagasMock() {
  yield (0, _effects.takeLatest)(_reducer.actions.loadGroups, loadGroupsMock);
  yield (0, _effects.takeLatest)(_reducer.actions.createGroup, createGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.updateGroup, updateGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteGroup, deleteGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.addRolesToGroup, addRolesToGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteRolesFromGroup, deleteRolesFromGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.addUsersToGroup, addUsersToGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.deleteUsersFromGroup, deleteUsersFromGroupMock);
  yield (0, _effects.takeLatest)(_reducer.actions.getGroupConfiguration, getGroupConfigurationMock);
  yield (0, _effects.takeLatest)(_reducer.actions.updateGroupConfiguration, updateGroupConfigurationMock);
}