"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.groupsState = exports.groupsReducers = exports.groupsActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _constants = require("../../constants");
var _utils = require("../utils");
const groupsState = {
  loaders: {},
  errors: {},
  groups: [],
  groupsConfiguration: {}
};
exports.groupsState = groupsState;
const reducers = {
  setUsersGroupsLoader: (0, _utils.loadersReducerForKey)('groupsState'),
  setUsersGroupsError: (0, _utils.errorsReducerForKey)('groupsState'),
  setGroupsState: (0, _utils.typeReducerForKey)('groupsState'),
  resetUsersGroupsState: (0, _utils.resetStateByKey)('groupsState', {
    groupsState
  })
};
exports.groupsReducers = reducers;
const actions = {
  loadGroups: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadUsersGroups`),
  getGroupById: (0, _toolkit.createAction)(`${_constants.authStoreName}/getGroupById`, payload => ({
    payload
  })),
  createGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/createGroup`, payload => ({
    payload
  })),
  updateGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateGroup`, payload => ({
    payload
  })),
  deleteGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteGroup`, payload => ({
    payload
  })),
  addRolesToGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/addRolesToGroup`, payload => ({
    payload
  })),
  deleteRolesFromGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteRolesFromGroup`, payload => ({
    payload
  })),
  addUsersToGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/addUsersToGroup`, payload => ({
    payload
  })),
  deleteUsersFromGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteUsersFromGroup`, payload => ({
    payload
  })),
  getGroupConfiguration: (0, _toolkit.createAction)(`${_constants.authStoreName}/getGroupConfiguration`),
  updateGroupConfiguration: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateGroupConfiguration`, payload => ({
    payload
  })),
  getTeamUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/getUsers`, payload => ({
    payload
  }))
};
exports.groupsActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};