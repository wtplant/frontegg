"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mfaState = exports.mfaReducers = exports.mfaActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _interfaces = require("./interfaces");
var _utils = require("../utils");
var _constants = require("../../constants");
const mfaState = {
  step: _interfaces.MFAStep.verify,
  loading: false,
  saving: false
};
exports.mfaState = mfaState;
const reducers = {
  setMfaState: (0, _utils.typeReducerForKey)('mfaState'),
  resetMfaState: (0, _utils.resetStateByKey)('mfaState', {
    mfaState
  })
};
exports.mfaReducers = reducers;
const actions = {
  enrollMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/enrollMfa`),
  getMFADevices: (0, _toolkit.createAction)(`${_constants.authStoreName}/getMFADevices`),
  getMFAStrategies: (0, _toolkit.createAction)(`${_constants.authStoreName}/getMFAStrategies`),
  verifyMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyMfa`, payload => ({
    payload
  })),
  verifyMfaAfterForce: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyMfaAfterForce`, payload => ({
    payload
  })),
  disableMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/disableMfa`, payload => ({
    payload
  })),
  preDisableMfaSms: (0, _toolkit.createAction)(`${_constants.authStoreName}/preDisableMfaSms`, payload => ({
    payload
  })),
  disableMfaSms: (0, _toolkit.createAction)(`${_constants.authStoreName}/disableMfaSms`, payload => ({
    payload
  })),
  preEnrollMfaSms: (0, _toolkit.createAction)(`${_constants.authStoreName}/preEnrollMfaSms`, payload => ({
    payload
  })),
  enrollMfaSms: (0, _toolkit.createAction)(`${_constants.authStoreName}/enrollMfaSms`, payload => ({
    payload
  })),
  preEnrollMfaWebAuthn: (0, _toolkit.createAction)(`${_constants.authStoreName}/preEnrollMfaWebAuthn`, payload => ({
    payload
  })),
  enrollMfaWebAuthn: (0, _toolkit.createAction)(`${_constants.authStoreName}/enrollMfaWebAuthn`, payload => ({
    payload
  })),
  preDisableMfaWebAuthn: (0, _toolkit.createAction)(`${_constants.authStoreName}/preDisableMfaWebAuthn`, payload => ({
    payload
  })),
  disableMfaWebAuthn: (0, _toolkit.createAction)(`${_constants.authStoreName}/disableMfaWebAuthn`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.mfaActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};