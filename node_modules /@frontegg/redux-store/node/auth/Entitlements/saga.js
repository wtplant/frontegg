"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.entitlementsSagas = entitlementsSagas;
exports.handleFetchedEntitlements = handleFetchedEntitlements;
exports.isEntitlementsDeeplyEqual = isEntitlementsDeeplyEqual;
exports.loadEntitlements = loadEntitlements;
var _fastDeepEqual = _interopRequireDefault(require("fast-deep-equal"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _helpers = require("../../helpers");
/**
 * @param oldEntitlements
 * @param newEntitlements
 * @returns true when old and new entitlements are deeply equal
 */
function isEntitlementsDeeplyEqual(oldEntitlements, newEntitlements) {
  return (0, _fastDeepEqual.default)(oldEntitlements, newEntitlements);
}

/**
 * Handle fetched entitlements response by deep comparison with the stored entitlements to prevent
 * useless renders due to store update
 * Updating loading state anyway
 * @param newEntitlementsResponse
 */
function* handleFetchedEntitlements(newEntitlementsResponse) {
  const oldEntitlements = yield (0, _effects.select)(state => {
    var _state$auth$user;
    return (_state$auth$user = state.auth.user) == null ? void 0 : _state$auth$user.entitlements;
  });
  if (isEntitlementsDeeplyEqual(oldEntitlements, newEntitlementsResponse)) {
    return;
  }
  yield (0, _effects.put)(_reducer.actions.setEntitlements(newEntitlementsResponse));
}

/**
 * Load entitlements data for saga action
 * Don't update entitlements data in the store when data is equal (deep check) to the existing store data
 * @param payloadAction saga payload action including a payload with/out a callback
 *                      The callback will be called on request completed with true if succeeded, false if failed
 */
function* loadEntitlements({
  payload
}) {
  const callback = payload == null ? void 0 : payload.callback;
  const [useEntitlementsV2] = yield (0, _effects.call)(_helpers.getFeatureFlags, [_restApi.USE_ENTITLEMENTS_V2_ENDPOINT_FF]);
  try {
    const entitlements = yield (0, _effects.call)(useEntitlementsV2 ? _restApi.api.entitlements.loadEntitlementsV2 : _restApi.api.entitlements.loadEntitlements);
    yield handleFetchedEntitlements(entitlements);
    callback == null ? void 0 : callback(true);
  } catch (e) {
    callback == null ? void 0 : callback(false);
  } finally {}
}
function* entitlementsSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadEntitlements, loadEntitlements);
}