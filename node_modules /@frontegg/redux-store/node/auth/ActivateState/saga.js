"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activateSagas = activateSagas;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _saga = require("../LoginState/saga");
var _interfaces = require("../interfaces");
var _interfaces2 = require("./interfaces");
var _interfaces3 = require("../TeamState/interfaces");
var _utils = require("../../utils");
var _utils2 = require("../LoginState/utils");
var _saga2 = require("../LoginState/saga.utils");
var _mfaRequiredState = require("../LoginState/sagas/mfaRequiredState.saga");
const _excluded = ["callback", "events"],
  _excluded2 = ["user"],
  _excluded3 = ["callback"],
  _excluded4 = ["callback"];
function* preActivateAccount({
  payload: {
    userId,
    token
  }
}) {
  yield (0, _effects.put)(_reducer.actions.setActivateState({
    loading: true,
    step: _interfaces2.ActivateAccountStep.activating
  }));
  try {
    const {
      isAuthenticated
    } = yield (0, _effects.select)(state => state.auth);
    if (isAuthenticated) {
      yield (0, _effects.put)(_reducer.actions.silentLogout());
    }
    const strategy = yield (0, _effects.call)(_restApi.api.auth.getActivateAccountStrategy, {
      userId,
      token
    });
    yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
      strategy,
      loading: false,
      error: undefined
    }));
    if (strategy.shouldSetPassword) {
      yield (0, _effects.put)(_reducer.actions.setActivateState({
        loading: false,
        step: _interfaces2.ActivateAccountStep.activatingForm
      }));
    }
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
  }
}
function* activateAccount(_ref) {
  let {
      payload: {
        callback,
        events
      }
    } = _ref,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setActivateState({
    loading: true
  }));
  try {
    const onRedirectTo = _restApi.ContextHolder.onRedirectTo;
    const {
      routes
    } = yield (0, _effects.select)(state => state.auth);
    const _yield$call = yield (0, _effects.call)(_restApi.api.auth.activateAccountV2, payload),
      {
        user
      } = _yield$call,
      rest = (0, _objectWithoutPropertiesLoose2.default)(_yield$call, _excluded2);
    if (user.redirectLocation) {
      window.location.href = user.redirectLocation;
      return;
    }
    if ((0, _utils2.isMfaRequired)(user)) {
      yield (0, _effects.put)(_reducer.actions.setActivateState({
        step: _interfaces2.ActivateAccountStep.success
      }));
      const mfaRequiredState = yield (0, _mfaRequiredState.getMfaRequiredState)(user);
      yield (0, _effects.put)(_reducer.actions.setState(mfaRequiredState));
      yield (0, _effects.delay)(1000);
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      var _events$userVerified;
      yield (0, _effects.put)(_reducer.actions.setActivateState({
        step: _interfaces2.ActivateAccountStep.success
      }));
      const userVerifiedPayload = {
        email: user.email,
        origin: _interfaces.UserVeirifedOriginTypes.ACTIVATION_LINK,
        id: user.id,
        tenantId: user.tenantId,
        name: user.name,
        createdAt: new Date()
      };
      events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, userVerifiedPayload);
      (0, _utils.reportGTMEvent)(_utils.GTMEventAction.USER_VERIFIED, userVerifiedPayload);
      yield (0, _effects.call)(_saga2.afterAuthenticationStateUpdate, (0, _extends2.default)({
        user
      }, rest), {
        isAuthenticated: true
      });
      yield (0, _effects.delay)(1000);
      yield (0, _saga.afterAuthNavigation)();
      yield (0, _effects.put)(_reducer.actions.resetActivateState());
    }
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
  }
}
function* getActivateAccountStrategy({
  payload
}) {
  const {
      callback
    } = payload,
    params = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded3);
  yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
    loading: true
  }));
  try {
    const strategy = yield (0, _effects.call)(_restApi.api.auth.getActivateAccountStrategy, params);
    yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
      strategy,
      loading: false,
      error: undefined
    }));
    callback == null ? void 0 : callback(strategy);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateStrategyState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
  }
}
function* resendActivationEmailFunction({
  payload
}) {
  const {
      callback
    } = payload,
    body = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded4);
  yield (0, _effects.put)(_reducer.actions.setTeamLoader({
    key: _interfaces3.TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: body.email
  }));
  yield (0, _effects.put)(_reducer.actions.setActivateState({
    loading: true
  }));
  try {
    yield (0, _effects.call)(_restApi.api.auth.resendActivationEmail, body);
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: undefined,
      resentEmail: true
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setActivateState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    yield (0, _effects.put)(_reducer.actions.setTeamError({
      key: _interfaces3.TeamStateKeys.RESEND_ACTIVATE_LINK,
      value: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  }
  yield (0, _effects.put)(_reducer.actions.setTeamLoader({
    key: _interfaces3.TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: false
  }));
}
function* activateSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.activateAccount, activateAccount);
  yield (0, _effects.takeLeading)(_reducer.actions.preActivateAccount, preActivateAccount);
  yield (0, _effects.takeLeading)(_reducer.actions.getActivateAccountStrategy, getActivateAccountStrategy);
  yield (0, _effects.takeLeading)(_reducer.actions.resendActivationEmail, resendActivationEmailFunction);
}