"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.activateState = exports.activateAccountReducers = exports.activateAccountActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../utils");
var _interfaces = require("./interfaces");
var _constants = require("../../constants");
const activateState = {
  step: _interfaces.ActivateAccountStep.activating,
  loading: false,
  resentEmail: false,
  activationStrategy: {
    loading: false
  }
};
exports.activateState = activateState;
const reducers = {
  setActivateState: (0, _utils.typeReducerForKey)('activateState'),
  resetActivateState: (0, _utils.resetStateByKey)('activateState', {
    activateState
  }),
  setActivateStrategyState: (0, _utils.typeReducerNestedKey)('activateState', 'activationStrategy')
};
exports.activateAccountReducers = reducers;
const actions = {
  activateAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/activateAccount`, payload => ({
    payload
  })),
  preActivateAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/preActivateAccount`, payload => ({
    payload
  })),
  getActivateAccountStrategy: (0, _toolkit.createAction)(`${_constants.authStoreName}/getActivateAccountStrategy`, payload => ({
    payload
  })),
  resendActivationEmail: (0, _toolkit.createAction)(`${_constants.authStoreName}/resendActivationEmail`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.activateAccountActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};