"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  allAccountsInitialState: true,
  allAccountsState: true,
  allAccountsReducers: true,
  allAccountsActions: true
};
exports.allAccountsState = exports.allAccountsReducers = exports.allAccountsInitialState = exports.allAccountsActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _constants = require("../../../constants");
var _utils = require("../../utils");
var _restApi = require("@frontegg/rest-api");
var _types = require("./types");
Object.keys(_types).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _types[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _types[key];
    }
  });
});
const allAccountsInitialState = {
  loaders: {},
  errors: {},
  accounts: {
    tenantId: '',
    children: []
  },
  accountsQueryParams: {
    _limit: 50,
    _offset: 0,
    _filter: '',
    _subTenantId: ''
  },
  searchAccountsData: [],
  rootAccount: {
    tenantId: ''
  },
  selectedAccount: {
    tenantId: '',
    userJwt: {
      accessToken: '',
      expiresIn: 0,
      expires: ''
    },
    users: [],
    usersQueryParams: {
      _offset: 0,
      _limit: 10,
      _order: _restApi.PaginationOrderEnum.DESC,
      _sortBy: _restApi.SortByEnum.name
    },
    usersPageOffset: 0,
    accountSettings: {}
  }
};
exports.allAccountsState = exports.allAccountsInitialState = allAccountsInitialState;
const reducers = {
  setAllAccountsLoader: (0, _utils.loadersReducerForKey)('allAccountsState'),
  setAllAccountsError: (0, _utils.errorsReducerForKey)('allAccountsState'),
  setAllAccountsState: (0, _utils.typeReducerForKey)('allAccountsState'),
  setSelectedAccountState: (0, _utils.typeReducerNestedKey)('allAccountsState', 'selectedAccount'),
  resetAllAccountsState: (0, _utils.resetStateByKey)('allAccountsState', {
    allAccountsState: allAccountsInitialState
  })
};
exports.allAccountsReducers = reducers;
const actions = {
  loadAccounts: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadAccounts`, payload => ({
    payload
  })),
  searchAccounts: (0, _toolkit.createAction)(`${_constants.authStoreName}/searchAccounts`, payload => ({
    payload
  })),
  updateSubAccountAccessForUser: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateSubAccountAccessForUser`, payload => ({
    payload
  })),
  createSubAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/createSubAccount`, payload => ({
    payload
  })),
  updateSubAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateAccount`, payload => ({
    payload
  })),
  deleteSubAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteAccount`, payload => ({
    payload
  })),
  updateSubAccountSettings: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateSubAccountSettings`, payload => ({
    payload
  })),
  addUsersToAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/addUsersToAccount`, payload => ({
    payload
  })),
  getAccountUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/getAccountUsers`, payload => ({
    payload
  })),
  deleteUsersFromAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteUsersFromAccount`, payload => ({
    payload
  })),
  setUserRolesForSubAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/setUserRolesForSubAccount`, payload => ({
    payload
  })),
  getUserJwtForSubAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/getUserJwtForSubAccount`, payload => ({
    payload
  })),
  setRootAccountData: (0, _toolkit.createAction)(`${_constants.authStoreName}/setRootAccountData`),
  setSelectedSubAccountData: (0, _toolkit.createAction)(`${_constants.authStoreName}/setSelectedSubAccountData`, payload => ({
    payload
  })),
  loadNumberOfUsersForSelectedSubAccount: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadNumberOfUsersForSelectedSubAccount`, payload => ({
    payload
  }))
};
exports.allAccountsActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};