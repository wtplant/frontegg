"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.deleteWebAuthnDevice = deleteWebAuthnDevice;
exports.loadWebAuthnDevices = loadWebAuthnDevices;
exports.passkeysSagas = passkeysSagas;
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _utils = require("../../utils");
function* deleteWebAuthnDevice({
  payload
}) {
  const {
    callback,
    deviceId
  } = payload;
  yield (0, _effects.put)(_reducer.actions.setPasskeysState({
    loading: true
  }));
  try {
    yield (0, _effects.call)(_restApi.api.auth.deleteWebAuthnDevice, deviceId);
    const {
      devices
    } = yield (0, _effects.select)(state => state.auth.passkeysState);
    const newDevices = devices.filter(device => device.id !== deviceId);
    yield (0, _effects.put)(_reducer.actions.setPasskeysState({
      devices: newDevices,
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setPasskeysState({
      loading: false,
      error: (0, _utils.errorHandler)(e, null)
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* loadWebAuthnDevices() {
  yield (0, _effects.put)(_reducer.actions.setPasskeysState({
    loading: true
  }));
  try {
    const {
      devices
    } = yield (0, _effects.call)(_restApi.api.auth.getWebAuthnDevices);
    yield (0, _effects.put)(_reducer.actions.setPasskeysState({
      devices: devices,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setPasskeysState({
      loading: false,
      error: (0, _utils.errorHandler)(e, null)
    }));
  }
}
function* passkeysSagas() {
  yield (0, _effects.takeEvery)(_reducer.actions.loadWebAuthnDevices, loadWebAuthnDevices);
  yield (0, _effects.takeEvery)(_reducer.actions.deleteWebAuthnDevice, deleteWebAuthnDevice);
}