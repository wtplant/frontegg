"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "defaultFronteggRoutes", {
  enumerable: true,
  get: function () {
    return _consts.defaultFronteggRoutes;
  }
});
Object.defineProperty(exports, "getRedirectUrl", {
  enumerable: true,
  get: function () {
    return _utils2.getRedirectUrl;
  }
});
Object.defineProperty(exports, "getSearchParam", {
  enumerable: true,
  get: function () {
    return _utils2.getSearchParam;
  }
});
exports.loginState = exports.loginReducers = exports.loginActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _interfaces = require("./interfaces");
var _utils = require("../utils");
var _constants = require("../../constants");
var _utils2 = require("./utils");
var _consts = require("./consts");
const loginState = {
  flow: _interfaces.LoginFlow.Login,
  step: _interfaces.LoginStep.preLogin,
  loading: false,
  email: '',
  tenants: []
};
exports.loginState = loginState;
const reducers = {
  setLoginState: (0, _utils.typeReducerForKey)('loginState'),
  resetLoginState: (0, _utils.resetStateByKey)('loginState', {
    loginState
  })
};
exports.loginReducers = reducers;
const actions = {
  requestAuthorize: (0, _toolkit.createAction)(`${_constants.authStoreName}/requestAuthorize`, (payload = false) => ({
    payload
  })),
  requestAuthorizeSSR: (0, _toolkit.createAction)(`${_constants.authStoreName}/requestAuthorizeSSR`, payload => ({
    payload
  })),
  requestHostedLoginAuthorize: (0, _toolkit.createAction)(`${_constants.authStoreName}/requestHostedLoginAuthorize`, payload => ({
    payload
  })),
  requestHostedLoginAuthorizeV2: (0, _toolkit.createAction)(`${_constants.authStoreName}/requestHostedLoginAuthorizeV2`, payload => ({
    payload
  })),
  handleHostedLoginCallback: (0, _toolkit.createAction)(`${_constants.authStoreName}/handleHostedLoginCallback`, payload => ({
    payload
  })),
  afterAuthNavigation: (0, _toolkit.createAction)(`${_constants.authStoreName}/afterAuthNavigation`),
  preLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/preLogin`, payload => ({
    payload
  })),
  postLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/postLogin`, payload => ({
    payload
  })),
  login: (0, _toolkit.createAction)(`${_constants.authStoreName}/login`, payload => ({
    payload
  })),
  loginWithMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/loginWithMfa`, payload => ({
    payload
  })),
  recoverMfa: (0, _toolkit.createAction)(`${_constants.authStoreName}/recoverMfa`, payload => ({
    payload
  })),
  logout: (0, _toolkit.createAction)(`${_constants.authStoreName}/logout`, payload => ({
    payload
  })),
  silentLogout: (0, _toolkit.createAction)(`${_constants.authStoreName}/silentLogout`, payload => ({
    payload
  })),
  checkIfAllowToRememberMfaDevice: (0, _toolkit.createAction)(`${_constants.authStoreName}/checkIfAllowToRememberMfaDevice`, payload => ({
    payload
  })),
  changePhoneNumberWithVerification: (0, _toolkit.createAction)(`${_constants.authStoreName}/changePhoneNumberWithVerification`, payload => ({
    payload
  })),
  verifyChangePhoneNumber: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyChangePhoneNumber`, payload => ({
    payload
  })),
  quickSmsPasswordlessPreLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/quickSmsPasswordlessPreLogin`, payload => ({
    payload
  })),
  passwordlessPreLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/passwordlessPreLogin`, payload => ({
    payload
  })),
  passwordlessPostLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/passwordlessPostLogin`, payload => ({
    payload
  })),
  verifyInviteToken: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyInviteToken`, payload => ({
    payload
  })),
  webAuthnPrelogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/webAuthnPrelogin`, payload => ({
    payload
  })),
  webAuthnPostLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/webAuthnPostLogin`, payload => ({
    payload
  })),
  webAuthnCreateNewDeviceSession: (0, _toolkit.createAction)(`${_constants.authStoreName}/webAuthnCreateNewDeviceSession`, payload => ({
    payload
  })),
  webAuthnVerifyNewDeviceSession: (0, _toolkit.createAction)(`${_constants.authStoreName}/webAuthnVerifyNewDeviceSession`, payload => ({
    payload
  })),
  getUserIP: (0, _toolkit.createAction)(`${_constants.authStoreName}/getUserIP`, payload => ({
    payload
  })),
  preEnrollMFAWebAuthnForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/preEnrollWebAuthNForLogin`, payload => ({
    payload
  })),
  enrollMFAWebAuthnForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/enrollWebAuthNForLogin`, payload => ({
    payload
  })),
  enrollMFAAuthenticatorAppForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/enrollMFAAuthenticatorAppForLogin`, payload => ({
    payload
  })),
  preEnrollMFASMSForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/preEnrollMFASMSForLogin`, payload => ({
    payload
  })),
  enrollMFASMSForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/enrollMFASMSForLogin`, payload => ({
    payload
  })),
  preVerifyMFAWebAuthnForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/preVerifyMFAWebAuthnForLogin`, payload => ({
    payload
  })),
  verifyMFAWebAuthnForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyMFAWebAuthnForLogin`, payload => ({
    payload
  })),
  preVerifyMFASMSForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/preVerifyMFASMSForLogin`, payload => ({
    payload
  })),
  verifyMFASMSForLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyMFASMSForLogin`, payload => ({
    payload
  })),
  preVerifyMFAEmailCode: (0, _toolkit.createAction)(`${_constants.authStoreName}/preVerifyMFAEmailCode`, payload => ({
    payload
  })),
  verifyMFAEmailCode: (0, _toolkit.createAction)(`${_constants.authStoreName}/verifyMFAEmailCode`, payload => ({
    payload
  })),
  resetBreachedPassword: (0, _toolkit.createAction)(`${_constants.authStoreName}/resetBreachedPassword`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.loginActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};