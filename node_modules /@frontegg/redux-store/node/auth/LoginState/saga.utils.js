"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.afterAuthenticationStateUpdate = afterAuthenticationStateUpdate;
exports.shouldShowPromptPasskeys = shouldShowPromptPasskeys;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _helpers = require("../PasskeysState/helpers");
var _helpers2 = require("../../helpers");
function* shouldShowPromptPasskeys() {
  const {
    publicAuthStrategyPolicy
  } = yield (0, _effects.select)(state => state.auth.securityPolicyState);
  const {
    policy
  } = publicAuthStrategyPolicy;
  const isPasskeysEnabledByVendor = (0, _helpers.getPasskeysVendorPolicy)(policy);
  const isLoggedInWithPasskeys = localStorage.getItem('preferred-login-method') === 'Passkeys';
  const isMarkedDontShowAgainPrompt = localStorage.getItem('dont-show-again-prompt-passkeys') === 'true';
  const [showPasskeys] = yield (0, _effects.call)(_helpers2.getFeatureFlags, ['show-passkeys-new']);
  if (!showPasskeys || !isPasskeysEnabledByVendor || isLoggedInWithPasskeys || isMarkedDontShowAgainPrompt) {
    return false;
  } else {
    const {
      devices
    } = yield (0, _effects.call)(_restApi.api.auth.getWebAuthnDevices);
    yield (0, _effects.put)(_reducer.actions.setPasskeysState({
      devices: devices != null ? devices : []
    }));
    const numOfDevices = !(devices != null && devices.length) ? 0 : devices.length;
    return numOfDevices === 0;
  }
}
function* afterAuthenticationStateUpdate({
  user,
  tenants = [],
  activeTenant
}, additionalUpdate = {}) {
  const {
    tenantsState: currentTenantsState
  } = yield (0, _effects.select)(state => state.auth);
  yield (0, _effects.put)(_reducer.actions.setState((0, _extends2.default)({
    user,
    tenantsState: (0, _extends2.default)({}, currentTenantsState, {
      tenants,
      activeTenant,
      loading: false
    })
  }, additionalUpdate)));
}