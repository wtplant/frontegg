"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleVerifyMFAResponse = handleVerifyMFAResponse;
exports.postHandleVerifyMFAResponseForLogin = postHandleVerifyMFAResponseForLogin;
exports.postHandleVerifyMFAResponseForStepUp = postHandleVerifyMFAResponseForStepUp;
var _effects = require("redux-saga/effects");
var _interfaces = require("../../MfaState/interfaces");
var _reducer = require("../../reducer");
var _interfaces2 = require("../interfaces");
var _saga = require("../saga.utils");
var _afterAuthNavigation = require("./afterAuthNavigation.saga");
var _helpers = require("../../../helpers");
/**
 * Additional steps for after MFA authentication with authenticator app handler for step up flow
 */
function* postHandleVerifyMFAResponseForStepUp() {
  yield (0, _effects.call)(_afterAuthNavigation.afterStepUpAuthNavigation);
}

/**
 * Additional steps for after MFA authentication with authenticator app handler for login flow
 * @param isAuthenticated
 */
function* postHandleVerifyMFAResponseForLogin(isAuthenticated) {
  const {
    loginState
  } = yield (0, _effects.select)(state => state.auth);
  const {
    step: mfaStep
  } = yield (0, _effects.select)(state => state.auth.mfaState);
  const [securityCenterLoginFlows] = yield (0, _effects.call)(_helpers.getFeatureFlags, ['security-center-show-login-flows']);
  if (loginState.flow === _interfaces2.LoginFlow.Login) {
    if (securityCenterLoginFlows && loginState.isBreachedPassword && !isAuthenticated) {
      yield (0, _effects.put)(_reducer.actions.setLoginState({
        step: _interfaces2.LoginStep.breachedPassword,
        loading: false
      }));
    } else {
      const shouldShowPrompt = yield (0, _effects.call)(_saga.shouldShowPromptPasskeys);
      if (mfaStep === _interfaces.MFAStep.smsVerifyCode && shouldShowPrompt) {
        yield (0, _effects.put)(_reducer.actions.setLoginState({
          step: _interfaces2.LoginStep.promptPasskeys,
          loading: false
        }));
      } else {
        yield (0, _afterAuthNavigation.afterAuthNavigation)();
      }
    }
  }
}

/**
 * Handle after MFA authentication with authenticator app
 * @param payload.user
 * @param payload.tenants
 * @param payload.activeTenant
 * @param isStepUp
 *
 * When using this saga, you should wrap it with try/catch block and handle according to your logic
 */
function* handleVerifyMFAResponse({
  user,
  tenants,
  activeTenant
}, isStepUp = false) {
  yield (0, _effects.put)(_reducer.actions.setUser(user));
  yield (0, _effects.put)(_reducer.actions.setTenantsState({
    tenants,
    activeTenant,
    loading: false
  }));
  if (user.id) {
    localStorage.setItem('userId', user.id);
  }
  const isAuthenticated = !!user.accessToken;
  yield (0, _effects.put)(_reducer.actions.setState({
    isAuthenticated
  }));
  if (isStepUp) {
    yield (0, _effects.call)(postHandleVerifyMFAResponseForStepUp);
    return;
  }
  yield (0, _effects.call)(postHandleVerifyMFAResponseForLogin, isAuthenticated);
}