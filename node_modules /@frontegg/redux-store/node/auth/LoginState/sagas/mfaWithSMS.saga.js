"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preVerifyMFASMS = preVerifyMFASMS;
exports.preVerifyMFASMSForLogin = preVerifyMFASMSForLogin;
exports.verifyMFASMS = verifyMFASMS;
exports.verifyMFASMSForLogin = verifyMFASMSForLogin;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _utils = require("../../../utils");
var _interfaces = require("../../MfaState/interfaces");
var _reducer = require("../../reducer");
var _handleVerifyMFAResponse = require("./handleVerifyMFAResponse.saga");
const _excluded = ["callback", "deviceId"],
  _excluded2 = ["callback", "deviceId"];
/**
 * Shared logic for MFA SMS pre-verify step
 * @param payload.callback callback function to be called after the verification is done
 * @param payload.deviceId
 * @param payload.mfaToken
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 */
function* preVerifyMFASMS(_ref, setLoadingAction) {
  let {
      callback,
      deviceId
    } = _ref,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  yield (0, _effects.put)(setLoadingAction({
    loading: false,
    error: undefined
  }));
  try {
    const data = yield (0, _effects.call)(_restApi.api.auth.preVerifyMFASMSForLogin, deviceId, payload);
    yield (0, _effects.put)(_reducer.actions.setMfaState({
      otcToken: data.otcToken,
      step: _interfaces.MFAStep.smsVerifyCode,
      phoneNumber: data.phoneNumber
    }));
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: undefined
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null);
  }
}

/**
 * Shared logic for MFA SMS verify step
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.otcToken
 * @param payload.code 6 digits code input by the user
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 * @param isStepUp true when it's step up flow
 */
function* verifyMFASMS(_ref2, setLoadingAction, isStepUp = false) {
  let {
      callback,
      deviceId
    } = _ref2,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);
  yield (0, _effects.put)(setLoadingAction({
    loading: true
  }));
  try {
    const data = yield (0, _effects.call)(_restApi.api.auth.verifyMFASMSForLoginV2, deviceId, payload);
    yield (0, _handleVerifyMFAResponse.handleVerifyMFAResponse)(data, isStepUp);
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: undefined
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null);
  }
}

/**
 * Pre verify step for MFA SMS login
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.mfaToken
 */
function* preVerifyMFASMSForLogin({
  payload
}) {
  yield preVerifyMFASMS(payload, _reducer.actions.setLoginState);
}

/**
 * Verify step for MFA SMS login
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.otcToken
 * @param payload.code 6 digits code input by the user
 */
function* verifyMFASMSForLogin({
  payload
}) {
  yield verifyMFASMS(payload, _reducer.actions.setLoginState, false);
}