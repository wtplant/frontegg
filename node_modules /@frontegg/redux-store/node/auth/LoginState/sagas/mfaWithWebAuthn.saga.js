"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.preVerifyMFAWebAuthn = preVerifyMFAWebAuthn;
exports.preVerifyMFAWebAuthnForLogin = preVerifyMFAWebAuthnForLogin;
exports.verifyMFAWebAuthn = verifyMFAWebAuthn;
exports.verifyMFAWebAuthnForLogin = verifyMFAWebAuthnForLogin;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _utils = require("../../../utils");
var _reducer = require("../../reducer");
var _utils2 = require("../../utils");
var _handleVerifyMFAResponse = require("./handleVerifyMFAResponse.saga");
const _excluded = ["callback", "deviceId"],
  _excluded2 = ["callback", "deviceId"];
/**
 * Shared logic for MFA Webauthn pre-verify step
 * @param payload.callback callback function to be called after the verification is done
 * @param payload.deviceId
 * @param payload.mfaToken
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 */
function* preVerifyMFAWebAuthn(_ref, setLoadingAction) {
  let {
      callback,
      deviceId
    } = _ref,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref, _excluded);
  yield (0, _effects.put)(setLoadingAction({
    loading: true
  }));
  try {
    var _data$options$allowCr;
    const data = yield (0, _effects.call)(_restApi.api.auth.preVerifyMFAWebAuthnForLogin, deviceId, payload);
    const options = (0, _extends2.default)({}, data.options, {
      challenge: (0, _utils2.base64urlDecode)(data.options.challenge),
      allowCredentials: (_data$options$allowCr = data.options.allowCredentials) == null ? void 0 : _data$options$allowCr.map(credentials => (0, _extends2.default)({}, credentials, {
        id: (0, _utils2.base64urlDecode)(credentials.id)
      }))
    });
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: undefined
    }));
    callback == null ? void 0 : callback({
      options,
      webauthnToken: data.webauthnToken
    });
  } catch (e) {
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null);
  }
}

/**
 * Shared logic for MFA Webauthn verify step
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.webauthnToken
 * @param payload.mfaToken
 * @param payload.publicKey public key object from browser navigator credentials
 * @param payload.code 6 digits code input by the user
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 * @param isStepUp true when it's step up flow
 */
function* verifyMFAWebAuthn(_ref2, setLoadingAction, isStepUp) {
  let {
      callback,
      deviceId
    } = _ref2,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2, _excluded2);
  yield (0, _effects.put)(setLoadingAction({
    loading: true
  }));
  try {
    const publicKey = (0, _utils2.publicKeyCredentialToJSON)(payload.publicKey);
    const data = yield (0, _effects.call)(_restApi.api.auth.verifyMFAWebAuthnForLoginV2, deviceId, (0, _extends2.default)({}, payload, {
      options: publicKey
    }));
    yield (0, _handleVerifyMFAResponse.handleVerifyMFAResponse)(data, isStepUp);
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: undefined
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(setLoadingAction({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null);
  }
}

/**
 * Pre verify step for MFA Webauthn login
 * @param payload.callback callback function to be called after the verification is done
 * @param payload.deviceId
 * @param payload.mfaToken
 */
function* preVerifyMFAWebAuthnForLogin({
  payload
}) {
  yield preVerifyMFAWebAuthn(payload, _reducer.actions.setLoginState);
}

/**
 * Verify step for MFA Webauthn login
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.webauthnToken
 * @param payload.mfaToken
 * @param payload.publicKey public key object from browser navigator credentials
 * @param payload.code 6 digits code input by the user
 */
function* verifyMFAWebAuthnForLogin({
  payload
}) {
  yield verifyMFAWebAuthn(payload, _reducer.actions.setLoginState, false);
}