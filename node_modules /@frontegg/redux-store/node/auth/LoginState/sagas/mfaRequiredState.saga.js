"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMfaRequiredState = getMfaRequiredState;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _utils = require("../utils");
var _interfaces = require("../interfaces");
// Separated folder due to circular dependency

function* getMfaRequiredState(user) {
  let step = _interfaces.LoginStep.loginWithTwoFactor;
  let mfaState = {};
  const {
    loginState
  } = yield (0, _effects.select)(state => state.auth);
  const {
    isAllowedToRemember,
    mfaDeviceExpiration
  } = yield (0, _effects.call)(_restApi.api.auth.checkIfAllowToRememberMfaDevice, user.mfaToken);
  const isEnrolled = !(user.hasOwnProperty('mfaEnrolled') && !user.mfaEnrolled);
  if (isEnrolled) {
    mfaState = {
      mfaDevices: user.mfaDevices,
      step: (0, _utils.getMfaStepForEnrolledUsers)(user.mfaDevices)
    };
  } else {
    mfaState = {
      step: (0, _utils.getMfaStepForNotEnrolledUsers)(user.mfaStrategies),
      qrCode: user.qrCode,
      recoveryCode: user.recoveryCode,
      loading: false,
      mfaToken: user.mfaToken,
      mfaStrategies: user.mfaStrategies
    };
    step = _interfaces.LoginStep.forceTwoFactor;
  }
  let quickLoginState = {};
  const quickLoginToRegister = localStorage.getItem('register-quick-login');
  if (quickLoginToRegister) {
    quickLoginState = {
      quickLoginToRegister,
      flow: _interfaces.LoginFlow.RegisterQuickLogin
    };
  }
  return {
    user: undefined,
    isAuthenticated: false,
    mfaState,
    loginState: (0, _extends2.default)({}, loginState, quickLoginState, {
      mfaToken: user.mfaToken,
      mfaRequired: user.mfaRequired,
      loading: false,
      error: undefined,
      step,
      tenantsLoading: true,
      email: user.userEmail,
      tenants: [],
      allowRememberMfaDevice: isAllowedToRemember,
      mfaDeviceExpiration,
      isBreachedPassword: user.isBreachedPassword
    })
  };
}