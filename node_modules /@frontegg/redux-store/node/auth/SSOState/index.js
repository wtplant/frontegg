"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ssoState = exports.ssoReducers = exports.ssoActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../utils");
var _constants = require("../../constants");
const ssoState = {
  firstLoad: true,
  loading: true,
  saving: false,
  errors: {},
  loaders: {},
  ssoConfigurations: []
};
exports.ssoState = ssoState;
const reducers = {
  setSSOLoader: (0, _utils.loadersReducerForKey)('ssoState'),
  setSSOError: (0, _utils.errorsReducerForKey)('ssoState'),
  setSSOState: (0, _utils.typeReducerForKey)('ssoState'),
  resetSSOState: (0, _utils.resetStateByKey)('ssoState', {
    ssoState
  })
};
exports.ssoReducers = reducers;
const actions = {
  loadSSOConfigurationsV2: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSSOConfigurationsV2`),
  saveSSOConfigurationV2: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurationV2`, payload => ({
    payload
  })),
  updateSSOConfiguration: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateSSOConfiguration`, payload => ({
    payload
  })),
  deleteSSOConfiguration: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteSSOConfiguration`, payload => ({
    payload
  })),
  saveSSODomain: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSODomain`, payload => ({
    payload
  })),
  deleteSSODomain: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteSSODomain`, payload => ({
    payload
  })),
  validateSSODomainV2: (0, _toolkit.createAction)(`${_constants.authStoreName}/validateSSODomainV2`, payload => ({
    payload
  })),
  setSSODefaultRoles: (0, _toolkit.createAction)(`${_constants.authStoreName}/setSSODefaultRoles`, payload => ({
    payload
  })),
  setSSOGroups: (0, _toolkit.createAction)(`${_constants.authStoreName}/setSSOGroups`, payload => ({
    payload
  })),
  updateSSOGroups: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateSSOGroups`, payload => ({
    payload
  })),
  saveSSOConfigurationByMetadata: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurationByMetadata`, payload => ({
    payload
  })),
  updateSSOConfigurationByMetadata: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateSSOConfigurationByMetadata`, payload => ({
    payload
  })),
  loadSSOConfigurations: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSSOConfigurations`),
  loadSSOAuthorizationRoles: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSSOAuthorizationRoles`),
  saveSSOConfigurations: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurations`, payload => ({
    payload
  })),
  // NOTE: use withCallback in case of promise response
  saveSSOConfigurationsFile: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurationsFile`, payload => ({
    payload
  })),
  saveSSOConfigurationByData: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurationByData`, payload => ({
    payload
  })),
  saveSSOConfigurationByUrl: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurationByUrl`, payload => ({
    payload
  })),
  saveSSOConfigurationsFileWithCallback: (0, _toolkit.createAction)(`${_constants.authStoreName}/saveSSOConfigurationsFileWithCallback`, payload => ({
    payload
  })),
  validateSSODomain: (0, _toolkit.createAction)(`${_constants.authStoreName}/validateSSODomain`, payload => ({
    payload
  })),
  updateSSOAuthorizationRoles: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateSSOAuthorizationRoles`, payload => ({
    payload
  })),
  deleteSamlGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteSamlGroup`, payload => ({
    payload
  })),
  createSamlGroup: (0, _toolkit.createAction)(`${_constants.authStoreName}/createSamlGroup`, payload => ({
    payload
  })),
  oidcPostlogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/oidcPostlogin`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.ssoActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contain the same functions in reducers and actions
 */
const Matcher = {};