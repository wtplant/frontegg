"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ssoSagas = ssoSagas;
exports.ssoSagasMock = ssoSagasMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _interfaces = require("./interfaces");
var _helpers = require("../../helpers");
var _utils = require("../utils");
var _dummy = require("../dummy");
var _saga = require("../LoginState/saga");
var _utils2 = require("../../utils");
const _excluded = ["callback", "samlVendor"],
  _excluded2 = ["callback", "samlVendor"];
function* loadSSOConfigurations() {
  try {
    var _samlMetadata$configu, _samlMetadata$configu2;
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      loading: true
    }));
    const samlConfiguration = yield (0, _effects.call)(_restApi.api.auth.getSamlConfiguration);
    const oidcConfiguration = yield (0, _effects.call)(_restApi.api.auth.getOidcConfiguration);
    const samlMetadata = yield (0, _effects.call)(_restApi.api.metadata.getSamlMetadata);
    samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu.acsUrl;
    samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu2 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu2.spEntityId;
    samlConfiguration.isSamlActive = samlMetadata == null ? void 0 : samlMetadata.isActive;
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration,
      oidcConfiguration,
      loading: false,
      firstLoad: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: (0, _utils2.errorHandler)(e),
      loading: false
    }));
  }
}
function* saveSSOConfigurationsFile({
  payload: configFile
}) {
  const oldSamlConfiguration = yield (0, _effects.select)(state => state.auth.ssoState.samlConfiguration);
  const loaderKey = 'saving';
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    error: undefined,
    [loaderKey]: true
  }));
  try {
    const metadata = yield (0, _helpers.readFileAsText)(configFile[0]);
    const newSamlConfiguration = yield (0, _effects.call)(_restApi.api.auth.updateSamlVendorMetadata, {
      metadata
    });
    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: newSamlConfiguration,
      error: undefined,
      [loaderKey]: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: oldSamlConfiguration,
      error: (0, _utils2.errorHandler)(e),
      [loaderKey]: false
    }));
  }
}
function* saveSSOConfigurationsFileWithCallback({
  payload
}) {
  const {
    configFile,
    callback
  } = payload;
  const oldSamlConfiguration = yield (0, _effects.select)(state => state.auth.ssoState.samlConfiguration);
  const loaderKey = 'saving';
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    error: undefined,
    [loaderKey]: true
  }));
  try {
    const metadata = yield (0, _helpers.readFileAsText)(configFile);
    const newSamlConfiguration = yield (0, _effects.call)(_restApi.api.auth.updateSamlVendorMetadata, {
      metadata
    });
    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: newSamlConfiguration,
      error: undefined,
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: oldSamlConfiguration,
      error: (0, _utils2.errorHandler)(e),
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* saveSSOConfigurations({
  payload
}) {
  const {
      callback,
      samlVendor
    } = payload,
    newSamlConfiguration = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded);
  const oldSamlConfiguration = yield (0, _effects.select)(state => state.auth.ssoState.samlConfiguration);
  const samlConfiguration = (0, _extends2.default)({}, oldSamlConfiguration, newSamlConfiguration);
  let loaderKey = 'saving';
  if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {
    loaderKey = 'loading';
  }
  try {
    const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);
    if (firstTimeConfigure) {
      yield (0, _effects.put)(_reducer.actions.setSSOState({
        samlConfiguration: (0, _extends2.default)({}, oldSamlConfiguration, samlConfiguration)
      }));
      return;
    } else {
      yield (0, _effects.put)(_reducer.actions.setSSOState({
        error: undefined,
        [loaderKey]: true
      }));
    }
    if (payload.type === _interfaces.SamlVendors.Saml) {
      var _samlMetadata$configu3, _samlMetadata$configu4;
      const samlMetadata = yield (0, _effects.call)(_restApi.api.metadata.getSamlMetadata);
      samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu3 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu3.acsUrl;
      samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu4 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu4.spEntityId;
    }
    const updateSamlConfiguration = (0, _helpers.omitProps)(samlConfiguration, ['validated', 'generatedVerification', 'createdAt', 'updatedAt']);
    if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration == null ? void 0 : updateSamlConfiguration.domain)) {
      updateSamlConfiguration.ssoEndpoint = '';
      updateSamlConfiguration.publicCertificate = '';
      updateSamlConfiguration.signRequest = false;
    }
    updateSamlConfiguration.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();
    const newSamlConfiguration = yield (0, _effects.call)(_restApi.api.auth.updateSamlConfiguration, updateSamlConfiguration);
    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: newSamlConfiguration,
      error: undefined,
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: oldSamlConfiguration,
      error: (0, _utils2.errorHandler)(e),
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* validateSSODomain({
  payload: {
    callback
  } = {}
}) {
  const samlConfiguration = yield (0, _effects.select)(state => state.auth.ssoState.samlConfiguration);
  try {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: true
    }));
    yield (0, _effects.call)(_restApi.api.auth.validateSamlDomain);
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: (0, _extends2.default)({}, samlConfiguration, {
        validated: true
      }),
      error: undefined,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: (0, _extends2.default)({}, samlConfiguration, {
        validated: false
      }),
      error: (0, _utils2.errorHandler)(e),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* getAuthorizationRoles() {
  try {
    const data = yield (0, _effects.call)(_restApi.api.auth.getSamlRoles);
    const groupsData = yield (0, _effects.call)(_restApi.api.auth.getSamlRolesGroups);
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      authorizationRoles: data.roleIds,
      rolesGroups: groupsData,
      error: undefined
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: (0, _utils2.errorHandler)(e)
    }));
  }
}
function* updateRolesGroups(groups) {
  try {
    yield (0, _effects.all)(groups.map(group => (0, _effects.call)(_restApi.api.auth.updateSamlGroup, {
      id: group.id,
      roleIds: group.roleIds,
      group: group.group
    })));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: (0, _utils2.errorHandler)(e)
    }));
  }
}
function* updateAuthorizationRoles({
  payload: {
    callback,
    authorizationRoles,
    groups
  }
}) {
  try {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: true
    }));
    yield (0, _effects.call)(_restApi.api.auth.updateSamlRoles, {
      roleIds: authorizationRoles
    });
    if (groups) {
      yield updateRolesGroups(groups);
    }
    yield getAuthorizationRoles();
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: (0, _utils2.errorHandler)(e),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* deleteSamlGroupFunction({
  payload: {
    callback,
    id
  }
}) {
  try {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: true
    }));
    yield (0, _effects.call)(_restApi.api.auth.deleteSamlGroup, {
      id
    });
    yield getAuthorizationRoles();
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: (0, _utils2.errorHandler)(e),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* createSamlGroupFunction({
  payload: {
    group,
    roleIds,
    callback
  }
}) {
  try {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: true
    }));
    yield (0, _effects.call)(_restApi.api.auth.createSamlGroup, {
      group,
      roleIds
    });
    yield getAuthorizationRoles();
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: (0, _utils2.errorHandler)(e),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* oidcPostloginFunction({
  payload
}) {
  const data = {
    code: payload.code,
    redirectUri: payload.redirectUri,
    RelayState: payload.state
  };
  try {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      loading: true
    }));
    yield (0, _effects.call)(_restApi.api.auth.oidcPostLoginV2, data);
    yield (0, _effects.call)(_saga.refreshToken);
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      loading: false,
      error: (0, _utils2.errorHandler)(e, 'Failed to authenticate'),
      firstLoad: false
    }));
  }
}
function* ssoSagas() {
  yield (0, _effects.takeEvery)(_reducer.actions.loadSSOConfigurations, loadSSOConfigurations);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSSOConfigurations, saveSSOConfigurations);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSSOConfigurationsFile, saveSSOConfigurationsFile);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSSOConfigurationsFileWithCallback, saveSSOConfigurationsFileWithCallback);
  yield (0, _effects.takeEvery)(_reducer.actions.validateSSODomain, validateSSODomain);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSSOAuthorizationRoles, getAuthorizationRoles);
  yield (0, _effects.takeEvery)(_reducer.actions.updateSSOAuthorizationRoles, updateAuthorizationRoles);
  yield (0, _effects.takeEvery)(_reducer.actions.deleteSamlGroup, deleteSamlGroupFunction);
  yield (0, _effects.takeEvery)(_reducer.actions.createSamlGroup, createSamlGroupFunction);
  yield (0, _effects.takeEvery)(_reducer.actions.oidcPostlogin, oidcPostloginFunction);
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadSSOConfigurationsMock() {
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    loading: true
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    samlConfiguration: _dummy.samlConfigurationDemo,
    loading: false,
    firstLoad: false
  }));
}
function* saveSSOConfigurationsFileMock({
  payload: configFile
}) {
  const loaderKey = 'saving';
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    error: undefined,
    [loaderKey]: true
  }));
  const oldSamlConfiguration = yield (0, _effects.select)(state => state.auth.ssoState.samlConfiguration);
  const newSamlConfiguration = (0, _extends2.default)({}, oldSamlConfiguration, {
    enabled: true
  }, configFile[0]);
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    samlConfiguration: newSamlConfiguration,
    error: undefined,
    [loaderKey]: false
  }));
}
function* saveSSOConfigurationsMock({
  payload
}) {
  var _samlMetadataDemo$con, _samlMetadataDemo$con2;
  const {
      callback,
      samlVendor
    } = payload,
    newSamlConfiguration = (0, _objectWithoutPropertiesLoose2.default)(payload, _excluded2);
  const oldSamlConfiguration = _dummy.ssoStateDemo.samlConfiguration;
  const samlConfiguration = (0, _extends2.default)({}, oldSamlConfiguration, newSamlConfiguration);
  let loaderKey = 'saving';
  if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {
    loaderKey = 'loading';
  }
  const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);
  if (firstTimeConfigure) {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      samlConfiguration: (0, _extends2.default)({}, oldSamlConfiguration, samlConfiguration)
    }));
    return;
  } else {
    yield (0, _effects.put)(_reducer.actions.setSSOState({
      error: undefined,
      [loaderKey]: true
    }));
  }
  yield (0, _utils.delay)();
  samlConfiguration.acsUrl = _dummy.samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con = _dummy.samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con.acsUrl;
  samlConfiguration.spEntityId = _dummy.samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con2 = _dummy.samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con2.spEntityId;
  const updateSamlConfiguration = (0, _helpers.omitProps)(samlConfiguration, ['validated', 'generatedVerification', 'createdAt', 'updatedAt']);
  if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration == null ? void 0 : updateSamlConfiguration.domain)) {
    updateSamlConfiguration.ssoEndpoint = '';
    updateSamlConfiguration.publicCertificate = '';
    updateSamlConfiguration.signRequest = false;
  }
  updateSamlConfiguration.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    samlConfiguration: updateSamlConfiguration,
    error: undefined,
    [loaderKey]: false
  }));
  callback == null ? void 0 : callback(true);
}
function* validateSSODomainMock({
  payload: {
    callback
  } = {}
}) {
  const samlConfiguration = _dummy.ssoStateDemo.samlConfiguration;
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    error: undefined,
    saving: true
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    samlConfiguration: (0, _extends2.default)({}, samlConfiguration, {
      validated: true
    }),
    error: undefined,
    saving: false
  }));
  callback == null ? void 0 : callback(true);
}
function* getAuthorizationRolesMock() {
  yield (0, _utils.delay)();
  const data = {
    roleIds: ['1', '2', '3']
  };
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    authorizationRoles: data.roleIds,
    error: undefined
  }));
}
function* updateAuthorizationRolesMock({
  payload: {
    callback,
    authorizationRoles
  }
}) {
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    error: undefined,
    saving: true
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setSSOState({
    authorizationRoles,
    error: undefined,
    saving: false
  }));
  callback == null ? void 0 : callback(true);
}
function* ssoSagasMock() {
  yield (0, _effects.takeEvery)(_reducer.actions.loadSSOConfigurations, loadSSOConfigurationsMock);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSSOConfigurations, saveSSOConfigurationsMock);
  yield (0, _effects.takeEvery)(_reducer.actions.saveSSOConfigurationsFile, saveSSOConfigurationsFileMock);
  yield (0, _effects.takeEvery)(_reducer.actions.validateSSODomain, validateSSODomainMock);
  yield (0, _effects.takeEvery)(_reducer.actions.loadSSOAuthorizationRoles, getAuthorizationRolesMock);
  yield (0, _effects.takeEvery)(_reducer.actions.updateSSOAuthorizationRoles, updateAuthorizationRolesMock);
}