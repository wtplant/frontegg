"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.socialLoginsReducer = exports.socialLoginsActions = exports.socialLoginState = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../utils");
var _constants = require("../../constants");
const socialLoginState = {
  firstLoad: true,
  loading: false,
  error: ''
};
exports.socialLoginState = socialLoginState;
const reducers = {
  setSocialLoginsState: (0, _utils.typeReducerForKey)('socialLoginState'),
  resetSocialLoginsState: (0, _utils.resetStateByKey)('socialLoginState', {
    socialLoginState
  })
};
exports.socialLoginsReducer = reducers;
const actions = {
  loadSocialLoginsConfiguration: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSocialLoginsConfiguration`),
  loadSocialLoginsConfigurationV2: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadSocialLoginsConfigurationV2`, payload => ({
    payload
  })),
  loginViaSocialLogin: (0, _toolkit.createAction)(`${_constants.authStoreName}/loginViaSocialLogin`, payload => ({
    payload
  })),
  setSocialLoginError: (0, _toolkit.createAction)(`${_constants.authStoreName}/setSocialLoginError`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.socialLoginsActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};