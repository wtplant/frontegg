"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.accountSettingsSaga = accountSettingsSaga;
exports.accountSettingsSagaMock = accountSettingsSagaMock;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _reducer = require("../reducer");
var _restApi = require("@frontegg/rest-api");
var _utils = require("../utils");
var _utils2 = require("../../utils");
function* saveAccountSettings({
  payload
}) {
  try {
    var _payload$callback;
    yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
      loading: true
    }));
    const {
      accountSettingsState
    } = yield (0, _effects.select)(state => state.auth);
    const {
      address,
      timezone,
      dateFormat,
      timeFormat,
      currency,
      logo
    } = accountSettingsState;
    const body = yield (0, _effects.call)(_restApi.api.accountSettings.updateSettings, (0, _extends2.default)({
      address,
      timezone,
      dateFormat,
      timeFormat,
      currency,
      logo
    }, payload));
    yield (0, _effects.put)(_reducer.actions.setAccountSettingsState((0, _extends2.default)({}, body, {
      loading: false
    })));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, body);
  } catch (e) {
    var _payload$callback2;
    yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
      loading: false,
      error: (0, _utils2.errorHandler)(e)
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e);
  }
}
function* loadAccountSettings({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
    loading: !(payload != null && payload.silentLoading),
    error: null
  }));
  try {
    const body = yield (0, _effects.call)(_restApi.api.accountSettings.getSettings);
    yield (0, _effects.put)(_reducer.actions.setAccountSettingsState((0, _extends2.default)({}, body, {
      loading: false
    })));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
      loading: false,
      error: (0, _utils2.errorHandler)(e)
    }));
  }
}
function* accountSettingsSaga() {
  yield (0, _effects.takeLeading)(_reducer.actions.saveAccountSettings, saveAccountSettings);
  yield (0, _effects.takeLeading)(_reducer.actions.loadAccountSettings, loadAccountSettings);
}

/*********************************
 *  Preview Sagas
 *********************************/

function* saveAccountSettingsMock({
  payload
}) {
  var _payload$callback3;
  yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
    loading: true
  }));
  yield (0, _utils.delay)();
  const {
    accountSettingsState
  } = yield (0, _effects.select)(state => state.auth);
  const {
    address,
    timezone,
    dateFormat,
    timeFormat,
    currency,
    logo
  } = accountSettingsState;
  const body = (0, _extends2.default)({
    address,
    timezone,
    dateFormat,
    timeFormat,
    currency,
    logo
  }, payload);
  yield (0, _effects.put)(_reducer.actions.setAccountSettingsState((0, _extends2.default)({}, body, {
    loading: false
  })));
  (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, body);
}
function* loadAccountSettingsMock({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
    loading: !(payload != null && payload.silentLoading),
    error: null
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setAccountSettingsState({
    address: 'Tel-aviv',
    timezone: 'Asia/Jerusalem',
    dateFormat: 'DD/MM/YYYY',
    timeFormat: 'HH:mm',
    currency: 'USD',
    loading: false
  }));
}
function* accountSettingsSagaMock() {
  yield (0, _effects.takeLeading)(_reducer.actions.saveAccountSettings, saveAccountSettingsMock);
  yield (0, _effects.takeLeading)(_reducer.actions.loadAccountSettings, loadAccountSettingsMock);
}