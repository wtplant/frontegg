"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.teamState = exports.teamReducers = exports.teamActions = void 0;
var _toolkit = require("@reduxjs/toolkit");
var _utils = require("../utils");
var _constants = require("../../constants");
const teamState = {
  loaders: {},
  pageOffset: 0,
  pageSize: 20,
  errors: {},
  users: [],
  allUsers: [],
  roles: [],
  permissions: [],
  totalPages: 0,
  shouldShowSubTenantUsersIfReseller: false,
  allUsersQueryParams: {
    _filter: null,
    _offset: 0,
    _limit: 20,
    _order: 'DESC',
    _sortBy: 'name'
  },
  addUserDialogState: {
    loading: false,
    open: false
  },
  deleteUserDialogState: {
    loading: false,
    open: false
  },
  lockUserDialogState: {
    loading: false,
    open: false
  }
};
exports.teamState = teamState;
const reducers = {
  setTeamLoader: (0, _utils.loadersReducerForKey)('teamState'),
  setTeamError: (0, _utils.errorsReducerForKey)('teamState'),
  setTeamState: (0, _utils.typeReducerForKey)('teamState'),
  resetTeamState: (0, _utils.resetStateByKey)('teamState', {
    teamState
  })
};
exports.teamReducers = reducers;
const actions = {
  loadUsersV2: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadUsersV2`, payload => ({
    payload
  })),
  loadUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadUsers`, payload => ({
    payload
  })),
  loadAllSubTenantsUsers: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadAllSubTenantsUsers`, payload => ({
    payload
  })),
  loadRoles: (0, _toolkit.createAction)(`${_constants.authStoreName}/loadRoles`, payload => ({
    payload
  })),
  addUser: (0, _toolkit.createAction)(`${_constants.authStoreName}/addUser`, payload => ({
    payload
  })),
  addUsersBulk: (0, _toolkit.createAction)(`${_constants.authStoreName}/addUsersBulk`, payload => ({
    payload
  })),
  addUserToSubTenants: (0, _toolkit.createAction)(`${_constants.authStoreName}/addUserToSubTenants`, payload => ({
    payload
  })),
  updateUser: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateUser`, payload => ({
    payload
  })),
  deleteUser: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteUser`, payload => ({
    payload
  })),
  setUserRolesForSubTenants: (0, _toolkit.createAction)(`${_constants.authStoreName}/setUserRolesForSubTenants`, payload => ({
    payload
  })),
  deleteUserFromSubTenants: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteUserFromSubTenants`, payload => ({
    payload
  })),
  lockUser: (0, _toolkit.createAction)(`${_constants.authStoreName}/lockUser`, payload => ({
    payload
  })),
  resendActivationLink: (0, _toolkit.createAction)(`${_constants.authStoreName}/resendActivationLink`, payload => ({
    payload
  })),
  resendInvitationLink: (0, _toolkit.createAction)(`${_constants.authStoreName}/resendInvitationLink`, payload => ({
    payload
  })),
  resendInvitationEmail: (0, _toolkit.createAction)(`${_constants.authStoreName}/resendInvitationEmail`, payload => ({
    payload
  })),
  resendInvitationLinkToAllSubTenants: (0, _toolkit.createAction)(`${_constants.authStoreName}/resendInvitationLinkToAllSubTenants`, payload => ({
    payload
  })),
  getTemporaryUsersConfig: (0, _toolkit.createAction)(`${_constants.authStoreName}/getTemporaryUsersConfig`),
  updateUserExpirationTime: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateUserExpirationTime`, payload => ({
    payload
  })),
  setUserAsPermanent: (0, _toolkit.createAction)(`${_constants.authStoreName}/setUserAsPermanent`, payload => ({
    payload
  })),
  getInvitationLink: (0, _toolkit.createAction)(`${_constants.authStoreName}/getInvitationLink`),
  createInvitationLink: (0, _toolkit.createAction)(`${_constants.authStoreName}/createInvitationLink`, payload => ({
    payload
  })),
  updateInvitationLink: (0, _toolkit.createAction)(`${_constants.authStoreName}/updateInvitationLink`, payload => ({
    payload
  })),
  deleteInvitationLink: (0, _toolkit.createAction)(`${_constants.authStoreName}/deleteInvitationLink`, payload => ({
    payload
  })),
  openAddUserDialog: (0, _toolkit.createAction)(`${_constants.authStoreName}/openAddUserDialog`, payload => ({
    payload
  })),
  closeAddUserDialog: (0, _toolkit.createAction)(`${_constants.authStoreName}/closeAddUserDialog`, payload => ({
    payload
  })),
  openDeleteUserDialog: (0, _toolkit.createAction)(`${_constants.authStoreName}/openDeleteUserDialog`, payload => ({
    payload
  })),
  closeDeleteUserDialog: (0, _toolkit.createAction)(`${_constants.authStoreName}/closeDeleteUserDialog`, payload => ({
    payload
  })),
  openLockUserDialog: (0, _toolkit.createAction)(`${_constants.authStoreName}/openLockUserDialog`, payload => ({
    payload
  })),
  closeLockUserDialog: (0, _toolkit.createAction)(`${_constants.authStoreName}/closeLockUserDialog`, payload => ({
    payload
  }))
};

/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
exports.teamActions = actions;
// noinspection JSUnusedLocalSymbols
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
const Matcher = {};