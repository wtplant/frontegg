"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.changePhoneNumber = changePhoneNumber;
exports.resetPhoneNumberSagas = resetPhoneNumberSagas;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _interfaces = require("./interfaces");
var _interfaces2 = require("../LoginState/interfaces");
var _utils = require("../../utils");
const _excluded = ["callback"],
  _excluded2 = ["callback"],
  _excluded3 = ["callback"];
function* resetPhoneNumber(_ref) {
  let {
      payload: {
        callback
      }
    } = _ref,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
    loading: true
  }));
  try {
    const res = yield (0, _effects.call)(_restApi.api.auth.resetPhoneNumber, body);
    yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
      loading: false,
      error: undefined,
      resetPhoneNumberToken: res.resetPhoneNumberToken,
      step: _interfaces.ResetPhoneNumberStep.VerifyResetPhoneNumber
    }));
    yield (0, _effects.put)(_reducer.actions.setLoginState({
      email: body.email
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* verifyResetPhoneNumber(_ref2) {
  let {
      payload: {
        callback
      }
    } = _ref2,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);
  yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
    loading: true
  }));
  try {
    const res = yield (0, _effects.call)(_restApi.api.auth.verifyResetPhoneNumber, body);
    yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
      loading: false,
      error: undefined,
      changePhoneNumberToken: res.changePhoneNumberToken,
      step: _interfaces.ResetPhoneNumberStep.ChangePhoneNumber
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* changePhoneNumber(_ref3) {
  let {
      payload: {
        callback
      }
    } = _ref3,
    body = (0, _objectWithoutPropertiesLoose2.default)(_ref3.payload, _excluded3);
  yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
    loading: true
  }));
  try {
    const {
      onRedirectTo,
      routes
    } = yield (0, _effects.select)(({
      auth: {
        onRedirectTo,
        routes
      }
    }) => ({
      onRedirectTo,
      routes
    }));
    yield (0, _effects.call)(_restApi.api.auth.changePhoneNumber, {
      phoneNumber: body.phoneNumber,
      changePhoneNumberToken: body.changePhoneNumberToken
    });
    yield (0, _effects.put)(_reducer.actions.setLoginState({
      step: _interfaces2.LoginStep.loginWithSmsOtc
    }));
    yield (0, _effects.put)(_reducer.actions.passwordlessPreLogin({
      type: _restApi.AuthStrategyEnum.SmsCode,
      email: body.email,
      recaptchaToken: body.recaptchaToken
    }));
    onRedirectTo(routes.loginUrl);
    yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setResetPhoneNumberState({
      loading: false,
      error: (0, _utils.errorHandler)(e)
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* resetPhoneNumberSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.resetPhoneNumber, resetPhoneNumber);
  yield (0, _effects.takeLeading)(_reducer.actions.verifyResetPhoneNumber, verifyResetPhoneNumber);
  yield (0, _effects.takeLeading)(_reducer.actions.changePhoneNumber, changePhoneNumber);
}