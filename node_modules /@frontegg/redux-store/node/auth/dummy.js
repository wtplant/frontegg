"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usersDemoV3 = exports.usersDemo = exports.userTeamDemoV3 = exports.userTeamDemo2V3 = exports.userTeamDemo2 = exports.userTeamDemo = exports.userSubTenantDemo = exports.userProfileDemo = exports.userDemo = exports.tenantsDemo = exports.ssoStateDemo = exports.sessionsMock = exports.sessionsConfigDummies = exports.securityCenterUnenrolledMfaUsersMock = exports.securityCenterRecommendationsMock = exports.securityCenterInsightsMock = exports.securityCenterInactivityPasswordUsersMock = exports.securityCenterBreachedPasswordUsersMock = exports.samlMetadataDemo = exports.samlConfigurationDemo = exports.rolesDemo = exports.rolesAdminViewerDemo = exports.rolePermissionDemo = exports.roleDemo = exports.publicSecurityPolicy = exports.profileStateDemo = exports.policyPasswordHistoryDemo = exports.policyMfaDemo = exports.policyLockoutDemo = exports.policyDemo = exports.permissionsDemo = exports.dummyIps = exports.dummyIpConfig = exports.apiTokensDataTenantDemo = exports.apiTokensDataDemo = exports.allUsersDemo = exports.allGroupsDummy = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _restApi = require("@frontegg/rest-api");
var _interfaces = require("./ApiTokensState/interfaces");
const apiTokensDataDemo = {
  clientId: 'CLIENT_ID_16806d3d-8fc3-4450-be97-abdaf66b723e',
  secret: 'SECRET_16806d3d-8fc3-4450-be97-abdaf66b723e',
  createdAt: 'createdAt',
  description: 'Demo API Token (preview only)'
};
exports.apiTokensDataDemo = apiTokensDataDemo;
const apiTokensDataTenantDemo = (0, _extends2.default)({}, apiTokensDataDemo, {
  roleIds: [],
  tenantId: 'my-tenant-id',
  createdByUserId: 'createdByUserId'
});
exports.apiTokensDataTenantDemo = apiTokensDataTenantDemo;
const rolesAdminViewerDemo = [{
  id: 'a040dcf6-b907-4e83-9970-6bd23c88fd40',
  key: 'ReadOnly',
  name: 'Read Only',
  description: null,
  isDefault: false,
  createdAt: new Date(),
  updatedAt: new Date(),
  permissions: ['5b7dafe6-12a1-402b-9082-8eb2777cfcd8', 'da1d1990-c99c-4086-b845-2d465de3227b'],
  tenantId: 'tenantId',
  vendorId: 'vendorId'
}, {
  id: 'b43b2c4b-e056-4eec-8c55-d200a475bbc0',
  key: 'Admin',
  name: 'Admin',
  description: null,
  isDefault: true,
  createdAt: new Date(),
  updatedAt: new Date(),
  permissions: ['502b112e-50fd-4e8d-875e-3abda628d94a', 'da015508-7cb1-4dcd-9436-d0518a2ecd21'],
  tenantId: 'tenantId',
  vendorId: 'vendorId'
}];
exports.rolesAdminViewerDemo = rolesAdminViewerDemo;
const roleDemo = [{
  id: 'roleId',
  key: 'admin',
  isDefault: false,
  name: 'Admin',
  description: null,
  permissions: ['adminPermissionId'],
  tenantId: 'tenantId',
  vendorId: 'vendorId',
  createdAt: new Date(),
  updatedAt: new Date()
}];
exports.roleDemo = roleDemo;
const rolePermissionDemo = [{
  id: 'adminPermissionId',
  key: 'fe.*',
  name: 'General Admin',
  description: 'description',
  categoryId: 'category',
  fePermission: true,
  createdAt: new Date(),
  updatedAt: new Date(),
  roleIds: []
}];
exports.rolePermissionDemo = rolePermissionDemo;
const userProfileDemo = {
  sub: '',
  tenants: [],
  id: 'testId',
  name: 'Demo User Name',
  email: 'demo-user@frontegg.com',
  mfaEnrolled: true,
  profilePictureUrl: 'https://www.gravatar.com/avatar/42b2ad2bad6fc9b9db5086dfcf8072ac?d=https://ui-avatars.com/api/fe/128/random?t=1617261890875?t=1617261917434',
  roles: roleDemo,
  permissions: rolePermissionDemo,
  tenantId: 'my-tenant-id',
  tenantIds: ['my-tenant-id'],
  activatedForTenant: true,
  metadata: JSON.stringify({
    phoneNumber: '+972-54123456',
    jobTitle: 'Developer',
    address: {
      city: 'Tel Aviv',
      country: 'Israel'
    }
  }),
  verified: false
};
exports.userProfileDemo = userProfileDemo;
const userDemo = (0, _extends2.default)({}, userProfileDemo, {
  accessToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MTY5YmY0Zi02YmI5LTQ5NGMtOGNkZS05MDc4NDQ0NWY4MDciLCJuYW1lIjoiRHVtbXkgVXNlciIsImVtYWlsIjoiZHVtbXlAZnJvbnRlZ2cuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm1ldGFkYXRhIjp7fSwicm9sZXMiOlsiYWRtaW4iXSwicGVybWlzc2lvbnMiOlsiZmUuKiJdLCJ0ZW5hbnRJZCI6Im15LXRlbmFudC1pZCIsInRlbmFudElkcyI6WyJteS10ZW5hbnQtaWQiXSwicHJvZmlsZVBpY3R1cmVVcmwiOiJodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLzQyYjJhZDJiYWQ2ZmM5YjlkYjUwODZkZmNmODA3MmFjP2Q9aHR0cHM6Ly91aS1hdmF0YXJzLmNvbS9hcGkvZmUvMTI4L3JhbmRvbT90PTE2MTcyNjE4OTA4NzU_dD0xNjE3MjYxOTE3NDM0IiwidHlwZSI6InVzZXJUb2tlbiIsImlhdCI6MTYxNzkwNjMyNCwiZXhwIjoxNjE3OTkyNzI0LCJpc3MiOiJmcm9udGVnZyJ9.paaXLkpWEWbQmUtoK2P8IwXCxK4WJp7XhXonvzF8g1I',
  expiresIn: 86400,
  mfaRequired: false,
  refreshToken: 'refresh-token-dummy-de39dc9c-9d22-4852-b7f5-c3c0aa613b58',
  type: 'userToken',
  iat: 1617906324,
  exp: 1617992724,
  iss: 'frontegg',
  email_verified: true
});
exports.userDemo = userDemo;
const profileStateDemo = {
  loading: false,
  error: undefined,
  saving: true,
  profile: userProfileDemo
};
exports.profileStateDemo = profileStateDemo;
const policyDemo = {
  id: 'id',
  enforceMFAType: 'DontForce',
  createdAt: new Date(),
  updatedAt: new Date(),
  allowOverrideEnforcePasswordHistory: true,
  allowOverridePasswordComplexity: false,
  allowOverridePasswordExpiration: false,
  allowSignups: true,
  apiTokensEnabled: true,
  cookieSameSite: 'cookieSameSite',
  defaultRefreshTokenExpiration: 0,
  defaultTokenExpiration: 1,
  publicKey: 'publicKey'
};
exports.policyDemo = policyDemo;
const publicSecurityPolicy = {
  allowSignups: true,
  allowNotVerifiedUsersLogin: false,
  apiTokensEnabled: true,
  forcePermissions: false,
  authStrategy: _restApi.AuthStrategyEnum.EmailAndPassword,
  machineToMachineAuthStrategy: _interfaces.MachineToMachineAuthStrategy.ClientCredentials
};
exports.publicSecurityPolicy = publicSecurityPolicy;
const policyMfaDemo = {
  id: 'id',
  enforceMFAType: 'DontForce',
  createdAt: new Date(),
  updatedAt: new Date()
};
exports.policyMfaDemo = policyMfaDemo;
const policyLockoutDemo = {
  id: 'id',
  enabled: true,
  maxAttempts: 1,
  createdAt: new Date(),
  updatedAt: new Date()
};
exports.policyLockoutDemo = policyLockoutDemo;
const policyPasswordHistoryDemo = {
  id: 'id',
  enabled: true,
  historySize: 1,
  createdAt: new Date(),
  updatedAt: new Date()
};
exports.policyPasswordHistoryDemo = policyPasswordHistoryDemo;
const samlConfigurationDemo = {
  enabled: true,
  domain: 'domain',
  validated: true,
  generatedVerification: 'generatedVerification',
  ssoEndpoint: 'ssoEndpoint',
  publicCertificate: 'publicCertificate',
  signRequest: true,
  createdAt: new Date(),
  updatedAt: new Date(),
  acsUrl: undefined,
  spEntityId: undefined,
  oidcClientId: undefined,
  oidcSecret: undefined,
  type: undefined
};
exports.samlConfigurationDemo = samlConfigurationDemo;
const samlMetadataDemo = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  properties: [],
  vendorId: 'vendorId',
  entityName: 'saml',
  isActive: true,
  configuration: {
    acsUrl: 'acsUrl',
    spEntityId: 'spEntityId'
  }
};
exports.samlMetadataDemo = samlMetadataDemo;
const rolesDemo = [{
  id: 'id',
  description: 'description',
  key: 'key',
  name: 'name',
  permissions: [],
  permissionLevel: 1
}];
exports.rolesDemo = rolesDemo;
const ssoStateDemo = {
  firstLoad: false,
  loading: false,
  error: undefined,
  saving: false,
  samlConfiguration: samlConfigurationDemo,
  roles: rolesDemo,
  authorizationRoles: [],
  errors: {},
  loaders: {},
  ssoConfigurations: []
};
exports.ssoStateDemo = ssoStateDemo;
const permissionsDemo = [{
  description: 'string',
  fePermission: true,
  id: 'id',
  key: 'key',
  name: 'name',
  roleIds: [],
  createdAt: new Date(),
  updatedAt: new Date(),
  categoryId: 'categoryId'
}];
exports.permissionsDemo = permissionsDemo;
const userTeamDemo2 = {
  id: 'id2',
  email: 'demo-user2@frontegg.com',
  name: 'Demo User Name2',
  phone: undefined,
  profileImage: undefined,
  profileImageUrl: undefined,
  tenantId: 'tenantId',
  vendorId: 'vendorId',
  roleIds: [],
  activatedForTenant: true,
  verified: false,
  createdAt: new Date().toISOString(),
  customData: undefined,
  lastLogin: undefined,
  mfaEnabled: undefined,
  roles: [rolesAdminViewerDemo[0]],
  groups: [{
    id: 'id2',
    name: 'Developers',
    color: '#03A9F4',
    roles: [rolesAdminViewerDemo[0]],
    managedBy: _restApi.GroupManagedByEnum.FRONTEGG
  }]
}; // TODO add verified to ITeamUser
exports.userTeamDemo2 = userTeamDemo2;
const userTeamDemo2V3 = {
  id: userTeamDemo2.id,
  email: userTeamDemo2.email,
  name: userTeamDemo2.name,
  phoneNumber: undefined,
  profileImage: undefined,
  tenantId: 'tenantId',
  activatedForTenant: true,
  createdAt: new Date(2022, 4, 1),
  verified: true,
  lastLogin: new Date(2022, 5, 25),
  mfaEnrolled: false,
  roles: [rolesAdminViewerDemo[1]],
  tenantIds: [],
  metadata: '',
  sub: '',
  tenants: []
};
exports.userTeamDemo2V3 = userTeamDemo2V3;
const userTeamDemo = {
  id: 'id',
  email: 'demo-user@frontegg.com',
  name: 'Demo User Name',
  phone: undefined,
  profileImage: undefined,
  profileImageUrl: undefined,
  tenantId: 'tenantId',
  vendorId: 'vendorId',
  roleIds: [],
  activatedForTenant: true,
  createdAt: new Date(2022, 4, 1).toISOString(),
  verified: true,
  customData: undefined,
  lastLogin: new Date(2022, 5, 25).toISOString(),
  mfaEnabled: undefined,
  roles: [rolesAdminViewerDemo[1]],
  groups: [{
    id: 'id1',
    name: 'Designers',
    color: '#E1F5E2',
    roles: [rolesAdminViewerDemo[0]],
    managedBy: _restApi.GroupManagedByEnum.FRONTEGG
  }]
};
exports.userTeamDemo = userTeamDemo;
const userTeamDemoV3 = {
  id: userTeamDemo.id,
  email: userTeamDemo.email,
  name: userTeamDemo.name,
  phoneNumber: undefined,
  profileImage: undefined,
  tenantId: 'tenantId',
  activatedForTenant: true,
  createdAt: new Date(2022, 4, 1),
  verified: true,
  lastLogin: new Date(2022, 5, 25),
  mfaEnrolled: false,
  roles: [rolesAdminViewerDemo[1]],
  tenantIds: [],
  metadata: '',
  sub: '',
  tenants: []
};
exports.userTeamDemoV3 = userTeamDemoV3;
const userSubTenantDemo = {
  metadata: '',
  mfaEnrolled: false,
  provider: '',
  sub: '',
  tenantIds: [],
  tenants: [],
  verified: false,
  id: 'id',
  email: 'email',
  name: 'name',
  tenantId: 'tenantId',
  createdAt: new Date()
};
exports.userSubTenantDemo = userSubTenantDemo;
const usersDemo = [userTeamDemo, userTeamDemo2];
exports.usersDemo = usersDemo;
const usersDemoV3 = [userTeamDemoV3, userTeamDemo2V3];
exports.usersDemoV3 = usersDemoV3;
const allUsersDemo = [userSubTenantDemo];
exports.allUsersDemo = allUsersDemo;
const tenantsDemo = [{
  id: 'my-tenant-id',
  isReseller: false,
  name: 'Frontegg demo',
  deletedAt: null,
  metadata: undefined,
  tenantId: 'my-tenant-id',
  vendorId: 'vendorId',
  createdAt: new Date(),
  updatedAt: new Date(),
  address: undefined,
  timezone: undefined,
  dateFormat: undefined,
  timeFormat: undefined,
  currency: undefined,
  logo: undefined
}];
exports.tenantsDemo = tenantsDemo;
const sessionsMock = [{
  id: `laptop`,
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15',
  createdAt: new Date(),
  ipAddress: '190.194.88.251',
  current: true
}, {
  id: `iphone`,
  userAgent: 'Mozilla/5.0 (iPhone; CPU iPhone OS 15_2_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1',
  createdAt: new Date(Date.now() - 10000),
  ipAddress: '191.49.203.21'
}, {
  id: `tablet`,
  userAgent: 'Mozilla/5.0 (Linux; Android 6.0.1; SGP771 Build/32.2.A.0.253; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.98 Safari/537.36',
  createdAt: new Date(Date.now() - 30000),
  ipAddress: '130.19.196.136'
}, {
  id: `anotherlaptop`,
  userAgent: 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15',
  createdAt: new Date(Date.now() - 1002232300),
  ipAddress: '2.228.163.92'
}];
exports.sessionsMock = sessionsMock;
const sessionsConfigDummies = {
  sessionConcurrentConfiguration: {
    isActive: true,
    maxSessions: 10
  },
  sessionIdleTimeoutConfiguration: {
    isActive: true,
    timeout: 3600
  },
  sessionTimeoutConfiguration: {
    isActive: true,
    timeout: 7776000
  }
};
exports.sessionsConfigDummies = sessionsConfigDummies;
const dummyIpConfig = {
  isActive: true,
  strategy: _restApi.RestrictionType.ALLOW
};
exports.dummyIpConfig = dummyIpConfig;
const dummyIps = [{
  updatedAt: new Date(),
  createdAt: new Date(),
  id: '1',
  ip: '255.255.255.255',
  isActive: true,
  strategy: _restApi.RestrictionType.ALLOW,
  description: 'My IP'
}, {
  updatedAt: new Date(),
  createdAt: new Date(),
  id: '2',
  ip: '255.255.255.254',
  isActive: true,
  strategy: _restApi.RestrictionType.ALLOW,
  description: 'IP 2'
}, {
  updatedAt: new Date(),
  createdAt: new Date(),
  id: '3',
  ip: '255.255.255.253',
  isActive: true,
  strategy: _restApi.RestrictionType.BLOCK,
  description: 'IP 3'
}, {
  updatedAt: new Date(),
  createdAt: new Date(),
  id: '4',
  ip: '255.255.255.253',
  isActive: true,
  strategy: _restApi.RestrictionType.BLOCK,
  description: 'IP 4'
}];
exports.dummyIps = dummyIps;
const generateGroupUsers = count => {
  const users = [];
  Array.from({
    length: count
  }).forEach((_, i) => {
    users.push((0, _extends2.default)({}, userTeamDemo, {
      name: 'Demo User',
      id: `id${i}`,
      profilePictureUrl: null,
      createdAt: new Date()
    }));
  });
  return users;
};
const generateRoleByName = roleName => {
  return {
    id: 'b43b2c4b-e056-4eec-8c55-d200a475bbc0' + roleName,
    key: roleName,
    name: roleName,
    description: null,
    isDefault: true,
    createdAt: new Date(),
    updatedAt: new Date(),
    permissions: [],
    tenantId: 'tenantId',
    vendorId: 'vendorId'
  };
};
const allGroupsDummy = [{
  id: 'id1',
  name: 'Designers',
  color: '#E1F5E2',
  description: 'The whole design team',
  users: generateGroupUsers(6),
  roles: [generateRoleByName('Editor')],
  metadata: '{"lastTermsCheck":"2022-08-16T10:31:11.270Z"}',
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id2',
  name: 'Developers',
  color: '#03A9F4',
  description: 'All frontend and backend developers',
  users: generateGroupUsers(44),
  roles: [generateRoleByName('Editor')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id3',
  name: 'Product',
  color: '#E1583E',
  description: 'PMs and team leads',
  users: generateGroupUsers(8),
  roles: [generateRoleByName('Viewer')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id4',
  name: 'Management',
  color: '#9AE0FF',
  description: 'Executives',
  users: generateGroupUsers(5),
  roles: [generateRoleByName('Admin')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id5',
  name: 'Sales',
  color: '#ED8E7C',
  users: generateGroupUsers(21),
  description: 'BDR, AE, and inside sales',
  roles: [generateRoleByName('Viewer')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id6',
  name: 'Support',
  color: '#A79D7B',
  users: generateGroupUsers(23),
  description: 'Dev success and customer success',
  roles: [generateRoleByName('Admin')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id7',
  name: 'Marketing',
  color: '#2CA744',
  users: generateGroupUsers(10),
  description: 'The marketing department',
  roles: [generateRoleByName('Viewer')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id8',
  name: 'HR',
  color: '#EAE1C2',
  users: generateGroupUsers(4),
  description: 'Human resources',
  roles: [generateRoleByName('Viewer')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id9',
  name: 'Finance',
  color: '#5587C0',
  users: generateGroupUsers(3),
  roles: [generateRoleByName('Viewer')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id10',
  name: 'Operations',
  color: '#B1CAE7',
  users: generateGroupUsers(8),
  roles: [generateRoleByName('Editor')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}, {
  id: 'id11',
  name: 'Legal',
  color: '#2CA744',
  users: generateGroupUsers(4),
  roles: [generateRoleByName('Viewer')],
  managedBy: _restApi.GroupManagedByEnum.FRONTEGG
}];
exports.allGroupsDummy = allGroupsDummy;
const securityCenterRecommendationsMock = {
  scoring: {
    score: 79
  },
  recommendations: {
    items: [{
      code: _restApi.RecommendationCode.FORCE_MFA,
      severity: _restApi.RecommendationSeverity.WARNING,
      category: _restApi.SecurityCategory.MFA
    }, {
      code: _restApi.RecommendationCode.ENABLE_FORCE_RELOGIN,
      severity: _restApi.RecommendationSeverity.WARNING,
      category: _restApi.SecurityCategory.SESSIONS
    }]
  }
};
exports.securityCenterRecommendationsMock = securityCenterRecommendationsMock;
const securityCenterInsightsMock = {
  insights: {
    items: [{
      category: _restApi.SecurityCategory.MFA,
      code: _restApi.InsightCode.PARTIALLY_FORCED_MFA,
      metadata: {
        totalUsers: 2,
        mfa: {
          enrolledUsersCount: 1
        }
      }
    }, {
      category: _restApi.SecurityCategory.SESSIONS,
      code: _restApi.InsightCode.PARTIAL_SESSION_SETTINGS,
      metadata: {
        totalUsers: 2,
        sessions: {
          idleTimeoutRecommendation: 1800
        }
      }
    }, {
      category: _restApi.SecurityCategory.PASSWORD,
      code: _restApi.InsightCode.IMPROVE_PASSWORD_HISTORY_POLICY,
      metadata: {
        password: {
          userLockoutRecommendation: 5,
          historyRecommendations: 5
        }
      }
    }, {
      category: _restApi.SecurityCategory.DOMAIN,
      code: _restApi.InsightCode.NO_IP_RESTRICTIONS,
      metadata: {
        restrictions: {
          ipsCount: 1,
          domainsCount: 1
        }
      }
    }]
  }
};
exports.securityCenterInsightsMock = securityCenterInsightsMock;
const securityCenterBreachedPasswordUsersMock = {
  users: usersDemoV3,
  totalUsersItems: 2,
  totalUsersPages: 1,
  usersPageOffset: 0
};
exports.securityCenterBreachedPasswordUsersMock = securityCenterBreachedPasswordUsersMock;
const securityCenterInactivityPasswordUsersMock = {
  users: [usersDemoV3[0]],
  totalUsersItems: 1,
  totalUsersPages: 1,
  usersPageOffset: 0,
  queryParams: {
    _maxInactiveSeconds: 7776000
  }
};
exports.securityCenterInactivityPasswordUsersMock = securityCenterInactivityPasswordUsersMock;
const securityCenterUnenrolledMfaUsersMock = {
  users: [usersDemoV3[1]],
  totalUsersItems: 1,
  totalUsersPages: 1,
  usersPageOffset: 0
};
exports.securityCenterUnenrolledMfaUsersMock = securityCenterUnenrolledMfaUsersMock;