"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.profileSagas = profileSagas;
exports.profileSagasMock = profileSagasMock;
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _effects = require("redux-saga/effects");
var _restApi = require("@frontegg/rest-api");
var _reducer = require("../reducer");
var _dummy = require("../dummy");
var _utils = require("../utils");
var _base64ToFormData = require("../Helpers/base64ToFormData");
var _utils2 = require("../../utils");
const _excluded = ["callback", "profilePictureUrl"],
  _excluded2 = ["callback", "profilePictureUrl"];
function* loadProfile() {
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: true
  }));
  try {
    const profile = yield (0, _effects.retry)(3, 2000, _restApi.api.teams.getProfile);
    const currentUser = yield (0, _effects.select)(state => state.auth.user);
    _reducer.actions.setUser((0, _extends2.default)({}, currentUser, profile));
    yield (0, _effects.put)(_reducer.actions.setProfileState({
      profile,
      loading: false
    }));
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setProfileState({
      loading: false,
      error: (0, _utils2.errorHandler)(e)
    }));
  }
}
function* saveProfile(_ref) {
  let {
      payload: {
        callback,
        profilePictureUrl
      }
    } = _ref,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref.payload, _excluded);
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    saving: true,
    error: null,
    loading: true
  }));
  try {
    const oldProfileData = yield (0, _effects.select)(state => state.auth.profileState.profile);
    let newProfilePictureUrl = oldProfileData.profilePictureUrl;
    if (profilePictureUrl !== oldProfileData.profilePictureUrl && profilePictureUrl) {
      const matchResult = (profilePictureUrl || '').match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
      if (matchResult) {
        const profileImage = (0, _base64ToFormData.base64ToFormData)(profilePictureUrl, 'image');
        if (profileImage) {
          newProfilePictureUrl = yield (0, _effects.call)(_restApi.api.teams.updateProfileImage, profileImage);
          const imageTimeStamp = Date.now().toString();
          const urlTemplate = new URL(newProfilePictureUrl);
          urlTemplate.searchParams.set('t', imageTimeStamp);
          newProfilePictureUrl = urlTemplate.href;
        }
      }
    }
    const newProfileData = (0, _extends2.default)({}, oldProfileData, payload, {
      profilePictureUrl: newProfilePictureUrl
    });
    //TODO: change the payload type to IUpdateUserProfile which is the right type to send, currently we send more data then actually needed.
    const profile = yield (0, _effects.call)(_restApi.api.users.updateUserProfileV2, newProfileData);
    const currentUser = yield (0, _effects.select)(state => state.auth.user);
    yield (0, _effects.put)(_reducer.actions.setUser((0, _extends2.default)({}, currentUser, profile)));
    yield (0, _effects.put)(_reducer.actions.setProfileState({
      profile,
      saving: false,
      loading: false
    }));
    callback == null ? void 0 : callback(newProfileData);
  } catch (e) {
    yield (0, _effects.put)(_reducer.actions.setProfileState({
      saving: false,
      error: (0, _utils2.errorHandler)(e),
      loading: false
    }));
    callback == null ? void 0 : callback(null, e);
  }
}
function* changePassword({
  payload
}) {
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: true
  }));
  try {
    var _payload$callback;
    yield (0, _effects.call)(_restApi.api.teams.changePassword, payload);
    yield (0, _effects.put)(_reducer.actions.setProfileState({
      loading: false,
      error: undefined
    }));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e) {
    var _payload$callback2;
    yield (0, _effects.put)(_reducer.actions.setProfileState({
      loading: false,
      error: (0, _utils2.errorHandler)(e)
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e);
  }
}
function* profileSagas() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadProfile, loadProfile);
  yield (0, _effects.takeEvery)(_reducer.actions.saveProfile, saveProfile);
  yield (0, _effects.takeEvery)(_reducer.actions.changePassword, changePassword);
}

/*********************************
 *  Preview Sagas
 *********************************/

function* loadProfileMock() {
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: true
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setUser((0, _extends2.default)({}, _dummy.userDemo, _dummy.userProfileDemo)));
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: false,
    profile: _dummy.userProfileDemo
  }));
}
function* saveProfileMock(_ref2) {
  let {
      payload: {
        callback,
        profilePictureUrl
      }
    } = _ref2,
    payload = (0, _objectWithoutPropertiesLoose2.default)(_ref2.payload, _excluded2);
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    saving: true,
    error: null
  }));
  const oldProfileData = _dummy.profileStateDemo;
  let newProfilePictureUrl = oldProfileData.profile.profilePictureUrl;
  if (profilePictureUrl !== oldProfileData.profile.profilePictureUrl && profilePictureUrl) {
    const matchResult = (profilePictureUrl || '').match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
    if (matchResult) {
      newProfilePictureUrl = profilePictureUrl;
    }
  }
  const newProfileData = (0, _extends2.default)({}, oldProfileData.profile, payload, {
    profilePictureUrl: newProfilePictureUrl
  });
  const currentUser = _dummy.userDemo;
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setUser((0, _extends2.default)({}, currentUser, newProfileData)));
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: false,
    error: null,
    saving: false,
    profile: newProfileData
  }));
  callback == null ? void 0 : callback(newProfileData);
}
function* changePasswordMock({
  payload
}) {
  var _payload$callback3;
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: true
  }));
  yield (0, _utils.delay)();
  yield (0, _effects.put)(_reducer.actions.setProfileState({
    loading: false,
    error: undefined
  }));
  (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
}
function* profileSagasMock() {
  yield (0, _effects.takeLeading)(_reducer.actions.loadProfile, loadProfileMock);
  yield (0, _effects.takeEvery)(_reducer.actions.saveProfile, saveProfileMock);
  yield (0, _effects.takeEvery)(_reducer.actions.changePassword, changePasswordMock);
}