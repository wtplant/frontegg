import { CreateSamlGroupPayload, DeleteSamlGroupPayload, SaveSSOConfigurationFilePayload, SaveSSOConfigurationPayload, ValidateSSODomainPayload, SSOState, SSOStateIndicator, UpdateSSOAuthorizationRolesPayload, SaveSSODomainPayload, UpdateSSOConfigurationPayload, DeleteSSOConfigurationPayload, SaveSSOConfigurationPayloadV2, UpdateSSODefaultRolesPayload, SetSSOGroupsPayload, SaveSSOConfigurationByMetadataPayload, UpdateSSOConfigurationByMetadataPayload, UpdateSSOGroupsPayload, SaveSSOConfigurationByUrlPayload, SaveSSOConfigurationByDataPayload } from './interfaces';
import { WithCallback } from '../../interfaces';
import { IOidcPostLogin } from '@frontegg/rest-api';
declare const ssoState: SSOState;
declare const reducers: {
    setSSOLoader: {
        prepare: (payload: SSOStateIndicator) => {
            payload: SSOStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: SSOStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setSSOError: {
        prepare: (payload: SSOStateIndicator) => {
            payload: SSOStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: SSOStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setSSOState: {
        prepare: (payload: Partial<SSOState>) => {
            payload: Partial<SSOState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<SSOState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            groupsState: import("..").GroupsState;
            groupsDialogsState: import("..").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: import("..").StepUpState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetSSOState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("..").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: import("..").TeamState;
        groupsState: import("..").GroupsState;
        groupsDialogsState: import("..").GroupsDialogsState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        passkeysState?: import("..").PasskeysState | undefined;
        customLoginState?: import("..").CustomLoginState | undefined;
        allAccountsState?: import("..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("..").SecurityCenterState | undefined;
        smsState?: import("..").SmsState | undefined;
        stepUpState?: import("..").StepUpState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    loadSSOConfigurationsV2: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSSOConfigurationV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">>, import("@frontegg/rest-api").ISSOConfiguration>], WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">>, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    updateSSOConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">> & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>], WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">> & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    deleteSSOConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        ssoConfigId: string;
    }, boolean>], WithCallback<{
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    saveSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<import("@frontegg/rest-api").ICreateSSODomain & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSODomain>], WithCallback<import("@frontegg/rest-api").ICreateSSODomain & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSODomain>, string, never, never>;
    deleteSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>], WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    validateSSODomainV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>], WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    setSSODefaultRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        roleIds: string[];
        ssoConfigId: string;
    }, boolean>], WithCallback<{
        roleIds: string[];
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    setSSOGroups: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        ssoConfigId: string;
        groupsToAdd: import("@frontegg/rest-api").ICreateSamlGroup[];
        groupsToDelete: string[];
    }, boolean>], WithCallback<{
        ssoConfigId: string;
        groupsToAdd: import("@frontegg/rest-api").ICreateSamlGroup[];
        groupsToDelete: string[];
    }, boolean>, string, never, never>;
    updateSSOGroups: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        ssoConfigId: string;
        changedGroups: import("@frontegg/rest-api").IUpdateSamlGroup[];
    }, boolean>], WithCallback<{
        ssoConfigId: string;
        changedGroups: import("@frontegg/rest-api").IUpdateSamlGroup[];
    }, boolean>, string, never, never>;
    saveSSOConfigurationByMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        configFile: File;
    }, import("@frontegg/rest-api").ISSOConfiguration>], WithCallback<{
        configFile: File;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    updateSSOConfigurationByMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        configFile: File;
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>], WithCallback<{
        configFile: File;
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    loadSSOConfigurations: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSSOAuthorizationRoles: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSSOConfigurations: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Partial<Pick<import("@frontegg/rest-api").ISamlConfiguration, "type" | "enabled" | "domain" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "isSamlActive" | "oidcClientId" | "oidcSecret"> & {
        samlVendor: import("./interfaces").SamlVendors;
    }>, boolean>], WithCallback<Partial<Pick<import("@frontegg/rest-api").ISamlConfiguration, "type" | "enabled" | "domain" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "isSamlActive" | "oidcClientId" | "oidcSecret"> & {
        samlVendor: import("./interfaces").SamlVendors;
    }>, boolean>, string, never, never>;
    saveSSOConfigurationsFile: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[File[]], File[], string, never, never>;
    saveSSOConfigurationByData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Partial<import("@frontegg/rest-api").ISSOConfiguration> & {
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
    }, import("@frontegg/rest-api").ISSOConfiguration>], WithCallback<Partial<import("@frontegg/rest-api").ISSOConfiguration> & {
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    saveSSOConfigurationByUrl: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
        metadataUrl: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>], WithCallback<{
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
        metadataUrl: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    saveSSOConfigurationsFileWithCallback: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        configFile: File;
    }, boolean>], WithCallback<{
        configFile: File;
    }, boolean>, string, never, never>;
    validateSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    } | undefined)?], {
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    } | undefined, string, never, never>;
    updateSSOAuthorizationRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        authorizationRoles: string[];
        groups?: import("@frontegg/rest-api").ISamlRolesGroup[] | undefined;
    }, boolean>], WithCallback<{
        authorizationRoles: string[];
        groups?: import("@frontegg/rest-api").ISamlRolesGroup[] | undefined;
    }, boolean>, string, never, never>;
    deleteSamlGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        id: string;
    }, boolean>], WithCallback<{
        id: string;
    }, boolean>, string, never, never>;
    createSamlGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<import("@frontegg/rest-api").ICreateSamlGroup, boolean>], WithCallback<import("@frontegg/rest-api").ICreateSamlGroup, boolean>, string, never, never>;
    oidcPostlogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IOidcPostLogin], IOidcPostLogin, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    loadSSOConfigurationsV2: () => void;
    saveSSOConfigurationV2: (payload: SaveSSOConfigurationPayloadV2) => void;
    updateSSOConfiguration: (payload: UpdateSSOConfigurationPayload) => void;
    deleteSSOConfiguration: (payload: DeleteSSOConfigurationPayload) => void;
    deleteSSODomain: (payload: ValidateSSODomainPayload) => void;
    saveSSODomain: (payload: SaveSSODomainPayload) => void;
    validateSSODomainV2: (payload: ValidateSSODomainPayload) => void;
    setSSODefaultRoles: (payload: UpdateSSODefaultRolesPayload) => void;
    setSSOGroups: (payload: SetSSOGroupsPayload) => void;
    updateSSOGroups: (payload: UpdateSSOGroupsPayload) => void;
    saveSSOConfigurationByMetadata: (payload: SaveSSOConfigurationByMetadataPayload) => void;
    updateSSOConfigurationByMetadata: (payload: UpdateSSOConfigurationByMetadataPayload) => void;
    saveSSOConfigurationByData: (payload: SaveSSOConfigurationByDataPayload) => void;
    saveSSOConfigurationByUrl: (payload: SaveSSOConfigurationByUrlPayload) => void;
    setSSOLoader: (payload: SSOStateIndicator) => void;
    setSSOError: (payload: SSOStateIndicator) => void;
    setSSOState: (state: Partial<SSOState>) => void;
    resetSSOState: () => void;
    loadSSOConfigurations: () => void;
    loadSSOAuthorizationRoles: () => void;
    saveSSOConfigurations: (payload: SaveSSOConfigurationPayload) => void;
    saveSSOConfigurationsFile: (payload: File[]) => void;
    saveSSOConfigurationsFileWithCallback: (payload: SaveSSOConfigurationFilePayload) => void;
    validateSSODomain: (payload?: WithCallback) => void;
    updateSSOAuthorizationRoles: (payload: UpdateSSOAuthorizationRolesPayload) => void;
    deleteSamlGroup: (payload: DeleteSamlGroupPayload) => void;
    createSamlGroup: (payload: CreateSamlGroupPayload) => void;
    oidcPostlogin: (payload: IOidcPostLogin) => void;
};
export declare type SSOActions = DispatchedActions;
export { ssoState, reducers as ssoReducers, actions as ssoActions };
