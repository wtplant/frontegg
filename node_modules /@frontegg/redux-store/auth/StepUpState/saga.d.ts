import { PayloadAction } from '@reduxjs/toolkit';
import { IPreVerifyMFA, IVerifyMFAEmailCode, IVerifyMFASMS } from '@frontegg/rest-api';
import { WithCallback } from '../../interfaces';
import { IPreVerifyMFAWebAuthNForLoginResponse, IVerifyMFAWebAuthnPayload, WithDeviceId } from '../LoginState/interfaces';
import { IStepUpWithAuthenticator } from './interfaces';
/**
 * Step up with authenticator app
 * @param payload.callback - callback function to be called after the verification is done
 * @param payload.mfaToken
 * @param payload.value - 6 digits code input by the user
 */
export declare function stepUpWithAuthenticator({ payload }: PayloadAction<WithCallback<IStepUpWithAuthenticator>>): Generator<Generator<import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<{
    isAuthenticated: boolean;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../LoginState/interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("..").AuthState & boolean[] & false) | (import("..").AuthState & boolean[] & true)>>, void, import("@frontegg/rest-api").ILoginResponseV3 & Partial<import("..").AuthState>>, void, unknown>;
/**
 * Pre verify step for MFA Webauthn step up
 * @param payload.callback - callback function to be called after the verification is done
 * @param payload.deviceId
 * @param payload.mfaToken
 */
export declare function preVerifyMFAWebAuthnForStepUp({ payload, }: PayloadAction<WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>>): Generator<Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").IPreVerifyMFAWebAuthnResponse>, void, import("@frontegg/rest-api").IPreVerifyMFAWebAuthnResponse>, void, unknown>;
/**
 * Verify step for MFA Webauthn step up
 * @param payload.callback - callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.webauthnToken
 * @param payload.mfaToken
 * @param payload.publicKey - public key object from browser navigator credentials
 * @param payload.code - 6 digits code input by the user
 */
export declare function verifyMFAWebAuthnForStepUp({ payload }: PayloadAction<IVerifyMFAWebAuthnPayload>): Generator<Generator<import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../LoginState/interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("..").AuthState & {
    step: any;
} & boolean[] & false) | (import("..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, import("@frontegg/rest-api").ILoginResponseV3>, void, unknown>;
/**
 * Pre verify step for MFA SMS step up
 * @param payload.callback - callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.mfaToken
 */
export declare function preVerifyMFASMSForStepUp({ payload }: PayloadAction<WithCallback<WithDeviceId<IPreVerifyMFA>>>): Generator<Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").IPreVerifyMFASMSResponse>, void, import("@frontegg/rest-api").IPreVerifyMFASMSResponse>, void, unknown>;
/**
 * Verify step for MFA SMS step up
 * @param payload.callback - callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.otcToken
 * @param payload.code - 6 digits code input by the user
 */
export declare function verifyMFASMSForStepUp({ payload }: PayloadAction<WithCallback<WithDeviceId<IVerifyMFASMS>>>): Generator<Generator<import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../LoginState/interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("..").AuthState & {
    step: any;
} & boolean[] & false) | (import("..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, import("@frontegg/rest-api").ILoginResponseV3>, void, unknown>;
/**
 * Verify step for MFA Email code step up
 * @param payload.callback - callback function to be called after the verification is done with true for success, o.w false
 * @param payload.otcToken
 * @param payload.code - 6 digits code input by the user
 */
export declare function verifyMFAEmailCodeForStepUp({ payload }: PayloadAction<WithCallback<IVerifyMFAEmailCode>>): Generator<Generator<import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../LoginState/interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("..").AuthState & {
    step: any;
} & boolean[] & false) | (import("..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, import("@frontegg/rest-api").ILoginResponseV3>, void, unknown>;
/**
 * Pre verify step for MFA Email code step up
 * @param payload.callback - callback function to be called after the verification is done with true for success, o.w false
 * @param payload.mfaToken
 */
export declare function preVerifyMFAEmailCodeForStepUp({ payload }: PayloadAction<WithCallback<IPreVerifyMFA>>): Generator<Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").IPreVerifyMFAEmailCodeResponse>, void, import("@frontegg/rest-api").IPreVerifyMFAEmailCodeResponse>, void, unknown>;
export declare function stepUpSagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
