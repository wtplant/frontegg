import { IPreVerifyMFA, IVerifyMFASMS, IVerifyMFAEmailCode } from '@frontegg/rest-api';
import { IGenerateStepUpSession, IStepUpHostedLogin, IStepUpWithAuthenticator, StepUpState } from './interfaces';
import { WithCallback } from '../../interfaces';
import { IPreVerifyMFAWebAuthNForLoginResponse, IVerifyMFAWebAuthnPayload, WithDeviceId } from '../LoginState/interfaces';
declare const stepUpState: StepUpState;
declare const reducers: {
    setStepUpState: {
        prepare: (payload: Partial<StepUpState>) => {
            payload: Partial<StepUpState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<StepUpState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../LoginState/interfaces").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            groupsState: import("..").GroupsState;
            groupsDialogsState: import("..").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: StepUpState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetStepUpState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("../LoginState/interfaces").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: import("..").TeamState;
        groupsState: import("..").GroupsState;
        groupsDialogsState: import("..").GroupsDialogsState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        passkeysState?: import("..").PasskeysState | undefined;
        customLoginState?: import("..").CustomLoginState | undefined;
        allAccountsState?: import("..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("..").SecurityCenterState | undefined;
        smsState?: import("..").SmsState | undefined;
        stepUpState?: StepUpState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    stepUpHostedLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IStepUpHostedLogin], IStepUpHostedLogin, string, never, never>;
    generateStepUpSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IGenerateStepUpSession, boolean>], WithCallback<IGenerateStepUpSession, boolean>, string, never, never>;
    stepUpWithAuthenticator: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IStepUpWithAuthenticator, boolean>], WithCallback<IStepUpWithAuthenticator, boolean>, string, never, never>;
    preVerifyMFASMSForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithDeviceId<IPreVerifyMFA>, boolean>], WithCallback<WithDeviceId<IPreVerifyMFA>, boolean>, string, never, never>;
    verifyMFASMSForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithDeviceId<IVerifyMFASMS>, boolean>], WithCallback<WithDeviceId<IVerifyMFASMS>, boolean>, string, never, never>;
    preVerifyMFAWebAuthnForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>], WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>, string, never, never>;
    verifyMFAWebAuthnForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IVerifyMFAWebAuthnPayload], IVerifyMFAWebAuthnPayload, string, never, never>;
    preVerifyMFAEmailCodeForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPreVerifyMFA, boolean>], WithCallback<IPreVerifyMFA, boolean>, string, never, never>;
    verifyMFAEmailCodeForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IVerifyMFAEmailCode, boolean>], WithCallback<IVerifyMFAEmailCode, boolean>, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setStepUpState: (state: Partial<StepUpState>) => void;
    resetStepUpState: () => void;
    generateStepUpSession: (payload: WithCallback<IGenerateStepUpSession>) => void;
    stepUpHostedLogin: (payload: IStepUpHostedLogin) => void;
    stepUpWithAuthenticator: (payload: WithCallback<IStepUpWithAuthenticator>) => void;
    preVerifyMFASMSForStepUp: (payload: WithCallback<WithDeviceId<IPreVerifyMFA>>) => void;
    verifyMFASMSForStepUp: (payload: WithCallback<WithDeviceId<IVerifyMFASMS>>) => void;
    preVerifyMFAWebAuthnForStepUp: (payload: WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>) => void;
    verifyMFAWebAuthnForStepUp: (payload: WithCallback<IVerifyMFAWebAuthnPayload>) => void;
    preVerifyMFAEmailCodeForStepUp: (payload: WithCallback<IPreVerifyMFA>) => void;
    verifyMFAEmailCodeForStepUp: (payload: WithCallback<IVerifyMFAEmailCode>) => void;
};
export declare type StepUpActions = DispatchedActions;
export { stepUpState, reducers as stepUpReducers, actions as stepUpActions };
export * from './utils';
export { STEP_UP_MAX_AGE_PARAM_NAME, SHOULD_STEP_UP_KEY } from './consts';
