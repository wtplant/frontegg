import { ApiTokensState, ApiStateIndicator, ApiTokenType, AddTenantApiTokenPayload, AddUserApiTokenPayload } from './interfaces';
import { WithCallback, WithSilentLoad } from '../../interfaces';
declare const apiTokensState: ApiTokensState;
declare const reducers: {
    setApiTokensLoader: {
        prepare: (payload: ApiStateIndicator) => {
            payload: ApiStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: ApiStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setApiTokensError: {
        prepare: (payload: ApiStateIndicator) => {
            payload: ApiStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: ApiStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setApiTokensState: {
        prepare: (payload: Partial<ApiTokensState>) => {
            payload: Partial<ApiTokensState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<ApiTokensState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            groupsState: import("..").GroupsState;
            groupsDialogsState: import("..").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: import("..").StepUpState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetApiTokensState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("..").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: import("..").TeamState;
        groupsState: import("..").GroupsState;
        groupsDialogsState: import("..").GroupsDialogsState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        passkeysState?: import("..").PasskeysState | undefined;
        customLoginState?: import("..").CustomLoginState | undefined;
        allAccountsState?: import("..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("..").SecurityCenterState | undefined;
        smsState?: import("..").SmsState | undefined;
        stepUpState?: import("..").StepUpState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    loadApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(WithSilentLoad<{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }> | undefined)?], WithSilentLoad<{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }> | undefined, string, never, never>;
    loadUserApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(WithSilentLoad<{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }> | undefined)?], WithSilentLoad<{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }> | undefined, string, never, never>;
    loadTenantApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(WithSilentLoad<{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }> | undefined)?], WithSilentLoad<{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }> | undefined, string, never, never>;
    initApiTokensData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[ApiTokenType], ApiTokenType, string, never, never>;
    addTenantApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Pick<import("./interfaces").ITenantApiTokensData, "description" | "roleIds" | "expires">, boolean>], WithCallback<Pick<import("./interfaces").ITenantApiTokensData, "description" | "roleIds" | "expires">, boolean>, string, never, never>;
    addUserApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Pick<import("./interfaces").IApiTokensData, "description" | "expires">, boolean>], WithCallback<Pick<import("./interfaces").IApiTokensData, "description" | "expires">, boolean>, string, never, never>;
    deleteUserApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    deleteTenantApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setApiTokensLoader: (payload: ApiStateIndicator) => void;
    setApiTokensError: (payload: ApiStateIndicator) => void;
    setApiTokensState: (state: Partial<ApiTokensState>) => void;
    resetApiTokensState: () => void;
    loadApiTokens: (payload?: WithSilentLoad<WithCallback>) => void;
    loadUserApiTokens: (payload?: WithSilentLoad<WithCallback>) => void;
    loadTenantApiTokens: (payload?: WithSilentLoad<WithCallback>) => void;
    initApiTokensData: (payload: ApiTokenType) => void;
    addTenantApiToken: (payload: AddTenantApiTokenPayload) => void;
    addUserApiToken: (payload: AddUserApiTokenPayload) => void;
    deleteUserApiToken: (payload: string) => void;
    deleteTenantApiToken: (payload: string) => void;
};
export declare type ApiTokensActions = DispatchedActions;
export { apiTokensState, reducers as apiTokensReducers, actions as apiTokensActions };
