import { IAddUser, IDeleteUser, IResendActivationLink, IResendInvitationLink, IResendInvitationEmail, ITeamUser, IUpdateUser, ICreateOrUpdateInviteUserLink, ILoadAllUsers, ISubTenantUser, AddUserToSubTenantsRequest, RemoveUserFromSubTenantsRequest, UpdateUserRolesForSubTenantsRequestDto, ILoadUsers, IUpdateUserExpiration } from '@frontegg/rest-api';
import { ISetAddUserDialog, ISetDeleteUserDialog, TeamState, TeamStateIndicator, LoadRolesAndPermissionsPayload, IAddUsers, BulkInvintationData, IGetUsersV2Payload } from './interfaces';
import { WithCallback, WithSilentLoad } from '../../interfaces';
declare const teamState: TeamState;
declare const reducers: {
    setTeamLoader: {
        prepare: (payload: TeamStateIndicator) => {
            payload: TeamStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: TeamStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setTeamError: {
        prepare: (payload: TeamStateIndicator) => {
            payload: TeamStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: TeamStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setTeamState: {
        prepare: (payload: Partial<TeamState>) => {
            payload: Partial<TeamState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<TeamState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: TeamState;
            groupsState: import("..").GroupsState;
            groupsDialogsState: import("..").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: import("..").StepUpState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetTeamState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("..").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: TeamState;
        groupsState: import("..").GroupsState;
        groupsDialogsState: import("..").GroupsDialogsState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        passkeysState?: import("..").PasskeysState | undefined;
        customLoginState?: import("..").CustomLoginState | undefined;
        allAccountsState?: import("..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("..").SecurityCenterState | undefined;
        smsState?: import("..").SmsState | undefined;
        stepUpState?: import("..").StepUpState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    loadUsersV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithSilentLoad<IGetUsersV2Payload>, ITeamUser[]>], WithCallback<WithSilentLoad<IGetUsersV2Payload>, ITeamUser[]>, string, never, never>;
    loadUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithSilentLoad<ILoadUsers>, ITeamUser[]>], WithCallback<WithSilentLoad<ILoadUsers>, ITeamUser[]>, string, never, never>;
    loadAllSubTenantsUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithSilentLoad<Partial<ILoadAllUsers>>, ISubTenantUser[]>], WithCallback<WithSilentLoad<Partial<ILoadAllUsers>>, ISubTenantUser[]>, string, never, never>;
    loadRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("../../interfaces").CallbackMethod<{
            roles: import("@frontegg/rest-api").ITeamUserRole[];
            permissions: import("@frontegg/rest-api").ITeamUserPermission[];
        }> | undefined;
    } | undefined)?], {
        callback?: import("../../interfaces").CallbackMethod<{
            roles: import("@frontegg/rest-api").ITeamUserRole[];
            permissions: import("@frontegg/rest-api").ITeamUserPermission[];
        }> | undefined;
    } | undefined, string, never, never>;
    addUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IAddUser, ITeamUser>], WithCallback<IAddUser, ITeamUser>, string, never, never>;
    addUsersBulk: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IAddUsers, BulkInvintationData>], WithCallback<IAddUsers, BulkInvintationData>, string, never, never>;
    addUserToSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<AddUserToSubTenantsRequest, boolean>], WithCallback<AddUserToSubTenantsRequest, boolean>, string, never, never>;
    updateUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Partial<ITeamUser>, ITeamUser>], WithCallback<Partial<ITeamUser>, ITeamUser>, string, never, never>;
    deleteUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IDeleteUser, boolean>], WithCallback<IDeleteUser, boolean>, string, never, never>;
    setUserRolesForSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }, boolean>], WithCallback<UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }, boolean>, string, never, never>;
    deleteUserFromSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<RemoveUserFromSubTenantsRequest, boolean>], WithCallback<RemoveUserFromSubTenantsRequest, boolean>, string, never, never>;
    lockUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IDeleteUser, boolean>], WithCallback<IDeleteUser, boolean>, string, never, never>;
    resendActivationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IResendActivationLink, boolean>], WithCallback<IResendActivationLink, boolean>, string, never, never>;
    resendInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IResendInvitationLink, boolean>], WithCallback<IResendInvitationLink, boolean>, string, never, never>;
    resendInvitationEmail: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IResendInvitationEmail, boolean>], WithCallback<IResendInvitationEmail, boolean>, string, never, never>;
    resendInvitationLinkToAllSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IResendInvitationLink, boolean>], WithCallback<IResendInvitationLink, boolean>, string, never, never>;
    getTemporaryUsersConfig: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    updateUserExpirationTime: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IUpdateUserExpiration, boolean>], WithCallback<IUpdateUserExpiration, boolean>, string, never, never>;
    setUserAsPermanent: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<Pick<IUpdateUserExpiration, "userId">, boolean>], WithCallback<Pick<IUpdateUserExpiration, "userId">, boolean>, string, never, never>;
    getInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    createInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ICreateOrUpdateInviteUserLink, string>], WithCallback<ICreateOrUpdateInviteUserLink, string>, string, never, never>;
    updateInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ICreateOrUpdateInviteUserLink, boolean>], WithCallback<ICreateOrUpdateInviteUserLink, boolean>, string, never, never>;
    deleteInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    } | undefined)?], {
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    } | undefined, string, never, never>;
    openAddUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import("./interfaces").AddUserDialogState, "onClose"> | undefined)?], Pick<import("./interfaces").AddUserDialogState, "onClose"> | undefined, string, never, never>;
    closeAddUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
    openDeleteUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import("./interfaces").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined)?], Pick<import("./interfaces").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined, string, never, never>;
    closeDeleteUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
    openLockUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import("./interfaces").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined)?], Pick<import("./interfaces").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined, string, never, never>;
    closeLockUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setTeamLoader: (payload: TeamStateIndicator) => void;
    setTeamError: (payload: TeamStateIndicator) => void;
    setTeamState: (payload: Partial<TeamState>) => void;
    resetTeamState: () => void;
    loadUsersV2: (payload: WithCallback<WithSilentLoad<IGetUsersV2Payload>, ITeamUser[]>) => void;
    /**
     * @deprecated loadUsers is deprecated, use loadUsersV2 instead
     */
    loadUsers: (payload: WithCallback<WithSilentLoad<ILoadUsers>, ITeamUser[]>) => void;
    loadAllSubTenantsUsers: (payload: WithCallback<WithSilentLoad<Partial<ILoadAllUsers>>, ISubTenantUser[]>) => void;
    loadRoles: (payload?: LoadRolesAndPermissionsPayload) => void;
    addUsersBulk: (payload: WithCallback<IAddUsers, BulkInvintationData>) => void;
    addUser: (payload: WithCallback<IAddUser, ITeamUser>) => void;
    addUserToSubTenants: (payload: WithCallback<AddUserToSubTenantsRequest>) => void;
    setUserRolesForSubTenants: (payload: WithCallback<UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }>) => void;
    updateUser: (payload: WithCallback<IUpdateUser, ITeamUser>) => void;
    deleteUser: (payload: WithCallback<IDeleteUser>) => void;
    deleteUserFromSubTenants: (payload: WithCallback<RemoveUserFromSubTenantsRequest>) => void;
    lockUser: (payload: WithCallback<IDeleteUser>) => void;
    resendActivationLink: (payload: WithCallback<IResendActivationLink>) => void;
    resendInvitationLink: (payload: WithCallback<IResendInvitationLink>) => void;
    resendInvitationEmail: (payload: WithCallback<IResendInvitationEmail>) => void;
    resendInvitationLinkToAllSubTenants: (payload: WithCallback<IResendInvitationLink>) => void;
    getTemporaryUsersConfig: () => void;
    updateUserExpirationTime: (payload: WithCallback<IUpdateUserExpiration>) => void;
    setUserAsPermanent: (payload: WithCallback<Pick<IUpdateUserExpiration, 'userId'>>) => void;
    getInvitationLink: () => void;
    createInvitationLink: (payload: WithCallback<ICreateOrUpdateInviteUserLink, string>) => void;
    updateInvitationLink: (payload: WithCallback<ICreateOrUpdateInviteUserLink>) => void;
    deleteInvitationLink: (payload?: WithCallback<{}, boolean>) => void;
    openAddUserDialog: (payload?: ISetAddUserDialog) => void;
    closeAddUserDialog: (payload?: any) => void;
    openDeleteUserDialog: (payload?: ISetDeleteUserDialog) => void;
    closeDeleteUserDialog: (payload?: any) => void;
    openLockUserDialog: (payload?: ISetDeleteUserDialog) => void;
    closeLockUserDialog: (payload?: any) => void;
};
export declare type TeamActions = DispatchedActions;
export { teamState, reducers as teamReducers, actions as teamActions };
