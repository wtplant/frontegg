import { PayloadAction } from '@reduxjs/toolkit';
import { AuthState } from './interfaces';
export declare const resetStateByKey: <T>(key: keyof AuthState, initialState: Partial<AuthState>) => (state: AuthState) => {
    onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
    error?: any;
    isAuthenticated: boolean;
    userIp?: string | undefined;
    isLoading: boolean;
    keepSessionAlive?: boolean | undefined;
    socialLoginOptions?: {
        promptConsent?: boolean | undefined;
    } | undefined;
    user?: import("./interfaces").User | null | undefined;
    isSSOAuth: boolean;
    ssoACS?: string | undefined;
    includeQueryParam?: boolean | undefined;
    loginState: import(".").LoginState;
    activateState: import(".").ActivateAccountState;
    acceptInvitationState: import(".").AcceptInvitationState;
    forgotPasswordState: import(".").ForgotPasswordState;
    resetPhoneNumberState: import(".").ResetPhoneNumberState;
    ssoState: import(".").SSOState;
    profileState: import(".").ProfileState;
    mfaState: import(".").MFAState;
    teamState: import(".").TeamState;
    groupsState: import(".").GroupsState;
    groupsDialogsState: import(".").GroupsDialogsState;
    socialLoginState: import(".").SocialLoginState;
    signUpState: import(".").SignUpState;
    apiTokensState: import(".").ApiTokensState;
    securityPolicyState: import(".").SecurityPolicyState;
    restrictionsState: import(".").RestrictionsState;
    provisioningState: import(".").ProvisioningState;
    accountSettingsState: import(".").AccountSettingsState;
    tenantsState: import(".").TenantsState;
    rolesState: import(".").RolesState;
    sessionsState: import(".").SessionsState;
    hostedLoginBox?: boolean | undefined;
    disableSilentRefresh?: boolean | undefined;
    sessionsPolicyState: import(".").SessionsPolicyState;
    impersonateState?: import(".").ImpersonateState | undefined;
    passkeysState?: import(".").PasskeysState | undefined;
    customLoginState?: import(".").CustomLoginState | undefined;
    allAccountsState?: import(".").IAllAccountsState | undefined;
    allAccountsDialogsState?: import(".").IAllAccountsDialogsState | undefined;
    securityCenterState?: import(".").SecurityCenterState | undefined;
    smsState?: import(".").SmsState | undefined;
    stepUpState?: import(".").StepUpState | undefined;
    routes: import("./interfaces").AuthPageRoutes;
    header?: any;
    loaderComponent?: any;
};
export declare const typeReducer: <T>(key: keyof AuthState) => (state: AuthState, { payload }: {
    payload: T;
    type: string;
}) => {
    onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
    error?: any;
    isAuthenticated: boolean;
    userIp?: string | undefined;
    isLoading: boolean;
    keepSessionAlive?: boolean | undefined;
    socialLoginOptions?: {
        promptConsent?: boolean | undefined;
    } | undefined;
    user?: import("./interfaces").User | null | undefined;
    isSSOAuth: boolean;
    ssoACS?: string | undefined;
    includeQueryParam?: boolean | undefined;
    loginState: import(".").LoginState;
    activateState: import(".").ActivateAccountState;
    acceptInvitationState: import(".").AcceptInvitationState;
    forgotPasswordState: import(".").ForgotPasswordState;
    resetPhoneNumberState: import(".").ResetPhoneNumberState;
    ssoState: import(".").SSOState;
    profileState: import(".").ProfileState;
    mfaState: import(".").MFAState;
    teamState: import(".").TeamState;
    groupsState: import(".").GroupsState;
    groupsDialogsState: import(".").GroupsDialogsState;
    socialLoginState: import(".").SocialLoginState;
    signUpState: import(".").SignUpState;
    apiTokensState: import(".").ApiTokensState;
    securityPolicyState: import(".").SecurityPolicyState;
    restrictionsState: import(".").RestrictionsState;
    provisioningState: import(".").ProvisioningState;
    accountSettingsState: import(".").AccountSettingsState;
    tenantsState: import(".").TenantsState;
    rolesState: import(".").RolesState;
    sessionsState: import(".").SessionsState;
    hostedLoginBox?: boolean | undefined;
    disableSilentRefresh?: boolean | undefined;
    sessionsPolicyState: import(".").SessionsPolicyState;
    impersonateState?: import(".").ImpersonateState | undefined;
    passkeysState?: import(".").PasskeysState | undefined;
    customLoginState?: import(".").CustomLoginState | undefined;
    allAccountsState?: import(".").IAllAccountsState | undefined;
    allAccountsDialogsState?: import(".").IAllAccountsDialogsState | undefined;
    securityCenterState?: import(".").SecurityCenterState | undefined;
    smsState?: import(".").SmsState | undefined;
    stepUpState?: import(".").StepUpState | undefined;
    routes: import("./interfaces").AuthPageRoutes;
    header?: any;
    loaderComponent?: any;
};
export declare const typeReducerForKey: <T>(key: keyof AuthState) => {
    prepare: (payload: Partial<T>) => {
        payload: Partial<T>;
    };
    reducer: (state: AuthState, { payload }: {
        payload: Partial<T>;
        type: string;
    }) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("./interfaces").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import(".").LoginState;
        activateState: import(".").ActivateAccountState;
        acceptInvitationState: import(".").AcceptInvitationState;
        forgotPasswordState: import(".").ForgotPasswordState;
        resetPhoneNumberState: import(".").ResetPhoneNumberState;
        ssoState: import(".").SSOState;
        profileState: import(".").ProfileState;
        mfaState: import(".").MFAState;
        teamState: import(".").TeamState;
        groupsState: import(".").GroupsState;
        groupsDialogsState: import(".").GroupsDialogsState;
        socialLoginState: import(".").SocialLoginState;
        signUpState: import(".").SignUpState;
        apiTokensState: import(".").ApiTokensState;
        securityPolicyState: import(".").SecurityPolicyState;
        restrictionsState: import(".").RestrictionsState;
        provisioningState: import(".").ProvisioningState;
        accountSettingsState: import(".").AccountSettingsState;
        tenantsState: import(".").TenantsState;
        rolesState: import(".").RolesState;
        sessionsState: import(".").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import(".").SessionsPolicyState;
        impersonateState?: import(".").ImpersonateState | undefined;
        passkeysState?: import(".").PasskeysState | undefined;
        customLoginState?: import(".").CustomLoginState | undefined;
        allAccountsState?: import(".").IAllAccountsState | undefined;
        allAccountsDialogsState?: import(".").IAllAccountsDialogsState | undefined;
        securityCenterState?: import(".").SecurityCenterState | undefined;
        smsState?: import(".").SmsState | undefined;
        stepUpState?: import(".").StepUpState | undefined;
        routes: import("./interfaces").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
export declare const typeReducerNestedKey: <T, K>(key: keyof AuthState, nestedKey: keyof T) => {
    prepare: (payload: Partial<K>) => {
        payload: Partial<K>;
    };
    reducer: (state: AuthState, { payload }: {
        payload: Partial<K>;
        type: string;
    }) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("./interfaces").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import(".").LoginState;
        activateState: import(".").ActivateAccountState;
        acceptInvitationState: import(".").AcceptInvitationState;
        forgotPasswordState: import(".").ForgotPasswordState;
        resetPhoneNumberState: import(".").ResetPhoneNumberState;
        ssoState: import(".").SSOState;
        profileState: import(".").ProfileState;
        mfaState: import(".").MFAState;
        teamState: import(".").TeamState;
        groupsState: import(".").GroupsState;
        groupsDialogsState: import(".").GroupsDialogsState;
        socialLoginState: import(".").SocialLoginState;
        signUpState: import(".").SignUpState;
        apiTokensState: import(".").ApiTokensState;
        securityPolicyState: import(".").SecurityPolicyState;
        restrictionsState: import(".").RestrictionsState;
        provisioningState: import(".").ProvisioningState;
        accountSettingsState: import(".").AccountSettingsState;
        tenantsState: import(".").TenantsState;
        rolesState: import(".").RolesState;
        sessionsState: import(".").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import(".").SessionsPolicyState;
        impersonateState?: import(".").ImpersonateState | undefined;
        passkeysState?: import(".").PasskeysState | undefined;
        customLoginState?: import(".").CustomLoginState | undefined;
        allAccountsState?: import(".").IAllAccountsState | undefined;
        allAccountsDialogsState?: import(".").IAllAccountsDialogsState | undefined;
        securityCenterState?: import(".").SecurityCenterState | undefined;
        smsState?: import(".").SmsState | undefined;
        stepUpState?: import(".").StepUpState | undefined;
        routes: import("./interfaces").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
export declare const loadersReducerForKey: <T extends {
    key: string;
    value: string | boolean;
}>(key: keyof AuthState) => {
    prepare: (payload: T) => {
        payload: T;
    };
    reducer: (state: AuthState, { payload }: {
        payload: T;
        type: string;
    }) => AuthState;
};
export declare const errorsReducerForKey: <T extends {
    key: string;
    value: string | boolean;
}>(key: keyof AuthState) => {
    prepare: (payload: T) => {
        payload: T;
    };
    reducer: (state: AuthState, { payload }: {
        payload: T;
        type: string;
    }) => AuthState;
};
export declare const dialogStateForKey: <T, K>(key: keyof AuthState, dialogKey: keyof T, dialogState?: Partial<K> | undefined) => {
    prepare: (payload: Partial<K>) => {
        payload: Partial<K>;
    };
    reducer: (state: AuthState, { payload }: {
        payload: Partial<K>;
        type: string;
    }) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("./interfaces").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import(".").LoginState;
        activateState: import(".").ActivateAccountState;
        acceptInvitationState: import(".").AcceptInvitationState;
        forgotPasswordState: import(".").ForgotPasswordState;
        resetPhoneNumberState: import(".").ResetPhoneNumberState;
        ssoState: import(".").SSOState;
        profileState: import(".").ProfileState;
        mfaState: import(".").MFAState;
        teamState: import(".").TeamState;
        groupsState: import(".").GroupsState;
        groupsDialogsState: import(".").GroupsDialogsState;
        socialLoginState: import(".").SocialLoginState;
        signUpState: import(".").SignUpState;
        apiTokensState: import(".").ApiTokensState;
        securityPolicyState: import(".").SecurityPolicyState;
        restrictionsState: import(".").RestrictionsState;
        provisioningState: import(".").ProvisioningState;
        accountSettingsState: import(".").AccountSettingsState;
        tenantsState: import(".").TenantsState;
        rolesState: import(".").RolesState;
        sessionsState: import(".").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import(".").SessionsPolicyState;
        impersonateState?: import(".").ImpersonateState | undefined;
        passkeysState?: import(".").PasskeysState | undefined;
        customLoginState?: import(".").CustomLoginState | undefined;
        allAccountsState?: import(".").IAllAccountsState | undefined;
        allAccountsDialogsState?: import(".").IAllAccountsDialogsState | undefined;
        securityCenterState?: import(".").SecurityCenterState | undefined;
        smsState?: import(".").SmsState | undefined;
        stepUpState?: import(".").StepUpState | undefined;
        routes: import("./interfaces").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
export declare const dialogStateForKeyWithoutPayload: <T, K>(key: keyof AuthState, dialogKey: keyof T, dialogState?: Partial<K> | undefined) => (state: AuthState) => {
    onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
    error?: any;
    isAuthenticated: boolean;
    userIp?: string | undefined;
    isLoading: boolean;
    keepSessionAlive?: boolean | undefined;
    socialLoginOptions?: {
        promptConsent?: boolean | undefined;
    } | undefined;
    user?: import("./interfaces").User | null | undefined;
    isSSOAuth: boolean;
    ssoACS?: string | undefined;
    includeQueryParam?: boolean | undefined;
    loginState: import(".").LoginState;
    activateState: import(".").ActivateAccountState;
    acceptInvitationState: import(".").AcceptInvitationState;
    forgotPasswordState: import(".").ForgotPasswordState;
    resetPhoneNumberState: import(".").ResetPhoneNumberState;
    ssoState: import(".").SSOState;
    profileState: import(".").ProfileState;
    mfaState: import(".").MFAState;
    teamState: import(".").TeamState;
    groupsState: import(".").GroupsState;
    groupsDialogsState: import(".").GroupsDialogsState;
    socialLoginState: import(".").SocialLoginState;
    signUpState: import(".").SignUpState;
    apiTokensState: import(".").ApiTokensState;
    securityPolicyState: import(".").SecurityPolicyState;
    restrictionsState: import(".").RestrictionsState;
    provisioningState: import(".").ProvisioningState;
    accountSettingsState: import(".").AccountSettingsState;
    tenantsState: import(".").TenantsState;
    rolesState: import(".").RolesState;
    sessionsState: import(".").SessionsState;
    hostedLoginBox?: boolean | undefined;
    disableSilentRefresh?: boolean | undefined;
    sessionsPolicyState: import(".").SessionsPolicyState;
    impersonateState?: import(".").ImpersonateState | undefined;
    passkeysState?: import(".").PasskeysState | undefined;
    customLoginState?: import(".").CustomLoginState | undefined;
    allAccountsState?: import(".").IAllAccountsState | undefined;
    allAccountsDialogsState?: import(".").IAllAccountsDialogsState | undefined;
    securityCenterState?: import(".").SecurityCenterState | undefined;
    smsState?: import(".").SmsState | undefined;
    stepUpState?: import(".").StepUpState | undefined;
    routes: import("./interfaces").AuthPageRoutes;
    header?: any;
    loaderComponent?: any;
};
export declare const delay: (delayTime?: number) => Promise<unknown>;
export declare const base64urlEncode: (arraybuffer: any) => string;
export declare const base64urlDecode: (base64string: string) => ArrayBufferLike;
export declare const publicKeyCredentialToJSON: (pubKeyCred: unknown) => unknown;
