import { IUserProfile, RedirectOptions, SocialLoginProviders } from '@frontegg/rest-api';
import { ApiTokensState } from './ApiTokensState/interfaces';
import { ActivateAccountState } from './ActivateState/interfaces';
import { LoginState } from './LoginState/interfaces';
import { ForgotPasswordState } from './ForgotPasswordState/interfaces';
import { SSOState } from './SSOState/interfaces';
import { ProfileState } from './ProfileState/interfaces';
import { MFAState } from './MfaState/interfaces';
import { TeamState } from './TeamState/interfaces';
import { AcceptInvitationState } from './AcceptInvitationState/interfaces';
import { SignUpState } from './SignUp/interfaces';
import { SocialLoginState } from './SocialLogins/interfaces';
import { SecurityPolicyState } from './Security/SecurityPolicyState/interfaces';
import { AccountSettingsState } from './AccountSettingsState/interfaces';
import { TenantsState } from './TenantsState/interfaces';
import { RolesState } from './RolesState/interfaces';
import { ResetPhoneNumberState } from './ResetPhoneNumberState/interfaces';
import { SessionsState } from './SessionsState/interfaces';
import { SessionsPolicyState } from './Security/SessionsPolicyState/interfaces';
import { RestrictionsState } from './Security/RestrictionsState/interfaces';
import { ProvisioningState } from './Provisioning/interfaces';
import { ImpersonateState } from './ImpersonationState/interfaces';
import { PasskeysState } from './PasskeysState/interfaces';
import { SmsState } from './SmsState/interfaces';
import { GroupsDialogsState, GroupsState } from './GroupsState/interfaces';
import { CustomLoginState } from './CustomLoginState/interfaces';
import { IAllAccountsDialogsState, IAllAccountsState } from './MSP/AllAccountsState/types';
import { SecurityCenterState } from './Security/SecurityCenterState/interfaces';
import { StepUpState } from './StepUpState/interfaces';
interface Actor {
    sub?: string;
}
export interface User extends IUserProfile {
    accessToken: string;
    refreshToken?: string;
    expiresIn: number;
    /**
     * @deprecated use exp instead
     */
    expires: string;
    exp: number;
    sid?: string;
    act?: Actor;
    subAccountAccessAllowed?: boolean;
    amr?: string[];
    acr?: string;
    auth_time?: number;
}
export interface Routes {
    routes: AuthPageRoutes;
}
interface PluginOptions {
    header?: any;
    loaderComponent?: any;
}
export interface AuthState extends Routes, PluginOptions {
    onRedirectTo: (path: string, opts?: RedirectOptions) => void;
    error?: any;
    isAuthenticated: boolean;
    userIp?: string;
    isLoading: boolean;
    keepSessionAlive?: boolean;
    socialLoginOptions?: {
        promptConsent?: boolean;
    };
    user?: User | null;
    isSSOAuth: boolean;
    ssoACS?: string;
    includeQueryParam?: boolean;
    loginState: LoginState;
    activateState: ActivateAccountState;
    acceptInvitationState: AcceptInvitationState;
    forgotPasswordState: ForgotPasswordState;
    resetPhoneNumberState: ResetPhoneNumberState;
    ssoState: SSOState;
    profileState: ProfileState;
    mfaState: MFAState;
    teamState: TeamState;
    groupsState: GroupsState;
    groupsDialogsState: GroupsDialogsState;
    socialLoginState: SocialLoginState;
    signUpState: SignUpState;
    apiTokensState: ApiTokensState;
    securityPolicyState: SecurityPolicyState;
    restrictionsState: RestrictionsState;
    provisioningState: ProvisioningState;
    accountSettingsState: AccountSettingsState;
    tenantsState: TenantsState;
    rolesState: RolesState;
    sessionsState: SessionsState;
    hostedLoginBox?: boolean;
    disableSilentRefresh?: boolean;
    sessionsPolicyState: SessionsPolicyState;
    impersonateState?: ImpersonateState;
    passkeysState?: PasskeysState;
    customLoginState?: CustomLoginState;
    allAccountsState?: IAllAccountsState;
    allAccountsDialogsState?: IAllAccountsDialogsState;
    securityCenterState?: SecurityCenterState;
    smsState?: SmsState;
    stepUpState?: StepUpState;
}
export declare type AuthPageRoutes = {
    /**
     * the page whither need to redirect in the case when a user is authenticated
     * @default: url before redirect to log in or '/'
     */
    authenticatedUrl: string;
    /**
     * the page whither need to redirect in the case when a user is not authenticated
     */
    loginUrl: string;
    /**
     * the page whether need to redirect in the case when a customer ask to step up and the user doesn't stepped up already
     */
    stepUpUrl: string;
    /**
     * navigating to this url, AuthProvider will logout and remove coockies
     */
    logoutUrl: string;
    /**
     * the page whither need to redirect in the case when a user want to activate his account
     */
    activateUrl: string;
    /**
     * the page whither need to redirect in the case when a user want to impersonate another user
     */
    impersonationUrl: string;
    /**
     * the page whether need to redirect in the case when a user want to accept invite to tanent
     */
    acceptInvitationUrl: string;
    /**
     * the page in the case a user forgot his account password
     */
    forgetPasswordUrl: string;
    /**
     * the page in the case a user wants to reset his account phone number
     */
    resetPhoneNumberUrl: string;
    /**
     * the page whither need to redirect in the case when a user redirected from reset password url
     */
    resetPasswordUrl: string;
    /**
     * the url to reach the idp redirect after successful SAML response
     */
    samlCallbackUrl?: string;
    /**
     * the url to reach the idp redirect after successful SAML response
     */
    socialLoginCallbackUrl?: string;
    /**
     * sign up page
     */
    signUpUrl: string;
    /**
     * oidc success redirect url
     */
    oidcRedirectUrl?: string;
    /**
     * magic link redirect url
     */
    magicLinkCallbackUrl?: string;
    /**
     * after sign up success url, the order of urls read: (accountSignUpSuccessUrl or userSignUpSuccessUrl) / signupSuccessUrl / authenticationUrl
     */
    signUpSuccessUrl?: string;
    /**
     * after account sign up success url, the order of urls read: accountSignUpSuccessUrl / signupSuccessUrl / authenticationUrl
     */
    accountSignUpSuccessUrl?: string;
    /**
     * after user (tenant) sign up success url, the order of urls read: userSignUpSuccessUrl / signupSuccessUrl / authenticationUrl
     */
    userSignUpSuccessUrl?: string;
    /**
     * hosted login callback redirect url
     */
    hostedLoginRedirectUrl?: string;
    /**
     * custom login url
     */
    customLoginUrl?: string;
    /**
     * custom login Authenticated url
     */
    customLoginAuthenticatedUrl?: string;
    /**
     * open app url used for redirecting to app after login
     */
    openAppUrl?: string;
};
export declare enum UserVeirifedOriginTypes {
    SOCIAL_LOGIN = "SOCIAL_LOGIN",
    PASSWORDLESS = "PASSWORDLESS",
    ACTIVATION_LINK = "ACTIVATION_LINK"
}
export declare enum AuthenticationTypes {
    SOCIAL_LOGIN = "SOCIAL_LOGIN",
    PASSWORD = "PASSWORD"
}
export declare enum AdminPortalPagesForEvents {
    profile = "profile",
    privacy = "privacy",
    personalApiTokens = "personalApiTokens",
    account = "account",
    users = "users",
    groups = "groups",
    security = "security",
    sso = "sso",
    audits = "audits",
    webhooks = "webhooks",
    apiTokens = "apiTokens",
    roles = "roles",
    subscriptions = "subscription",
    allAccounts = "allAccounts"
}
export declare const AdminPortalPages: Record<string, AdminPortalPagesForEvents>;
export interface CustomEventsOptions {
    userVerified?: (payload: IUserVerifiedPayload) => void;
    signUpComplete?: (payload: ISignUpCompletePayload) => void;
    inviteMemberClicked?: (payload: IInviteMemberClickedPayload) => void;
    inviteMemberSubmit?: (payload: IInviteMemberSubmitPayload) => void;
    inviteMembersSubmit?: (payload: IInviteMembersSubmitPayload) => void;
    adminBoxMenuClicked?: (payload: IAdminBoxMenuClicked) => void;
}
export interface IUserVerifiedPayload {
    email: string;
    origin: UserVeirifedOriginTypes;
    createdAt?: Date;
    tenantId?: string;
    id?: string;
    url?: URL;
    name?: string;
}
export interface IInviteMemberClickedPayload {
    email: string;
}
export interface IInviteMemberSubmitPayload {
    email: string;
    invitedUserFullName?: string;
    invitedUserEmail: string;
    invitedUserPhoneNumber?: string;
    invitedUserRoles?: string[];
    expirationInSeconds?: number;
}
export interface IInviteMembersSubmitPayload {
    email: string;
    invitedUserEmails: string[];
    invitedUsersRoles?: string[];
    expirationInSeconds?: number;
}
export interface ISignUpCompletePayload {
    name?: string;
    companyName?: string;
    phoneNumber?: string;
    email: string;
    id?: string;
    createdAt?: Date;
    tenantId?: string;
    url?: URL;
    authenticationType: AuthenticationTypes;
    socialProvider?: SocialLoginProviders;
}
export interface IAdminBoxMenuClicked {
    email: string;
    tab: AdminPortalPagesForEvents;
}
export {};
