import { IVendorConfig } from '@frontegg/rest-api';
import { IAuthStrategiesConfig } from '@frontegg/rest-api';
export declare function getSecurityPolicyPublicStateWithCustomLogin(securityPolicyPublicState?: IVendorConfig): Generator<import("redux-saga/effects").CallEffect<boolean> | import("redux-saga/effects").CallEffect<IAuthStrategiesConfig>, IVendorConfig | {
    authStrategy: import("@frontegg/rest-api").AuthStrategyEnum;
} | undefined, (false & IAuthStrategiesConfig) | (true & IAuthStrategiesConfig)>;
export declare function setSecurityPolicyPublicStateForCustomLogin(authStrategy?: IVendorConfig['authStrategy']): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../../interfaces").WithStatus & {
        policy?: IVendorConfig | undefined;
    }>;
    type: string;
}>, void, (false & Required<import("../../../interfaces").WithStatus & {
    policy?: IVendorConfig | undefined;
}>) | (true & Required<import("../../../interfaces").WithStatus & {
    policy?: IVendorConfig | undefined;
}>)>;
export declare function loadPublicSecurityPolicy(): Generator<Generator<import("redux-saga/effects").CallEffect<boolean> | import("redux-saga/effects").CallEffect<IAuthStrategiesConfig>, IVendorConfig | {
    authStrategy: import("@frontegg/rest-api").AuthStrategyEnum;
} | undefined, (false & IAuthStrategiesConfig) | (true & IAuthStrategiesConfig)> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../../interfaces").WithStatus & {
        policy?: IVendorConfig | undefined;
    }>;
    type: string;
}> | import("redux-saga/effects").CallEffect<IVendorConfig>, void, IVendorConfig>;
export declare function getAuthStrategy(): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<IAuthStrategiesConfig>, IAuthStrategiesConfig, (false & IAuthStrategiesConfig) | (true & IAuthStrategiesConfig)>;
export declare function loadPublicAuthStrategiesPolicy(): Generator<import("redux-saga/effects").CallEffect<IAuthStrategiesConfig> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../../interfaces").WithStatus & {
        policy?: IVendorConfig | undefined;
    }>;
    type: string;
}>, void, (false & Required<import("../../../interfaces").WithStatus & {
    policy?: IVendorConfig | undefined;
}>) | (true & Required<import("../../../interfaces").WithStatus & {
    policy?: IVendorConfig | undefined;
}>)> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../../interfaces").WithStatus & {
        policy?: IAuthStrategiesConfig | undefined;
    }>;
    type: string;
}>, void, IAuthStrategiesConfig>;
export declare function securityPolicySagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
/*********************************
 *  Preview Sagas
 *********************************/
export declare function loadPublicSecurityPolicyMock(): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../../interfaces").WithStatus & {
        policy?: IVendorConfig | undefined;
    }>;
    type: string;
}>, void, unknown>;
export declare function securityPolicySagasMock(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
