import { SessionsPolicyState } from './interfaces';
import { WithCallback } from '../../../interfaces';
import { ISessionConfigurations } from '@frontegg/rest-api';
declare const sessionsPolicyState: SessionsPolicyState;
declare const reducers: {
    setSessionsPolicyState: {
        prepare: (payload: Partial<SessionsPolicyState>) => {
            payload: Partial<SessionsPolicyState>;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: Partial<SessionsPolicyState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("../..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../..").LoginState;
            activateState: import("../..").ActivateAccountState;
            acceptInvitationState: import("../..").AcceptInvitationState;
            forgotPasswordState: import("../..").ForgotPasswordState;
            resetPhoneNumberState: import("../..").ResetPhoneNumberState;
            ssoState: import("../..").SSOState;
            profileState: import("../..").ProfileState;
            mfaState: import("../..").MFAState;
            teamState: import("../..").TeamState;
            groupsState: import("../..").GroupsState;
            groupsDialogsState: import("../..").GroupsDialogsState;
            socialLoginState: import("../..").SocialLoginState;
            signUpState: import("../..").SignUpState;
            apiTokensState: import("../..").ApiTokensState;
            securityPolicyState: import("../..").SecurityPolicyState;
            restrictionsState: import("../..").RestrictionsState;
            provisioningState: import("../..").ProvisioningState;
            accountSettingsState: import("../..").AccountSettingsState;
            tenantsState: import("../..").TenantsState;
            rolesState: import("../..").RolesState;
            sessionsState: import("../..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: SessionsPolicyState;
            impersonateState?: import("../..").ImpersonateState | undefined;
            passkeysState?: import("../..").PasskeysState | undefined;
            customLoginState?: import("../..").CustomLoginState | undefined;
            allAccountsState?: import("../..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("../..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("../..").SecurityCenterState | undefined;
            smsState?: import("../..").SmsState | undefined;
            stepUpState?: import("../..").StepUpState | undefined;
            routes: import("../..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetSessionsPolicyState: (state: import("../..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("../..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("../..").LoginState;
        activateState: import("../..").ActivateAccountState;
        acceptInvitationState: import("../..").AcceptInvitationState;
        forgotPasswordState: import("../..").ForgotPasswordState;
        resetPhoneNumberState: import("../..").ResetPhoneNumberState;
        ssoState: import("../..").SSOState;
        profileState: import("../..").ProfileState;
        mfaState: import("../..").MFAState;
        teamState: import("../..").TeamState;
        groupsState: import("../..").GroupsState;
        groupsDialogsState: import("../..").GroupsDialogsState;
        socialLoginState: import("../..").SocialLoginState;
        signUpState: import("../..").SignUpState;
        apiTokensState: import("../..").ApiTokensState;
        securityPolicyState: import("../..").SecurityPolicyState;
        restrictionsState: import("../..").RestrictionsState;
        provisioningState: import("../..").ProvisioningState;
        accountSettingsState: import("../..").AccountSettingsState;
        tenantsState: import("../..").TenantsState;
        rolesState: import("../..").RolesState;
        sessionsState: import("../..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: SessionsPolicyState;
        impersonateState?: import("../..").ImpersonateState | undefined;
        passkeysState?: import("../..").PasskeysState | undefined;
        customLoginState?: import("../..").CustomLoginState | undefined;
        allAccountsState?: import("../..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("../..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("../..").SecurityCenterState | undefined;
        smsState?: import("../..").SmsState | undefined;
        stepUpState?: import("../..").StepUpState | undefined;
        routes: import("../..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    loadSessionsPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    createOrUpdateSessionsPolicy: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ISessionConfigurations, boolean>], WithCallback<ISessionConfigurations, boolean>, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    loadSessionsPolicy: () => void;
    setSessionsPolicyState: (state: Partial<SessionsPolicyState>) => void;
    resetSessionsPolicyState: () => void;
    createOrUpdateSessionsPolicy: (payload: WithCallback<ISessionConfigurations>) => void;
};
export declare type SessionsPolicyActions = DispatchedActions;
export { sessionsPolicyState, reducers as sessionsPolicyReducers, actions as sessionsPolicyActions };
