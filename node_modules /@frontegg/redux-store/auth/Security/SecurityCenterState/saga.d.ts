import { PayloadAction } from '@reduxjs/toolkit';
import { GetRecommendationsResponse, GetInsightsResponse, ISearchUserQueryParamsV3, FronteggPaginationWrapper, IRole, GetUserRolesResponse, IBaseGetUserResponse } from '@frontegg/rest-api';
import { ISecurityCenterTable, LoadUsersTableSecurityCenter } from './types';
import { WithCallback } from '../../../interfaces';
import { IUserV3 } from '../../TeamState/interfaces';
/**
 * This function is used to wrap sagas of the security page.
 * This function returns function,
 * that execute the saga it gets as a parameter,
 * and after it execute loadRecommendations and loadInsights sagas.
 * We need to call loadRecommendations and loadInsights after all change in the security page,
 * in order to keep the recommendations and insights updated.
 * @param action - saga to execute
 */
export declare function securityCenterSagaWrapper<T>(action: (props: T) => void): (props: T) => Generator<void | Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").CallEffect<GetRecommendationsResponse> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}>, void, GetRecommendationsResponse> | Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<GetInsightsResponse>, void, GetInsightsResponse> | import("redux-saga/effects").CallEffect<boolean[]>, void, boolean[]>;
export declare function loadRecommendations(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").CallEffect<GetRecommendationsResponse> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}>, void, GetRecommendationsResponse>;
export declare function loadInsights(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<GetInsightsResponse>, void, GetInsightsResponse>;
export declare function sendBulkResetBreachedPasswordEmails({ payload: { callback } }: PayloadAction<WithCallback>): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").CallEffect<void>, void, unknown>;
/**
 * This function gets users as we got from getUsersV3,
 * and returns the combined object of those users with their roles.
 * @param users - array of users
 */
export declare function getUsersWithRoles(users: IBaseGetUserResponse[]): Generator<import("redux-saga/effects").CallEffect<IRole[]> | import("redux-saga/effects").CallEffect<GetUserRolesResponse[]>, IUserV3[], IRole[] & GetUserRolesResponse[]>;
/**
 * This function is doing the logic needed in order to display a table in a generic way.
 * It calls getUsersV3 based on the params, combined the response of users with roles,
 * and load it to the correct state by the updateStateKey.
 * @param key - key for loaders / errors
 * @param tableState - the state of the specific table
 * @param updateStateKey - the key of the specific table to be updated in the state
 * @param _offset - page offset
 * @param _limit - limit per page
 * @param _preset - preset to be send according to the table type
 * @param _email - email input as searched
 *
 */
export declare function loadUsersTableSecurityCenter({ key, tableState, updateStateKey, _offset: offset, _limit: limit, _preset, _email, _maxInactiveSeconds, }: LoadUsersTableSecurityCenter): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | Generator<import("redux-saga/effects").CallEffect<IRole[]> | import("redux-saga/effects").CallEffect<GetUserRolesResponse[]>, IUserV3[], IRole[] & GetUserRolesResponse[]> | import("redux-saga/effects").CallEffect<FronteggPaginationWrapper<IBaseGetUserResponse>>, void, FronteggPaginationWrapper<IBaseGetUserResponse> & IUserV3[]>;
export declare function loadBreachedPasswordUsers({ payload }: PayloadAction<ISearchUserQueryParamsV3>): Generator<import("redux-saga/effects").SelectEffect | Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | Generator<import("redux-saga/effects").CallEffect<IRole[]> | import("redux-saga/effects").CallEffect<GetUserRolesResponse[]>, IUserV3[], IRole[] & GetUserRolesResponse[]> | import("redux-saga/effects").CallEffect<FronteggPaginationWrapper<IBaseGetUserResponse>>, void, FronteggPaginationWrapper<IBaseGetUserResponse> & IUserV3[]>, void, ISecurityCenterTable>;
export declare function loadUnenrolledMfaUsers({ payload }: PayloadAction<ISearchUserQueryParamsV3>): Generator<import("redux-saga/effects").SelectEffect | Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | Generator<import("redux-saga/effects").CallEffect<IRole[]> | import("redux-saga/effects").CallEffect<GetUserRolesResponse[]>, IUserV3[], IRole[] & GetUserRolesResponse[]> | import("redux-saga/effects").CallEffect<FronteggPaginationWrapper<IBaseGetUserResponse>>, void, FronteggPaginationWrapper<IBaseGetUserResponse> & IUserV3[]>, void, ISecurityCenterTable>;
export declare function loadInactiveUsers({ payload }: PayloadAction<ISearchUserQueryParamsV3>): Generator<import("redux-saga/effects").SelectEffect | Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | Generator<import("redux-saga/effects").CallEffect<IRole[]> | import("redux-saga/effects").CallEffect<GetUserRolesResponse[]>, IUserV3[], IRole[] & GetUserRolesResponse[]> | import("redux-saga/effects").CallEffect<FronteggPaginationWrapper<IBaseGetUserResponse>>, void, FronteggPaginationWrapper<IBaseGetUserResponse> & IUserV3[]>, void, ISecurityCenterTable>;
export declare function securityCenterSagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
export declare function loadRecommendationsMock(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<true>, void, unknown>;
export declare function loadInsightsMock(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<true>, void, unknown>;
export declare function loadBreachedPasswordUsersMock(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<true>, void, unknown>;
export declare function loadUnenrolledMfaUsersMock(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<true>, void, unknown>;
export declare function loadInactiveUsersMock(): Generator<import("redux-saga/effects").PutEffect<{
    payload: import("./types").SecurityCenterStateIndicator;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SecurityCenterState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<true>, void, unknown>;
export declare function securityCenterSagasMock(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
