import { WithCallback } from '../../../interfaces';
import { IPRestrictionsState, RestrictionsState, EmailDomainRestrictionsState, SaveEmailDomainRestrictionConfigPayload, SaveEmailDomainRestrictionsPayload } from './interfaces';
import { CreateIpRestriction, IPRestrictionsConfig } from '@frontegg/rest-api';
declare const restrictionsState: RestrictionsState;
declare const reducers: {
    setRestrictionsState: {
        prepare: (payload: Partial<RestrictionsState>) => {
            payload: Partial<RestrictionsState>;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: Partial<RestrictionsState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("../..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../..").LoginState;
            activateState: import("../..").ActivateAccountState;
            acceptInvitationState: import("../..").AcceptInvitationState;
            forgotPasswordState: import("../..").ForgotPasswordState;
            resetPhoneNumberState: import("../..").ResetPhoneNumberState;
            ssoState: import("../..").SSOState;
            profileState: import("../..").ProfileState;
            mfaState: import("../..").MFAState;
            teamState: import("../..").TeamState;
            groupsState: import("../..").GroupsState;
            groupsDialogsState: import("../..").GroupsDialogsState;
            socialLoginState: import("../..").SocialLoginState;
            signUpState: import("../..").SignUpState;
            apiTokensState: import("../..").ApiTokensState;
            securityPolicyState: import("../..").SecurityPolicyState;
            restrictionsState: RestrictionsState;
            provisioningState: import("../..").ProvisioningState;
            accountSettingsState: import("../..").AccountSettingsState;
            tenantsState: import("../..").TenantsState;
            rolesState: import("../..").RolesState;
            sessionsState: import("../..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("../..").SessionsPolicyState;
            impersonateState?: import("../..").ImpersonateState | undefined;
            passkeysState?: import("../..").PasskeysState | undefined;
            customLoginState?: import("../..").CustomLoginState | undefined;
            allAccountsState?: import("../..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("../..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("../..").SecurityCenterState | undefined;
            smsState?: import("../..").SmsState | undefined;
            stepUpState?: import("../..").StepUpState | undefined;
            routes: import("../..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    setIpRestrictionsState: {
        prepare: (payload: Partial<IPRestrictionsState>) => {
            payload: Partial<IPRestrictionsState>;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: Partial<IPRestrictionsState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("../..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../..").LoginState;
            activateState: import("../..").ActivateAccountState;
            acceptInvitationState: import("../..").AcceptInvitationState;
            forgotPasswordState: import("../..").ForgotPasswordState;
            resetPhoneNumberState: import("../..").ResetPhoneNumberState;
            ssoState: import("../..").SSOState;
            profileState: import("../..").ProfileState;
            mfaState: import("../..").MFAState;
            teamState: import("../..").TeamState;
            groupsState: import("../..").GroupsState;
            groupsDialogsState: import("../..").GroupsDialogsState;
            socialLoginState: import("../..").SocialLoginState;
            signUpState: import("../..").SignUpState;
            apiTokensState: import("../..").ApiTokensState;
            securityPolicyState: import("../..").SecurityPolicyState;
            restrictionsState: RestrictionsState;
            provisioningState: import("../..").ProvisioningState;
            accountSettingsState: import("../..").AccountSettingsState;
            tenantsState: import("../..").TenantsState;
            rolesState: import("../..").RolesState;
            sessionsState: import("../..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("../..").SessionsPolicyState;
            impersonateState?: import("../..").ImpersonateState | undefined;
            passkeysState?: import("../..").PasskeysState | undefined;
            customLoginState?: import("../..").CustomLoginState | undefined;
            allAccountsState?: import("../..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("../..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("../..").SecurityCenterState | undefined;
            smsState?: import("../..").SmsState | undefined;
            stepUpState?: import("../..").StepUpState | undefined;
            routes: import("../..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    setEmailDomainRestrictionsState: {
        prepare: (payload: Partial<EmailDomainRestrictionsState>) => {
            payload: Partial<EmailDomainRestrictionsState>;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: Partial<EmailDomainRestrictionsState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("../..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../..").LoginState;
            activateState: import("../..").ActivateAccountState;
            acceptInvitationState: import("../..").AcceptInvitationState;
            forgotPasswordState: import("../..").ForgotPasswordState;
            resetPhoneNumberState: import("../..").ResetPhoneNumberState;
            ssoState: import("../..").SSOState;
            profileState: import("../..").ProfileState;
            mfaState: import("../..").MFAState;
            teamState: import("../..").TeamState;
            groupsState: import("../..").GroupsState;
            groupsDialogsState: import("../..").GroupsDialogsState;
            socialLoginState: import("../..").SocialLoginState;
            signUpState: import("../..").SignUpState;
            apiTokensState: import("../..").ApiTokensState;
            securityPolicyState: import("../..").SecurityPolicyState;
            restrictionsState: RestrictionsState;
            provisioningState: import("../..").ProvisioningState;
            accountSettingsState: import("../..").AccountSettingsState;
            tenantsState: import("../..").TenantsState;
            rolesState: import("../..").RolesState;
            sessionsState: import("../..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("../..").SessionsPolicyState;
            impersonateState?: import("../..").ImpersonateState | undefined;
            passkeysState?: import("../..").PasskeysState | undefined;
            customLoginState?: import("../..").CustomLoginState | undefined;
            allAccountsState?: import("../..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("../..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("../..").SecurityCenterState | undefined;
            smsState?: import("../..").SmsState | undefined;
            stepUpState?: import("../..").StepUpState | undefined;
            routes: import("../..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
};
declare const actions: {
    checkIfUserIpValid: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    addCurrentUserIpAndActivate: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("../../../interfaces").CallbackMethod<boolean> | undefined;
    }], {
        callback?: import("../../../interfaces").CallbackMethod<boolean> | undefined;
    }, string, never, never>;
    loadIpRestrictions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveIpRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<CreateIpRestriction, boolean>], WithCallback<CreateIpRestriction, boolean>, string, never, never>;
    saveIpRestrictionsConfig: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPRestrictionsConfig, boolean>], WithCallback<IPRestrictionsConfig, boolean>, string, never, never>;
    deleteIpRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        id: string;
    }, boolean>], WithCallback<{
        id: string;
    }, boolean>, string, never, never>;
    loadEmailDomainRestrictions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveEmailDomainRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<import("@frontegg/rest-api").CreateDomainRestriction, boolean>], WithCallback<import("@frontegg/rest-api").CreateDomainRestriction, boolean>, string, never, never>;
    saveEmailDomainRestrictionsConfig: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<import("@frontegg/rest-api").UpdateDomainRestrictionsConfig, boolean>], WithCallback<import("@frontegg/rest-api").UpdateDomainRestrictionsConfig, boolean>, string, never, never>;
    deleteEmailDomainRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        id: string;
    }], {
        id: string;
    }, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setRestrictionsState: (state: Partial<RestrictionsState>) => void;
    setIpRestrictionsState: (state: Partial<IPRestrictionsState>) => void;
    loadIpRestrictions: () => void;
    saveIpRestriction: (payload: WithCallback<CreateIpRestriction>) => void;
    saveIpRestrictionsConfig: (payload: WithCallback<IPRestrictionsConfig>) => void;
    deleteIpRestriction: (payload: WithCallback<{
        id: string;
    }>) => void;
    checkIfUserIpValid: () => void;
    addCurrentUserIpAndActivate: (payload: WithCallback) => void;
    setEmailDomainRestrictionsState: (state: Partial<EmailDomainRestrictionsState>) => void;
    loadEmailDomainRestrictions: () => void;
    saveEmailDomainRestriction: (payload: SaveEmailDomainRestrictionsPayload) => void;
    saveEmailDomainRestrictionsConfig: (payload: SaveEmailDomainRestrictionConfigPayload) => void;
    deleteEmailDomainRestriction: (payload: {
        id: string;
    }) => void;
};
export declare type RestrictionsActions = DispatchedActions;
export { restrictionsState, reducers as restrictionsReducers, actions as restrictionsActions };
