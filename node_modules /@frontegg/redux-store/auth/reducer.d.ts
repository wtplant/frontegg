import { AuthState, User } from './interfaces';
import { LoginActions } from './LoginState';
import { StepUpActions } from './StepUpState';
import { ActivateAccountActions } from './ActivateState';
import { AcceptInvitationActions } from './AcceptInvitationState';
import { ForgotPasswordActions } from './ForgotPasswordState';
import { SSOActions } from './SSOState';
import { MfaActions } from './MfaState';
import { ProfileActions } from './ProfileState';
import { TeamActions } from './TeamState';
import { SocialLoginActions } from './SocialLogins';
import { SignUpActions } from './SignUp';
import { ApiTokensActions } from './ApiTokensState';
import { SecurityPolicyActions } from './Security/SecurityPolicyState';
import { AccountSettingsActions } from './AccountSettingsState';
import { TenantsActions } from './TenantsState';
import { RolesActions } from './RolesState';
import { ResetPhoneNumberActions } from './ResetPhoneNumberState';
import { SessionsActions } from './SessionsState';
import { RestrictionsActions } from './Security/RestrictionsState';
import { ProvisioningActions } from './Provisioning';
import { ImpersonateActions } from './ImpersonationState';
import { PasskeysActions } from './PasskeysState';
import { GroupsActions } from './GroupsState';
import { GroupsDialogsActions } from './GroupsState/groupsDialogsState';
import { CustomLoginActions } from './CustomLoginState';
import { AllAccountsActions } from './MSP/AllAccountsState';
import { AllAccountsDialogsActions } from './MSP/AllAccountsState/allAccountsDialogsState';
import { SecurityCenterActions } from './Security/SecurityCenterState';
import { SmsActions } from './SmsState';
import { UserEntitlementsContext as UserEntitlementsResponseV2 } from '@frontegg/entitlements-javascript-commons';
import { LoadEntitlementsActionPayload } from './Entitlements/interfaces';
declare const reducer: import("redux").Reducer<AuthState, import("redux").AnyAction>;
declare const actions: {
    loadPhoneNumbers: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setUpPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdatePhoneNumber, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdatePhoneNumber, boolean>, string, never, never>;
    verifyPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IVerifyPhoneNumber, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IVerifyPhoneNumber, boolean>, string, never, never>;
    deletePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IPhoneId, boolean>], import("..").WithCallback<import(".").IPhoneId, boolean>, string, never, never>;
    verifyDeletePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithPhoneId<import("@frontegg/rest-api").IVerifyPhoneNumber>, boolean>], import("..").WithCallback<import(".").WithPhoneId<import("@frontegg/rest-api").IVerifyPhoneNumber>, boolean>, string, never, never>;
    preVerifyPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPreVerifyPhoneNumber, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IPreVerifyPhoneNumber, boolean>, string, never, never>;
    loadRecommendations: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadInsights: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    sendResetBreachedPasswordEmail: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IForgotPassword, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IForgotPassword, boolean>, string, never, never>;
    sendBulkResetBreachedPasswordEmails: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }, string, never, never>;
    loadBreachedPasswordUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").ISearchUserQueryParamsV3], import("@frontegg/rest-api").ISearchUserQueryParamsV3, string, never, never>;
    loadUnenrolledMfaUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").ISearchUserQueryParamsV3], import("@frontegg/rest-api").ISearchUserQueryParamsV3, string, never, never>;
    loadInactiveUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").ISearchUserQueryParamsV3], import("@frontegg/rest-api").ISearchUserQueryParamsV3, string, never, never>;
    loadAccounts: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    searchAccounts: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    updateSubAccountAccessForUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").UpdateSubAccountAccessRequestDto & {
        userId: string;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").UpdateSubAccountAccessRequestDto & {
        userId: string;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    createSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    updateSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    deleteSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequestTenantDto & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequestTenantDto & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    updateSubAccountSettings: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").UpdateSubTenantRequestParams & import("@frontegg/rest-api").UpdateSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").UpdateSubTenantRequestParams & import("@frontegg/rest-api").UpdateSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    addUsersToAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").AddUsersToSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").AddUsersToSubTenantRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    getAccountUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISearchUserQueryParamsV3 & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ISearchUserQueryParamsV3 & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    deleteUsersFromAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    setUserRolesForSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    } & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    getUserJwtForSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").GetUserJwtRequestDto, boolean>], import("..").WithCallback<import("@frontegg/rest-api").GetUserJwtRequestDto, boolean>, string, never, never>;
    setRootAccountData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSelectedSubAccountData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    loadNumberOfUsersForSelectedSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("./MSP/AllAccountsState").TLoadNumberOfUsersForSelectedSubAccount & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>], import("..").WithCallback<import("./MSP/AllAccountsState").TLoadNumberOfUsersForSelectedSubAccount & import("./MSP/AllAccountsState").TUserJwtPayload, boolean>, string, never, never>;
    loadWebAuthnDevices: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    deleteWebAuthnDevice: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        deviceId: string;
    }, boolean>], import("..").WithCallback<{
        deviceId: string;
    }, boolean>, string, never, never>;
    impersonate: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IImpersonatePayload, boolean>], import("..").WithCallback<import(".").IImpersonatePayload, boolean>, string, never, never>;
    loadProvisionConnections: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    createProvisionConnection: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").Scim2CreateConnectionConfigRequest, import("@frontegg/rest-api").Scim2CreateConnectionConfigResponse>], import("..").WithCallback<import("@frontegg/rest-api").Scim2CreateConnectionConfigRequest, import("@frontegg/rest-api").Scim2CreateConnectionConfigResponse>, string, never, never>;
    deleteProvisionConnection: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        id: string;
    }, boolean>], import("..").WithCallback<{
        id: string;
    }, boolean>, string, never, never>;
    updateProvisionConnection: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../interfaces").WithId<import("@frontegg/rest-api").Scim2PatchConnectionConfigRequest>], import("../interfaces").WithId<import("@frontegg/rest-api").Scim2PatchConnectionConfigRequest>, string, never, never>;
    checkIfUserIpValid: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    addCurrentUserIpAndActivate: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }, string, never, never>;
    loadIpRestrictions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveIpRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").CreateIpRestriction, boolean>], import("..").WithCallback<import("@frontegg/rest-api").CreateIpRestriction, boolean>, string, never, never>;
    saveIpRestrictionsConfig: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPRestrictionsConfig, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IPRestrictionsConfig, boolean>, string, never, never>;
    deleteIpRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        id: string;
    }, boolean>], import("..").WithCallback<{
        id: string;
    }, boolean>, string, never, never>;
    loadEmailDomainRestrictions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveEmailDomainRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").CreateDomainRestriction, boolean>], import("..").WithCallback<import("@frontegg/rest-api").CreateDomainRestriction, boolean>, string, never, never>;
    saveEmailDomainRestrictionsConfig: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").UpdateDomainRestrictionsConfig, boolean>], import("..").WithCallback<import("@frontegg/rest-api").UpdateDomainRestrictionsConfig, boolean>, string, never, never>;
    deleteEmailDomainRestriction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        id: string;
    }], {
        id: string;
    }, string, never, never>;
    loadSessionsPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    createOrUpdateSessionsPolicy: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISessionConfigurations, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ISessionConfigurations, boolean>, string, never, never>;
    loadUserSessions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadCurrentUserSession: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    deleteUserSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        id: string;
    }], {
        id: string;
    }, string, never, never>;
    deleteAllUserSessions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    revokeUserSessions: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        userId: string;
    }, boolean>], import("..").WithCallback<{
        userId: string;
    }, boolean>, string, never, never>;
    loadRolesAndPermissions: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        silentLoading?: boolean | undefined;
    } | undefined)?], {
        silentLoading?: boolean | undefined;
    } | undefined, string, never, never>;
    addRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IAddRole, import("@frontegg/rest-api").IRole>], import("..").WithCallback<import("@frontegg/rest-api").IAddRole, import("@frontegg/rest-api").IRole>, string, never, never>;
    updateRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateRole, import("@frontegg/rest-api").IRole>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateRole, import("@frontegg/rest-api").IRole>, string, never, never>;
    deleteRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IDeleteRole, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IDeleteRole, boolean>, string, never, never>;
    attachPermissionsToRole: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IAttachPermissionsToRole, import("@frontegg/rest-api").IRole>], import("..").WithCallback<import("@frontegg/rest-api").IAttachPermissionsToRole, import("@frontegg/rest-api").IRole>, string, never, never>;
    switchTenant: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISwitchTenant, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ISwitchTenant, boolean>, string, never, never>;
    loadTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<import("@frontegg/rest-api").ITenantsResponse[]> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<import("@frontegg/rest-api").ITenantsResponse[]> | undefined;
    } | undefined, string, never, never>;
    loadSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined, string, never, never>;
    loadSubTenantsTree: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined, string, never, never>;
    loadAccountSettings: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("..").WithCallback<{
        silentLoading?: boolean | undefined;
    }, boolean> | undefined)?], import("..").WithCallback<{
        silentLoading?: boolean | undefined;
    }, boolean> | undefined, string, never, never>;
    saveAccountSettings: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISettingsResponse, import("@frontegg/rest-api").ISettingsResponse>], import("..").WithCallback<import("@frontegg/rest-api").ISettingsResponse, import("@frontegg/rest-api").ISettingsResponse>, string, never, never>;
    loadSecurityPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadPublicSecurityPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSecurityPolicyMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSecurityPolicyVendorMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSecurityPolicyMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyMfa, import("@frontegg/rest-api").ISecurityPolicyMfa>], import("..").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyMfa, import("@frontegg/rest-api").ISecurityPolicyMfa>, string, never, never>;
    loadSecurityPolicyLockout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSecurityPolicyVendorLockout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSecurityPolicyLockout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyLockout, import("@frontegg/rest-api").ISecurityPolicyLockout>], import("..").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyLockout, import("@frontegg/rest-api").ISecurityPolicyLockout>, string, never, never>;
    loadSecurityPolicyCaptcha: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSecurityPolicyPasswordHistory: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSecurityPolicyVendorPasswordHistory: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSecurityPolicyPasswordHistory: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyPasswordHistory, import("@frontegg/rest-api").ISecurityPolicyPasswordHistory>], import("..").WithCallback<import("@frontegg/rest-api").ISaveSecurityPolicyPasswordHistory, import("@frontegg/rest-api").ISecurityPolicyPasswordHistory>, string, never, never>;
    loadVendorPasswordConfig: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadPublicAuthStrategiesPolicy: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("..").WithSilentLoad<{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }> | undefined)?], import("..").WithSilentLoad<{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }> | undefined, string, never, never>;
    loadUserApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("..").WithSilentLoad<{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }> | undefined)?], import("..").WithSilentLoad<{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }> | undefined, string, never, never>;
    loadTenantApiTokens: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("..").WithSilentLoad<{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }> | undefined)?], import("..").WithSilentLoad<{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }> | undefined, string, never, never>;
    initApiTokensData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").ApiTokenType], import(".").ApiTokenType, string, never, never>;
    addTenantApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Pick<import(".").ITenantApiTokensData, "description" | "roleIds" | "expires">, boolean>], import("..").WithCallback<Pick<import(".").ITenantApiTokensData, "description" | "roleIds" | "expires">, boolean>, string, never, never>;
    addUserApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Pick<import(".").IApiTokensData, "description" | "expires">, boolean>], import("..").WithCallback<Pick<import(".").IApiTokensData, "description" | "expires">, boolean>, string, never, never>;
    deleteUserApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    deleteTenantApiToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    loadGroups: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    getGroupById: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IGetGroup], import("@frontegg/rest-api").IGetGroup, string, never, never>;
    createGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ICreateGroup & Partial<import("@frontegg/rest-api").IUpdateGroupRoles> & Partial<import("@frontegg/rest-api").IUpdateGroupUsers>, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ICreateGroup & Partial<import("@frontegg/rest-api").IUpdateGroupRoles> & Partial<import("@frontegg/rest-api").IUpdateGroupUsers>, boolean>, string, never, never>;
    updateGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroup, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroup, boolean>, string, never, never>;
    deleteGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        groupId: string;
    }, boolean>], import("..").WithCallback<{
        groupId: string;
    }, boolean>, string, never, never>;
    addRolesToGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>, string, never, never>;
    deleteRolesFromGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>, string, never, never>;
    addUsersToGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>, string, never, never>;
    deleteUsersFromGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>, string, never, never>;
    getGroupConfiguration: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    updateGroupConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IUpdateGroupConfig & {
        groupId: string;
    }], import("@frontegg/rest-api").IUpdateGroupConfig & {
        groupId: string;
    }, string, never, never>;
    getTeamUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IGetUsersV2Payload], import(".").IGetUsersV2Payload, string, never, never>;
    loadUsersV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("..").WithSilentLoad<import(".").IGetUsersV2Payload>, import("@frontegg/rest-api").ITeamUser[]>], import("..").WithCallback<import("..").WithSilentLoad<import(".").IGetUsersV2Payload>, import("@frontegg/rest-api").ITeamUser[]>, string, never, never>;
    loadUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("..").WithSilentLoad<import("@frontegg/rest-api").ILoadUsers>, import("@frontegg/rest-api").ITeamUser[]>], import("..").WithCallback<import("..").WithSilentLoad<import("@frontegg/rest-api").ILoadUsers>, import("@frontegg/rest-api").ITeamUser[]>, string, never, never>;
    loadAllSubTenantsUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("..").WithSilentLoad<Partial<import("@frontegg/rest-api").ILoadAllUsers>>, import("@frontegg/rest-api").ISubTenantUser[]>], import("..").WithCallback<import("..").WithSilentLoad<Partial<import("@frontegg/rest-api").ILoadAllUsers>>, import("@frontegg/rest-api").ISubTenantUser[]>, string, never, never>;
    loadRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<{
            roles: import("@frontegg/rest-api").ITeamUserRole[];
            permissions: import("@frontegg/rest-api").ITeamUserPermission[];
        }> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<{
            roles: import("@frontegg/rest-api").ITeamUserRole[];
            permissions: import("@frontegg/rest-api").ITeamUserPermission[];
        }> | undefined;
    } | undefined, string, never, never>;
    addUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IAddUser, import("@frontegg/rest-api").ITeamUser>], import("..").WithCallback<import("@frontegg/rest-api").IAddUser, import("@frontegg/rest-api").ITeamUser>, string, never, never>;
    addUsersBulk: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IAddUsers, import(".").BulkInvintationData>], import("..").WithCallback<import(".").IAddUsers, import(".").BulkInvintationData>, string, never, never>;
    addUserToSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").AddUserToSubTenantsRequest, boolean>], import("..").WithCallback<import("@frontegg/rest-api").AddUserToSubTenantsRequest, boolean>, string, never, never>;
    updateUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Partial<import("@frontegg/rest-api").ITeamUser>, import("@frontegg/rest-api").ITeamUser>], import("..").WithCallback<Partial<import("@frontegg/rest-api").ITeamUser>, import("@frontegg/rest-api").ITeamUser>, string, never, never>;
    deleteUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>, string, never, never>;
    setUserRolesForSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    }, boolean>, string, never, never>;
    deleteUserFromSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest, boolean>], import("..").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest, boolean>, string, never, never>;
    lockUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IDeleteUser, boolean>, string, never, never>;
    resendActivationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IResendActivationLink, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IResendActivationLink, boolean>, string, never, never>;
    resendInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>, string, never, never>;
    resendInvitationEmail: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IResendInvitationEmail, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IResendInvitationEmail, boolean>, string, never, never>;
    resendInvitationLinkToAllSubTenants: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IResendInvitationLink, boolean>, string, never, never>;
    getTemporaryUsersConfig: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    updateUserExpirationTime: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IUpdateUserExpiration, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IUpdateUserExpiration, boolean>, string, never, never>;
    setUserAsPermanent: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Pick<import("@frontegg/rest-api").IUpdateUserExpiration, "userId">, boolean>], import("..").WithCallback<Pick<import("@frontegg/rest-api").IUpdateUserExpiration, "userId">, boolean>, string, never, never>;
    getInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    createInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, string>], import("..").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, string>, string, never, never>;
    updateInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ICreateOrUpdateInviteUserLink, boolean>, string, never, never>;
    deleteInvitationLink: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined, string, never, never>;
    openAddUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import(".").AddUserDialogState, "onClose"> | undefined)?], Pick<import(".").AddUserDialogState, "onClose"> | undefined, string, never, never>;
    closeAddUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
    openDeleteUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import(".").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined)?], Pick<import(".").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined, string, never, never>;
    closeDeleteUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
    openLockUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Pick<import(".").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined)?], Pick<import(".").DeleteUserDialogState, "onClose" | "userId" | "email"> | undefined, string, never, never>;
    closeLockUserDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[any?], any, string, never, never>;
    enrollMfa: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    getMFADevices: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    getMFAStrategies: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    verifyMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IVerifyMfa, string | undefined>], import("..").WithCallback<import("@frontegg/rest-api").IVerifyMfa, string | undefined>, string, never, never>;
    verifyMfaAfterForce: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, string | undefined>], import("..").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, string | undefined>, string, never, never>;
    disableMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IDisableMfa, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IDisableMfa, boolean>, string, never, never>;
    preDisableMfaSms: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        deviceId: string;
    }, boolean>], import("..").WithCallback<{
        deviceId: string;
    }, boolean>, string, never, never>;
    disableMfaSms: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IDisableMFASMS>, boolean>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IDisableMFASMS>, boolean>, string, never, never>;
    preEnrollMfaSms: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Pick<import("@frontegg/rest-api").IPreEnrollMFASMS, "phoneNumber">, boolean>], import("..").WithCallback<Pick<import("@frontegg/rest-api").IPreEnrollMFASMS, "phoneNumber">, boolean>, string, never, never>;
    enrollMfaSms: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Pick<import("@frontegg/rest-api").IEnrollMFASMS, "otcToken" | "code">, string | undefined>], import("..").WithCallback<Pick<import("@frontegg/rest-api").IEnrollMFASMS, "otcToken" | "code">, string | undefined>, string, never, never>;
    preEnrollMfaWebAuthn: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("..").CallbackMethod<import(".").IPreEnrollMFAWebAuthNForLoginResponse> | undefined;
    }], {
        callback?: import("..").CallbackMethod<import(".").IPreEnrollMFAWebAuthNForLoginResponse> | undefined;
    }, string, never, never>;
    enrollMfaWebAuthn: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IUserEnrollMFAWebAuthnPayload], import(".").IUserEnrollMFAWebAuthnPayload, string, never, never>;
    preDisableMfaWebAuthn: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        deviceId: string;
    }, import(".").IPreVerifyMFAWebAuthNForLoginResponse>], import("..").WithCallback<{
        deviceId: string;
    }, import(".").IPreVerifyMFAWebAuthNForLoginResponse>, string, never, never>;
    disableMfaWebAuthn: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IDisableMFAWebAuthnPayload], import(".").IDisableMFAWebAuthnPayload, string, never, never>;
    loadSSOConfigurationsV2: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSSOConfigurationV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">>, import("@frontegg/rest-api").ISSOConfiguration>], import("..").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">>, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    updateSSOConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">> & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>], import("..").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISSOConfiguration, "roleIds" | "type" | "generatedVerification" | "enabled" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "oidcClientId" | "oidcSecret" | "groups" | "skipEmailDomainValidation">> & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    deleteSSOConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        ssoConfigId: string;
    }, boolean>], import("..").WithCallback<{
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    saveSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ICreateSSODomain & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSODomain>], import("..").WithCallback<import("@frontegg/rest-api").ICreateSSODomain & {
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSODomain>, string, never, never>;
    deleteSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>], import("..").WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    validateSSODomainV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>], import("..").WithCallback<{
        domainId: string;
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    setSSODefaultRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        roleIds: string[];
        ssoConfigId: string;
    }, boolean>], import("..").WithCallback<{
        roleIds: string[];
        ssoConfigId: string;
    }, boolean>, string, never, never>;
    setSSOGroups: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        ssoConfigId: string;
        groupsToAdd: import("@frontegg/rest-api").ICreateSamlGroup[];
        groupsToDelete: string[];
    }, boolean>], import("..").WithCallback<{
        ssoConfigId: string;
        groupsToAdd: import("@frontegg/rest-api").ICreateSamlGroup[];
        groupsToDelete: string[];
    }, boolean>, string, never, never>;
    updateSSOGroups: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        ssoConfigId: string;
        changedGroups: import("@frontegg/rest-api").IUpdateSamlGroup[];
    }, boolean>], import("..").WithCallback<{
        ssoConfigId: string;
        changedGroups: import("@frontegg/rest-api").IUpdateSamlGroup[];
    }, boolean>, string, never, never>;
    saveSSOConfigurationByMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        configFile: File;
    }, import("@frontegg/rest-api").ISSOConfiguration>], import("..").WithCallback<{
        configFile: File;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    updateSSOConfigurationByMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        configFile: File;
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>], import("..").WithCallback<{
        configFile: File;
        ssoConfigId: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    loadSSOConfigurations: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSSOAuthorizationRoles: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveSSOConfigurations: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISamlConfiguration, "type" | "enabled" | "domain" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "isSamlActive" | "oidcClientId" | "oidcSecret"> & {
        samlVendor: import(".").SamlVendors;
    }>, boolean>], import("..").WithCallback<Partial<Pick<import("@frontegg/rest-api").ISamlConfiguration, "type" | "enabled" | "domain" | "ssoEndpoint" | "publicCertificate" | "signRequest" | "acsUrl" | "spEntityId" | "isSamlActive" | "oidcClientId" | "oidcSecret"> & {
        samlVendor: import(".").SamlVendors;
    }>, boolean>, string, never, never>;
    saveSSOConfigurationsFile: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[File[]], File[], string, never, never>;
    saveSSOConfigurationByData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Partial<import("@frontegg/rest-api").ISSOConfiguration> & {
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
    }, import("@frontegg/rest-api").ISSOConfiguration>], import("..").WithCallback<Partial<import("@frontegg/rest-api").ISSOConfiguration> & {
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    saveSSOConfigurationByUrl: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
        metadataUrl: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>], import("..").WithCallback<{
        ssoConfigId?: string | undefined;
        configMetadata?: Record<string, string> | undefined;
        metadataUrl: string;
    }, import("@frontegg/rest-api").ISSOConfiguration>, string, never, never>;
    saveSSOConfigurationsFileWithCallback: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        configFile: File;
    }, boolean>], import("..").WithCallback<{
        configFile: File;
    }, boolean>, string, never, never>;
    validateSSODomain: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    } | undefined, string, never, never>;
    updateSSOAuthorizationRoles: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        authorizationRoles: string[];
        groups?: import("@frontegg/rest-api").ISamlRolesGroup[] | undefined;
    }, boolean>], import("..").WithCallback<{
        authorizationRoles: string[];
        groups?: import("@frontegg/rest-api").ISamlRolesGroup[] | undefined;
    }, boolean>, string, never, never>;
    deleteSamlGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        id: string;
    }, boolean>], import("..").WithCallback<{
        id: string;
    }, boolean>, string, never, never>;
    createSamlGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ICreateSamlGroup, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ICreateSamlGroup, boolean>, string, never, never>;
    oidcPostlogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IOidcPostLogin], import("@frontegg/rest-api").IOidcPostLogin, string, never, never>;
    loadTenantMetadata: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    updateTenantMetadata: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<Partial<import(".").UpdateTenantMetadataRequest>, boolean>], import("..").WithCallback<Partial<import(".").UpdateTenantMetadataRequest>, boolean>, string, never, never>;
    loadProfile: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    saveProfile: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("..").WithCallback<import("@frontegg/rest-api").IGetUsersV2Response, import("@frontegg/rest-api").IGetUsersV2Response>>], Partial<import("..").WithCallback<import("@frontegg/rest-api").IGetUsersV2Response, import("@frontegg/rest-api").IGetUsersV2Response>>, string, never, never>;
    changePassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IChangePassword, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IChangePassword, boolean>, string, never, never>;
    signUpUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").ISignUpUserPayload], import(".").ISignUpUserPayload, string, never, never>;
    resetSignUpStateSoft: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    resetPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IResetPhoneNumber, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IResetPhoneNumber, boolean>, string, never, never>;
    verifyResetPhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IVerifyResetPhoneNumber, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IVerifyResetPhoneNumber, boolean>, string, never, never>;
    changePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IChangePhoneNumber & {
        recaptchaToken?: string | undefined;
        email: string;
    }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IChangePhoneNumber & {
        recaptchaToken?: string | undefined;
        email: string;
    }, boolean>, string, never, never>;
    forgotPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IForgotPasswordPayload], import(".").IForgotPasswordPayload, string, never, never>;
    resetPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IResetPasswordPayload], import(".").IResetPasswordPayload, string, never, never>;
    loadPasswordConfig: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("@frontegg/rest-api").IGetUserPasswordConfig | undefined)?], import("@frontegg/rest-api").IGetUserPasswordConfig | undefined, string, never, never>;
    acceptInvitation: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IAcceptInvitation], import("@frontegg/rest-api").IAcceptInvitation, string, never, never>;
    activateAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IActivateAccountPayload, boolean>], import("..").WithCallback<import(".").IActivateAccountPayload, boolean>, string, never, never>;
    preActivateAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IPreActivateAccount], import(".").IPreActivateAccount, string, never, never>;
    getActivateAccountStrategy: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IGetActivateAccountStrategy, import("@frontegg/rest-api").IGetActivateAccountStrategyResponse>], import("..").WithCallback<import("@frontegg/rest-api").IGetActivateAccountStrategy, import("@frontegg/rest-api").IGetActivateAccountStrategyResponse>, string, never, never>;
    resendActivationEmail: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IResendActivationEmail, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IResendActivationEmail, boolean>, string, never, never>;
    loadSocialLoginsConfiguration: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadSocialLoginsConfigurationV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        callback?: import("..").CallbackMethod<import(".").SocialLoginState> | undefined;
    } | undefined)?], {
        callback?: import("..").CallbackMethod<import(".").SocialLoginState> | undefined;
    } | undefined, string, never, never>;
    loginViaSocialLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").ILoginViaSocialLoginPayload], import(".").ILoginViaSocialLoginPayload, string, never, never>;
    setSocialLoginError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").ISetSocialLoginError], import("@frontegg/rest-api").ISetSocialLoginError, string, never, never>;
    stepUpHostedLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IStepUpHostedLogin], import(".").IStepUpHostedLogin, string, never, never>;
    generateStepUpSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IGenerateStepUpSession, boolean>], import("..").WithCallback<import(".").IGenerateStepUpSession, boolean>, string, never, never>;
    stepUpWithAuthenticator: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IStepUpWithAuthenticator, boolean>], import("..").WithCallback<import(".").IStepUpWithAuthenticator, boolean>, string, never, never>;
    preVerifyMFASMSForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, boolean>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, boolean>, string, never, never>;
    verifyMFASMSForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IVerifyMFASMS>, boolean>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IVerifyMFASMS>, boolean>, string, never, never>;
    preVerifyMFAWebAuthnForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, import(".").IPreVerifyMFAWebAuthNForLoginResponse>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, import(".").IPreVerifyMFAWebAuthNForLoginResponse>, string, never, never>;
    verifyMFAWebAuthnForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IVerifyMFAWebAuthnPayload], import(".").IVerifyMFAWebAuthnPayload, string, never, never>;
    preVerifyMFAEmailCodeForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPreVerifyMFA, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IPreVerifyMFA, boolean>, string, never, never>;
    verifyMFAEmailCodeForStepUp: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IVerifyMFAEmailCode, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IVerifyMFAEmailCode, boolean>, string, never, never>;
    requestAuthorize: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(boolean | undefined)?], boolean, string, never, never>;
    requestAuthorizeSSR: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").FronteggNextJSSession], import(".").FronteggNextJSSession, string, never, never>;
    requestHostedLoginAuthorize: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Record<string, string> | undefined)?], Record<string, string> | undefined, string, never, never>;
    requestHostedLoginAuthorizeV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        additionalParams?: Record<string, string> | undefined;
        shouldRedirectToLogin?: boolean | undefined;
        firstTime?: boolean | undefined;
        loginDirectAction?: import(".").LoginDirectAction | undefined;
    } | undefined)?], {
        additionalParams?: Record<string, string> | undefined;
        shouldRedirectToLogin?: boolean | undefined;
        firstTime?: boolean | undefined;
        loginDirectAction?: import(".").LoginDirectAction | undefined;
    } | undefined, string, never, never>;
    handleHostedLoginCallback: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").HostedLoginCallback], import(".").HostedLoginCallback, string, never, never>;
    afterAuthNavigation: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    preLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPreLogin & {
        recaptchaToken?: string | undefined;
        invitationToken?: string | undefined;
    }, void>], import("..").WithCallback<import("@frontegg/rest-api").IPreLogin & {
        recaptchaToken?: string | undefined;
        invitationToken?: string | undefined;
    }, void>, string, never, never>;
    postLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IPostLogin], import("@frontegg/rest-api").IPostLogin, string, never, never>;
    login: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ILogin, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ILogin, boolean>, string, never, never>;
    loginWithMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ILoginWithMfa, boolean>, string, never, never>;
    recoverMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IRecoverMFATokenPayload], import(".").IRecoverMFATokenPayload, string, never, never>;
    logout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[((() => void) | undefined)?], (() => void) | undefined, string, never, never>;
    silentLogout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("..").WithCallback<{
        callbackTimeout?: number | undefined;
    }, boolean> | undefined)?], import("..").WithCallback<{
        callbackTimeout?: number | undefined;
    }, boolean> | undefined, string, never, never>;
    checkIfAllowToRememberMfaDevice: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        mfaToken: string;
    }], {
        mfaToken: string;
    }, string, never, never>;
    changePhoneNumberWithVerification: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IChangePhoneNumberWithVerification, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IChangePhoneNumberWithVerification, boolean>, string, never, never>;
    verifyChangePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IVerifyChangePhoneNumber, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IVerifyChangePhoneNumber, boolean>, string, never, never>;
    quickSmsPasswordlessPreLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IQuickSmsPasswordlessPreLoginPayload, boolean>], import("..").WithCallback<import(".").IQuickSmsPasswordlessPreLoginPayload, boolean>, string, never, never>;
    passwordlessPreLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPasswordlessPreLogin, void>], import("..").WithCallback<import("@frontegg/rest-api").IPasswordlessPreLogin, void>, string, never, never>;
    passwordlessPostLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").IPasswordlessPostLoginPayload, boolean>], import("..").WithCallback<import(".").IPasswordlessPostLoginPayload, boolean>, string, never, never>;
    verifyInviteToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IVerifyInviteToken], import("@frontegg/rest-api").IVerifyInviteToken, string, never, never>;
    webAuthnPrelogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IWebAuthnPreLogin, import("@frontegg/rest-api").IWebAuthnPreLoginResponse | null>], import("..").WithCallback<import("@frontegg/rest-api").IWebAuthnPreLogin, import("@frontegg/rest-api").IWebAuthnPreLoginResponse | null>, string, never, never>;
    webAuthnPostLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IWebAuthnPostLoginPayload], import(".").IWebAuthnPostLoginPayload, string, never, never>;
    webAuthnCreateNewDeviceSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("..").CallbackMethod<import("@frontegg/rest-api").ICreateNewDeviceSessionResponse | null> | undefined;
    }], {
        callback?: import("..").CallbackMethod<import("@frontegg/rest-api").ICreateNewDeviceSessionResponse | null> | undefined;
    }, string, never, never>;
    webAuthnVerifyNewDeviceSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IVerifyNewWebAuthnDevicePayload], import(".").IVerifyNewWebAuthnDevicePayload, string, never, never>;
    getUserIP: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }], {
        callback?: import("..").CallbackMethod<boolean> | undefined;
    }, string, never, never>;
    preEnrollMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPreEnrollMFA, import(".").IPreEnrollMFAWebAuthNForLoginResponse>], import("..").WithCallback<import("@frontegg/rest-api").IPreEnrollMFA, import(".").IPreEnrollMFAWebAuthNForLoginResponse>, string, never, never>;
    enrollMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IEnrollMFAWebAuthnPayload], import(".").IEnrollMFAWebAuthnPayload, string, never, never>;
    enrollMFAAuthenticatorAppForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IEnrollMFAAuthenticatorApp, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IEnrollMFAAuthenticatorApp, boolean>, string, never, never>;
    preEnrollMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPreEnrollMFASMS, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IPreEnrollMFASMS, boolean>, string, never, never>;
    enrollMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IEnrollMFASMS, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IEnrollMFASMS, boolean>, string, never, never>;
    preVerifyMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, import(".").IPreVerifyMFAWebAuthNForLoginResponse>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, import(".").IPreVerifyMFAWebAuthNForLoginResponse>, string, never, never>;
    verifyMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").IVerifyMFAWebAuthnPayload], import(".").IVerifyMFAWebAuthnPayload, string, never, never>;
    preVerifyMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, boolean>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IPreVerifyMFA>, boolean>, string, never, never>;
    verifyMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IVerifyMFASMS>, boolean>], import("..").WithCallback<import(".").WithDeviceId<import("@frontegg/rest-api").IVerifyMFASMS>, boolean>, string, never, never>;
    preVerifyMFAEmailCode: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IPreVerifyMFA, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IPreVerifyMFA, boolean>, string, never, never>;
    verifyMFAEmailCode: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IVerifyMFAEmailCode, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IVerifyMFAEmailCode, boolean>, string, never, never>;
    resetBreachedPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IForgotPassword], import("@frontegg/rest-api").IForgotPassword, string, never, never>;
    setSmsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SmsState>], Partial<import(".").SmsState>, string, never, never>;
    resetSmsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSecurityCenterState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SecurityCenterState>], Partial<import(".").SecurityCenterState>, string, never, never>;
    resetSecurityCenterState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSecurityCenterStateLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").SecurityCenterStateIndicator], import(".").SecurityCenterStateIndicator, string, never, never>;
    setSecurityCenterStateError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").SecurityCenterStateIndicator], import(".").SecurityCenterStateIndicator, string, never, never>;
    setAllAccountDialogsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./MSP/AllAccountsState").IAllAccountsDialogsState>], Partial<import("./MSP/AllAccountsState").IAllAccountsDialogsState>, string, never, never>;
    resetAllAccountDialogsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openCreateSubAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName?: string | undefined;
        parentAccountId?: string | undefined;
        canSelectParentAccount?: boolean | undefined;
    }, boolean>>], Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName?: string | undefined;
        parentAccountId?: string | undefined;
        canSelectParentAccount?: boolean | undefined;
    }, boolean>>, string, never, never>;
    closeCreateSubAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openUpdateSubAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./MSP/AllAccountsState").TUpdateAccountDialogState>], Partial<import("./MSP/AllAccountsState").TUpdateAccountDialogState>, string, never, never>;
    closeUpdateSubAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openDeleteSubAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName: string;
        accountId: string;
        isParentAccount: boolean;
    }, boolean>>], Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName: string;
        accountId: string;
        isParentAccount: boolean;
    }, boolean>>, string, never, never>;
    closeDeleteSubAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openAddUsersToAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName: string;
        accountId: string;
        permissionToGiveAccessToSubAccounts: boolean;
    }, boolean>>], Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName: string;
        accountId: string;
        permissionToGiveAccessToSubAccounts: boolean;
    }, boolean>>, string, never, never>;
    closeAddUsersToAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openDeleteUserFromAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName?: string | undefined;
        accountId: string;
        parentAccountId?: string | undefined;
        userId: string;
        userName: string;
    }, boolean>>], Partial<import("..").WithCallback<import("./MSP/AllAccountsState").TUserJwtPayload & import("./MSP/AllAccountsState").BaseAllAccountsDialogState & {
        accountName?: string | undefined;
        accountId: string;
        parentAccountId?: string | undefined;
        userId: string;
        userName: string;
    }, boolean>>, string, never, never>;
    closeDeleteUserFromAccountDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openEditUserRolesDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./MSP/AllAccountsState").TEditUserRolesDialogState>], Partial<import("./MSP/AllAccountsState").TEditUserRolesDialogState>, string, never, never>;
    closeEditUserRolesDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setAllAccountsLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./MSP/AllAccountsState").AllAccountsStateIndicator], import("./MSP/AllAccountsState").AllAccountsStateIndicator, string, never, never>;
    setAllAccountsError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./MSP/AllAccountsState").AllAccountsStateIndicator], import("./MSP/AllAccountsState").AllAccountsStateIndicator, string, never, never>;
    setAllAccountsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./MSP/AllAccountsState").IAllAccountsState>], Partial<import("./MSP/AllAccountsState").IAllAccountsState>, string, never, never>;
    setSelectedAccountState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./MSP/AllAccountsState").ISelectedAccount>], Partial<import("./MSP/AllAccountsState").ISelectedAccount>, string, never, never>;
    resetAllAccountsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setPasskeysState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").PasskeysState>], Partial<import(".").PasskeysState>, string, never, never>;
    resetPasskeysState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setProvisioningState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ProvisioningState>], Partial<import(".").ProvisioningState>, string, never, never>;
    resetProvisioningState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setRestrictionsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").RestrictionsState>], Partial<import(".").RestrictionsState>, string, never, never>;
    setIpRestrictionsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").IPRestrictionsState>], Partial<import(".").IPRestrictionsState>, string, never, never>;
    setEmailDomainRestrictionsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").EmailDomainRestrictionsState>], Partial<import(".").EmailDomainRestrictionsState>, string, never, never>;
    setSessionsPolicyState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SessionsPolicyState>], Partial<import(".").SessionsPolicyState>, string, never, never>;
    resetSessionsPolicyState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSessionsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SessionsState>], Partial<import(".").SessionsState>, string, never, never>;
    resetSessionsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setRolesState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").RolesState>], Partial<import(".").RolesState>, string, never, never>;
    resetRolesState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setRolesStateLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./RolesState/types").RolesStateIndicator], import("./RolesState/types").RolesStateIndicator, string, never, never>;
    setRolesStateError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./RolesState/types").RolesStateIndicator], import("./RolesState/types").RolesStateIndicator, string, never, never>;
    setTenantsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").TenantsState>], Partial<import(".").TenantsState>, string, never, never>;
    resetTenantsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setAccountSettingsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").AccountSettingsState>], Partial<import(".").AccountSettingsState>, string, never, never>;
    resetAccountSettingsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSecurityPolicyState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SecurityPolicyState>], Partial<import(".").SecurityPolicyState>, string, never, never>;
    setSecurityPolicyGlobalState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicy | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicy | undefined;
    }>, string, never, never>;
    setSecurityPolicyPublicState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").IVendorConfig | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").IVendorConfig | undefined;
    }>, string, never, never>;
    setSecurityPolicyAuthStrategyPublicState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").IAuthStrategiesConfig | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").IAuthStrategiesConfig | undefined;
    }>, string, never, never>;
    setSecurityPolicyMfaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
    }>, string, never, never>;
    setSecurityPolicyVendorMfaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyMfa | undefined;
    }>, string, never, never>;
    setSecurityPolicyVendorLockoutState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyLockout | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyLockout | undefined;
    }>, string, never, never>;
    setSecurityPolicyVendorPasswordHistoryState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyPasswordHistory | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyPasswordHistory | undefined;
    }>, string, never, never>;
    setSecurityPolicyLockoutState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyLockout | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyLockout | undefined;
    }>, string, never, never>;
    setSecurityPolicyCaptchaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyCaptcha | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyCaptcha | undefined;
    }>, string, never, never>;
    setSecurityPolicyPasswordHistoryState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyPasswordHistory | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: import("@frontegg/rest-api").ISecurityPolicyPasswordHistory | undefined;
    }>, string, never, never>;
    setSecurityPolicyPasswordState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("../interfaces").WithStatus & {
        policy?: Partial<import("@frontegg/rest-api").TestConfig> | undefined;
    }>], Partial<import("../interfaces").WithStatus & {
        policy?: Partial<import("@frontegg/rest-api").TestConfig> | undefined;
    }>, string, never, never>;
    resetSecurityPolicyState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setApiTokensLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").ApiStateIndicator], import(".").ApiStateIndicator, string, never, never>;
    setApiTokensError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").ApiStateIndicator], import(".").ApiStateIndicator, string, never, never>;
    setApiTokensState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ApiTokensState>], Partial<import(".").ApiTokensState>, string, never, never>;
    resetApiTokensState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setGroupsDialogsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").GroupsDialogsState>], Partial<import(".").GroupsDialogsState>, string, never, never>;
    resetGroupsDialogsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openAddGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    closeAddGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openEditGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").EditGroupDialogState>], Partial<import(".").EditGroupDialogState>, string, never, never>;
    closeEditGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openDeleteGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<{
        open?: boolean | undefined;
        loading?: boolean | undefined;
        error?: boolean | undefined;
        onClose?: ((data?: any) => void) | undefined;
    } & {
        group?: import("@frontegg/rest-api").IGroupResponse | undefined;
    }>], Partial<{
        open?: boolean | undefined;
        loading?: boolean | undefined;
        error?: boolean | undefined;
        onClose?: ((data?: any) => void) | undefined;
    } & {
        group?: import("@frontegg/rest-api").IGroupResponse | undefined;
    }>, string, never, never>;
    closeDeleteGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openAddMembersToGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    closeAddMembersToGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    openDeleteMemberFromGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").DeleteMemberFromGroupDialogState>], Partial<import(".").DeleteMemberFromGroupDialogState>, string, never, never>;
    closeDeleteMemberFromGroupDialog: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setUsersGroupsLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").GroupsStateIndicator], import(".").GroupsStateIndicator, string, never, never>;
    setUsersGroupsError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").GroupsStateIndicator], import(".").GroupsStateIndicator, string, never, never>;
    setGroupsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").GroupsState>], Partial<import(".").GroupsState>, string, never, never>;
    resetUsersGroupsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setTeamLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").TeamStateIndicator], import(".").TeamStateIndicator, string, never, never>;
    setTeamError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").TeamStateIndicator], import(".").TeamStateIndicator, string, never, never>;
    setTeamState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").TeamState>], Partial<import(".").TeamState>, string, never, never>;
    resetTeamState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setMfaState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").MFAState>], Partial<import(".").MFAState>, string, never, never>;
    resetMfaState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSSOLoader: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").SSOStateIndicator], import(".").SSOStateIndicator, string, never, never>;
    setSSOError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import(".").SSOStateIndicator], import(".").SSOStateIndicator, string, never, never>;
    setSSOState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SSOState>], Partial<import(".").SSOState>, string, never, never>;
    resetSSOState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setCustomLoginState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").CustomLoginState>], Partial<import(".").CustomLoginState>, string, never, never>;
    resetCustomLoginState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setProfileState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ProfileState>], Partial<import(".").ProfileState>, string, never, never>;
    resetProfileState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSignUpState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SignUpState>], Partial<import(".").SignUpState>, string, never, never>;
    resetSignUpState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setResetPhoneNumberState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ResetPhoneNumberState>], Partial<import(".").ResetPhoneNumberState>, string, never, never>;
    resetResetPhoneNumberState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setForgotPasswordState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ForgotPasswordState>], Partial<import(".").ForgotPasswordState>, string, never, never>;
    resetForgotPasswordState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setAcceptInvitationState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").AcceptInvitationState>], Partial<import(".").AcceptInvitationState>, string, never, never>;
    resetAcceptInvitationState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setImpersonateState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ImpersonateState>], Partial<import(".").ImpersonateState>, string, never, never>;
    resetImpersonateState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setActivateState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ActivateAccountState>], Partial<import(".").ActivateAccountState>, string, never, never>;
    resetActivateState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setActivateStrategyState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").ActivateAccountStrategyState>], Partial<import(".").ActivateAccountStrategyState>, string, never, never>;
    setSocialLoginsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").SocialLoginState>], Partial<import(".").SocialLoginState>, string, never, never>;
    resetSocialLoginsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setStepUpState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").StepUpState>], Partial<import(".").StepUpState>, string, never, never>;
    resetStepUpState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setLoginState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").LoginState>], Partial<import(".").LoginState>, string, never, never>;
    resetLoginState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    resetState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setState: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<AuthState>, string>;
    setUser: import("@reduxjs/toolkit").ActionCreatorWithPayload<User, string>;
    setEntitlements: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<UserEntitlementsResponseV2>], Partial<UserEntitlementsResponseV2>, string, never, never>;
    loadEntitlements: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(LoadEntitlementsActionPayload | undefined)?], LoadEntitlementsActionPayload | undefined, string, never, never>;
};
export declare type RootActions = {
    setState: (state: Partial<AuthState>) => void;
    resetState: () => void;
    setUser: (user: User) => void;
    setEntitlements: (entitlements: Partial<UserEntitlementsResponseV2>) => void;
    loadEntitlements: (payload?: LoadEntitlementsActionPayload) => void;
};
export declare type AuthActions = RootActions & LoginActions & StepUpActions & SocialLoginActions & ActivateAccountActions & ImpersonateActions & AcceptInvitationActions & ForgotPasswordActions & ResetPhoneNumberActions & SignUpActions & ProfileActions & CustomLoginActions & SSOActions & MfaActions & TeamActions & GroupsActions & GroupsDialogsActions & ApiTokensActions & SecurityPolicyActions & AccountSettingsActions & TenantsActions & RolesActions & SessionsActions & RestrictionsActions & ProvisioningActions & PasskeysActions & AllAccountsActions & AllAccountsDialogsActions & SecurityCenterActions & SmsActions;
export { reducer, actions };
