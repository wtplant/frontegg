import { GroupsState, IGroupsStateActions, GroupsStateIndicator } from './interfaces';
declare const groupsState: GroupsState;
declare const reducers: {
    setUsersGroupsLoader: {
        prepare: (payload: GroupsStateIndicator) => {
            payload: GroupsStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: GroupsStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setUsersGroupsError: {
        prepare: (payload: GroupsStateIndicator) => {
            payload: GroupsStateIndicator;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: GroupsStateIndicator;
            type: string;
        }) => import("..").AuthState;
    };
    setGroupsState: {
        prepare: (payload: Partial<GroupsState>) => {
            payload: Partial<GroupsState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<GroupsState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("..").LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            groupsState: GroupsState;
            groupsDialogsState: import("./interfaces").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: import("..").StepUpState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetUsersGroupsState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("..").LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: import("..").TeamState;
        groupsState: GroupsState;
        groupsDialogsState: import("./interfaces").GroupsDialogsState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        passkeysState?: import("..").PasskeysState | undefined;
        customLoginState?: import("..").CustomLoginState | undefined;
        allAccountsState?: import("..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("..").SecurityCenterState | undefined;
        smsState?: import("..").SmsState | undefined;
        stepUpState?: import("..").StepUpState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    loadGroups: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    getGroupById: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IGetGroup], import("@frontegg/rest-api").IGetGroup, string, never, never>;
    createGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<import("@frontegg/rest-api").ICreateGroup & Partial<import("@frontegg/rest-api").IUpdateGroupRoles> & Partial<import("@frontegg/rest-api").IUpdateGroupUsers>, boolean>], import("../../interfaces").WithCallback<import("@frontegg/rest-api").ICreateGroup & Partial<import("@frontegg/rest-api").IUpdateGroupRoles> & Partial<import("@frontegg/rest-api").IUpdateGroupUsers>, boolean>, string, never, never>;
    updateGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroup, boolean>], import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroup, boolean>, string, never, never>;
    deleteGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<{
        groupId: string;
    }, boolean>], import("../../interfaces").WithCallback<{
        groupId: string;
    }, boolean>, string, never, never>;
    addRolesToGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>], import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>, string, never, never>;
    deleteRolesFromGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>], import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupRoles & {
        groupId: string;
    }, boolean>, string, never, never>;
    addUsersToGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>], import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>, string, never, never>;
    deleteUsersFromGroup: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>], import("../../interfaces").WithCallback<import("@frontegg/rest-api").IUpdateGroupUsers & {
        groupId: string;
    }, boolean>, string, never, never>;
    getGroupConfiguration: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    updateGroupConfiguration: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("@frontegg/rest-api").IUpdateGroupConfig & {
        groupId: string;
    }], import("@frontegg/rest-api").IUpdateGroupConfig & {
        groupId: string;
    }, string, never, never>;
    getTeamUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").IGetUsersV2Payload], import("..").IGetUsersV2Payload, string, never, never>;
};
declare type DispatchedActions = {
    setUsersGroupsLoader: (payload: GroupsStateIndicator) => void;
    setUsersGroupsError: (payload: GroupsStateIndicator) => void;
    setGroupsState: (payload: Partial<GroupsState>) => void;
    resetUsersGroupsState: () => void;
    loadGroups: IGroupsStateActions['loadGroups'];
    getGroupById: IGroupsStateActions['getGroupById'];
    createGroup: IGroupsStateActions['createGroup'];
    updateGroup: IGroupsStateActions['updateGroup'];
    deleteGroup: IGroupsStateActions['deleteGroup'];
    addRolesToGroup: IGroupsStateActions['addRolesToGroup'];
    deleteRolesFromGroup: IGroupsStateActions['deleteRolesFromGroup'];
    addUsersToGroup: IGroupsStateActions['addUsersToGroup'];
    deleteUsersFromGroup: IGroupsStateActions['deleteUsersFromGroup'];
    getGroupConfiguration: IGroupsStateActions['getGroupConfiguration'];
    updateGroupConfiguration: IGroupsStateActions['updateGroupConfiguration'];
    getTeamUsers: IGroupsStateActions['getTeamUsers'];
};
export declare type GroupsActions = DispatchedActions;
export { groupsState, reducers as groupsReducers, actions as groupsActions };
