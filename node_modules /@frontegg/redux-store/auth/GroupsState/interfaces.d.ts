import { LoaderIndicatorState, WithCallback } from '../../interfaces';
import { IGroupConfigResponse, IGroupResponse, IGetGroup, ICreateGroup, IUpdateGroup, IUpdateGroupRoles, IUpdateGroupUsers, IUpdateGroupConfig, IGroupUser } from '@frontegg/rest-api';
import { ITeamUser } from '@frontegg/rest-api';
import { IGetUsersV2Payload } from '../TeamState/interfaces';
export declare enum GroupsStateKeys {
    CREATE_GROUP = "CREATE_GROUP",
    GET_GROUP = "GET_GROUP",
    GET_GROUPS = "GET_GROUPS",
    DELETE_GROUP = "DELETE_GROUP",
    UPDATE_GROUP = "UPDATE_GROUP",
    ADD_USERS_TO_GROUP = "ADD_USERS_TO_GROUP",
    DELETE_USERS_FROM_GROUP = "DELETE_USERS_FROM_GROUP",
    ADD_ROLES_TO_GROUP = "ADD_ROLES_TO_GROUP",
    DELETE_ROLES_FROM_GROUP = "DELETE_ROLES_FROM_GROUP",
    GET_GROUP_CONFIGURATION = "GET_GROUP_CONFIGURATION",
    UPDATE_GROUP_CONFIGURATION = "UPDATE_GROUP_CONFIGURATION",
    GET_TEAM_USERS = "GET_TEAM_USERS"
}
export declare type GroupsStateIndicator = {
    key: GroupsStateKeys;
    value: string | boolean;
};
export declare type IGroup = IGroupResponse;
export declare type IGroupConfig = IGroupConfigResponse;
export declare type IGroupMember = IGroupUser;
export interface GroupsState {
    loaders: LoaderIndicatorState<GroupsStateKeys>;
    errors: LoaderIndicatorState<GroupsStateKeys>;
    groups?: IGroup[];
    selectedGroup?: Partial<IGroup>;
    groupsConfiguration?: Partial<IGroupConfig>;
    teamUsers?: ITeamUser[];
}
export interface IGroupsStateActionsPayloads {
    loadGroups: void;
    getGroupById: IGetGroup;
    createGroup: WithCallback<ICreateGroup & Partial<IUpdateGroupRoles> & Partial<IUpdateGroupUsers>>;
    updateGroup: WithCallback<IUpdateGroup>;
    deleteGroup: WithCallback<{
        groupId: string;
    }>;
    addRolesToGroup: WithCallback<IUpdateGroupRoles & {
        groupId: string;
    }>;
    deleteRolesFromGroup: WithCallback<IUpdateGroupRoles & {
        groupId: string;
    }>;
    addUsersToGroup: WithCallback<IUpdateGroupUsers & {
        groupId: string;
    }>;
    deleteUsersFromGroup: WithCallback<IUpdateGroupUsers & {
        groupId: string;
    }>;
    getGroupConfiguration: void;
    updateGroupConfiguration: IUpdateGroupConfig & {
        groupId: string;
    };
    getTeamUsers: IGetUsersV2Payload;
}
export interface IGroupsStateActions {
    loadGroups: () => void;
    getGroupById: (payload: IGroupsStateActionsPayloads['getGroupById']) => void;
    createGroup: (payload: IGroupsStateActionsPayloads['createGroup']) => void;
    updateGroup: (payload: IGroupsStateActionsPayloads['updateGroup']) => void;
    deleteGroup: (payload: IGroupsStateActionsPayloads['deleteGroup']) => void;
    addRolesToGroup: (payload: IGroupsStateActionsPayloads['addRolesToGroup']) => void;
    deleteRolesFromGroup: (payload: IGroupsStateActionsPayloads['deleteRolesFromGroup']) => void;
    addUsersToGroup: (payload: IGroupsStateActionsPayloads['addUsersToGroup']) => void;
    deleteUsersFromGroup: (payload: IGroupsStateActionsPayloads['deleteUsersFromGroup']) => void;
    getGroupConfiguration: () => void;
    updateGroupConfiguration: (payload: IGroupsStateActionsPayloads['updateGroupConfiguration']) => void;
    getTeamUsers: (payload: IGroupsStateActionsPayloads['getTeamUsers']) => void;
}
declare type BaseDialogState = {
    open?: boolean;
    loading?: boolean;
    error?: boolean;
    onClose?: (data?: any) => void;
};
declare type AddGroupDialogState = BaseDialogState & {
    group?: Omit<IGroup, 'id' | 'roles' | 'users' | 'managedBy'> & Partial<IUpdateGroupRoles & IUpdateGroupUsers>;
};
export declare type AddMembersToGroupDialogState = BaseDialogState & {
    userIds: string[];
};
export declare type EditGroupDialogState = BaseDialogState & {
    group?: IGroup;
};
export declare type DeleteMemberFromGroupDialogState = BaseDialogState & {
    userId?: string;
    email?: string;
};
declare type DeleteGroupDialogState = BaseDialogState & {
    group?: IGroup;
};
export interface GroupsDialogsState {
    addGroupDialogState: AddGroupDialogState;
    deleteGroupDialogState: DeleteGroupDialogState;
    editGroupDialogState: EditGroupDialogState;
    addMembersToGroupDialogState: AddMembersToGroupDialogState;
    deleteMemberFromGroupDialogState: DeleteMemberFromGroupDialogState;
}
export declare enum GroupRelations {
    roles = "roles",
    users = "users",
    rolesAndUsers = "rolesAndUsers"
}
export {};
