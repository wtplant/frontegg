import { IAllAccountsState, IAllAccountsStateActionsPayloads } from './types';
import { AllAccountsStateIndicator } from './types/stateTypes';
export * from './types';
export declare const allAccountsInitialState: IAllAccountsState;
declare const reducers: {
    setAllAccountsLoader: {
        prepare: (payload: AllAccountsStateIndicator) => {
            payload: AllAccountsStateIndicator;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: AllAccountsStateIndicator;
            type: string;
        }) => import("../..").AuthState;
    };
    setAllAccountsError: {
        prepare: (payload: AllAccountsStateIndicator) => {
            payload: AllAccountsStateIndicator;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: AllAccountsStateIndicator;
            type: string;
        }) => import("../..").AuthState;
    };
    setAllAccountsState: {
        prepare: (payload: Partial<IAllAccountsState>) => {
            payload: Partial<IAllAccountsState>;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: Partial<IAllAccountsState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("../..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../..").LoginState;
            activateState: import("../..").ActivateAccountState;
            acceptInvitationState: import("../..").AcceptInvitationState;
            forgotPasswordState: import("../..").ForgotPasswordState;
            resetPhoneNumberState: import("../..").ResetPhoneNumberState;
            ssoState: import("../..").SSOState;
            profileState: import("../..").ProfileState;
            mfaState: import("../..").MFAState;
            teamState: import("../..").TeamState;
            groupsState: import("../..").GroupsState;
            groupsDialogsState: import("../..").GroupsDialogsState;
            socialLoginState: import("../..").SocialLoginState;
            signUpState: import("../..").SignUpState;
            apiTokensState: import("../..").ApiTokensState;
            securityPolicyState: import("../..").SecurityPolicyState;
            restrictionsState: import("../..").RestrictionsState;
            provisioningState: import("../..").ProvisioningState;
            accountSettingsState: import("../..").AccountSettingsState;
            tenantsState: import("../..").TenantsState;
            rolesState: import("../..").RolesState;
            sessionsState: import("../..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("../..").SessionsPolicyState;
            impersonateState?: import("../..").ImpersonateState | undefined;
            passkeysState?: import("../..").PasskeysState | undefined;
            customLoginState?: import("../..").CustomLoginState | undefined;
            allAccountsState?: IAllAccountsState | undefined;
            allAccountsDialogsState?: import("./types").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("../..").SecurityCenterState | undefined;
            smsState?: import("../..").SmsState | undefined;
            stepUpState?: import("../..").StepUpState | undefined;
            routes: import("../..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    setSelectedAccountState: {
        prepare: (payload: Partial<import("./types").ISelectedAccount>) => {
            payload: Partial<import("./types").ISelectedAccount>;
        };
        reducer: (state: import("../..").AuthState, { payload }: {
            payload: Partial<import("./types").ISelectedAccount>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("../..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: import("../..").LoginState;
            activateState: import("../..").ActivateAccountState;
            acceptInvitationState: import("../..").AcceptInvitationState;
            forgotPasswordState: import("../..").ForgotPasswordState;
            resetPhoneNumberState: import("../..").ResetPhoneNumberState;
            ssoState: import("../..").SSOState;
            profileState: import("../..").ProfileState;
            mfaState: import("../..").MFAState;
            teamState: import("../..").TeamState;
            groupsState: import("../..").GroupsState;
            groupsDialogsState: import("../..").GroupsDialogsState;
            socialLoginState: import("../..").SocialLoginState;
            signUpState: import("../..").SignUpState;
            apiTokensState: import("../..").ApiTokensState;
            securityPolicyState: import("../..").SecurityPolicyState;
            restrictionsState: import("../..").RestrictionsState;
            provisioningState: import("../..").ProvisioningState;
            accountSettingsState: import("../..").AccountSettingsState;
            tenantsState: import("../..").TenantsState;
            rolesState: import("../..").RolesState;
            sessionsState: import("../..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("../..").SessionsPolicyState;
            impersonateState?: import("../..").ImpersonateState | undefined;
            passkeysState?: import("../..").PasskeysState | undefined;
            customLoginState?: import("../..").CustomLoginState | undefined;
            allAccountsState?: IAllAccountsState | undefined;
            allAccountsDialogsState?: import("./types").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("../..").SecurityCenterState | undefined;
            smsState?: import("../..").SmsState | undefined;
            stepUpState?: import("../..").StepUpState | undefined;
            routes: import("../..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetAllAccountsState: (state: import("../..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("../..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: import("../..").LoginState;
        activateState: import("../..").ActivateAccountState;
        acceptInvitationState: import("../..").AcceptInvitationState;
        forgotPasswordState: import("../..").ForgotPasswordState;
        resetPhoneNumberState: import("../..").ResetPhoneNumberState;
        ssoState: import("../..").SSOState;
        profileState: import("../..").ProfileState;
        mfaState: import("../..").MFAState;
        teamState: import("../..").TeamState;
        groupsState: import("../..").GroupsState;
        groupsDialogsState: import("../..").GroupsDialogsState;
        socialLoginState: import("../..").SocialLoginState;
        signUpState: import("../..").SignUpState;
        apiTokensState: import("../..").ApiTokensState;
        securityPolicyState: import("../..").SecurityPolicyState;
        restrictionsState: import("../..").RestrictionsState;
        provisioningState: import("../..").ProvisioningState;
        accountSettingsState: import("../..").AccountSettingsState;
        tenantsState: import("../..").TenantsState;
        rolesState: import("../..").RolesState;
        sessionsState: import("../..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("../..").SessionsPolicyState;
        impersonateState?: import("../..").ImpersonateState | undefined;
        passkeysState?: import("../..").PasskeysState | undefined;
        customLoginState?: import("../..").CustomLoginState | undefined;
        allAccountsState?: IAllAccountsState | undefined;
        allAccountsDialogsState?: import("./types").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("../..").SecurityCenterState | undefined;
        smsState?: import("../..").SmsState | undefined;
        stepUpState?: import("../..").StepUpState | undefined;
        routes: import("../..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    loadAccounts: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    searchAccounts: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").SearchSubTenantsParams & {
        _links?: import("@frontegg/rest-api").FronteggPaginationLinks | undefined;
    } & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    updateSubAccountAccessForUser: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").UpdateSubAccountAccessRequestDto & {
        userId: string;
    } & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").UpdateSubAccountAccessRequestDto & {
        userId: string;
    } & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    createSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    updateSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").CreateSubTenantRequest & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    deleteSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequestTenantDto & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequestTenantDto & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    updateSubAccountSettings: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").UpdateSubTenantRequestParams & import("@frontegg/rest-api").UpdateSubTenantRequest & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").UpdateSubTenantRequestParams & import("@frontegg/rest-api").UpdateSubTenantRequest & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    addUsersToAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").AddUsersToSubTenantRequest & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").AddUsersToSubTenantRequest & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    getAccountUsers: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").ISearchUserQueryParamsV3 & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").ISearchUserQueryParamsV3 & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    deleteUsersFromAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").RemoveUserFromSubTenantsRequest & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    setUserRolesForSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    } & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").UpdateUserRolesForSubTenantsRequestDto & {
        userId: string;
    } & import("./types").TUserJwtPayload, boolean>, string, never, never>;
    getUserJwtForSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("@frontegg/rest-api").GetUserJwtRequestDto, boolean>], import("../../../interfaces").WithCallback<import("@frontegg/rest-api").GetUserJwtRequestDto, boolean>, string, never, never>;
    setRootAccountData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setSelectedSubAccountData: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("./types").TUserJwtPayload, boolean>, string, never, never>;
    loadNumberOfUsersForSelectedSubAccount: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../../interfaces").WithCallback<import("./types").TLoadNumberOfUsersForSelectedSubAccount & import("./types").TUserJwtPayload, boolean>], import("../../../interfaces").WithCallback<import("./types").TLoadNumberOfUsersForSelectedSubAccount & import("./types").TUserJwtPayload, boolean>, string, never, never>;
};
declare type DispatchedActions = {
    setAllAccountsLoader: (payload: AllAccountsStateIndicator) => void;
    setAllAccountsError: (payload: AllAccountsStateIndicator) => void;
    setAllAccountsState: (payload: Partial<IAllAccountsState>) => void;
    setSelectedAccountState: (payload: Partial<IAllAccountsState['selectedAccount']>) => void;
    resetAllAccountsState: () => void;
    loadAccounts: (payload: IAllAccountsStateActionsPayloads['loadAccounts']) => void;
    searchAccounts: (payload: IAllAccountsStateActionsPayloads['searchAccounts']) => void;
    updateSubAccountAccessForUser: (payload: IAllAccountsStateActionsPayloads['updateSubAccountAccessForUser']) => void;
    createSubAccount: (payload: IAllAccountsStateActionsPayloads['createSubAccount']) => void;
    updateSubAccount: (payload: IAllAccountsStateActionsPayloads['updateSubAccount']) => void;
    deleteSubAccount: (payload: IAllAccountsStateActionsPayloads['deleteSubAccount']) => void;
    updateSubAccountSettings: (payload: IAllAccountsStateActionsPayloads['updateSubAccountSettings']) => void;
    addUsersToAccount: (payload: IAllAccountsStateActionsPayloads['addUsersToAccount']) => void;
    getAccountUsers: (payload: IAllAccountsStateActionsPayloads['getAccountUsers']) => void;
    deleteUsersFromAccount: (payload: IAllAccountsStateActionsPayloads['deleteUsersFromAccount']) => void;
    setUserRolesForSubAccount: (payload: IAllAccountsStateActionsPayloads['setUserRolesForSubAccount']) => void;
    getUserJwtForSubAccount: (payload: IAllAccountsStateActionsPayloads['getUserJwtForSubAccount']) => void;
    setRootAccountData: () => void;
    setSelectedSubAccountData: (payload: IAllAccountsStateActionsPayloads['setSelectedSubAccountData']) => void;
    loadNumberOfUsersForSelectedSubAccount: (payload: IAllAccountsStateActionsPayloads['loadNumberOfUsersForSelectedSubAccount']) => void;
};
export declare type AllAccountsActions = DispatchedActions;
export { allAccountsInitialState as allAccountsState, reducers as allAccountsReducers, actions as allAccountsActions };
