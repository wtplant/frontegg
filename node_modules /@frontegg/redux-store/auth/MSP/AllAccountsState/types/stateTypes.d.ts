import { IRole, ITeamUser, IUsersV3Data, ISettingsResponse, GetUserJwtResponseDto, SearchSubTenantsParams, FronteggPaginationLinks, ISearchUserQueryParamsV3, IGetTenantsUserCountResponse, UpdateSubAccountAccessRequestDto, UpdateUserRolesForSubTenantsRequestDto } from '@frontegg/rest-api';
import { LoaderIndicatorState, WithCallback } from '../../../../interfaces';
import { IParentTenant, GetUserJwtRequestDto, CreateSubTenantRequest, UpdateSubTenantRequest, AddUsersToSubTenantRequest, UpdateSubTenantRequestParams, RemoveUserFromSubTenantsRequest, RemoveUserFromSubTenantsRequestTenantDto } from '@frontegg/rest-api';
export declare enum AllAccountsStateKeys {
    GET_ACCOUNTS = "GET_ACCOUNTS",
    SEARCH_ACCOUNTS = "SEARCH_ACCOUNTS",
    SET_ROOT_ACCOUNT_DATA = "SET_ROOT_ACCOUNT_DATA",
    SET_SELECTED_SUB_ACCOUNT_DATA = "SET_SELECTED_SUB_ACCOUNT_DATA",
    LOAD_NUMBER_OF_USERS_FOR_ACCOUNT = "LOAD_NUMBER_OF_USERS_FOR_ACCOUNT",
    UPDATE_SUB_ACCOUNT_ACCESS_FOR_USER = "UPDATE_SUB_ACCOUNT_ACCESS_FOR_USER",
    CREATE_SUB_ACCOUNT = "CREATE_SUB_ACCOUNT",
    UPDATE_SUB_ACCOUNT = "UPDATE_SUB_ACCOUNT",
    DELETE_SUB_ACCOUNT = "DELETE_SUB_ACCOUNT",
    GET_ACCOUNT_USERS = "GET_ACCOUNT_USERS",
    ADD_USERS_TO_ACCOUNT = "ADD_USERS_TO_ACCOUNT",
    DELETE_USERS_FROM_ACCOUNT = "DELETE_USERS_FROM_ACCOUNT",
    SET_USER_ROLES_FOR_SUB_ACCOUNT = "SET_USER_ROLES_FOR_SUB_ACCOUNT",
    UPDATE_SUB_ACCOUNT_SETTINGS = "UPDATE_SUB_ACCOUNT_SETTINGS",
    GET_USER_JWT = "GET_USER_JWT",
    GET_TEAM_USERS = "GET_TEAM_USERS"
}
export declare type TUserJwtPayload = {
    jwt?: TUserJwt['accessToken'];
};
export declare type TAccountsTree = {
    tenantId: string;
    name?: string;
    createdAt?: Date;
    loadMoreLink?: string;
    children?: TAccountsTree[];
    numberOfUsers?: number;
    metadata?: {
        isParent?: boolean;
    };
};
export declare type TSubAccountUser = IUsersV3Data & {
    roles?: IRole[];
};
interface IUsersQueryParams extends ISearchUserQueryParamsV3 {
    _limit: number;
    _offset: number;
}
export interface ISelectedAccount extends Omit<TAccountsTree, 'numberOfUsers' | 'children' | 'loadMoreLink'> {
    users?: TSubAccountUser[];
    totalUsersItems?: number;
    totalUsersPages?: number;
    usersPageOffset?: number;
    userJwt?: TUserJwt;
    accessPermission?: boolean;
    usersQueryParams?: IUsersQueryParams;
    parentsAccounts?: IParentTenant[];
    accountSettings?: TAccountSettings;
    numberOfUsersObject?: IGetTenantsUserCountResponse;
    numberOfSubAccounts?: number;
    accounts?: TAccountsTree;
}
export declare type TAccountSettings = ISettingsResponse & {
    name?: string;
};
export declare type TSelectedAccount = ISelectedAccount;
export declare type TAccountUsers = ITeamUser[];
export declare type TUserJwt = GetUserJwtResponseDto;
export declare type TAccountsQueryParams = SearchSubTenantsParams & {
    _links?: FronteggPaginationLinks;
};
export declare type TSetUserRolesForSubAccountRequest = UpdateUserRolesForSubTenantsRequestDto & {
    userId: string;
};
export declare type TRootLevelAccount = Omit<TAccountsTree, 'children'>;
export declare type AllAccountsStateIndicator = {
    key: AllAccountsStateKeys;
    value: boolean | string;
};
export declare type TUpdateSubAccountAccessForUser = UpdateSubAccountAccessRequestDto & UpdateSubAccountAccessRequestDto & {
    userId: string;
};
export declare type TLoadNumberOfUsersForSelectedSubAccount = {
    tenantId: string;
};
export interface IAllAccountsState {
    loaders: LoaderIndicatorState<AllAccountsStateKeys>;
    errors: LoaderIndicatorState<AllAccountsStateKeys>;
    accounts: TAccountsTree;
    accountsQueryParams: TAccountsQueryParams;
    searchAccountsData: Omit<TAccountsTree, 'children'>[];
    rootAccount: TRootLevelAccount;
    selectedAccount: TSelectedAccount;
    teamUsers?: ITeamUser[];
}
export interface IAllAccountsStateActionsPayloads {
    loadAccounts: WithCallback<TAccountsQueryParams & TUserJwtPayload>;
    searchAccounts: WithCallback<TAccountsQueryParams & TUserJwtPayload>;
    updateSubAccountAccessForUser: WithCallback<TUpdateSubAccountAccessForUser & TUserJwtPayload>;
    createSubAccount: WithCallback<CreateSubTenantRequest & TUserJwtPayload>;
    updateSubAccount: WithCallback<CreateSubTenantRequest & TUserJwtPayload>;
    deleteSubAccount: WithCallback<RemoveUserFromSubTenantsRequestTenantDto & TUserJwtPayload>;
    updateSubAccountSettings: WithCallback<UpdateSubTenantRequestParams & UpdateSubTenantRequest & TUserJwtPayload>;
    getUserJwtForSubAccount: WithCallback<GetUserJwtRequestDto>;
    addUsersToAccount: WithCallback<AddUsersToSubTenantRequest & TUserJwtPayload>;
    deleteUsersFromAccount: WithCallback<RemoveUserFromSubTenantsRequest & TUserJwtPayload>;
    setUserRolesForSubAccount: WithCallback<TSetUserRolesForSubAccountRequest & TUserJwtPayload>;
    getAccountUsers: WithCallback<ISearchUserQueryParamsV3 & TUserJwtPayload>;
    setSelectedSubAccountData: WithCallback<TUserJwtPayload>;
    loadNumberOfUsersForSelectedSubAccount: WithCallback<TLoadNumberOfUsersForSelectedSubAccount & TUserJwtPayload>;
}
export {};
