import { PayloadAction } from '@reduxjs/toolkit';
import { IPreVerifyMFA, IPreVerifyMFAEmailCodeResponse, IVerifyMFAEmailCode, ILoginResponseV3 } from '@frontegg/rest-api';
import { WithCallback } from '../../../interfaces';
import { SetLoadingAction } from '../interfaces';
/**
 * Shared logic for MFA Email code pre-verify step
 * @param payload.callback callback function to be called after the verification is done
 * @param payload.mfaToken
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 */
export declare function preVerifyMFAEmailCode({ callback, ...payload }: WithCallback<IPreVerifyMFA>, setLoadingAction: SetLoadingAction): Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<IPreVerifyMFAEmailCodeResponse>, void, IPreVerifyMFAEmailCodeResponse>;
/**
 * Shared logic for MFA Email code verify step
 * @param payload.otcToken
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.code 6 digits code input by the user
 */
export declare function verifyMFAEmailCode({ callback, ...payload }: WithCallback<IVerifyMFAEmailCode>, setLoadingAction: SetLoadingAction): Generator<import("redux-saga/effects").CallEffect<ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("../..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("../..").AuthState & {
    step: any;
} & boolean[] & false) | (import("../..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, ILoginResponseV3>;
/**
 * Pre verify step for MFA Email login
 * @param payload.mfaToken
 * @param payload.callback callback function to be called after the verification is done
 */
export declare function preVerifyMFAEmailCodeForLogin({ payload }: PayloadAction<WithCallback<IPreVerifyMFA>>): Generator<Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<IPreVerifyMFAEmailCodeResponse>, void, IPreVerifyMFAEmailCodeResponse>, void, unknown>;
/**
 * Verify step for MFA Email login
 * @param payload.otcToken
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.code 6 digits code input by the user
 */
export declare function verifyMFAEmailCodeForLogin({ payload }: PayloadAction<WithCallback<IVerifyMFAEmailCode>>): Generator<Generator<import("redux-saga/effects").CallEffect<ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("../..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("../..").AuthState & {
    step: any;
} & boolean[] & false) | (import("../..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, ILoginResponseV3>, void, unknown>;
