import { ILoginResponseV3 } from '@frontegg/rest-api';
import { AuthState } from '../../interfaces';
/**
 * Additional steps for after MFA authentication with authenticator app handler for step up flow
 */
export declare function postHandleVerifyMFAResponseForStepUp(): Generator<import("redux-saga/effects").CallEffect<void>, void, unknown>;
/**
 * Additional steps for after MFA authentication with authenticator app handler for login flow
 * @param isAuthenticated
 */
export declare function postHandleVerifyMFAResponseForLogin(isAuthenticated: boolean): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../../interfaces").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (AuthState & {
    step: any;
} & boolean[] & false) | (AuthState & {
    step: any;
} & boolean[] & true)>;
/**
 * Handle after MFA authentication with authenticator app
 * @param payload.user
 * @param payload.tenants
 * @param payload.activeTenant
 * @param isStepUp
 *
 * When using this saga, you should wrap it with try/catch block and handle according to your logic
 */
export declare function handleVerifyMFAResponse({ user, tenants, activeTenant }: ILoginResponseV3, isStepUp?: boolean): Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("../../interfaces").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../../interfaces").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (AuthState & {
    step: any;
} & boolean[] & false) | (AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>;
