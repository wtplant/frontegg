import { PayloadAction } from '@reduxjs/toolkit';
import { IPreVerifyMFA, IPreVerifyMFAWebAuthnResponse, ILoginResponseV3 } from '@frontegg/rest-api';
import { WithCallback } from '../../../interfaces';
import { WithDeviceId, IPreVerifyMFAWebAuthNForLoginResponse, SetLoadingAction, IVerifyMFAWebAuthnPayload } from '../interfaces';
/**
 * Shared logic for MFA Webauthn pre-verify step
 * @param payload.callback callback function to be called after the verification is done
 * @param payload.deviceId
 * @param payload.mfaToken
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 */
export declare function preVerifyMFAWebAuthn({ callback, deviceId, ...payload }: WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>, setLoadingAction: SetLoadingAction): Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<IPreVerifyMFAWebAuthnResponse>, void, IPreVerifyMFAWebAuthnResponse>;
/**
 * Shared logic for MFA Webauthn verify step
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.webauthnToken
 * @param payload.mfaToken
 * @param payload.publicKey public key object from browser navigator credentials
 * @param payload.code 6 digits code input by the user
 * @param setLoadingAction loading setter action (e.g. actions.setLoginState)
 * @param isStepUp true when it's step up flow
 */
export declare function verifyMFAWebAuthn({ callback, deviceId, ...payload }: IVerifyMFAWebAuthnPayload, setLoadingAction: SetLoadingAction, isStepUp: boolean): Generator<import("redux-saga/effects").CallEffect<ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("../..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("../..").AuthState & {
    step: any;
} & boolean[] & false) | (import("../..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, ILoginResponseV3>;
/**
 * Pre verify step for MFA Webauthn login
 * @param payload.callback callback function to be called after the verification is done
 * @param payload.deviceId
 * @param payload.mfaToken
 */
export declare function preVerifyMFAWebAuthnForLogin({ payload, }: PayloadAction<WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>>): Generator<Generator<import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<IPreVerifyMFAWebAuthnResponse>, void, IPreVerifyMFAWebAuthnResponse>, void, unknown>;
/**
 * Verify step for MFA Webauthn login
 * @param payload.callback callback function to be called after the verification is done with true for success, o.w false
 * @param payload.deviceId
 * @param payload.webauthnToken
 * @param payload.mfaToken
 * @param payload.publicKey public key object from browser navigator credentials
 * @param payload.code 6 digits code input by the user
 */
export declare function verifyMFAWebAuthnForLogin({ payload }: PayloadAction<IVerifyMFAWebAuthnPayload>): Generator<Generator<import("redux-saga/effects").CallEffect<ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | Generator<import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").AuthState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").PutEffect<{
    payload: import("../..").User;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../..").TenantsState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../..").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (import("../..").AuthState & {
    step: any;
} & boolean[] & false) | (import("../..").AuthState & {
    step: any;
} & boolean[] & true)>>, void, unknown>, void, ILoginResponseV3>, void, unknown>;
