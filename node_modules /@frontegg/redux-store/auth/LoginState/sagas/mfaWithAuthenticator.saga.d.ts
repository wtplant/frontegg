import { PayloadAction } from '@reduxjs/toolkit';
import { ILoginWithMfa, ILoginResponseV3 } from '@frontegg/rest-api';
import { AuthState } from '../../interfaces';
import { SetLoadingAction } from '../interfaces';
import { WithCallback } from '../../../interfaces';
/**
 * Utility function to handle MFA authentication with authenticator app
 * @param payload MFA with authenticator action payload
 * @param setLoadingAction set loading action
 * @param isStepUp true if this is a step up authentication
 * @returns
 */
export declare function mfaWithAuthenticator({ callback, ...loginWithMfaPayload }: WithCallback<ILoginWithMfa>, setLoadingAction: SetLoadingAction, isStepUp: boolean): Generator<import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").CallEffect<ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<{
    isAuthenticated: boolean;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../../interfaces").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (AuthState & boolean[] & false) | (AuthState & boolean[] & true)>>, void, ILoginResponseV3 & Partial<AuthState>>;
/**
 * Login with MFA with authenticator app - external saga
 * @param payload.mfaToken
 * @param payload.mfaDevices
 * @param payload.rememberDevice
 * @param payload.invitationToken
 * @param payload.callback - The callback function to be called after the request is done
 */
export declare function loginWithMfa({ payload }: PayloadAction<WithCallback<ILoginWithMfa>>): Generator<Generator<import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").CallEffect<ILoginResponseV3> | import("redux-saga/effects").PutEffect<import("redux").Action<any>> | import("redux-saga/effects").CallEffect<{
    isAuthenticated: boolean;
}> | import("redux-saga/effects").CallEffect<Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<boolean[]> | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & import("../../interfaces").User & string> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../interfaces").LoginState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<boolean>, void, (AuthState & boolean[] & false) | (AuthState & boolean[] & true)>>, void, ILoginResponseV3 & Partial<AuthState>>, void, unknown>;
