import { Action } from '@reduxjs/toolkit';
import { User } from '../../interfaces';
interface AfterAuthNavigationUtilOptions {
    customLoginAuthenticatedUrl?: string;
    forceStepUpUrl?: string;
    shouldStepUpDuringLogin?: boolean;
}
/**
 * Utility to share after auth navigation flow between login and step up
 * @param resetStateAction reset state action
 * @param customLoginAuthenticatedUrl custom login authenticated url if exists
 * @param shouldStepUpDuringLogin true when it's login after step up flow
 */
export declare function afterAuthNavigationUtil(resetStateAction: () => Action, { customLoginAuthenticatedUrl, forceStepUpUrl, shouldStepUpDuringLogin }?: AfterAuthNavigationUtilOptions): Generator<import("redux-saga/effects").CallEffect<true> | import("redux-saga/effects").CallEffect<string>, void, string | undefined>;
/**
 * After auth navigation for login flow
 * Handling also step up scenario when user silently logout to continue to step up
 */
export declare function afterAuthNavigation(): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void>, void, {
    routes: {
        customLoginAuthenticatedUrl: any;
        stepUpUrl: any;
    };
} & User & string>;
/**
 * After auth navigation for step up flow
 */
export declare function afterStepUpAuthNavigation(): Generator<import("redux-saga/effects").CallEffect<void>, void, unknown>;
export {};
