import { IChangePhoneNumberWithVerification, ICreateNewDeviceSessionResponse, IEnrollMFAAuthenticatorApp, IEnrollMFASMS, IForgotPassword, ILogin, ILoginWithMfa, IPasswordlessPreLogin, IPostLogin, IPreEnrollMFA, IPreEnrollMFASMS, IPreLogin, IPreVerifyMFA, IVerifyChangePhoneNumber, IVerifyMFAEmailCode, IVerifyMFASMS, IWebAuthnPreLogin, IWebAuthnPreLoginResponse } from '@frontegg/rest-api';
import { FronteggNextJSSession, HostedLoginCallback, IEnrollMFAWebAuthnPayload, IPasswordlessPostLoginPayload, IPreEnrollMFAWebAuthNForLoginResponse, IPreVerifyMFAWebAuthNForLoginResponse, IQuickSmsPasswordlessPreLoginPayload, IRecoverMFATokenPayload, IVerifyMFAWebAuthnPayload, IVerifyNewWebAuthnDevicePayload, IWebAuthnPostLoginPayload, LoginDirectAction, LoginState, WithDeviceId } from './interfaces';
import { WithCallback } from '../../interfaces';
import { IVerifyInviteToken } from '@frontegg/rest-api';
declare const loginState: LoginState;
declare const reducers: {
    setLoginState: {
        prepare: (payload: Partial<LoginState>) => {
            payload: Partial<LoginState>;
        };
        reducer: (state: import("..").AuthState, { payload }: {
            payload: Partial<LoginState>;
            type: string;
        }) => {
            onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
            error?: any;
            isAuthenticated: boolean;
            userIp?: string | undefined;
            isLoading: boolean;
            keepSessionAlive?: boolean | undefined;
            socialLoginOptions?: {
                promptConsent?: boolean | undefined;
            } | undefined;
            user?: import("..").User | null | undefined;
            isSSOAuth: boolean;
            ssoACS?: string | undefined;
            includeQueryParam?: boolean | undefined;
            loginState: LoginState;
            activateState: import("..").ActivateAccountState;
            acceptInvitationState: import("..").AcceptInvitationState;
            forgotPasswordState: import("..").ForgotPasswordState;
            resetPhoneNumberState: import("..").ResetPhoneNumberState;
            ssoState: import("..").SSOState;
            profileState: import("..").ProfileState;
            mfaState: import("..").MFAState;
            teamState: import("..").TeamState;
            groupsState: import("..").GroupsState;
            groupsDialogsState: import("..").GroupsDialogsState;
            socialLoginState: import("..").SocialLoginState;
            signUpState: import("..").SignUpState;
            apiTokensState: import("..").ApiTokensState;
            securityPolicyState: import("..").SecurityPolicyState;
            restrictionsState: import("..").RestrictionsState;
            provisioningState: import("..").ProvisioningState;
            accountSettingsState: import("..").AccountSettingsState;
            tenantsState: import("..").TenantsState;
            rolesState: import("..").RolesState;
            sessionsState: import("..").SessionsState;
            hostedLoginBox?: boolean | undefined;
            disableSilentRefresh?: boolean | undefined;
            sessionsPolicyState: import("..").SessionsPolicyState;
            impersonateState?: import("..").ImpersonateState | undefined;
            passkeysState?: import("..").PasskeysState | undefined;
            customLoginState?: import("..").CustomLoginState | undefined;
            allAccountsState?: import("..").IAllAccountsState | undefined;
            allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
            securityCenterState?: import("..").SecurityCenterState | undefined;
            smsState?: import("..").SmsState | undefined;
            stepUpState?: import("..").StepUpState | undefined;
            routes: import("..").AuthPageRoutes;
            header?: any;
            loaderComponent?: any;
        };
    };
    resetLoginState: (state: import("..").AuthState) => {
        onRedirectTo: (path: string, opts?: import("@frontegg/rest-api").RedirectOptions | undefined) => void;
        error?: any;
        isAuthenticated: boolean;
        userIp?: string | undefined;
        isLoading: boolean;
        keepSessionAlive?: boolean | undefined;
        socialLoginOptions?: {
            promptConsent?: boolean | undefined;
        } | undefined;
        user?: import("..").User | null | undefined;
        isSSOAuth: boolean;
        ssoACS?: string | undefined;
        includeQueryParam?: boolean | undefined;
        loginState: LoginState;
        activateState: import("..").ActivateAccountState;
        acceptInvitationState: import("..").AcceptInvitationState;
        forgotPasswordState: import("..").ForgotPasswordState;
        resetPhoneNumberState: import("..").ResetPhoneNumberState;
        ssoState: import("..").SSOState;
        profileState: import("..").ProfileState;
        mfaState: import("..").MFAState;
        teamState: import("..").TeamState;
        groupsState: import("..").GroupsState;
        groupsDialogsState: import("..").GroupsDialogsState;
        socialLoginState: import("..").SocialLoginState;
        signUpState: import("..").SignUpState;
        apiTokensState: import("..").ApiTokensState;
        securityPolicyState: import("..").SecurityPolicyState;
        restrictionsState: import("..").RestrictionsState;
        provisioningState: import("..").ProvisioningState;
        accountSettingsState: import("..").AccountSettingsState;
        tenantsState: import("..").TenantsState;
        rolesState: import("..").RolesState;
        sessionsState: import("..").SessionsState;
        hostedLoginBox?: boolean | undefined;
        disableSilentRefresh?: boolean | undefined;
        sessionsPolicyState: import("..").SessionsPolicyState;
        impersonateState?: import("..").ImpersonateState | undefined;
        passkeysState?: import("..").PasskeysState | undefined;
        customLoginState?: import("..").CustomLoginState | undefined;
        allAccountsState?: import("..").IAllAccountsState | undefined;
        allAccountsDialogsState?: import("..").IAllAccountsDialogsState | undefined;
        securityCenterState?: import("..").SecurityCenterState | undefined;
        smsState?: import("..").SmsState | undefined;
        stepUpState?: import("..").StepUpState | undefined;
        routes: import("..").AuthPageRoutes;
        header?: any;
        loaderComponent?: any;
    };
};
declare const actions: {
    requestAuthorize: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(boolean | undefined)?], boolean, string, never, never>;
    requestAuthorizeSSR: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[FronteggNextJSSession], FronteggNextJSSession, string, never, never>;
    requestHostedLoginAuthorize: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(Record<string, string> | undefined)?], Record<string, string> | undefined, string, never, never>;
    requestHostedLoginAuthorizeV2: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[({
        additionalParams?: Record<string, string> | undefined;
        shouldRedirectToLogin?: boolean | undefined;
        firstTime?: boolean | undefined;
        loginDirectAction?: LoginDirectAction | undefined;
    } | undefined)?], {
        additionalParams?: Record<string, string> | undefined;
        shouldRedirectToLogin?: boolean | undefined;
        firstTime?: boolean | undefined;
        loginDirectAction?: LoginDirectAction | undefined;
    } | undefined, string, never, never>;
    handleHostedLoginCallback: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[HostedLoginCallback], HostedLoginCallback, string, never, never>;
    afterAuthNavigation: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    preLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPreLogin & {
        recaptchaToken?: string | undefined;
        invitationToken?: string | undefined;
    }, void>], WithCallback<IPreLogin & {
        recaptchaToken?: string | undefined;
        invitationToken?: string | undefined;
    }, void>, string, never, never>;
    postLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IPostLogin], IPostLogin, string, never, never>;
    login: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ILogin, boolean>], WithCallback<ILogin, boolean>, string, never, never>;
    loginWithMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ILoginWithMfa, boolean>], WithCallback<ILoginWithMfa, boolean>, string, never, never>;
    recoverMfa: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IRecoverMFATokenPayload], IRecoverMFATokenPayload, string, never, never>;
    logout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[((() => void) | undefined)?], (() => void) | undefined, string, never, never>;
    silentLogout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(WithCallback<{
        callbackTimeout?: number | undefined;
    }, boolean> | undefined)?], WithCallback<{
        callbackTimeout?: number | undefined;
    }, boolean> | undefined, string, never, never>;
    checkIfAllowToRememberMfaDevice: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        mfaToken: string;
    }], {
        mfaToken: string;
    }, string, never, never>;
    changePhoneNumberWithVerification: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IChangePhoneNumberWithVerification, boolean>], WithCallback<IChangePhoneNumberWithVerification, boolean>, string, never, never>;
    verifyChangePhoneNumber: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IVerifyChangePhoneNumber, boolean>], WithCallback<IVerifyChangePhoneNumber, boolean>, string, never, never>;
    quickSmsPasswordlessPreLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IQuickSmsPasswordlessPreLoginPayload, boolean>], WithCallback<IQuickSmsPasswordlessPreLoginPayload, boolean>, string, never, never>;
    passwordlessPreLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPasswordlessPreLogin, void>], WithCallback<IPasswordlessPreLogin, void>, string, never, never>;
    passwordlessPostLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPasswordlessPostLoginPayload, boolean>], WithCallback<IPasswordlessPostLoginPayload, boolean>, string, never, never>;
    verifyInviteToken: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IVerifyInviteToken], IVerifyInviteToken, string, never, never>;
    webAuthnPrelogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IWebAuthnPreLogin, IWebAuthnPreLoginResponse | null>], WithCallback<IWebAuthnPreLogin, IWebAuthnPreLoginResponse | null>, string, never, never>;
    webAuthnPostLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IWebAuthnPostLoginPayload], IWebAuthnPostLoginPayload, string, never, never>;
    webAuthnCreateNewDeviceSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("../../interfaces").CallbackMethod<ICreateNewDeviceSessionResponse | null> | undefined;
    }], {
        callback?: import("../../interfaces").CallbackMethod<ICreateNewDeviceSessionResponse | null> | undefined;
    }, string, never, never>;
    webAuthnVerifyNewDeviceSession: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IVerifyNewWebAuthnDevicePayload], IVerifyNewWebAuthnDevicePayload, string, never, never>;
    getUserIP: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }], {
        callback?: import("../../interfaces").CallbackMethod<boolean> | undefined;
    }, string, never, never>;
    preEnrollMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPreEnrollMFA, IPreEnrollMFAWebAuthNForLoginResponse>], WithCallback<IPreEnrollMFA, IPreEnrollMFAWebAuthNForLoginResponse>, string, never, never>;
    enrollMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IEnrollMFAWebAuthnPayload], IEnrollMFAWebAuthnPayload, string, never, never>;
    enrollMFAAuthenticatorAppForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IEnrollMFAAuthenticatorApp, boolean>], WithCallback<IEnrollMFAAuthenticatorApp, boolean>, string, never, never>;
    preEnrollMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPreEnrollMFASMS, boolean>], WithCallback<IPreEnrollMFASMS, boolean>, string, never, never>;
    enrollMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IEnrollMFASMS, boolean>], WithCallback<IEnrollMFASMS, boolean>, string, never, never>;
    preVerifyMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>], WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>, string, never, never>;
    verifyMFAWebAuthnForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IVerifyMFAWebAuthnPayload], IVerifyMFAWebAuthnPayload, string, never, never>;
    preVerifyMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithDeviceId<IPreVerifyMFA>, boolean>], WithCallback<WithDeviceId<IPreVerifyMFA>, boolean>, string, never, never>;
    verifyMFASMSForLogin: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<WithDeviceId<IVerifyMFASMS>, boolean>], WithCallback<WithDeviceId<IVerifyMFASMS>, boolean>, string, never, never>;
    preVerifyMFAEmailCode: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IPreVerifyMFA, boolean>], WithCallback<IPreVerifyMFA, boolean>, string, never, never>;
    verifyMFAEmailCode: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IVerifyMFAEmailCode, boolean>], WithCallback<IVerifyMFAEmailCode, boolean>, string, never, never>;
    resetBreachedPassword: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[IForgotPassword], IForgotPassword, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setLoginState: (state: Partial<LoginState>) => void;
    resetLoginState: () => void;
    requestAuthorize: (payload?: boolean) => void;
    requestAuthorizeSSR: (payload: FronteggNextJSSession) => void;
    requestHostedLoginAuthorize: (payload?: Record<string, string>) => void;
    requestHostedLoginAuthorizeV2: (payload?: {
        additionalParams?: Record<string, string>;
        shouldRedirectToLogin?: boolean;
        firstTime?: boolean;
        loginDirectAction?: LoginDirectAction;
    }) => void;
    handleHostedLoginCallback: (payload: HostedLoginCallback) => void;
    afterAuthNavigation: () => void;
    preLogin: (payload: WithCallback<IPreLogin & {
        recaptchaToken?: string;
        invitationToken?: string;
    }, void>) => void;
    postLogin: (payload: IPostLogin) => void;
    login: (payload: WithCallback<ILogin>) => void;
    loginWithMfa: (payload: WithCallback<ILoginWithMfa>) => void;
    recoverMfa: (payload: IRecoverMFATokenPayload) => void;
    logout: (payload?: () => void) => void;
    silentLogout: (payload?: WithCallback<{
        callbackTimeout?: number;
    }>) => void;
    checkIfAllowToRememberMfaDevice: (payload: {
        mfaToken: string;
    }) => void;
    changePhoneNumberWithVerification: (payload: WithCallback<IChangePhoneNumberWithVerification>) => void;
    verifyChangePhoneNumber: (payload: WithCallback<IVerifyChangePhoneNumber>) => void;
    quickSmsPasswordlessPreLogin: (payload: WithCallback<IQuickSmsPasswordlessPreLoginPayload>) => void;
    passwordlessPreLogin: (payload: WithCallback<IPasswordlessPreLogin, void>) => void;
    passwordlessPostLogin: (payload: WithCallback<IPasswordlessPostLoginPayload>) => void;
    verifyInviteToken: (payload: IVerifyInviteToken) => void;
    webAuthnPrelogin: (payload: WithCallback<IWebAuthnPreLogin, IWebAuthnPreLoginResponse | null>) => void;
    webAuthnPostLogin: (payload: IWebAuthnPostLoginPayload) => void;
    webAuthnCreateNewDeviceSession: (payload: WithCallback<{}, ICreateNewDeviceSessionResponse | null>) => void;
    webAuthnVerifyNewDeviceSession: (payload: IVerifyNewWebAuthnDevicePayload) => void;
    getUserIP: (payload: WithCallback) => void;
    preEnrollMFAWebAuthnForLogin: (payload: WithCallback<IPreEnrollMFA, IPreEnrollMFAWebAuthNForLoginResponse>) => void;
    enrollMFAWebAuthnForLogin: (payload: IEnrollMFAWebAuthnPayload) => void;
    enrollMFAAuthenticatorAppForLogin: (payload: WithCallback<IEnrollMFAAuthenticatorApp>) => void;
    preEnrollMFASMSForLogin: (payload: WithCallback<IPreEnrollMFASMS>) => void;
    enrollMFASMSForLogin: (payload: WithCallback<IEnrollMFASMS>) => void;
    preVerifyMFAWebAuthnForLogin: (payload: WithCallback<WithDeviceId<IPreVerifyMFA>, IPreVerifyMFAWebAuthNForLoginResponse>) => void;
    verifyMFAWebAuthnForLogin: (payload: IVerifyMFAWebAuthnPayload) => void;
    preVerifyMFASMSForLogin: (payload: WithCallback<WithDeviceId<IPreVerifyMFA>>) => void;
    verifyMFASMSForLogin: (payload: WithCallback<WithDeviceId<IVerifyMFASMS>>) => void;
    preVerifyMFAEmailCode: (payload: WithCallback<IPreVerifyMFA>) => void;
    verifyMFAEmailCode: (payload: WithCallback<IVerifyMFAEmailCode>) => void;
    resetBreachedPassword: (payload: IForgotPassword) => void;
};
export declare type LoginActions = DispatchedActions;
export { loginState, reducers as loginReducers, actions as loginActions };
export { getRedirectUrl, getSearchParam } from './utils';
export { defaultFronteggRoutes } from './consts';
