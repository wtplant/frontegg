import { AuthStrategyEnum, IEnrollMFAWebAuthn, ILoginResponse, IPasswordlessPostLogin, IRecoverMFAToken, ITenantsResponse, IVerifyMFAWebAuthn, IVerifyNewWebAuthnDevice, IWebAuthnPostLogin } from '@frontegg/rest-api';
import { WithCallback } from '../../interfaces';
import { CustomEventsOptions } from '../interfaces';
import { Action } from '@reduxjs/toolkit';
export declare enum LoginStep {
    'preLogin' = "preLogin",
    'magicLinkPreLoginSuccess' = "magicLinkPreLoginSuccess",
    'loginWithSmsOtc' = "loginWithSmsOtc",
    'loginWithQuickSmsOtc' = "loginWithQuickSmsOtc",
    'loginWithOtc' = "loginWithOtc",
    'loginWithPassword' = "loginWithPassword",
    'loginWithTwoFactor' = "loginWithTwoFactor",
    'redirectToSSO' = "redirectToSSO",
    'loginWithSSOFailed' = "loginWithSSOFailed",
    'success' = "success",
    'forceTwoFactor' = "forceTwoFactor",
    'recoverTwoFactor' = "recoverTwoFactor",
    'promptPasskeys' = "promptPasskeys",
    'breachedPassword' = "breachedPassword",
    'breachedPasswordSuccess' = "breachedPasswordSuccess"
}
export declare enum LoginFlow {
    Login = "login",
    RegisterQuickLogin = "registerQuickLogin"
}
export declare enum QuickLoginStrategy {
    Internal = "internal",
    UsbKey = "usb-key",
    Android = "android",
    Sms = "sms"
}
export interface LoginState {
    loading: boolean;
    error?: any;
    step: LoginStep;
    flow: LoginFlow;
    ssoRedirectUrl?: string;
    mfaRequired?: boolean;
    mfaToken?: string;
    email?: string;
    tenants: ITenantsResponse[];
    tenantsLoading?: boolean;
    allowRememberMfaDevice?: boolean;
    mfaDeviceExpiration?: number;
    inviteTokenTenantName?: string;
    inviteTokenError?: string;
    isNewUser?: boolean;
    phoneNumber?: string;
    quickLoginToRegister?: QuickLoginStrategy;
    changePhoneId?: string;
    isBreachedPassword?: boolean;
}
export interface HostedLoginCallback {
    code: string;
    state?: string;
    nonce?: string;
}
export interface FronteggNextJSSession {
    accessToken: string;
    refreshToken?: string;
    user: ILoginResponse;
}
export interface IQuickSmsPasswordlessPreLoginPayload {
    userId: string;
    recaptchaToken?: string;
    invitationToken?: string;
}
export interface IPasswordlessPostLoginPayload extends IPasswordlessPostLogin {
    events?: CustomEventsOptions;
}
export declare type IWebAuthnPostLoginPayload = WithCallback<Omit<IWebAuthnPostLogin, 'response' | 'id'>> & {
    publicKey: Credential;
};
export declare type IVerifyNewWebAuthnDevicePayload = WithCallback<Omit<IVerifyNewWebAuthnDevice, 'response' | 'id'>> & {
    publicKey: Credential;
};
export { AuthStrategyEnum };
export interface IPreEnrollMFAWebAuthNForLoginResponse {
    webauthnToken: string;
    options: PublicKeyCredentialCreationOptions;
}
export interface IPreVerifyMFAWebAuthNForLoginResponse {
    webauthnToken: string;
    options: PublicKeyCredentialRequestOptions;
}
export declare type WithDeviceId<T> = T & {
    deviceId: string;
};
export declare type WithPhoneId<T> = T & {
    phoneId: string;
};
export declare type IEnrollMFAWebAuthnPayload = WithCallback<Omit<IEnrollMFAWebAuthn, 'options'>> & {
    publicKey: Credential;
};
export declare type IVerifyMFAWebAuthnPayload = WithCallback<WithDeviceId<Omit<IVerifyMFAWebAuthn, 'options'>>> & {
    publicKey: Credential;
};
export interface IRecoverMFATokenPayload extends WithCallback<IRecoverMFAToken> {
    recaptchaToken?: string;
}
/**
 * Type for action to set the loading state
 * @param options.loading - true if in loading state
 * @param options.error - error if in error state
 */
export declare type SetLoadingAction = ({ loading, error }: {
    loading?: boolean;
    error?: unknown;
}) => Action;
export declare enum LoginActionTypes {
    'social-login' = "social-login",
    'custom-social-login' = "custom-social-login",
    'direct' = "direct"
}
export interface LoginDirectAction {
    type: keyof typeof LoginActionTypes;
    data: any;
    additionalQueryParams?: Record<string, string>;
}
