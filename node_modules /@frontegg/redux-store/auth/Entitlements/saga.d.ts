import { UserEntitlementsContext as UserEntitlementsResponseV2 } from '@frontegg/entitlements-javascript-commons';
import { PayloadAction } from '@reduxjs/toolkit';
import { LoadEntitlementsActionPayload } from './interfaces';
/**
 * @param oldEntitlements
 * @param newEntitlements
 * @returns true when old and new entitlements are deeply equal
 */
export declare function isEntitlementsDeeplyEqual(oldEntitlements: UserEntitlementsResponseV2 | undefined, newEntitlements: UserEntitlementsResponseV2 | undefined): boolean;
/**
 * Handle fetched entitlements response by deep comparison with the stored entitlements to prevent
 * useless renders due to store update
 * Updating loading state anyway
 * @param newEntitlementsResponse
 */
export declare function handleFetchedEntitlements(newEntitlementsResponse: UserEntitlementsResponseV2): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").PutEffect<{
    payload: Partial<UserEntitlementsResponseV2>;
    type: string;
}>, void, UserEntitlementsResponseV2>;
/**
 * Load entitlements data for saga action
 * Don't update entitlements data in the store when data is equal (deep check) to the existing store data
 * @param payloadAction saga payload action including a payload with/out a callback
 *                      The callback will be called on request completed with true if succeeded, false if failed
 */
export declare function loadEntitlements({ payload }: PayloadAction<LoadEntitlementsActionPayload>): any;
export declare function entitlementsSagas(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
