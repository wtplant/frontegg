import { PayloadAction } from '@reduxjs/toolkit';
import { ISignUpResponse, IVendorConfig } from '@frontegg/rest-api';
import { ISignUpUserPayload } from './interfaces';
import { AuthState } from '../interfaces';
export declare function loadAllowSignUps(): Generator<Generator<import("redux-saga/effects").CallEffect<boolean> | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").IAuthStrategiesConfig>, IVendorConfig | {
    authStrategy: import("@frontegg/rest-api").AuthStrategyEnum;
} | undefined, (false & import("@frontegg/rest-api").IAuthStrategiesConfig) | (true & import("@frontegg/rest-api").IAuthStrategiesConfig)> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("../../interfaces").WithStatus & {
        policy?: IVendorConfig | undefined;
    }>;
    type: string;
}> | import("redux-saga/effects").CallEffect<IVendorConfig> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SignUpState>;
    type: string;
}>, void, IVendorConfig>;
export declare function signUpUser({ payload: { events, url, ...payload } }: PayloadAction<ISignUpUserPayload>): Generator<import("redux-saga/effects").SelectEffect | Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<import("@frontegg/rest-api").IAllowedToRememberMfaDevice>, {
    user: undefined;
    isAuthenticated: boolean;
    mfaState: Partial<import("..").MFAState>;
    loginState: {
        mfaToken: any;
        mfaRequired: any;
        loading: boolean;
        error: undefined;
        step: import("..").LoginStep.loginWithTwoFactor | import("..").LoginStep.forceTwoFactor;
        tenantsLoading: boolean;
        email: any;
        tenants: never[];
        allowRememberMfaDevice: any;
        mfaDeviceExpiration: any;
        isBreachedPassword: any;
        flow: import("..").LoginFlow;
        ssoRedirectUrl?: string | undefined;
        inviteTokenTenantName?: string | undefined;
        inviteTokenError?: string | undefined;
        isNewUser?: boolean | undefined;
        phoneNumber?: string | undefined;
        quickLoginToRegister?: import("..").QuickLoginStrategy | undefined;
        changePhoneId?: string | undefined;
    };
}, AuthState & {
    isAllowedToRemember: any;
    mfaDeviceExpiration: any;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<AuthState>;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SignUpState>;
    type: string;
}> | import("redux-saga/effects").CallEffect<ISignUpResponse>, void, {
    routes: any;
    onRedirectTo: any;
} & ISignUpResponse & Partial<AuthState> & AuthState>;
export declare function resetSignUpStateSoft(): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").PutEffect<{
    payload: undefined;
    type: string;
}> | import("redux-saga/effects").PutEffect<{
    payload: Partial<import("./interfaces").SignUpState>;
    type: string;
}>, void, {
    allowSignUps: any;
    allowNotVerifiedUsersLogin: any;
}>;
export declare function signUpSaga(): Generator<import("redux-saga/effects").ForkEffect<never>, void, unknown>;
