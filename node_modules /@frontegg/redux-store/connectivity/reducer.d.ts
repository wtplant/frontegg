import { IConnectivityState } from './interfaces';
export declare const initialState: IConnectivityState;
declare const reducer: import("redux").Reducer<IConnectivityState, import("redux").AnyAction>;
declare const actions: {
    loadSlackActions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadDataAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(import("./interfaces").TPlatform[] | undefined)?], import("./interfaces").TPlatform[] | undefined, string, never, never>;
    postDataAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("./interfaces").TPostData, boolean>], import("..").WithCallback<import("./interfaces").TPostData, boolean>, string, never, never>;
    postCodeAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    loadScope: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    deleteWebhookConfigAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<{
        webhookId: string;
    }, boolean>], import("..").WithCallback<{
        webhookId: string;
    }, boolean>, string, never, never>;
    postWebhookTestAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").IWebhookTest, boolean>], import("..").WithCallback<import("@frontegg/rest-api").IWebhookTest, boolean>, string, never, never>;
    loadWebhookLogsAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string, (number | undefined)?, (number | undefined)?], {
        id: string;
        offset: number;
        limit: number;
    }, string, never, never>;
    initData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setConnectivityState: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<IConnectivityState>, string>;
    cleanWebhookTestData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    cleanWebhookLogsData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    cleanWebhookTestMessage: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    cleanError: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    cleanSlackData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    postWebhookRetryAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    postWebhookRetryResult: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./interfaces").IWebhookRetryResult], import("./interfaces").IWebhookRetryResult, string, never, never>;
};
export { reducer, actions };
