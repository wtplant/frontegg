import { PayloadAction } from '@reduxjs/toolkit';
import { IConnectivityState, IWebhookRetryResult, TPlatform, TPostData } from '../interfaces';
import { IWebhookTest } from '@frontegg/rest-api';
import { WithCallback } from '../../interfaces';
declare const reducers: {
    initData: () => {
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        error?: string | undefined;
        processIds: string[];
        slackChannels: {
            error?: string | undefined;
            isLoading: boolean;
            isLoadingScope?: boolean | undefined;
            data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
            clientId?: string | undefined;
        };
        testResult?: import("../interfaces").IWebhookTestResult | undefined;
        retryResult?: IWebhookRetryResult | undefined;
        webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
        totalPages?: number | undefined;
    };
    setConnectivityState: (state: IConnectivityState, { payload }: PayloadAction<Partial<IConnectivityState>>) => {
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        error?: string | undefined;
        processIds: string[];
        slackChannels: {
            error?: string | undefined;
            isLoading: boolean;
            isLoadingScope?: boolean | undefined;
            data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
            clientId?: string | undefined;
        };
        testResult?: import("../interfaces").IWebhookTestResult | undefined;
        retryResult?: IWebhookRetryResult | undefined;
        webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
        totalPages?: number | undefined;
    };
    cleanWebhookTestData: (state: IConnectivityState) => {
        testResult: undefined;
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        error?: string | undefined;
        processIds: string[];
        slackChannels: {
            error?: string | undefined;
            isLoading: boolean;
            isLoadingScope?: boolean | undefined;
            data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
            clientId?: string | undefined;
        };
        retryResult?: IWebhookRetryResult | undefined;
        webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
        totalPages?: number | undefined;
    };
    cleanWebhookLogsData: (state: IConnectivityState) => {
        webhookLogs: undefined;
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        error?: string | undefined;
        processIds: string[];
        slackChannels: {
            error?: string | undefined;
            isLoading: boolean;
            isLoadingScope?: boolean | undefined;
            data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
            clientId?: string | undefined;
        };
        testResult?: import("../interfaces").IWebhookTestResult | undefined;
        retryResult?: IWebhookRetryResult | undefined;
        totalPages?: number | undefined;
    };
    cleanWebhookTestMessage: (state: IConnectivityState) => {
        testResult: {
            status: import("../interfaces").TWebhookStatus;
            message: undefined;
        };
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        error?: string | undefined;
        processIds: string[];
        slackChannels: {
            error?: string | undefined;
            isLoading: boolean;
            isLoadingScope?: boolean | undefined;
            data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
            clientId?: string | undefined;
        };
        retryResult?: IWebhookRetryResult | undefined;
        webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
        totalPages?: number | undefined;
    };
    cleanError: (state: IConnectivityState) => {
        error: undefined;
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        processIds: string[];
        slackChannels: {
            error?: string | undefined;
            isLoading: boolean;
            isLoadingScope?: boolean | undefined;
            data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
            clientId?: string | undefined;
        };
        testResult?: import("../interfaces").IWebhookTestResult | undefined;
        retryResult?: IWebhookRetryResult | undefined;
        webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
        totalPages?: number | undefined;
    };
    cleanSlackData: (state: IConnectivityState) => {
        slackChannels: {
            isLoading: boolean;
        };
        isLoading: boolean;
        isSaving: boolean;
        isTesting?: boolean | undefined;
        list: import("../interfaces").IConnectivityData[];
        sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
        slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
        webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
        categories?: import("@frontegg/rest-api").ICategory[] | undefined;
        channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
        error?: string | undefined;
        processIds: string[];
        testResult?: import("../interfaces").IWebhookTestResult | undefined;
        retryResult?: IWebhookRetryResult | undefined;
        webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
        totalPages?: number | undefined;
    };
    postWebhookRetryAction: {
        prepare: (logId: string) => {
            payload: string;
        };
        reducer: (state: IConnectivityState, { payload }: PayloadAction<string>) => {
            retryResult: {
                [x: string]: {
                    isProcess: boolean;
                    success: boolean;
                } | {
                    isProcess: boolean;
                    success: boolean;
                };
            };
            isLoading: boolean;
            isSaving: boolean;
            isTesting?: boolean | undefined;
            list: import("../interfaces").IConnectivityData[];
            sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
            email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
            slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
            webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
            categories?: import("@frontegg/rest-api").ICategory[] | undefined;
            channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
            error?: string | undefined;
            processIds: string[];
            slackChannels: {
                error?: string | undefined;
                isLoading: boolean;
                isLoadingScope?: boolean | undefined;
                data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
                clientId?: string | undefined;
            };
            testResult?: import("../interfaces").IWebhookTestResult | undefined;
            webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
            totalPages?: number | undefined;
        };
    };
    postWebhookRetryResult: {
        prepare: (payload: IWebhookRetryResult) => {
            payload: IWebhookRetryResult;
        };
        reducer: (state: IConnectivityState, { payload }: PayloadAction<IWebhookRetryResult>) => {
            retryResult: {
                [x: string]: {
                    isProcess: boolean;
                    success: boolean;
                };
            };
            isLoading: boolean;
            isSaving: boolean;
            isTesting?: boolean | undefined;
            list: import("../interfaces").IConnectivityData[];
            sms?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
            email?: import("@frontegg/rest-api").IEmailSMSConfigResponse[] | undefined;
            slack?: import("@frontegg/rest-api").ISlackConfigurations | undefined;
            webhook?: import("@frontegg/rest-api").IWebhooksConfigurations[] | undefined;
            categories?: import("@frontegg/rest-api").ICategory[] | undefined;
            channelMap?: Record<TPlatform, import("@frontegg/rest-api").IChannelsMap[]> | undefined;
            error?: string | undefined;
            processIds: string[];
            slackChannels: {
                error?: string | undefined;
                isLoading: boolean;
                isLoadingScope?: boolean | undefined;
                data?: import("@frontegg/rest-api").ISlackChannel[] | undefined;
                clientId?: string | undefined;
            };
            testResult?: import("../interfaces").IWebhookTestResult | undefined;
            webhookLogs?: import("../interfaces").IWebhookLogs | undefined;
            totalPages?: number | undefined;
        };
    };
};
declare const actions: {
    loadSlackActions: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadDataAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[(TPlatform[] | undefined)?], TPlatform[] | undefined, string, never, never>;
    postDataAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<TPostData, boolean>], WithCallback<TPostData, boolean>, string, never, never>;
    postCodeAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    loadScope: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    deleteWebhookConfigAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<{
        webhookId: string;
    }, boolean>], WithCallback<{
        webhookId: string;
    }, boolean>, string, never, never>;
    postWebhookTestAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<IWebhookTest, boolean>], WithCallback<IWebhookTest, boolean>, string, never, never>;
    loadWebhookLogsAction: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string, (number | undefined)?, (number | undefined)?], {
        id: string;
        offset: number;
        limit: number;
    }, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setConnectivityState: (state: Partial<IConnectivityState>) => void;
    initData: () => void;
    loadSlackActions: () => void;
    loadDataAction: (payload?: TPlatform[]) => void;
    postDataAction: (payload: WithCallback<TPostData>) => void;
    postCodeAction: (payload: string) => void;
    loadScope: () => void;
    deleteWebhookConfigAction: (payload: WithCallback<{
        webhookId: string;
    }>) => void;
    postWebhookTestAction: (payload: IWebhookTest) => void;
    postWebhookRetryAction: (logId: string) => void;
    loadWebhookLogsAction: (id: string, offset: number, limit: number) => void;
    cleanWebhookTestData: () => void;
    cleanWebhookLogsData: () => void;
    cleanWebhookTestMessage: () => void;
    cleanError: () => void;
    cleanSlackData: () => void;
};
/**
 *  if you see error in matcher that's mean the DispatchAction does not
 *  contains the same functions in reducers and actions
 */
export declare type ConnectivityActions = DispatchedActions;
export { reducers as connectivityReducers, actions as connectivityActions };
