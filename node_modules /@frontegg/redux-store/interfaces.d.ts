export declare type CallbackMethod<R = boolean> = (data: R | null, error?: string) => void;
export declare type WithCallback<T = {}, R = boolean> = T & {
    callback?: CallbackMethod<R>;
};
export declare type WithStatus = {
    loading: boolean;
    error?: any;
    saving?: boolean;
};
export declare type WithId<T = {}> = T & {
    id: string;
};
export declare type LoaderIndicatorState<T extends string> = Partial<{
    [key in T]: string | boolean;
}>;
export declare type ErrorsIndicatorState<T extends string> = Partial<{
    [key in T]: string | boolean;
}>;
export declare type WithSilentLoad<T> = T & {
    silentLoading?: boolean;
};
export declare type ActionDispatchMatcher<Reducers, Actions, DispatchedActions> = Omit<Reducers & Actions, keyof DispatchedActions> & Omit<DispatchedActions, keyof (Actions & Reducers)>;
