import { RootState } from './toolkit/interfaces';
import { AuthState } from './auth/interfaces';
import { AuditsState } from './audits/interfaces';
import { IConnectivityState } from './connectivity/interfaces';
import { SubscriptionsState } from './subscriptions/interfaces';
import { VendorState } from './vendor/interfaces';
import { OldAuditsState } from './audits/backward-compatibility';
import { Unsubscribe } from '@reduxjs/toolkit';
export declare type FronteggState = {
    root: RootState;
    auth: AuthState;
    auditLogs: AuditsState;
    audits: OldAuditsState;
    connectivity: IConnectivityState;
    subscriptions: SubscriptionsState;
    vendor: VendorState;
    /**
     * Using redux store subscribe causes unpredictable callback calls: https://redux.js.org/api/store#subscribelistener
     *
     * This function aim to prevent unnecessary update by calling the callback with the updated frontegg state only on state reference change.
     * This function protect from redux unnecessary updates by reference comparison
     * Developed for vanilla js SDK
     *
     * @param callback called with the updated frontegg state for every store refresh
     * @returns redux unsubscribe function
     */
    subscribeStateChanged: (callback: (state: FronteggState) => void) => Unsubscribe;
};
