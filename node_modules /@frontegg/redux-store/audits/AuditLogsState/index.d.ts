import { AuditLogsState, LoadAuditLogsPayload } from './interfaces';
import { AuditsState } from '../interfaces';
declare const auditLogsState: AuditLogsState;
declare const reducers: {
    setAuditLogsState: {
        prepare: (payload: Partial<AuditLogsState>) => {
            payload: Partial<AuditLogsState>;
        };
        reducer: (state: AuditsState, { payload }: {
            payload: Partial<AuditLogsState>;
            type: string;
        }) => {
            auditLogsState: AuditLogsState;
            auditsMetadataState: import("..").AuditsMetadataState;
        };
    };
    resetAuditLogsState: (state: AuditsState) => {
        auditLogsState: AuditLogsState;
        auditsMetadataState: import("..").AuditsMetadataState;
    };
};
declare const actions: {
    exportAuditsCsv: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadAuditLogs: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../../interfaces").WithSilentLoad<import("../../interfaces").WithCallback<{
        pageOffset: number;
        pageSize?: number | undefined;
        filter?: import("@frontegg/rest-api").QueryFilter[] | undefined;
        sort?: import("@frontegg/rest-api").QuerySort[] | undefined;
    }, boolean>>], import("../../interfaces").WithSilentLoad<import("../../interfaces").WithCallback<{
        pageOffset: number;
        pageSize?: number | undefined;
        filter?: import("@frontegg/rest-api").QueryFilter[] | undefined;
        sort?: import("@frontegg/rest-api").QuerySort[] | undefined;
    }, boolean>>, string, never, never>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setAuditLogsState: (state: Partial<AuditLogsState>) => void;
    resetAuditLogsState: () => void;
    exportAuditsCsv: () => void;
    loadAuditLogs: (payload: LoadAuditLogsPayload) => void;
};
export declare type AuditLogsActions = DispatchedActions;
export { auditLogsState, reducers as auditLogsReducers, actions as auditLogsActions };
