import { AuditsMetadataState } from './interfaces';
import { AuditsState } from '../interfaces';
declare const auditsMetadataState: AuditsMetadataState;
declare const reducers: {
    setAuditsMetadataState: {
        prepare: (payload: Partial<AuditsMetadataState>) => {
            payload: Partial<AuditsMetadataState>;
        };
        reducer: (state: AuditsState, { payload }: {
            payload: Partial<AuditsMetadataState>;
            type: string;
        }) => {
            auditLogsState: import("..").AuditLogsState;
            auditsMetadataState: AuditsMetadataState;
        };
    };
    resetAuditsMetadataState: (state: AuditsState) => {
        auditsMetadataState: AuditsMetadataState;
        auditLogsState: import("..").AuditLogsState;
    };
};
declare const actions: {
    loadAuditsMetadata: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
};
/**
 *  To be used for actions types after dispatch, and should contains
 *  the reducers and actions as standalone function
 */
declare type DispatchedActions = {
    setAuditsMetadataState: (state: Partial<AuditsMetadataState>) => void;
    resetAuditsMetadataState: () => void;
    loadAuditsMetadata: () => void;
};
export declare type AuditsMetadataActions = DispatchedActions;
export { auditsMetadataState, reducers as auditsMetadataReducers, actions as auditsMetadataActions };
