import { AuditsState } from './interfaces';
import { AuditLogsActions } from './AuditLogsState';
import { AuditsMetadataActions } from './AuditsMetadataState';
declare const reducer: import("redux").Reducer<AuditsState, import("redux").AnyAction>;
declare const actions: {
    loadAuditsMetadata: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    exportAuditsCsv: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadAuditLogs: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithSilentLoad<import("..").WithCallback<{
        pageOffset: number;
        pageSize?: number | undefined;
        filter?: import("@frontegg/rest-api").QueryFilter[] | undefined;
        sort?: import("@frontegg/rest-api").QuerySort[] | undefined;
    }, boolean>>], import("..").WithSilentLoad<import("..").WithCallback<{
        pageOffset: number;
        pageSize?: number | undefined;
        filter?: import("@frontegg/rest-api").QueryFilter[] | undefined;
        sort?: import("@frontegg/rest-api").QuerySort[] | undefined;
    }, boolean>>, string, never, never>;
    setAuditsMetadataState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").AuditsMetadataState>], Partial<import(".").AuditsMetadataState>, string, never, never>;
    resetAuditsMetadataState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setAuditLogsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import(".").AuditLogsState>], Partial<import(".").AuditLogsState>, string, never, never>;
    resetAuditLogsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    resetState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setState: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<AuditsState>, string>;
};
export declare type RootActions = {
    setState: (state: Partial<AuditsState>) => void;
    resetState: () => void;
};
export declare type AuditsActions = RootActions & AuditLogsActions & AuditsMetadataActions;
export { reducer, actions };
