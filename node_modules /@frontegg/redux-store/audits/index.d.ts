import { reducer, actions } from './reducer';
import { sagas, mockSagas } from './saga';
import { auditsStoreName as storeName } from '../constants';
import { initialState } from './initialState';
export * from './interfaces';
export * from './AuditLogsState/interfaces';
export * from './AuditLogsState';
export * from './AuditsMetadataState/interfaces';
export * from './AuditsMetadataState';
export type { AuditsActions } from './reducer';
export { sagas as auditsSagas, mockSagas as auditsMockSagas, reducer as auditsReducers, actions as auditsActions, initialState as auditsInitialState, storeName as auditsStoreName, };
declare const _default: {
    sagas: typeof sagas;
    mockSagas: typeof mockSagas;
    storeName: string;
    initialState: import("./interfaces").AuditsState;
    reducer: import("redux").Reducer<import("./interfaces").AuditsState, import("redux").AnyAction>;
    actions: {
        loadAuditsMetadata: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        exportAuditsCsv: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        loadAuditLogs: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithSilentLoad<import("..").WithCallback<{
            pageOffset: number;
            pageSize?: number | undefined;
            filter?: import("@frontegg/rest-api").QueryFilter[] | undefined;
            sort?: import("@frontegg/rest-api").QuerySort[] | undefined;
        }, boolean>>], import("..").WithSilentLoad<import("..").WithCallback<{
            pageOffset: number;
            pageSize?: number | undefined;
            filter?: import("@frontegg/rest-api").QueryFilter[] | undefined;
            sort?: import("@frontegg/rest-api").QuerySort[] | undefined;
        }, boolean>>, string, never, never>;
        setAuditsMetadataState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./AuditsMetadataState/interfaces").AuditsMetadataState>], Partial<import("./AuditsMetadataState/interfaces").AuditsMetadataState>, string, never, never>;
        resetAuditsMetadataState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setAuditLogsState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./AuditLogsState/interfaces").AuditLogsState>], Partial<import("./AuditLogsState/interfaces").AuditLogsState>, string, never, never>;
        resetAuditLogsState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        resetState: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPayload<Partial<import("./interfaces").AuditsState>, string>;
    };
};
export default _default;
