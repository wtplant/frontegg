import { LoadAudits, Filter, DataSorting } from './interfaces';
export declare const defaultItemsPerPage = 20;
declare const storeName: "audits", reducer: import("redux").Reducer<import("./interfaces").OldAuditsState, import("redux").AnyAction>;
export { reducer, storeName };
export declare const actions: {
    initData: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadAudits: import("@reduxjs/toolkit").ActionCreatorWithPayload<LoadAudits, string>;
    removeFilter: import("@reduxjs/toolkit").ActionCreatorWithPayload<Filter, string>;
    filterData: import("@reduxjs/toolkit").ActionCreatorWithPayload<Filter, string>;
    exportCSV: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    deleteAudits: import("@reduxjs/toolkit").ActionCreatorWithPayload<Filter, string>;
    setContext: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    startLoading: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    setVirtualScroll: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    startRefresh: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    startFetching: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    finishLoading: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    startDownloadingCsv: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    stopDownloadingCsv: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    loadStatsSuccess: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    loadItemFailedAction: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    loadMetadataSuccess: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    loadAuditsSuccess: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    fetchMoreSuccess: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    setFilterData: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    textSearch: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    onPageChange: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
    setDataSorting: import("@reduxjs/toolkit").ActionCreatorWithPayload<DataSorting, string>;
    setPredefinedFilters: import("@reduxjs/toolkit").ActionCreatorWithPayload<any, string>;
};
export declare type OldAuditsActions = typeof actions;
export declare type ReducerType = ReturnType<typeof reducer>;
export declare type LoadAuditsProps = ReturnType<typeof actions.loadAudits>;
export declare type RemoveFilterProps = ReturnType<typeof actions.removeFilter>;
export declare type FilterDataProps = ReturnType<typeof actions.filterData>;
