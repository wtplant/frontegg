import { AnyAction, PayloadAction } from '@reduxjs/toolkit';
export interface ModuleCaseState {
    loading: boolean;
    fetching: boolean;
    error: string | null;
}
export declare type ModuleCaseActions = {
    setLoading: (payload: boolean) => void;
    setError: (payload: string | null) => void;
};
export declare function createModuleCaseReducers<State>(): {
    setLoading: {
        prepare: (payload: boolean) => {
            payload: boolean;
        };
        reducer: (state: State, action: PayloadAction<boolean>) => State & {
            error?: null;
            loading: boolean;
        };
    };
    setError: {
        prepare: (payload: string | null) => {
            payload: string | null;
        };
        reducer: (state: State, action: PayloadAction<string | null>) => State & {
            error: string | null;
            loading: boolean;
            fetching: boolean;
        };
    };
    setState: {
        prepare: (payload: Partial<State>) => {
            payload: Partial<State>;
        };
        reducer: (state: State, action: PayloadAction<Partial<State>>) => State & Partial<State>;
    };
};
export declare type RequiredReducer<State, Action extends AnyAction> = (state: State, action: Action) => State;
export declare function createKeyCaseReducer<State, Key extends keyof State, Action extends AnyAction>(key: Key, setState: RequiredReducer<State[Key], Action>): {
    prepare: (payload: Action['payload']) => {
        payload: Action["payload"];
    };
    reducer: (state: State, action: Action) => State & {
        [x: string]: State[Key];
    };
};
export declare function createKeyCaseLoadingReducer<State extends ModuleCaseState>(key: keyof State): {
    prepare: (payload: boolean) => {
        payload: boolean;
    };
    reducer: (state: State, action: {
        payload: boolean;
        type: string;
    }) => State & {
        [x: string]: State[keyof State];
    };
};
export declare function createKeyCaseErrorReducer<State extends ModuleCaseState>(key: keyof State): {
    prepare: (payload: string | null) => {
        payload: string | null;
    };
    reducer: (state: State, action: {
        payload: string | null;
        type: string;
    }) => State & {
        [x: string]: State[keyof State];
    };
};
