import { SubscriptionsState } from './interfaces';
import { subscriptionsStoreName } from '../constants';
export declare const initialState: SubscriptionsState;
declare const actions: {
    config: {
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").PaymentProviderConfigState>], Partial<import("./interfaces").PaymentProviderConfigState>, string, never, never>;
        loadPaymentConfiguration: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    };
    billing: {
        invoices: {
            setInvoiceDownloadState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
                loading: boolean;
                error: string | null;
            }], {
                loading: boolean;
                error: string | null;
            }, string, never, never>;
            setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
            setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
            setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").InvoicesState>], Partial<import("./interfaces").InvoicesState>, string, never, never>;
            loadInvoices: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            downloadInvoice: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./interfaces").DownloadInvoiceActionPayload], import("./interfaces").DownloadInvoiceActionPayload, string, never, never>;
        };
        information: {
            setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
            setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
            setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").BillingInformationState>], Partial<import("./interfaces").BillingInformationState>, string, never, never>;
            loadBillingInformation: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            cancelSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            renewSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        };
        paymentMethod: {
            setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").PaymentMethodState>], Partial<import("./interfaces").PaymentMethodState>, string, never, never>;
            setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
            setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
            loadPaymentMethod: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            submitPaymentMethod: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            submitPaymentMethodError: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, string>;
            submitPaymentMethodSuccess: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            updatePaymentMethodBillingDetails: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("..").WithCallback<import("@frontegg/rest-api").ISubscriptionUpdatePaymentMethodBillingDetails & {
                id: string;
            }, boolean>], import("..").WithCallback<import("@frontegg/rest-api").ISubscriptionUpdatePaymentMethodBillingDetails & {
                id: string;
            }, boolean>, string, never, never>;
        };
        subscription: {
            setCancellationLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
            setCancellationError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
            setRenewalLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
            setRenewalError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
            setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
            setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
            setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").SubscriptionState>], Partial<import("./interfaces").SubscriptionState>, string, never, never>;
            load: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            cancelSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
            renewSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        };
    };
    plans: {
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").PlansState>], Partial<import("./interfaces").PlansState>, string, never, never>;
        loadPlans: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    };
    checkout: {
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").CheckoutState>], Partial<import("./interfaces").CheckoutState>, string, never, never>;
        loadCheckout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        resetCheckout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        submitCheckout: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        confirmCheckout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./interfaces").ConfirmCheckoutActionPayload], import("./interfaces").ConfirmCheckoutActionPayload, string, never, never>;
        errorCheckout: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string], string, string, never, never>;
    };
    stripe: {
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").StripeState>], Partial<import("./interfaces").StripeState>, string, never, never>;
        loadCustomer: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        createCardSetupIntentSecret: import("@reduxjs/toolkit").ActionCreatorWithPayload<string | null, string>;
    };
    vendorPublicConfig: {
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").VendorPublicConfigurationState>], Partial<import("./interfaces").VendorPublicConfigurationState>, string, never, never>;
        loadVendorPublicConfiguration: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    };
};
declare const reducer: import("redux").Reducer<import("redux").CombinedState<{
    config: import("./interfaces").PaymentProviderConfigState;
    billing: import("redux").CombinedState<import("./interfaces").BillingState>;
    plans: import("./interfaces").PlansState;
    checkout: import("./interfaces").CheckoutState;
    stripe: import("./interfaces").StripeState;
    vendorPublicConfig: import("./interfaces").VendorPublicConfigurationState;
}>, import("redux").AnyAction>;
export { subscriptionsStoreName as name, reducer, actions };
