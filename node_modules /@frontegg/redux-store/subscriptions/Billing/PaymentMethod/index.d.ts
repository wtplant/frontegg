import { PaymentMethodState } from './interfaces';
import { ISubscriptionUpdatePaymentMethodBillingDetails } from '@frontegg/rest-api';
import { WithCallback } from '../../../interfaces';
export declare const initialPaymentMethodState: PaymentMethodState;
declare const reducer: import("redux").Reducer<PaymentMethodState, import("redux").AnyAction>;
declare const actions: {
    setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<PaymentMethodState>], Partial<PaymentMethodState>, string, never, never>;
    setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
    setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
    loadPaymentMethod: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    submitPaymentMethod: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    submitPaymentMethodError: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, string>;
    submitPaymentMethodSuccess: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    updatePaymentMethodBillingDetails: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[WithCallback<ISubscriptionUpdatePaymentMethodBillingDetails & {
        id: string;
    }, boolean>], WithCallback<ISubscriptionUpdatePaymentMethodBillingDetails & {
        id: string;
    }, boolean>, string, never, never>;
};
export { reducer as subscriptionsPaymentMethodReducer, actions as subscriptionsPaymentMethodActions };
