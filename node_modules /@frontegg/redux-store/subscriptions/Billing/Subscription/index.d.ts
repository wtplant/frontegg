import { SubscriptionState } from './interfaces';
export declare const initialSubscriptionState: SubscriptionState;
declare const reducer: import("redux").Reducer<SubscriptionState, import("redux").AnyAction>;
declare const actions: {
    setCancellationLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
    setCancellationError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
    setRenewalLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
    setRenewalError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
    setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
    setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
    setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<SubscriptionState>], Partial<SubscriptionState>, string, never, never>;
    load: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    cancelSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    renewSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
};
export { reducer as subscriptionReducer, actions as subscriptionActions };
