import { AnyAction } from '@reduxjs/toolkit';
import { BillingState } from './interfaces';
export declare const billingInitialState: BillingState;
export declare const billingActions: {
    invoices: {
        setInvoiceDownloadState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[{
            loading: boolean;
            error: string | null;
        }], {
            loading: boolean;
            error: string | null;
        }, string, never, never>;
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").InvoicesState>], Partial<import("./interfaces").InvoicesState>, string, never, never>;
        loadInvoices: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        downloadInvoice: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("./interfaces").DownloadInvoiceActionPayload], import("./interfaces").DownloadInvoiceActionPayload, string, never, never>;
    };
    information: {
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").BillingInformationState>], Partial<import("./interfaces").BillingInformationState>, string, never, never>;
        loadBillingInformation: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        cancelSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        renewSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    };
    paymentMethod: {
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").PaymentMethodState>], Partial<import("./interfaces").PaymentMethodState>, string, never, never>;
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        loadPaymentMethod: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        submitPaymentMethod: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        submitPaymentMethodError: import("@reduxjs/toolkit").ActionCreatorWithPayload<string, string>;
        submitPaymentMethodSuccess: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        updatePaymentMethodBillingDetails: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[import("../..").WithCallback<import("@frontegg/rest-api").ISubscriptionUpdatePaymentMethodBillingDetails & {
            id: string;
        }, boolean>], import("../..").WithCallback<import("@frontegg/rest-api").ISubscriptionUpdatePaymentMethodBillingDetails & {
            id: string;
        }, boolean>, string, never, never>;
    };
    subscription: {
        setCancellationLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setCancellationError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setRenewalLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setRenewalError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setLoading: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[boolean], boolean, string, never, never>;
        setError: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[string | null], string | null, string, never, never>;
        setState: import("@reduxjs/toolkit").ActionCreatorWithPreparedPayload<[Partial<import("./interfaces").SubscriptionState>], Partial<import("./interfaces").SubscriptionState>, string, never, never>;
        load: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        cancelSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
        renewSubscription: import("@reduxjs/toolkit").ActionCreatorWithoutPayload<string>;
    };
};
export declare const billingReducer: import("redux").Reducer<import("redux").CombinedState<BillingState>, AnyAction>;
