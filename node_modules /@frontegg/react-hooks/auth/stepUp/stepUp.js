import { stepUpReducers, stepUpActions, getSearchParam, isSteppedUp, STEP_UP_MAX_AGE_PARAM_NAME, redirectByStepUpUrl } from '@frontegg/redux-store';
import { reducerActionsGenerator, stateHookGenerator, useAuth, useAuthRoutes, useAuthUserOrNull, useOnRedirectTo } from '../hooks';
import { useCallback } from 'react';
const defaultMapper = state => state;
export function useStepUpState(stateMapper = defaultMapper) {
  return stateHookGenerator(stateMapper, 'stepUpState');
}
export const useStepUpActions = () => reducerActionsGenerator(stepUpActions, stepUpReducers);

/**
 * @returns max age from the query param as a number or null if not exists
 */
export const getMaxAgeFromQueryParam = () => {
  const str = getSearchParam(STEP_UP_MAX_AGE_PARAM_NAME);
  return str === undefined ? undefined : +str;
};

/**
 * @returns step up function that redirects to the step up url with the max age param and set the redirect url in the local storage
 */
export const useStepUp = () => {
  const {
    stepUpUrl
  } = useAuthRoutes();
  const {
    hostedLoginBox
  } = useAuth();
  const {
    stepUpHostedLogin
  } = useStepUpActions();
  const onRedirectTo = useOnRedirectTo();
  return useCallback(options => {
    if (hostedLoginBox) {
      stepUpHostedLogin(options || {});
      return;
    }
    redirectByStepUpUrl(stepUpUrl, onRedirectTo, options == null ? void 0 : options.maxAge);
  }, [stepUpUrl, onRedirectTo, stepUpHostedLogin, hostedLoginBox]);
};

/**
 * @param options.maxAge - max age of step up
 * @returns true when the user is stepped up, false otherwise
 */
export const useIsSteppedUp = (options = {}) => {
  const user = useAuthUserOrNull();
  return isSteppedUp(user, options);
};