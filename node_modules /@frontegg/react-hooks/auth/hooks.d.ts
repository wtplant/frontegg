import { CaseReducerActions, SliceCaseReducers } from '@frontegg/redux-store';
import { AuthActions, AuthPageRoutes, AuthState, User } from '@frontegg/redux-store';
import { RedirectOptions } from '@frontegg/rest-api';
export declare type AuthMapper = {
    state: (state: AuthState) => any;
    actions: (actions: AuthActions) => any;
};
export declare type StateHookFunction<T> = (() => T) & (<S extends {}>(mapper: (state: T) => S) => S);
export declare type AuthStateMapper<S> = (state: AuthState) => S;
/**
 * Use this `frontegg` hook function to obtain the complete authentication state, if it exists.
 *
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *
 *   return isAuthenticated ? <div>Hello, User {user.name}</div> : null;
 * }
 * ```
 *
 * You can also utilize other `frontegg` hooks like `useAuthUser` to specifically retrieve the user and redirect to the login page if necessary, `useAuthUserOrNull` to get the user if available, and `useIsAuthenticated` for checking authentication status.
 */
export declare function useAuth(): AuthState;
export declare function useAuth<S>(stateMapper: AuthStateMapper<S>): S;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const { isAuthenticated, user } = useAuth();
 *   const loginWithRedirect = useLoginWithRedirect();
 *
 *   if (!isAuthenticated) {
 *     loginWithRedirect();
 *     return <></>;
 *   }
 *
 *   return (<div>Hello User {user.name}</div>);
 * }
 * ```
 *
 /**
 * Use this frontegg hook function to redirect the user to the login page when in hosted login mode.
 * If the user is already authenticated, this method will direct the user to the store, and you can retrieve user information using the `useAuthUserOrNull` method.
 *
 * To ensure the user is available on the first page load when authenticated, configure this option in your `FronteggProvider`:
 * `authOptions`:
 *   `hostedLoginOptions`:
 *     `loadUserOnFirstLoad: true`
 *
 * When using this option, you can have the user on the first load, and you can control when the user is redirected to the login page by using `loginWithRedirect`.
 */
export declare const useLoginWithRedirect: () => AuthActions['requestHostedLoginAuthorize'];
export declare const useLoginWithRedirectV2: () => AuthActions['requestHostedLoginAuthorizeV2'];
export declare const useAuthActions: () => AuthActions;
export declare const useOnRedirectTo: () => (path: string, opts?: RedirectOptions | undefined) => void;
export declare const useAuthRoutes: () => AuthPageRoutes;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const isAuthenticated  = useIsAuthenticated();
 *   return isAuthenticated ? <div>Hello User</div> : <Redirect to={'/login'}/>
 * }
 * ```
 *
 * use this frontegg hook function to get if user is "Authenticated"
 */
export declare const useIsAuthenticated: () => boolean;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUser();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * Use this `frontegg` hook function to obtain the authenticated user. If the user is not authenticated, this method will immediately redirect the user to the login page. (Primarily intended for embedded mode usage)
 * To prevent this immediate redirection behavior, use the `useAuthUserOrNull` method.
 */
export declare const useAuthUser: () => User;
/**
 * ```jsx
 * export const MyFunctionComponent = () => {
 *   const user = useAuthUserOrNull();
 *   return user ? <div>Hello {user.name}!</div> : <div>Hello Guest!</div>
 * }
 * ```
 *
 * Use this `frontegg` hook function to retrieve the authenticated user. If the user is not authenticated, this hook will return null. To redirect the user to the login page in case they are not authenticated, use the `useAuthUser` method.
 */
export declare const useAuthUserOrNull: () => User | null;
/**
 * hooks helpers
 */
export declare const sliceReducerActionsBy: <T extends SliceCaseReducers<any>>(reducer: T) => CaseReducerActions<T>;
export declare const stateHookGenerator: (stateMapper: any, subState: keyof AuthState, enableMapperFalsyReturnValue?: boolean) => any;
export declare const reducerActionsGenerator: (actions: any, reducers: SliceCaseReducers<any>) => any;
