import { getPermissionEntitlements, getFeatureEntitlements, getEntitlements } from '@frontegg/redux-store';
import { FeatureFlags, USE_ENTITLEMENTS_V2_ENDPOINT_FF } from '@frontegg/rest-api';
import { useAuth } from './hooks';
import { useMemo } from 'react';
import { useRootState, useShadowDom } from '../common';
import { useFeatureFlags } from '../flags';

/**
 * @returns entitlemenets state as stored in the user
 */
const useEntitlementsState = () => useAuth(({
  user
}) => user == null ? void 0 : user.entitlements);

/**
 * @returns user state
 */
const useUserState = () => useAuth(({
  user
}) => user);

/**
 * @param customAttributes user attributes
 * @returns is entitled query data including: entitltments state, final attributes (consumer and frontegg) and API version to use
 */
const useEntitlementsQueryData = customAttributes => {
  const user = useUserState();
  const entitlements = useEntitlementsState();
  const {
    appName
  } = useRootState();
  const [useEntitlementsV2] = FeatureFlags.getFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF], appName);
  const attributes = {
    custom: customAttributes,
    jwt: user
  };
  return {
    entitlements,
    attributes,
    isV2: useEntitlementsV2
  };
};

/**
  @param key feature key
  @param customAttributes user attributes
  @returns if the user is entitled to the given feature and attributes. Attaching the justification if not
*/
export const useFeatureEntitlements = (key, customAttributes) => {
  const {
    entitlements,
    attributes,
    isV2
  } = useEntitlementsQueryData(customAttributes);
  return getFeatureEntitlements(entitlements, key, attributes, isV2);
};

/**
  @param key permission key
  @param customAttributes user attributes
  @returns if the user is entitled to the given permission and attributes. Attaching the justification if not
*/
export const usePermissionEntitlements = (key, customAttributes) => {
  const {
    entitlements,
    attributes,
    isV2
  } = useEntitlementsQueryData(customAttributes);
  return getPermissionEntitlements(entitlements, key, attributes, isV2);
};

/**
  @param entitledToOptions including permission or feature key
  @param customAttributes user attributes
  @returns if the user is entitled to the given feature or permission and attributes (check only one). Attaching the justification if not
*/
export const useEntitlements = (options, customAttributes) => {
  const {
    entitlements,
    attributes,
    isV2
  } = useEntitlementsQueryData(customAttributes);
  return getEntitlements(entitlements, options, attributes, isV2);
};

/**
 @param entitledToOptions including permission or feature key
 @returns an action your can use to detect if the user is entitled to the given feature or permission (check only one). Attaching the justification if not
 */
export const useEntitlementsActions = () => {
  // this code is duplicated because React is yelling when using useEntitlementsQueryData inside the isEntitledTo function because it's not a hook
  const user = useUserState();
  const entitlements = useEntitlementsState();
  const {
    appName
  } = useRootState();
  const [useEntitlementsV2] = FeatureFlags.getFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF], appName);
  return useMemo(() => ({
    isEntitledTo: (options, customAttributes) => {
      const attributes = {
        custom: customAttributes,
        jwt: user
      };
      return getEntitlements(entitlements, options, attributes, useEntitlementsV2);
    }
  }), [user, entitlements, useEntitlementsV2]);
};

/**
 @returns if the option to use entitlements is enabled
  */
export const useEntitlementsOptions = () => {
  var _entitlementsOptions$;
  const {
    entitlementsOptions
  } = useShadowDom();
  const isEntitlementsEnabled = (_entitlementsOptions$ = entitlementsOptions == null ? void 0 : entitlementsOptions.enabled) != null ? _entitlementsOptions$ : false;
  const {
    isEntitledTo
  } = useEntitlementsActions();
  const [verifyIsEntitledFF] = useFeatureFlags(['admin-portal-use-is-entitled']);
  return {
    isEntitlementsEnabled,
    isEntitledTo,
    verifyIsEntitledFF
  };
};