import { Entitlement, EntitledToOptions } from '@frontegg/redux-store';
import { CustomAttributes } from '@frontegg/entitlements-javascript-commons';
/**
  @param key feature key
  @param customAttributes user attributes
  @returns if the user is entitled to the given feature and attributes. Attaching the justification if not
*/
export declare const useFeatureEntitlements: (key: string, customAttributes?: Record<string, string | number | boolean | Date> | undefined) => Entitlement;
/**
  @param key permission key
  @param customAttributes user attributes
  @returns if the user is entitled to the given permission and attributes. Attaching the justification if not
*/
export declare const usePermissionEntitlements: (key: string, customAttributes?: Record<string, string | number | boolean | Date> | undefined) => Entitlement;
/**
  @param entitledToOptions including permission or feature key
  @param customAttributes user attributes
  @returns if the user is entitled to the given feature or permission and attributes (check only one). Attaching the justification if not
*/
export declare const useEntitlements: (options: EntitledToOptions, customAttributes?: Record<string, string | number | boolean | Date> | undefined) => Entitlement;
/**
 @param entitledToOptions including permission or feature key
 @returns an action your can use to detect if the user is entitled to the given feature or permission (check only one). Attaching the justification if not
 */
export declare const useEntitlementsActions: () => {
    isEntitledTo: (options: EntitledToOptions, customAttributes?: Record<string, string | number | boolean | Date> | undefined) => Entitlement;
};
/**
 @returns if the option to use entitlements is enabled
  */
export declare const useEntitlementsOptions: () => {
    isEntitlementsEnabled: boolean;
    isEntitledTo: (options: EntitledToOptions, customAttributes?: Record<string, string | number | boolean | Date> | undefined) => Entitlement;
    verifyIsEntitledFF: boolean;
};
