import React, { isValidElement, useCallback, useMemo, useState } from 'react';
import ReactDOM from 'react-dom';
import { isElement } from 'react-is';

/**
 * CustomComponentRegister is used to support using react hooks inside custom components.
 */
import { jsx as _jsx } from "react/jsx-runtime";
import { Fragment as _Fragment } from "react/jsx-runtime";
export class CustomComponentHolder {
  static set(name, element) {
    CustomComponentHolder.components[name] = element;
  }
  static get(name) {
    return CustomComponentHolder.components[name];
  }
}
CustomComponentHolder.components = {};
const overrideValue = (object, key, value) => {
  const keys = key.split('.');
  let iterator = object;
  while (keys.length > 1) {
    iterator = iterator[keys.shift()];
  }
  iterator[keys.shift()] = value;
};
const Registerer = props => {
  var _app$loginBoxContaine;
  const {
    app,
    themeKey
  } = props;
  const value = CustomComponentHolder.get(themeKey);
  const [mounted, setMounted] = useState(false);
  const [componentProps, setComponentProps] = useState({});
  const mount = useCallback((props = {}) => {
    setMounted(true);
    setComponentProps(props);
  }, []);
  const unmount = useCallback(() => {
    setMounted(false);
  }, []);
  overrideValue(app.options.themeOptions, themeKey, {
    type: 'slot',
    themeKey,
    mount,
    unmount
  });
  let element = (_app$loginBoxContaine = app.loginBoxContainer) == null ? void 0 : _app$loginBoxContaine.querySelector(`[slot="${themeKey}"]`);
  if (!element && typeof document !== undefined) {
    var _app$loginBoxContaine2;
    element = document.createElement('div');
    element.slot = themeKey;
    (_app$loginBoxContaine2 = app.loginBoxContainer) == null ? void 0 : _app$loginBoxContaine2.appendChild(element);
  }
  const component = value ? /*#__PURE__*/React.createElement(value, componentProps) : null;
  return element && mounted ? /*#__PURE__*/_jsx(React.Fragment, {
    children: /*#__PURE__*/ReactDOM.createPortal(component, element)
  }) : /*#__PURE__*/_jsx(_Fragment, {});
};
export const CustomComponentRegister = ({
  app,
  themeOptions
}) => {
  const keys = useMemo(() => {
    if (!themeOptions || !themeOptions.loginBox) {
      return [];
    }
    const loop = (key, obj, keyPath) => {
      if (typeof obj !== 'object' && typeof obj !== 'function') {
        return [];
      }
      if (typeof obj === 'function') {
        try {
          const reactElement = /*#__PURE__*/React.createElement(obj, {
            title: 'title'
          });
          if ( /*#__PURE__*/isValidElement(reactElement) || isElement(reactElement)) {
            const generatedKey = `${keyPath}.${key}`;
            CustomComponentHolder.set(generatedKey, obj);
            return [generatedKey];
          }
        } catch (e) {}
      }
      if ( /*#__PURE__*/isValidElement(obj) || isElement(obj) || obj === null) {
        const generatedKey = `${keyPath}.${key}`;
        CustomComponentHolder.set(generatedKey, obj);
        return [generatedKey];
      } else {
        const elements = [];
        Object.keys(obj).forEach(k => {
          elements.push(...loop(k, obj[k], keyPath === '' ? key : `${keyPath}.${key}`));
        });
        return elements;
      }
    };
    return loop('loginBox', themeOptions.loginBox, '');
  }, []);
  return /*#__PURE__*/_jsx(_Fragment, {
    children: keys.map(key => /*#__PURE__*/_jsx(Registerer, {
      app: app,
      themeKey: key
    }, key))
  });
};