"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useStepUpActions = exports.useStepUp = exports.useIsSteppedUp = exports.getMaxAgeFromQueryParam = void 0;
exports.useStepUpState = useStepUpState;
var _reduxStore = require("@frontegg/redux-store");
var _hooks = require("../hooks");
var _react = require("react");
const defaultMapper = state => state;
function useStepUpState(stateMapper = defaultMapper) {
  return (0, _hooks.stateHookGenerator)(stateMapper, 'stepUpState');
}
const useStepUpActions = () => (0, _hooks.reducerActionsGenerator)(_reduxStore.stepUpActions, _reduxStore.stepUpReducers);

/**
 * @returns max age from the query param as a number or null if not exists
 */
exports.useStepUpActions = useStepUpActions;
const getMaxAgeFromQueryParam = () => {
  const str = (0, _reduxStore.getSearchParam)(_reduxStore.STEP_UP_MAX_AGE_PARAM_NAME);
  return str === undefined ? undefined : +str;
};

/**
 * @returns step up function that redirects to the step up url with the max age param and set the redirect url in the local storage
 */
exports.getMaxAgeFromQueryParam = getMaxAgeFromQueryParam;
const useStepUp = () => {
  const {
    stepUpUrl
  } = (0, _hooks.useAuthRoutes)();
  const {
    hostedLoginBox
  } = (0, _hooks.useAuth)();
  const {
    stepUpHostedLogin
  } = useStepUpActions();
  const onRedirectTo = (0, _hooks.useOnRedirectTo)();
  return (0, _react.useCallback)(options => {
    if (hostedLoginBox) {
      stepUpHostedLogin(options || {});
      return;
    }
    (0, _reduxStore.redirectByStepUpUrl)(stepUpUrl, onRedirectTo, options == null ? void 0 : options.maxAge);
  }, [stepUpUrl, onRedirectTo, stepUpHostedLogin, hostedLoginBox]);
};

/**
 * @param options.maxAge - max age of step up
 * @returns true when the user is stepped up, false otherwise
 */
exports.useStepUp = useStepUp;
const useIsSteppedUp = (options = {}) => {
  const user = (0, _hooks.useAuthUserOrNull)();
  return (0, _reduxStore.isSteppedUp)(user, options);
};
exports.useIsSteppedUp = useIsSteppedUp;