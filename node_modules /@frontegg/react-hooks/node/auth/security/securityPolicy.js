"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSecurityPolicyActions = exports.usePublicPolicySettings = exports.usePublicAuthStrategiesPolicySettings = void 0;
exports.useSecurityPolicyState = useSecurityPolicyState;
var _reduxStore = require("@frontegg/redux-store");
var _hooks = require("../hooks");
var _react = require("react");
const defaultMapper = state => state;
function useSecurityPolicyState(stateMapper = defaultMapper) {
  return (0, _hooks.stateHookGenerator)(stateMapper, 'securityPolicyState');
}
const useSecurityPolicyActions = () => (0, _hooks.reducerActionsGenerator)(_reduxStore.securityPolicyActions, _reduxStore.securityPolicyReducers);
exports.useSecurityPolicyActions = useSecurityPolicyActions;
const usePublicPolicySettings = (loadOnMount = false) => {
  const {
    loading,
    policy,
    saving,
    error
  } = useSecurityPolicyState(state => state.publicPolicy);
  const {
    loadPublicSecurityPolicy
  } = useSecurityPolicyActions();
  (0, _react.useEffect)(() => {
    (loadOnMount || !policy) && loadPublicSecurityPolicy();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loadOnMount, loadPublicSecurityPolicy]);
  return {
    loading,
    saving,
    error,
    policy
  };
};
exports.usePublicPolicySettings = usePublicPolicySettings;
const usePublicAuthStrategiesPolicySettings = (loadOnMount = false) => {
  const {
    loading,
    policy,
    saving,
    error
  } = useSecurityPolicyState(state => state.publicAuthStrategyPolicy);
  const {
    loadPublicAuthStrategiesPolicy
  } = useSecurityPolicyActions();
  (0, _react.useEffect)(() => {
    (loadOnMount || !policy) && loadPublicAuthStrategiesPolicy();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [loadOnMount, loadPublicAuthStrategiesPolicy]);
  return {
    loading,
    saving,
    error,
    policy
  };
};
exports.usePublicAuthStrategiesPolicySettings = usePublicAuthStrategiesPolicySettings;