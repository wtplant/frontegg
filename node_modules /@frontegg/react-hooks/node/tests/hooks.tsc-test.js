"use strict";

var _index = require("../index");
// noinspection JSUnusedLocalSymbols

/**
 * useAuth hook typescript tests
 */
{
  const {
    isAuthenticated,
    isLoading
  } = (0, _index.useAuth)();
  const isLoadingDirect = (0, _index.useAuth)(state => state.isLoading);
  isLoadingDirect.valueOf();
  const {
    user
  } = (0, _index.useAuth)(state => ({
    user: state.user
  }));
  const {
    loginUrl
  } = (0, _index.useAuth)(state => state.routes);
  const {
    loadProfile,
    setLoginState
  } = (0, _index.useAuthActions)();
}

/**
 * useAcceptInvitationState hook typescript tests
 */
{
  const {
    step
  } = (0, _index.useAcceptInvitationState)();
  const errorDirect = (0, _index.useAcceptInvitationState)(state => state.error);
  errorDirect == null ? void 0 : errorDirect.substring(0);
  const {
    acceptInvitation
  } = (0, _index.useAcceptInvitationActions)();
}

/**
 * useActivateAccountState hook typescript tests
 */
{
  const {
    step
  } = (0, _index.useActivateAccountState)();
  const loadingDirect = (0, _index.useActivateAccountState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    activateAccount
  } = (0, _index.useActivateAccountActions)();
}

/**
 * useApiTokensState hook typescript tests
 */
{
  const {
    roles
  } = (0, _index.useApiTokensState)();
  const loadingDirect = (0, _index.useApiTokensState)(state => state.loaders);
  let m = loadingDirect.LOAD_API_TOKENS;
  const {
    loadUserApiTokens
  } = (0, _index.useApiTokensActions)();
}

/**
 * useForgotPasswordState hook typescript tests
 */
{
  const {
    step
  } = (0, _index.useForgotPasswordState)();
  const emailDirect = (0, _index.useForgotPasswordState)(state => state.email);
  emailDirect.substring(0);
  const {
    forgotPassword
  } = (0, _index.useForgotPasswordActions)();
}

/**
 * useMfaState hook typescript tests
 */
{
  const {
    step
  } = (0, _index.useMfaState)();
  const loadingDirect = (0, _index.useMfaState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    enrollMfa
  } = (0, _index.useMfaActions)();
}

/**
 * useLoginState hook typescript tests
 */
{
  const {
    step
  } = (0, _index.useLoginState)();
  const loadingDirect = (0, _index.useLoginState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    logout
  } = (0, _index.useLoginActions)();
}

/**
 * useLoginState hook typescript tests
 */
{
  const {
    profile
  } = (0, _index.useProfileState)();
  const loadingDirect = (0, _index.useProfileState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadProfile
  } = (0, _index.useProfileActions)();
}

/**
 * useResetPhoneNumberState hook typescript tests
 */
{
  const {
    step
  } = (0, _index.useResetPhoneNumberState)();
  const loadingDirect = (0, _index.useResetPhoneNumberState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    resetPhoneNumber
  } = (0, _index.useResetPhoneNumberActions)();
}

/**
 * useRolesState hook typescript tests
 */
{
  const {
    saving
  } = (0, _index.useRolesState)();
  const loadingDirect = (0, _index.useRolesState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadRolesAndPermissions
  } = (0, _index.useRolesActions)();
}

/**
 * useSecurityPolicyState hook typescript tests
 */
{
  const {
    lockoutPolicy
  } = (0, _index.useSecurityPolicyState)();
  const captchaPolicy = (0, _index.useSecurityPolicyState)(state => state.captchaPolicy);
  captchaPolicy.loading.valueOf();
  const {
    loadPublicSecurityPolicy
  } = (0, _index.useSecurityPolicyActions)();
}

/**
 * useSessionsState hook typescript tests
 */
{
  const {
    sessions
  } = (0, _index.useSessionsState)();
  const loadingDirect = (0, _index.useSessionsState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    deleteUserSession
  } = (0, _index.useSessionsActions)();
}

/**
 * useSessionsPolicyState hook typescript tests
 */
{
  const {
    configurations
  } = (0, _index.useSessionsPolicyState)();
  const loadingDirect = (0, _index.useSessionsPolicyState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    resetSessionsPolicyState
  } = (0, _index.useSessionsPolicyActions)();
}

/**
 * useSSOState hook typescript tests
 */
{
  const {
    authorizationRoles
  } = (0, _index.useSSOState)();
  const loadingDirect = (0, _index.useSSOState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadSSOConfigurationsV2
  } = (0, _index.useSSOActions)();
}

/**
 * useSignUpState hook typescript tests
 */
{
  const {
    stage
  } = (0, _index.useSignUpState)();
  const loadingDirect = (0, _index.useSignUpState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    setSignUpState
  } = (0, _index.useSignUpActions)();
}

/**
 * useSocialLoginState hook typescript tests
 */
{
  const {
    socialLoginsConfig
  } = (0, _index.useSocialLoginState)();
  const loadingDirect = (0, _index.useSocialLoginState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadSocialLoginsConfiguration
  } = (0, _index.useSocialLoginActions)();
}

/**
 * useSocialLoginState hook typescript tests
 */
{
  const {
    tenants
  } = (0, _index.useTenantsState)();
  const loadingDirect = (0, _index.useTenantsState)(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadTenants
  } = (0, _index.useTenantsActions)();
}

/**
 * useVendorState hook typescript tests
 */
{
  const {
    loading
  } = (0, _index.useVendorState)();
  const isLoadingDirect = (0, _index.useVendorState)(state => state.loading);
  isLoadingDirect.valueOf();
  const {
    whiteLabelMode
  } = (0, _index.useVendorState)(state => ({
    whiteLabelMode: state.whiteLabelMode
  }));
  const {
    loadVendorPublicInfo
  } = (0, _index.useVendorActions)();
}

/**
 * useConnectivityState hook typescript tests
 */
{
  const {
    isLoading,
    error
  } = (0, _index.useConnectivityState)();
  const processIds = (0, _index.useConnectivityState)(state => state.processIds);
  processIds.map(id => id);
  const {
    email
  } = (0, _index.useConnectivityState)(state => {
    var _state$email;
    return {
      email: (_state$email = state.email) != null ? _state$email : []
    };
  });
  email.length;
  const {
    loadScope,
    loadDataAction
  } = (0, _index.useConnectivityActions)();
}

/**
 * useAuditsState hook typescript tests
 */
{
  const {
    auditLogsState
  } = (0, _index.useAuditsState)();
  const {
    columns
  } = (0, _index.useAuditsState)(state => state.auditsMetadataState);
  const {
    loading
  } = (0, _index.useAuditsState)(state => ({
    loading: state.auditLogsState.loading
  }));
  loading.valueOf();
  let x = columns == null ? void 0 : columns.length;
  const {
    loadAuditLogs
  } = (0, _index.useAuditsActions)();
}