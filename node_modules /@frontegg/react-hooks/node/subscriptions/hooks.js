"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useVendorPublicConfigActions = exports.useVendorPublicConfig = exports.useSubscriptionRenewal = exports.useSubscriptionCancellation = exports.useSubscriptionActions = exports.useSubscription = exports.useStripeState = exports.useStripeActions = exports.usePlansActions = exports.usePlans = exports.usePaymentProviderActions = exports.usePaymentProvider = exports.usePaymentMethodActions = exports.usePaymentMethod = exports.useInvoicesActions = exports.useInvoices = exports.useCheckoutActions = exports.useCheckout = exports.useBillingInformationActions = exports.useBillingInformation = void 0;
var _reduxStore = require("@frontegg/redux-store");
var _FronteggStoreContext = require("../FronteggStoreContext");
var _reactRedux = require("react-redux");
var _react = require("react");
function getSubscriptionState(state) {
  return state[_reduxStore.subscriptionsStoreName];
}
const usePaymentProvider = () => {
  return (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).config, _reactRedux.shallowEqual);
};
exports.usePaymentProvider = usePaymentProvider;
const usePaymentProviderActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.config, dispatch), [dispatch]);
};
exports.usePaymentProviderActions = usePaymentProviderActions;
const usePlans = () => {
  return (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).plans, _reactRedux.shallowEqual);
};
exports.usePlans = usePlans;
const usePlansActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.plans, dispatch), [dispatch]);
};
exports.usePlansActions = usePlansActions;
const useCheckout = () => {
  return (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).checkout, _reactRedux.shallowEqual);
};
exports.useCheckout = useCheckout;
const useCheckoutActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.checkout, dispatch), [dispatch]);
};
exports.useCheckoutActions = useCheckoutActions;
const useBillingActions = billingKey => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.billing[billingKey], dispatch), [billingKey, dispatch]);
};
const useBillingInformation = () => (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).billing.information, _reactRedux.shallowEqual);
exports.useBillingInformation = useBillingInformation;
const useBillingInformationActions = () => useBillingActions('information');
exports.useBillingInformationActions = useBillingInformationActions;
const usePaymentMethod = () => (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).billing.paymentMethod, _reactRedux.shallowEqual);
exports.usePaymentMethod = usePaymentMethod;
const usePaymentMethodActions = () => useBillingActions('paymentMethod');
exports.usePaymentMethodActions = usePaymentMethodActions;
const useInvoices = () => (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).billing.invoices, _reactRedux.shallowEqual);
exports.useInvoices = useInvoices;
const useInvoicesActions = () => useBillingActions('invoices');
exports.useInvoicesActions = useInvoicesActions;
const useStripeState = () => {
  return (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).stripe, _reactRedux.shallowEqual);
};
exports.useStripeState = useStripeState;
const useStripeActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.stripe, dispatch), [dispatch]);
};
exports.useStripeActions = useStripeActions;
const useSubscriptionCancellation = () => {
  return (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).billing.subscription.cancellation, _reactRedux.shallowEqual);
};
exports.useSubscriptionCancellation = useSubscriptionCancellation;
const useSubscriptionRenewal = () => {
  return (0, _FronteggStoreContext.useSelector)(state => getSubscriptionState(state).billing.subscription.renewal, _reactRedux.shallowEqual);
};
exports.useSubscriptionRenewal = useSubscriptionRenewal;
const useSubscription = () => {
  return (0, _FronteggStoreContext.useSelector)(state => {
    const {
      billing: {
        subscription
      }
    } = getSubscriptionState(state);
    return subscription;
  }, _reactRedux.shallowEqual);
};
exports.useSubscription = useSubscription;
const useSubscriptionActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.billing.subscription, dispatch), [dispatch]);
};
exports.useSubscriptionActions = useSubscriptionActions;
const useVendorPublicConfig = () => {
  return (0, _FronteggStoreContext.useSelector)(state => {
    const {
      vendorPublicConfig
    } = getSubscriptionState(state);
    return vendorPublicConfig;
  }, _reactRedux.shallowEqual);
};
exports.useVendorPublicConfig = useVendorPublicConfig;
const useVendorPublicConfigActions = () => {
  const dispatch = (0, _FronteggStoreContext.useDispatch)();
  return (0, _react.useMemo)(() => (0, _reduxStore.bindActionCreators)(_reduxStore.subscriptionActions.vendorPublicConfig, dispatch), [dispatch]);
};
exports.useVendorPublicConfigActions = useVendorPublicConfigActions;