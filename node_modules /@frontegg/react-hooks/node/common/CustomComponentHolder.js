"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CustomComponentRegister = exports.CustomComponentHolder = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactDom = _interopRequireDefault(require("react-dom"));
var _reactIs = require("react-is");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/**
 * CustomComponentRegister is used to support using react hooks inside custom components.
 */
class CustomComponentHolder {
  static set(name, element) {
    CustomComponentHolder.components[name] = element;
  }
  static get(name) {
    return CustomComponentHolder.components[name];
  }
}
exports.CustomComponentHolder = CustomComponentHolder;
CustomComponentHolder.components = {};
const overrideValue = (object, key, value) => {
  const keys = key.split('.');
  let iterator = object;
  while (keys.length > 1) {
    iterator = iterator[keys.shift()];
  }
  iterator[keys.shift()] = value;
};
const Registerer = props => {
  var _app$loginBoxContaine;
  const {
    app,
    themeKey
  } = props;
  const value = CustomComponentHolder.get(themeKey);
  const [mounted, setMounted] = (0, _react.useState)(false);
  const [componentProps, setComponentProps] = (0, _react.useState)({});
  const mount = (0, _react.useCallback)((props = {}) => {
    setMounted(true);
    setComponentProps(props);
  }, []);
  const unmount = (0, _react.useCallback)(() => {
    setMounted(false);
  }, []);
  overrideValue(app.options.themeOptions, themeKey, {
    type: 'slot',
    themeKey,
    mount,
    unmount
  });
  let element = (_app$loginBoxContaine = app.loginBoxContainer) == null ? void 0 : _app$loginBoxContaine.querySelector(`[slot="${themeKey}"]`);
  if (!element && typeof document !== undefined) {
    var _app$loginBoxContaine2;
    element = document.createElement('div');
    element.slot = themeKey;
    (_app$loginBoxContaine2 = app.loginBoxContainer) == null ? void 0 : _app$loginBoxContaine2.appendChild(element);
  }
  const component = value ? /*#__PURE__*/_react.default.createElement(value, componentProps) : null;
  return element && mounted ? /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.default.Fragment, {
    children: /*#__PURE__*/_reactDom.default.createPortal(component, element)
  }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {});
};
const CustomComponentRegister = ({
  app,
  themeOptions
}) => {
  const keys = (0, _react.useMemo)(() => {
    if (!themeOptions || !themeOptions.loginBox) {
      return [];
    }
    const loop = (key, obj, keyPath) => {
      if (typeof obj !== 'object' && typeof obj !== 'function') {
        return [];
      }
      if (typeof obj === 'function') {
        try {
          const reactElement = /*#__PURE__*/_react.default.createElement(obj, {
            title: 'title'
          });
          if ( /*#__PURE__*/(0, _react.isValidElement)(reactElement) || (0, _reactIs.isElement)(reactElement)) {
            const generatedKey = `${keyPath}.${key}`;
            CustomComponentHolder.set(generatedKey, obj);
            return [generatedKey];
          }
        } catch (e) {}
      }
      if ( /*#__PURE__*/(0, _react.isValidElement)(obj) || (0, _reactIs.isElement)(obj) || obj === null) {
        const generatedKey = `${keyPath}.${key}`;
        CustomComponentHolder.set(generatedKey, obj);
        return [generatedKey];
      } else {
        const elements = [];
        Object.keys(obj).forEach(k => {
          elements.push(...loop(k, obj[k], keyPath === '' ? key : `${keyPath}.${key}`));
        });
        return elements;
      }
    };
    return loop('loginBox', themeOptions.loginBox, '');
  }, []);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_jsxRuntime.Fragment, {
    children: keys.map(key => /*#__PURE__*/(0, _jsxRuntime.jsx)(Registerer, {
      app: app,
      themeKey: key
    }, key))
  });
};
exports.CustomComponentRegister = CustomComponentRegister;