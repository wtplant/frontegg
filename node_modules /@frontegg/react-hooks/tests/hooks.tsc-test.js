// noinspection JSUnusedLocalSymbols

import { useAcceptInvitationActions, useAcceptInvitationState, useActivateAccountActions, useActivateAccountState, useApiTokensActions, useApiTokensState, useAuditsActions, useAuditsState, useAuth, useAuthActions, useConnectivityActions, useConnectivityState, useForgotPasswordActions, useForgotPasswordState, useLoginActions, useLoginState, useMfaActions, useMfaState, useProfileActions, useProfileState, useResetPhoneNumberActions, useResetPhoneNumberState, useRolesActions, useRolesState, useSecurityPolicyActions, useSecurityPolicyState, useSessionsActions, useSessionsPolicyActions, useSessionsPolicyState, useSessionsState, useSignUpActions, useSignUpState, useSocialLoginActions, useSocialLoginState, useSSOActions, useSSOState, useTenantsActions, useTenantsState, useVendorActions, useVendorState } from '../index';

/**
 * useAuth hook typescript tests
 */
{
  const {
    isAuthenticated,
    isLoading
  } = useAuth();
  const isLoadingDirect = useAuth(state => state.isLoading);
  isLoadingDirect.valueOf();
  const {
    user
  } = useAuth(state => ({
    user: state.user
  }));
  const {
    loginUrl
  } = useAuth(state => state.routes);
  const {
    loadProfile,
    setLoginState
  } = useAuthActions();
}

/**
 * useAcceptInvitationState hook typescript tests
 */
{
  const {
    step
  } = useAcceptInvitationState();
  const errorDirect = useAcceptInvitationState(state => state.error);
  errorDirect == null ? void 0 : errorDirect.substring(0);
  const {
    acceptInvitation
  } = useAcceptInvitationActions();
}

/**
 * useActivateAccountState hook typescript tests
 */
{
  const {
    step
  } = useActivateAccountState();
  const loadingDirect = useActivateAccountState(state => state.loading);
  loadingDirect.valueOf();
  const {
    activateAccount
  } = useActivateAccountActions();
}

/**
 * useApiTokensState hook typescript tests
 */
{
  const {
    roles
  } = useApiTokensState();
  const loadingDirect = useApiTokensState(state => state.loaders);
  let m = loadingDirect.LOAD_API_TOKENS;
  const {
    loadUserApiTokens
  } = useApiTokensActions();
}

/**
 * useForgotPasswordState hook typescript tests
 */
{
  const {
    step
  } = useForgotPasswordState();
  const emailDirect = useForgotPasswordState(state => state.email);
  emailDirect.substring(0);
  const {
    forgotPassword
  } = useForgotPasswordActions();
}

/**
 * useMfaState hook typescript tests
 */
{
  const {
    step
  } = useMfaState();
  const loadingDirect = useMfaState(state => state.loading);
  loadingDirect.valueOf();
  const {
    enrollMfa
  } = useMfaActions();
}

/**
 * useLoginState hook typescript tests
 */
{
  const {
    step
  } = useLoginState();
  const loadingDirect = useLoginState(state => state.loading);
  loadingDirect.valueOf();
  const {
    logout
  } = useLoginActions();
}

/**
 * useLoginState hook typescript tests
 */
{
  const {
    profile
  } = useProfileState();
  const loadingDirect = useProfileState(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadProfile
  } = useProfileActions();
}

/**
 * useResetPhoneNumberState hook typescript tests
 */
{
  const {
    step
  } = useResetPhoneNumberState();
  const loadingDirect = useResetPhoneNumberState(state => state.loading);
  loadingDirect.valueOf();
  const {
    resetPhoneNumber
  } = useResetPhoneNumberActions();
}

/**
 * useRolesState hook typescript tests
 */
{
  const {
    saving
  } = useRolesState();
  const loadingDirect = useRolesState(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadRolesAndPermissions
  } = useRolesActions();
}

/**
 * useSecurityPolicyState hook typescript tests
 */
{
  const {
    lockoutPolicy
  } = useSecurityPolicyState();
  const captchaPolicy = useSecurityPolicyState(state => state.captchaPolicy);
  captchaPolicy.loading.valueOf();
  const {
    loadPublicSecurityPolicy
  } = useSecurityPolicyActions();
}

/**
 * useSessionsState hook typescript tests
 */
{
  const {
    sessions
  } = useSessionsState();
  const loadingDirect = useSessionsState(state => state.loading);
  loadingDirect.valueOf();
  const {
    deleteUserSession
  } = useSessionsActions();
}

/**
 * useSessionsPolicyState hook typescript tests
 */
{
  const {
    configurations
  } = useSessionsPolicyState();
  const loadingDirect = useSessionsPolicyState(state => state.loading);
  loadingDirect.valueOf();
  const {
    resetSessionsPolicyState
  } = useSessionsPolicyActions();
}

/**
 * useSSOState hook typescript tests
 */
{
  const {
    authorizationRoles
  } = useSSOState();
  const loadingDirect = useSSOState(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadSSOConfigurationsV2
  } = useSSOActions();
}

/**
 * useSignUpState hook typescript tests
 */
{
  const {
    stage
  } = useSignUpState();
  const loadingDirect = useSignUpState(state => state.loading);
  loadingDirect.valueOf();
  const {
    setSignUpState
  } = useSignUpActions();
}

/**
 * useSocialLoginState hook typescript tests
 */
{
  const {
    socialLoginsConfig
  } = useSocialLoginState();
  const loadingDirect = useSocialLoginState(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadSocialLoginsConfiguration
  } = useSocialLoginActions();
}

/**
 * useSocialLoginState hook typescript tests
 */
{
  const {
    tenants
  } = useTenantsState();
  const loadingDirect = useTenantsState(state => state.loading);
  loadingDirect.valueOf();
  const {
    loadTenants
  } = useTenantsActions();
}

/**
 * useVendorState hook typescript tests
 */
{
  const {
    loading
  } = useVendorState();
  const isLoadingDirect = useVendorState(state => state.loading);
  isLoadingDirect.valueOf();
  const {
    whiteLabelMode
  } = useVendorState(state => ({
    whiteLabelMode: state.whiteLabelMode
  }));
  const {
    loadVendorPublicInfo
  } = useVendorActions();
}

/**
 * useConnectivityState hook typescript tests
 */
{
  const {
    isLoading,
    error
  } = useConnectivityState();
  const processIds = useConnectivityState(state => state.processIds);
  processIds.map(id => id);
  const {
    email
  } = useConnectivityState(state => {
    var _state$email;
    return {
      email: (_state$email = state.email) != null ? _state$email : []
    };
  });
  email.length;
  const {
    loadScope,
    loadDataAction
  } = useConnectivityActions();
}

/**
 * useAuditsState hook typescript tests
 */
{
  const {
    auditLogsState
  } = useAuditsState();
  const {
    columns
  } = useAuditsState(state => state.auditsMetadataState);
  const {
    loading
  } = useAuditsState(state => ({
    loading: state.auditLogsState.loading
  }));
  loading.valueOf();
  let x = columns == null ? void 0 : columns.length;
  const {
    loadAuditLogs
  } = useAuditsActions();
}