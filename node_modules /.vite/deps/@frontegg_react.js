import {
  require_jsx_runtime
} from "./chunk-HSESELKR.js";
import {
  require_react_dom
} from "./chunk-7FQAXAJB.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS,
  __toESM,
  require_react
} from "./chunk-YJNMHHGL.js";

// node_modules/@babel/runtime/helpers/esm/classCallCheck.js
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
var init_classCallCheck = __esm({
  "node_modules/@babel/runtime/helpers/esm/classCallCheck.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/typeof.js
function _typeof(o2) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
    return typeof o3;
  } : function(o3) {
    return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
  }, _typeof(o2);
}
var init_typeof = __esm({
  "node_modules/@babel/runtime/helpers/esm/typeof.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/toPrimitive.js
function toPrimitive(t2, r2) {
  if ("object" != _typeof(t2) || !t2)
    return t2;
  var e2 = t2[Symbol.toPrimitive];
  if (void 0 !== e2) {
    var i2 = e2.call(t2, r2 || "default");
    if ("object" != _typeof(i2))
      return i2;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r2 ? String : Number)(t2);
}
var init_toPrimitive = __esm({
  "node_modules/@babel/runtime/helpers/esm/toPrimitive.js"() {
    init_typeof();
  }
});

// node_modules/@babel/runtime/helpers/esm/toPropertyKey.js
function toPropertyKey(t2) {
  var i2 = toPrimitive(t2, "string");
  return "symbol" == _typeof(i2) ? i2 : String(i2);
}
var init_toPropertyKey = __esm({
  "node_modules/@babel/runtime/helpers/esm/toPropertyKey.js"() {
    init_typeof();
    init_toPrimitive();
  }
});

// node_modules/@babel/runtime/helpers/esm/createClass.js
function _defineProperties(target, props) {
  for (var i2 = 0; i2 < props.length; i2++) {
    var descriptor = props[i2];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
      descriptor.writable = true;
    Object.defineProperty(target, toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps)
    _defineProperties(Constructor.prototype, protoProps);
  if (staticProps)
    _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
var init_createClass = __esm({
  "node_modules/@babel/runtime/helpers/esm/createClass.js"() {
    init_toPropertyKey();
  }
});

// node_modules/@frontegg/js/AppHolder/index.js
var AppHolder_exports = {};
__export(AppHolder_exports, {
  AppHolder: () => AppHolder
});
var AppHolder;
var init_AppHolder = __esm({
  "node_modules/@frontegg/js/AppHolder/index.js"() {
    init_classCallCheck();
    init_createClass();
    AppHolder = function() {
      function AppHolder2() {
        _classCallCheck(this, AppHolder2);
      }
      _createClass(AppHolder2, null, [{
        key: "setInstance",
        value: function setInstance(name10, app) {
          AppHolder2._apps[name10] = app;
        }
      }, {
        key: "getInstance",
        value: function getInstance(name10) {
          var app = AppHolder2._apps[name10];
          if (!app) {
            throw Error("[".concat(name10, "] FronteggApp not found"));
          }
          return app;
        }
      }]);
      return AppHolder2;
    }();
    AppHolder._apps = {};
  }
});

// node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js
function _arrayWithHoles(arr) {
  if (Array.isArray(arr))
    return arr;
}
var init_arrayWithHoles = __esm({
  "node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js
function _iterableToArrayLimit(r2, l2) {
  var t2 = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
  if (null != t2) {
    var e2, n2, i2, u2, a2 = [], f3 = true, o2 = false;
    try {
      if (i2 = (t2 = t2.call(r2)).next, 0 === l2) {
        if (Object(t2) !== t2)
          return;
        f3 = false;
      } else
        for (; !(f3 = (e2 = i2.call(t2)).done) && (a2.push(e2.value), a2.length !== l2); f3 = true)
          ;
    } catch (r3) {
      o2 = true, n2 = r3;
    } finally {
      try {
        if (!f3 && null != t2["return"] && (u2 = t2["return"](), Object(u2) !== u2))
          return;
      } finally {
        if (o2)
          throw n2;
      }
    }
    return a2;
  }
}
var init_iterableToArrayLimit = __esm({
  "node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i2 = 0, arr2 = new Array(len); i2 < len; i2++)
    arr2[i2] = arr[i2];
  return arr2;
}
var init_arrayLikeToArray = __esm({
  "node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js
function _unsupportedIterableToArray(o2, minLen) {
  if (!o2)
    return;
  if (typeof o2 === "string")
    return _arrayLikeToArray(o2, minLen);
  var n2 = Object.prototype.toString.call(o2).slice(8, -1);
  if (n2 === "Object" && o2.constructor)
    n2 = o2.constructor.name;
  if (n2 === "Map" || n2 === "Set")
    return Array.from(o2);
  if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2))
    return _arrayLikeToArray(o2, minLen);
}
var init_unsupportedIterableToArray = __esm({
  "node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js"() {
    init_arrayLikeToArray();
  }
});

// node_modules/@babel/runtime/helpers/esm/nonIterableRest.js
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
var init_nonIterableRest = __esm({
  "node_modules/@babel/runtime/helpers/esm/nonIterableRest.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/slicedToArray.js
function _slicedToArray(arr, i2) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i2) || _unsupportedIterableToArray(arr, i2) || _nonIterableRest();
}
var init_slicedToArray = __esm({
  "node_modules/@babel/runtime/helpers/esm/slicedToArray.js"() {
    init_arrayWithHoles();
    init_iterableToArrayLimit();
    init_unsupportedIterableToArray();
    init_nonIterableRest();
  }
});

// node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn2) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn2.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}
var init_asyncToGenerator = __esm({
  "node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"() {
  }
});

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(o2) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o3) {
        return typeof o3;
      } : function(o3) {
        return o3 && "function" == typeof Symbol && o3.constructor === Symbol && o3 !== Symbol.prototype ? "symbol" : typeof o3;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o2);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime4() {
      "use strict";
      module.exports = _regeneratorRuntime4 = function _regeneratorRuntime5() {
        return e2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t2, e2 = {}, r2 = Object.prototype, n2 = r2.hasOwnProperty, o2 = Object.defineProperty || function(t3, e3, r3) {
        t3[e3] = r3.value;
      }, i2 = "function" == typeof Symbol ? Symbol : {}, a2 = i2.iterator || "@@iterator", c2 = i2.asyncIterator || "@@asyncIterator", u2 = i2.toStringTag || "@@toStringTag";
      function define(t3, e3, r3) {
        return Object.defineProperty(t3, e3, {
          value: r3,
          enumerable: true,
          configurable: true,
          writable: true
        }), t3[e3];
      }
      try {
        define({}, "");
      } catch (t3) {
        define = function define2(t4, e3, r3) {
          return t4[e3] = r3;
        };
      }
      function wrap(t3, e3, r3, n3) {
        var i3 = e3 && e3.prototype instanceof Generator ? e3 : Generator, a3 = Object.create(i3.prototype), c3 = new Context(n3 || []);
        return o2(a3, "_invoke", {
          value: makeInvokeMethod(t3, r3, c3)
        }), a3;
      }
      function tryCatch(t3, e3, r3) {
        try {
          return {
            type: "normal",
            arg: t3.call(e3, r3)
          };
        } catch (t4) {
          return {
            type: "throw",
            arg: t4
          };
        }
      }
      e2.wrap = wrap;
      var h2 = "suspendedStart", l2 = "suspendedYield", f3 = "executing", s2 = "completed", y2 = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p2 = {};
      define(p2, a2, function() {
        return this;
      });
      var d2 = Object.getPrototypeOf, v2 = d2 && d2(d2(values([])));
      v2 && v2 !== r2 && n2.call(v2, a2) && (p2 = v2);
      var g2 = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p2);
      function defineIteratorMethods(t3) {
        ["next", "throw", "return"].forEach(function(e3) {
          define(t3, e3, function(t4) {
            return this._invoke(e3, t4);
          });
        });
      }
      function AsyncIterator(t3, e3) {
        function invoke(r4, o3, i3, a3) {
          var c3 = tryCatch(t3[r4], t3, o3);
          if ("throw" !== c3.type) {
            var u3 = c3.arg, h3 = u3.value;
            return h3 && "object" == _typeof2(h3) && n2.call(h3, "__await") ? e3.resolve(h3.__await).then(function(t4) {
              invoke("next", t4, i3, a3);
            }, function(t4) {
              invoke("throw", t4, i3, a3);
            }) : e3.resolve(h3).then(function(t4) {
              u3.value = t4, i3(u3);
            }, function(t4) {
              return invoke("throw", t4, i3, a3);
            });
          }
          a3(c3.arg);
        }
        var r3;
        o2(this, "_invoke", {
          value: function value(t4, n3) {
            function callInvokeWithMethodAndArg() {
              return new e3(function(e4, r4) {
                invoke(t4, n3, e4, r4);
              });
            }
            return r3 = r3 ? r3.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e3, r3, n3) {
        var o3 = h2;
        return function(i3, a3) {
          if (o3 === f3)
            throw new Error("Generator is already running");
          if (o3 === s2) {
            if ("throw" === i3)
              throw a3;
            return {
              value: t2,
              done: true
            };
          }
          for (n3.method = i3, n3.arg = a3; ; ) {
            var c3 = n3.delegate;
            if (c3) {
              var u3 = maybeInvokeDelegate(c3, n3);
              if (u3) {
                if (u3 === y2)
                  continue;
                return u3;
              }
            }
            if ("next" === n3.method)
              n3.sent = n3._sent = n3.arg;
            else if ("throw" === n3.method) {
              if (o3 === h2)
                throw o3 = s2, n3.arg;
              n3.dispatchException(n3.arg);
            } else
              "return" === n3.method && n3.abrupt("return", n3.arg);
            o3 = f3;
            var p3 = tryCatch(e3, r3, n3);
            if ("normal" === p3.type) {
              if (o3 = n3.done ? s2 : l2, p3.arg === y2)
                continue;
              return {
                value: p3.arg,
                done: n3.done
              };
            }
            "throw" === p3.type && (o3 = s2, n3.method = "throw", n3.arg = p3.arg);
          }
        };
      }
      function maybeInvokeDelegate(e3, r3) {
        var n3 = r3.method, o3 = e3.iterator[n3];
        if (o3 === t2)
          return r3.delegate = null, "throw" === n3 && e3.iterator["return"] && (r3.method = "return", r3.arg = t2, maybeInvokeDelegate(e3, r3), "throw" === r3.method) || "return" !== n3 && (r3.method = "throw", r3.arg = new TypeError("The iterator does not provide a '" + n3 + "' method")), y2;
        var i3 = tryCatch(o3, e3.iterator, r3.arg);
        if ("throw" === i3.type)
          return r3.method = "throw", r3.arg = i3.arg, r3.delegate = null, y2;
        var a3 = i3.arg;
        return a3 ? a3.done ? (r3[e3.resultName] = a3.value, r3.next = e3.nextLoc, "return" !== r3.method && (r3.method = "next", r3.arg = t2), r3.delegate = null, y2) : a3 : (r3.method = "throw", r3.arg = new TypeError("iterator result is not an object"), r3.delegate = null, y2);
      }
      function pushTryEntry(t3) {
        var e3 = {
          tryLoc: t3[0]
        };
        1 in t3 && (e3.catchLoc = t3[1]), 2 in t3 && (e3.finallyLoc = t3[2], e3.afterLoc = t3[3]), this.tryEntries.push(e3);
      }
      function resetTryEntry(t3) {
        var e3 = t3.completion || {};
        e3.type = "normal", delete e3.arg, t3.completion = e3;
      }
      function Context(t3) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t3.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e3) {
        if (e3 || "" === e3) {
          var r3 = e3[a2];
          if (r3)
            return r3.call(e3);
          if ("function" == typeof e3.next)
            return e3;
          if (!isNaN(e3.length)) {
            var o3 = -1, i3 = function next() {
              for (; ++o3 < e3.length; )
                if (n2.call(e3, o3))
                  return next.value = e3[o3], next.done = false, next;
              return next.value = t2, next.done = true, next;
            };
            return i3.next = i3;
          }
        }
        throw new TypeError(_typeof2(e3) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o2(g2, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o2(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u2, "GeneratorFunction"), e2.isGeneratorFunction = function(t3) {
        var e3 = "function" == typeof t3 && t3.constructor;
        return !!e3 && (e3 === GeneratorFunction || "GeneratorFunction" === (e3.displayName || e3.name));
      }, e2.mark = function(t3) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t3, GeneratorFunctionPrototype) : (t3.__proto__ = GeneratorFunctionPrototype, define(t3, u2, "GeneratorFunction")), t3.prototype = Object.create(g2), t3;
      }, e2.awrap = function(t3) {
        return {
          __await: t3
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c2, function() {
        return this;
      }), e2.AsyncIterator = AsyncIterator, e2.async = function(t3, r3, n3, o3, i3) {
        void 0 === i3 && (i3 = Promise);
        var a3 = new AsyncIterator(wrap(t3, r3, n3, o3), i3);
        return e2.isGeneratorFunction(r3) ? a3 : a3.next().then(function(t4) {
          return t4.done ? t4.value : a3.next();
        });
      }, defineIteratorMethods(g2), define(g2, u2, "Generator"), define(g2, a2, function() {
        return this;
      }), define(g2, "toString", function() {
        return "[object Generator]";
      }), e2.keys = function(t3) {
        var e3 = Object(t3), r3 = [];
        for (var n3 in e3)
          r3.push(n3);
        return r3.reverse(), function next() {
          for (; r3.length; ) {
            var t4 = r3.pop();
            if (t4 in e3)
              return next.value = t4, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e2.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e3) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t2, this.done = false, this.delegate = null, this.method = "next", this.arg = t2, this.tryEntries.forEach(resetTryEntry), !e3)
            for (var r3 in this)
              "t" === r3.charAt(0) && n2.call(this, r3) && !isNaN(+r3.slice(1)) && (this[r3] = t2);
        },
        stop: function stop() {
          this.done = true;
          var t3 = this.tryEntries[0].completion;
          if ("throw" === t3.type)
            throw t3.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e3) {
          if (this.done)
            throw e3;
          var r3 = this;
          function handle(n3, o4) {
            return a3.type = "throw", a3.arg = e3, r3.next = n3, o4 && (r3.method = "next", r3.arg = t2), !!o4;
          }
          for (var o3 = this.tryEntries.length - 1; o3 >= 0; --o3) {
            var i3 = this.tryEntries[o3], a3 = i3.completion;
            if ("root" === i3.tryLoc)
              return handle("end");
            if (i3.tryLoc <= this.prev) {
              var c3 = n2.call(i3, "catchLoc"), u3 = n2.call(i3, "finallyLoc");
              if (c3 && u3) {
                if (this.prev < i3.catchLoc)
                  return handle(i3.catchLoc, true);
                if (this.prev < i3.finallyLoc)
                  return handle(i3.finallyLoc);
              } else if (c3) {
                if (this.prev < i3.catchLoc)
                  return handle(i3.catchLoc, true);
              } else {
                if (!u3)
                  throw new Error("try statement without catch or finally");
                if (this.prev < i3.finallyLoc)
                  return handle(i3.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t3, e3) {
          for (var r3 = this.tryEntries.length - 1; r3 >= 0; --r3) {
            var o3 = this.tryEntries[r3];
            if (o3.tryLoc <= this.prev && n2.call(o3, "finallyLoc") && this.prev < o3.finallyLoc) {
              var i3 = o3;
              break;
            }
          }
          i3 && ("break" === t3 || "continue" === t3) && i3.tryLoc <= e3 && e3 <= i3.finallyLoc && (i3 = null);
          var a3 = i3 ? i3.completion : {};
          return a3.type = t3, a3.arg = e3, i3 ? (this.method = "next", this.next = i3.finallyLoc, y2) : this.complete(a3);
        },
        complete: function complete(t3, e3) {
          if ("throw" === t3.type)
            throw t3.arg;
          return "break" === t3.type || "continue" === t3.type ? this.next = t3.arg : "return" === t3.type ? (this.rval = this.arg = t3.arg, this.method = "return", this.next = "end") : "normal" === t3.type && e3 && (this.next = e3), y2;
        },
        finish: function finish(t3) {
          for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
            var r3 = this.tryEntries[e3];
            if (r3.finallyLoc === t3)
              return this.complete(r3.completion, r3.afterLoc), resetTryEntry(r3), y2;
          }
        },
        "catch": function _catch(t3) {
          for (var e3 = this.tryEntries.length - 1; e3 >= 0; --e3) {
            var r3 = this.tryEntries[e3];
            if (r3.tryLoc === t3) {
              var n3 = r3.completion;
              if ("throw" === n3.type) {
                var o3 = n3.arg;
                resetTryEntry(r3);
              }
              return o3;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e3, r3, n3) {
          return this.delegate = {
            iterator: values(e3),
            resultName: r3,
            nextLoc: n3
          }, "next" === this.method && (this.arg = t2), y2;
        }
      }, e2;
    }
    module.exports = _regeneratorRuntime4, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@babel/runtime/helpers/esm/extends.js
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var init_extends = __esm({
  "node_modules/@babel/runtime/helpers/esm/extends.js"() {
  }
});

// node_modules/immer/dist/immer.esm.mjs
function n(n2) {
  for (var r2 = arguments.length, t2 = Array(r2 > 1 ? r2 - 1 : 0), e2 = 1; e2 < r2; e2++)
    t2[e2 - 1] = arguments[e2];
  if (true) {
    var i2 = Y[n2], o2 = i2 ? "function" == typeof i2 ? i2.apply(null, t2) : i2 : "unknown error nr: " + n2;
    throw Error("[Immer] " + o2);
  }
  throw Error("[Immer] minified error nr: " + n2 + (t2.length ? " " + t2.map(function(n3) {
    return "'" + n3 + "'";
  }).join(",") : "") + ". Find the full error at: https://bit.ly/3cXEKWf");
}
function r(n2) {
  return !!n2 && !!n2[Q];
}
function t(n2) {
  var r2;
  return !!n2 && (function(n3) {
    if (!n3 || "object" != typeof n3)
      return false;
    var r3 = Object.getPrototypeOf(n3);
    if (null === r3)
      return true;
    var t2 = Object.hasOwnProperty.call(r3, "constructor") && r3.constructor;
    return t2 === Object || "function" == typeof t2 && Function.toString.call(t2) === Z;
  }(n2) || Array.isArray(n2) || !!n2[L] || !!(null === (r2 = n2.constructor) || void 0 === r2 ? void 0 : r2[L]) || s(n2) || v(n2));
}
function i(n2, r2, t2) {
  void 0 === t2 && (t2 = false), 0 === o(n2) ? (t2 ? Object.keys : nn)(n2).forEach(function(e2) {
    t2 && "symbol" == typeof e2 || r2(e2, n2[e2], n2);
  }) : n2.forEach(function(t3, e2) {
    return r2(e2, t3, n2);
  });
}
function o(n2) {
  var r2 = n2[Q];
  return r2 ? r2.i > 3 ? r2.i - 4 : r2.i : Array.isArray(n2) ? 1 : s(n2) ? 2 : v(n2) ? 3 : 0;
}
function u(n2, r2) {
  return 2 === o(n2) ? n2.has(r2) : Object.prototype.hasOwnProperty.call(n2, r2);
}
function a(n2, r2) {
  return 2 === o(n2) ? n2.get(r2) : n2[r2];
}
function f(n2, r2, t2) {
  var e2 = o(n2);
  2 === e2 ? n2.set(r2, t2) : 3 === e2 ? n2.add(t2) : n2[r2] = t2;
}
function c(n2, r2) {
  return n2 === r2 ? 0 !== n2 || 1 / n2 == 1 / r2 : n2 != n2 && r2 != r2;
}
function s(n2) {
  return X && n2 instanceof Map;
}
function v(n2) {
  return q && n2 instanceof Set;
}
function p(n2) {
  return n2.o || n2.t;
}
function l(n2) {
  if (Array.isArray(n2))
    return Array.prototype.slice.call(n2);
  var r2 = rn(n2);
  delete r2[Q];
  for (var t2 = nn(r2), e2 = 0; e2 < t2.length; e2++) {
    var i2 = t2[e2], o2 = r2[i2];
    false === o2.writable && (o2.writable = true, o2.configurable = true), (o2.get || o2.set) && (r2[i2] = { configurable: true, writable: true, enumerable: o2.enumerable, value: n2[i2] });
  }
  return Object.create(Object.getPrototypeOf(n2), r2);
}
function d(n2, e2) {
  return void 0 === e2 && (e2 = false), y(n2) || r(n2) || !t(n2) || (o(n2) > 1 && (n2.set = n2.add = n2.clear = n2.delete = h), Object.freeze(n2), e2 && i(n2, function(n3, r2) {
    return d(r2, true);
  }, true)), n2;
}
function h() {
  n(2);
}
function y(n2) {
  return null == n2 || "object" != typeof n2 || Object.isFrozen(n2);
}
function b(r2) {
  var t2 = tn[r2];
  return t2 || n(18, r2), t2;
}
function m(n2, r2) {
  tn[n2] || (tn[n2] = r2);
}
function _() {
  return U || n(0), U;
}
function j(n2, r2) {
  r2 && (b("Patches"), n2.u = [], n2.s = [], n2.v = r2);
}
function g(n2) {
  O(n2), n2.p.forEach(S), n2.p = null;
}
function O(n2) {
  n2 === U && (U = n2.l);
}
function w(n2) {
  return U = { p: [], l: U, h: n2, m: true, _: 0 };
}
function S(n2) {
  var r2 = n2[Q];
  0 === r2.i || 1 === r2.i ? r2.j() : r2.g = true;
}
function P(r2, e2) {
  e2._ = e2.p.length;
  var i2 = e2.p[0], o2 = void 0 !== r2 && r2 !== i2;
  return e2.h.O || b("ES5").S(e2, r2, o2), o2 ? (i2[Q].P && (g(e2), n(4)), t(r2) && (r2 = M(e2, r2), e2.l || x(e2, r2)), e2.u && b("Patches").M(i2[Q].t, r2, e2.u, e2.s)) : r2 = M(e2, i2, []), g(e2), e2.u && e2.v(e2.u, e2.s), r2 !== H ? r2 : void 0;
}
function M(n2, r2, t2) {
  if (y(r2))
    return r2;
  var e2 = r2[Q];
  if (!e2)
    return i(r2, function(i2, o3) {
      return A(n2, e2, r2, i2, o3, t2);
    }, true), r2;
  if (e2.A !== n2)
    return r2;
  if (!e2.P)
    return x(n2, e2.t, true), e2.t;
  if (!e2.I) {
    e2.I = true, e2.A._--;
    var o2 = 4 === e2.i || 5 === e2.i ? e2.o = l(e2.k) : e2.o, u2 = o2, a2 = false;
    3 === e2.i && (u2 = new Set(o2), o2.clear(), a2 = true), i(u2, function(r3, i2) {
      return A(n2, e2, o2, r3, i2, t2, a2);
    }), x(n2, o2, false), t2 && n2.u && b("Patches").N(e2, t2, n2.u, n2.s);
  }
  return e2.o;
}
function A(e2, i2, o2, a2, c2, s2, v2) {
  if (c2 === o2 && n(5), r(c2)) {
    var p2 = M(e2, c2, s2 && i2 && 3 !== i2.i && !u(i2.R, a2) ? s2.concat(a2) : void 0);
    if (f(o2, a2, p2), !r(p2))
      return;
    e2.m = false;
  } else
    v2 && o2.add(c2);
  if (t(c2) && !y(c2)) {
    if (!e2.h.D && e2._ < 1)
      return;
    M(e2, c2), i2 && i2.A.l || x(e2, c2);
  }
}
function x(n2, r2, t2) {
  void 0 === t2 && (t2 = false), !n2.l && n2.h.D && n2.m && d(r2, t2);
}
function z(n2, r2) {
  var t2 = n2[Q];
  return (t2 ? p(t2) : n2)[r2];
}
function I(n2, r2) {
  if (r2 in n2)
    for (var t2 = Object.getPrototypeOf(n2); t2; ) {
      var e2 = Object.getOwnPropertyDescriptor(t2, r2);
      if (e2)
        return e2;
      t2 = Object.getPrototypeOf(t2);
    }
}
function k(n2) {
  n2.P || (n2.P = true, n2.l && k(n2.l));
}
function E(n2) {
  n2.o || (n2.o = l(n2.t));
}
function N(n2, r2, t2) {
  var e2 = s(r2) ? b("MapSet").F(r2, t2) : v(r2) ? b("MapSet").T(r2, t2) : n2.O ? function(n3, r3) {
    var t3 = Array.isArray(n3), e3 = { i: t3 ? 1 : 0, A: r3 ? r3.A : _(), P: false, I: false, R: {}, l: r3, t: n3, k: null, o: null, j: null, C: false }, i2 = e3, o2 = en;
    t3 && (i2 = [e3], o2 = on);
    var u2 = Proxy.revocable(i2, o2), a2 = u2.revoke, f3 = u2.proxy;
    return e3.k = f3, e3.j = a2, f3;
  }(r2, t2) : b("ES5").J(r2, t2);
  return (t2 ? t2.A : _()).p.push(e2), e2;
}
function R(e2) {
  return r(e2) || n(22, e2), function n2(r2) {
    if (!t(r2))
      return r2;
    var e3, u2 = r2[Q], c2 = o(r2);
    if (u2) {
      if (!u2.P && (u2.i < 4 || !b("ES5").K(u2)))
        return u2.t;
      u2.I = true, e3 = D(r2, c2), u2.I = false;
    } else
      e3 = D(r2, c2);
    return i(e3, function(r3, t2) {
      u2 && a(u2.t, r3) === t2 || f(e3, r3, n2(t2));
    }), 3 === c2 ? new Set(e3) : e3;
  }(e2);
}
function D(n2, r2) {
  switch (r2) {
    case 2:
      return new Map(n2);
    case 3:
      return Array.from(n2);
  }
  return l(n2);
}
function F() {
  function t2(n2, r2) {
    var t3 = s2[n2];
    return t3 ? t3.enumerable = r2 : s2[n2] = t3 = { configurable: true, enumerable: r2, get: function() {
      var r3 = this[Q];
      return f3(r3), en.get(r3, n2);
    }, set: function(r3) {
      var t4 = this[Q];
      f3(t4), en.set(t4, n2, r3);
    } }, t3;
  }
  function e2(n2) {
    for (var r2 = n2.length - 1; r2 >= 0; r2--) {
      var t3 = n2[r2][Q];
      if (!t3.P)
        switch (t3.i) {
          case 5:
            a2(t3) && k(t3);
            break;
          case 4:
            o2(t3) && k(t3);
        }
    }
  }
  function o2(n2) {
    for (var r2 = n2.t, t3 = n2.k, e3 = nn(t3), i2 = e3.length - 1; i2 >= 0; i2--) {
      var o3 = e3[i2];
      if (o3 !== Q) {
        var a3 = r2[o3];
        if (void 0 === a3 && !u(r2, o3))
          return true;
        var f4 = t3[o3], s3 = f4 && f4[Q];
        if (s3 ? s3.t !== a3 : !c(f4, a3))
          return true;
      }
    }
    var v2 = !!r2[Q];
    return e3.length !== nn(r2).length + (v2 ? 0 : 1);
  }
  function a2(n2) {
    var r2 = n2.k;
    if (r2.length !== n2.t.length)
      return true;
    var t3 = Object.getOwnPropertyDescriptor(r2, r2.length - 1);
    if (t3 && !t3.get)
      return true;
    for (var e3 = 0; e3 < r2.length; e3++)
      if (!r2.hasOwnProperty(e3))
        return true;
    return false;
  }
  function f3(r2) {
    r2.g && n(3, JSON.stringify(p(r2)));
  }
  var s2 = {};
  m("ES5", { J: function(n2, r2) {
    var e3 = Array.isArray(n2), i2 = function(n3, r3) {
      if (n3) {
        for (var e4 = Array(r3.length), i3 = 0; i3 < r3.length; i3++)
          Object.defineProperty(e4, "" + i3, t2(i3, true));
        return e4;
      }
      var o4 = rn(r3);
      delete o4[Q];
      for (var u2 = nn(o4), a3 = 0; a3 < u2.length; a3++) {
        var f4 = u2[a3];
        o4[f4] = t2(f4, n3 || !!o4[f4].enumerable);
      }
      return Object.create(Object.getPrototypeOf(r3), o4);
    }(e3, n2), o3 = { i: e3 ? 5 : 4, A: r2 ? r2.A : _(), P: false, I: false, R: {}, l: r2, t: n2, k: i2, o: null, g: false, C: false };
    return Object.defineProperty(i2, Q, { value: o3, writable: true }), i2;
  }, S: function(n2, t3, o3) {
    o3 ? r(t3) && t3[Q].A === n2 && e2(n2.p) : (n2.u && function n3(r2) {
      if (r2 && "object" == typeof r2) {
        var t4 = r2[Q];
        if (t4) {
          var e3 = t4.t, o4 = t4.k, f4 = t4.R, c2 = t4.i;
          if (4 === c2)
            i(o4, function(r3) {
              r3 !== Q && (void 0 !== e3[r3] || u(e3, r3) ? f4[r3] || n3(o4[r3]) : (f4[r3] = true, k(t4)));
            }), i(e3, function(n4) {
              void 0 !== o4[n4] || u(o4, n4) || (f4[n4] = false, k(t4));
            });
          else if (5 === c2) {
            if (a2(t4) && (k(t4), f4.length = true), o4.length < e3.length)
              for (var s3 = o4.length; s3 < e3.length; s3++)
                f4[s3] = false;
            else
              for (var v2 = e3.length; v2 < o4.length; v2++)
                f4[v2] = true;
            for (var p2 = Math.min(o4.length, e3.length), l2 = 0; l2 < p2; l2++)
              o4.hasOwnProperty(l2) || (f4[l2] = true), void 0 === f4[l2] && n3(o4[l2]);
          }
        }
      }
    }(n2.p[0]), e2(n2.p));
  }, K: function(n2) {
    return 4 === n2.i ? o2(n2) : a2(n2);
  } });
}
var G, U, W, X, q, B, H, L, Q, Y, Z, nn, rn, tn, en, on, un, an, fn, cn, sn, vn, pn, ln, dn, immer_esm_default;
var init_immer_esm = __esm({
  "node_modules/immer/dist/immer.esm.mjs"() {
    W = "undefined" != typeof Symbol && "symbol" == typeof Symbol("x");
    X = "undefined" != typeof Map;
    q = "undefined" != typeof Set;
    B = "undefined" != typeof Proxy && void 0 !== Proxy.revocable && "undefined" != typeof Reflect;
    H = W ? Symbol.for("immer-nothing") : ((G = {})["immer-nothing"] = true, G);
    L = W ? Symbol.for("immer-draftable") : "__$immer_draftable";
    Q = W ? Symbol.for("immer-state") : "__$immer_state";
    Y = { 0: "Illegal state", 1: "Immer drafts cannot have computed properties", 2: "This object has been frozen and should not be mutated", 3: function(n2) {
      return "Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + n2;
    }, 4: "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.", 5: "Immer forbids circular references", 6: "The first or second argument to `produce` must be a function", 7: "The third argument to `produce` must be a function or undefined", 8: "First argument to `createDraft` must be a plain object, an array, or an immerable object", 9: "First argument to `finishDraft` must be a draft returned by `createDraft`", 10: "The given draft is already finalized", 11: "Object.defineProperty() cannot be used on an Immer draft", 12: "Object.setPrototypeOf() cannot be used on an Immer draft", 13: "Immer only supports deleting array indices", 14: "Immer only supports setting array indices and the 'length' property", 15: function(n2) {
      return "Cannot apply patch, path doesn't resolve: " + n2;
    }, 16: 'Sets cannot have "replace" patches.', 17: function(n2) {
      return "Unsupported patch operation: " + n2;
    }, 18: function(n2) {
      return "The plugin for '" + n2 + "' has not been loaded into Immer. To enable the plugin, import and call `enable" + n2 + "()` when initializing your application.";
    }, 20: "Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available", 21: function(n2) {
      return "produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '" + n2 + "'";
    }, 22: function(n2) {
      return "'current' expects a draft, got: " + n2;
    }, 23: function(n2) {
      return "'original' expects a draft, got: " + n2;
    }, 24: "Patching reserved attributes like __proto__, prototype and constructor is not allowed" };
    Z = "" + Object.prototype.constructor;
    nn = "undefined" != typeof Reflect && Reflect.ownKeys ? Reflect.ownKeys : void 0 !== Object.getOwnPropertySymbols ? function(n2) {
      return Object.getOwnPropertyNames(n2).concat(Object.getOwnPropertySymbols(n2));
    } : Object.getOwnPropertyNames;
    rn = Object.getOwnPropertyDescriptors || function(n2) {
      var r2 = {};
      return nn(n2).forEach(function(t2) {
        r2[t2] = Object.getOwnPropertyDescriptor(n2, t2);
      }), r2;
    };
    tn = {};
    en = { get: function(n2, r2) {
      if (r2 === Q)
        return n2;
      var e2 = p(n2);
      if (!u(e2, r2))
        return function(n3, r3, t2) {
          var e3, i3 = I(r3, t2);
          return i3 ? "value" in i3 ? i3.value : null === (e3 = i3.get) || void 0 === e3 ? void 0 : e3.call(n3.k) : void 0;
        }(n2, e2, r2);
      var i2 = e2[r2];
      return n2.I || !t(i2) ? i2 : i2 === z(n2.t, r2) ? (E(n2), n2.o[r2] = N(n2.A.h, i2, n2)) : i2;
    }, has: function(n2, r2) {
      return r2 in p(n2);
    }, ownKeys: function(n2) {
      return Reflect.ownKeys(p(n2));
    }, set: function(n2, r2, t2) {
      var e2 = I(p(n2), r2);
      if (null == e2 ? void 0 : e2.set)
        return e2.set.call(n2.k, t2), true;
      if (!n2.P) {
        var i2 = z(p(n2), r2), o2 = null == i2 ? void 0 : i2[Q];
        if (o2 && o2.t === t2)
          return n2.o[r2] = t2, n2.R[r2] = false, true;
        if (c(t2, i2) && (void 0 !== t2 || u(n2.t, r2)))
          return true;
        E(n2), k(n2);
      }
      return n2.o[r2] === t2 && (void 0 !== t2 || r2 in n2.o) || Number.isNaN(t2) && Number.isNaN(n2.o[r2]) || (n2.o[r2] = t2, n2.R[r2] = true), true;
    }, deleteProperty: function(n2, r2) {
      return void 0 !== z(n2.t, r2) || r2 in n2.t ? (n2.R[r2] = false, E(n2), k(n2)) : delete n2.R[r2], n2.o && delete n2.o[r2], true;
    }, getOwnPropertyDescriptor: function(n2, r2) {
      var t2 = p(n2), e2 = Reflect.getOwnPropertyDescriptor(t2, r2);
      return e2 ? { writable: true, configurable: 1 !== n2.i || "length" !== r2, enumerable: e2.enumerable, value: t2[r2] } : e2;
    }, defineProperty: function() {
      n(11);
    }, getPrototypeOf: function(n2) {
      return Object.getPrototypeOf(n2.t);
    }, setPrototypeOf: function() {
      n(12);
    } };
    on = {};
    i(en, function(n2, r2) {
      on[n2] = function() {
        return arguments[0] = arguments[0][0], r2.apply(this, arguments);
      };
    }), on.deleteProperty = function(r2, t2) {
      return isNaN(parseInt(t2)) && n(13), on.set.call(this, r2, t2, void 0);
    }, on.set = function(r2, t2, e2) {
      return "length" !== t2 && isNaN(parseInt(t2)) && n(14), en.set.call(this, r2[0], t2, e2, r2[0]);
    };
    un = function() {
      function e2(r2) {
        var e3 = this;
        this.O = B, this.D = true, this.produce = function(r3, i3, o2) {
          if ("function" == typeof r3 && "function" != typeof i3) {
            var u2 = i3;
            i3 = r3;
            var a2 = e3;
            return function(n2) {
              var r4 = this;
              void 0 === n2 && (n2 = u2);
              for (var t2 = arguments.length, e4 = Array(t2 > 1 ? t2 - 1 : 0), o3 = 1; o3 < t2; o3++)
                e4[o3 - 1] = arguments[o3];
              return a2.produce(n2, function(n3) {
                var t3;
                return (t3 = i3).call.apply(t3, [r4, n3].concat(e4));
              });
            };
          }
          var f3;
          if ("function" != typeof i3 && n(6), void 0 !== o2 && "function" != typeof o2 && n(7), t(r3)) {
            var c2 = w(e3), s2 = N(e3, r3, void 0), v2 = true;
            try {
              f3 = i3(s2), v2 = false;
            } finally {
              v2 ? g(c2) : O(c2);
            }
            return "undefined" != typeof Promise && f3 instanceof Promise ? f3.then(function(n2) {
              return j(c2, o2), P(n2, c2);
            }, function(n2) {
              throw g(c2), n2;
            }) : (j(c2, o2), P(f3, c2));
          }
          if (!r3 || "object" != typeof r3) {
            if (void 0 === (f3 = i3(r3)) && (f3 = r3), f3 === H && (f3 = void 0), e3.D && d(f3, true), o2) {
              var p2 = [], l2 = [];
              b("Patches").M(r3, f3, p2, l2), o2(p2, l2);
            }
            return f3;
          }
          n(21, r3);
        }, this.produceWithPatches = function(n2, r3) {
          if ("function" == typeof n2)
            return function(r4) {
              for (var t3 = arguments.length, i4 = Array(t3 > 1 ? t3 - 1 : 0), o3 = 1; o3 < t3; o3++)
                i4[o3 - 1] = arguments[o3];
              return e3.produceWithPatches(r4, function(r5) {
                return n2.apply(void 0, [r5].concat(i4));
              });
            };
          var t2, i3, o2 = e3.produce(n2, r3, function(n3, r4) {
            t2 = n3, i3 = r4;
          });
          return "undefined" != typeof Promise && o2 instanceof Promise ? o2.then(function(n3) {
            return [n3, t2, i3];
          }) : [o2, t2, i3];
        }, "boolean" == typeof (null == r2 ? void 0 : r2.useProxies) && this.setUseProxies(r2.useProxies), "boolean" == typeof (null == r2 ? void 0 : r2.autoFreeze) && this.setAutoFreeze(r2.autoFreeze);
      }
      var i2 = e2.prototype;
      return i2.createDraft = function(e3) {
        t(e3) || n(8), r(e3) && (e3 = R(e3));
        var i3 = w(this), o2 = N(this, e3, void 0);
        return o2[Q].C = true, O(i3), o2;
      }, i2.finishDraft = function(r2, t2) {
        var e3 = r2 && r2[Q];
        e3 && e3.C || n(9), e3.I && n(10);
        var i3 = e3.A;
        return j(i3, t2), P(void 0, i3);
      }, i2.setAutoFreeze = function(n2) {
        this.D = n2;
      }, i2.setUseProxies = function(r2) {
        r2 && !B && n(20), this.O = r2;
      }, i2.applyPatches = function(n2, t2) {
        var e3;
        for (e3 = t2.length - 1; e3 >= 0; e3--) {
          var i3 = t2[e3];
          if (0 === i3.path.length && "replace" === i3.op) {
            n2 = i3.value;
            break;
          }
        }
        e3 > -1 && (t2 = t2.slice(e3 + 1));
        var o2 = b("Patches").$;
        return r(n2) ? o2(n2, t2) : this.produce(n2, function(n3) {
          return o2(n3, t2);
        });
      }, e2;
    }();
    an = new un();
    fn = an.produce;
    cn = an.produceWithPatches.bind(an);
    sn = an.setAutoFreeze.bind(an);
    vn = an.setUseProxies.bind(an);
    pn = an.applyPatches.bind(an);
    ln = an.createDraft.bind(an);
    dn = an.finishDraft.bind(an);
    immer_esm_default = fn;
  }
});

// node_modules/@babel/runtime/helpers/esm/defineProperty.js
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var init_defineProperty = __esm({
  "node_modules/@babel/runtime/helpers/esm/defineProperty.js"() {
    init_toPropertyKey();
  }
});

// node_modules/@babel/runtime/helpers/esm/objectSpread2.js
function ownKeys(e2, r2) {
  var t2 = Object.keys(e2);
  if (Object.getOwnPropertySymbols) {
    var o2 = Object.getOwnPropertySymbols(e2);
    r2 && (o2 = o2.filter(function(r3) {
      return Object.getOwnPropertyDescriptor(e2, r3).enumerable;
    })), t2.push.apply(t2, o2);
  }
  return t2;
}
function _objectSpread2(e2) {
  for (var r2 = 1; r2 < arguments.length; r2++) {
    var t2 = null != arguments[r2] ? arguments[r2] : {};
    r2 % 2 ? ownKeys(Object(t2), true).forEach(function(r3) {
      _defineProperty(e2, r3, t2[r3]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e2, Object.getOwnPropertyDescriptors(t2)) : ownKeys(Object(t2)).forEach(function(r3) {
      Object.defineProperty(e2, r3, Object.getOwnPropertyDescriptor(t2, r3));
    });
  }
  return e2;
}
var init_objectSpread2 = __esm({
  "node_modules/@babel/runtime/helpers/esm/objectSpread2.js"() {
    init_defineProperty();
  }
});

// node_modules/redux/es/redux.js
function isPlainObject(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = obj;
  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }
  return Object.getPrototypeOf(obj) === proto;
}
function miniKindOf(val) {
  if (val === void 0)
    return "undefined";
  if (val === null)
    return "null";
  var type = typeof val;
  switch (type) {
    case "boolean":
    case "string":
    case "number":
    case "symbol":
    case "function": {
      return type;
    }
  }
  if (Array.isArray(val))
    return "array";
  if (isDate(val))
    return "date";
  if (isError(val))
    return "error";
  var constructorName = ctorName(val);
  switch (constructorName) {
    case "Symbol":
    case "Promise":
    case "WeakMap":
    case "WeakSet":
    case "Map":
    case "Set":
      return constructorName;
  }
  return type.slice(8, -1).toLowerCase().replace(/\s/g, "");
}
function ctorName(val) {
  return typeof val.constructor === "function" ? val.constructor.name : null;
}
function isError(val) {
  return val instanceof Error || typeof val.message === "string" && val.constructor && typeof val.constructor.stackTraceLimit === "number";
}
function isDate(val) {
  if (val instanceof Date)
    return true;
  return typeof val.toDateString === "function" && typeof val.getDate === "function" && typeof val.setDate === "function";
}
function kindOf(val) {
  var typeOfVal = typeof val;
  if (true) {
    typeOfVal = miniKindOf(val);
  }
  return typeOfVal;
}
function createStore(reducer16, preloadedState, enhancer) {
  var _ref2;
  if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
    throw new Error(false ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
  }
  if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
    enhancer = preloadedState;
    preloadedState = void 0;
  }
  if (typeof enhancer !== "undefined") {
    if (typeof enhancer !== "function") {
      throw new Error(false ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }
    return enhancer(createStore)(reducer16, preloadedState);
  }
  if (typeof reducer16 !== "function") {
    throw new Error(false ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer16) + "'");
  }
  var currentReducer = reducer16;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  function getState() {
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
    }
    return currentState;
  }
  function subscribe(listener2) {
    if (typeof listener2 !== "function") {
      throw new Error(false ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener2) + "'");
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
    }
    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener2);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }
      if (isDispatching) {
        throw new Error(false ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener2);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error(false ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }
    if (typeof action.type === "undefined") {
      throw new Error(false ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }
    if (isDispatching) {
      throw new Error(false ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
    }
    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }
    var listeners = currentListeners = nextListeners;
    for (var i2 = 0; i2 < listeners.length; i2++) {
      var listener2 = listeners[i2];
      listener2();
    }
    return action;
  }
  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== "function") {
      throw new Error(false ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }
    currentReducer = nextReducer;
    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  function observable() {
    var _ref;
    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe2(observer) {
        if (typeof observer !== "object" || observer === null) {
          throw new Error(false ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }
        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }
        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe
        };
      }
    }, _ref[$$observable] = function() {
      return this;
    }, _ref;
  }
  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch,
    subscribe,
    getState,
    replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}
function warning(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e2) {
  }
}
function getUnexpectedStateShapeWarningMessage(inputState, reducers42, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers42);
  var argumentName = action && action.type === ActionTypes.INIT ? "preloadedState argument passed to createStore" : "previous state received by the reducer";
  if (reducerKeys.length === 0) {
    return "Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.";
  }
  if (!isPlainObject(inputState)) {
    return "The " + argumentName + ' has unexpected type of "' + kindOf(inputState) + '". Expected argument to be an object with the following ' + ('keys: "' + reducerKeys.join('", "') + '"');
  }
  var unexpectedKeys = Object.keys(inputState).filter(function(key) {
    return !reducers42.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function(key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE)
    return;
  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? "keys" : "key") + " " + ('"' + unexpectedKeys.join('", "') + '" found in ' + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ('"' + reducerKeys.join('", "') + '". Unexpected keys will be ignored.');
  }
}
function assertReducerShape(reducers42) {
  Object.keys(reducers42).forEach(function(key) {
    var reducer16 = reducers42[key];
    var initialState9 = reducer16(void 0, {
      type: ActionTypes.INIT
    });
    if (typeof initialState9 === "undefined") {
      throw new Error(false ? formatProdErrorMessage(12) : 'The slice reducer for key "' + key + `" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
    }
    if (typeof reducer16(void 0, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === "undefined") {
      throw new Error(false ? formatProdErrorMessage(13) : 'The slice reducer for key "' + key + '" returned undefined when probed with a random type. ' + ("Don't try to handle '" + ActionTypes.INIT + `' or other actions in "redux/*" `) + "namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.");
    }
  });
}
function combineReducers(reducers42) {
  var reducerKeys = Object.keys(reducers42);
  var finalReducers = {};
  for (var i2 = 0; i2 < reducerKeys.length; i2++) {
    var key = reducerKeys[i2];
    if (true) {
      if (typeof reducers42[key] === "undefined") {
        warning('No reducer provided for key "' + key + '"');
      }
    }
    if (typeof reducers42[key] === "function") {
      finalReducers[key] = reducers42[key];
    }
  }
  var finalReducerKeys = Object.keys(finalReducers);
  var unexpectedKeyCache;
  if (true) {
    unexpectedKeyCache = {};
  }
  var shapeAssertionError;
  try {
    assertReducerShape(finalReducers);
  } catch (e2) {
    shapeAssertionError = e2;
  }
  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }
    if (shapeAssertionError) {
      throw shapeAssertionError;
    }
    if (true) {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
      if (warningMessage) {
        warning(warningMessage);
      }
    }
    var hasChanged = false;
    var nextState = {};
    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer16 = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer16(previousStateForKey, action);
      if (typeof nextStateForKey === "undefined") {
        var actionType = action && action.type;
        throw new Error(false ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? '"' + String(actionType) + '"' : "(unknown type)") + ', the slice reducer for key "' + _key + '" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.');
      }
      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }
    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}
function bindActionCreator(actionCreator, dispatch) {
  return function() {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === "function") {
    return bindActionCreator(actionCreators, dispatch);
  }
  if (typeof actionCreators !== "object" || actionCreators === null) {
    throw new Error(false ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + `'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?`);
  }
  var boundActionCreators = {};
  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];
    if (typeof actionCreator === "function") {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }
  return boundActionCreators;
}
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a2, b2) {
    return function() {
      return a2(b2.apply(void 0, arguments));
    };
  });
}
function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }
  return function(createStore2) {
    return function() {
      var store = createStore2.apply(void 0, arguments);
      var _dispatch = function dispatch() {
        throw new Error(false ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function(middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return _objectSpread2(_objectSpread2({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}
var $$observable, randomString, ActionTypes;
var init_redux = __esm({
  "node_modules/redux/es/redux.js"() {
    init_objectSpread2();
    $$observable = function() {
      return typeof Symbol === "function" && Symbol.observable || "@@observable";
    }();
    randomString = function randomString2() {
      return Math.random().toString(36).substring(7).split("").join(".");
    };
    ActionTypes = {
      INIT: "@@redux/INIT" + randomString(),
      REPLACE: "@@redux/REPLACE" + randomString(),
      PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
        return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
      }
    };
  }
});

// node_modules/reselect/es/defaultMemoize.js
function createSingletonCache(equals) {
  var entry;
  return {
    get: function get2(key) {
      if (entry && equals(entry.key, key)) {
        return entry.value;
      }
      return NOT_FOUND;
    },
    put: function put2(key, value) {
      entry = {
        key,
        value
      };
    },
    getEntries: function getEntries() {
      return entry ? [entry] : [];
    },
    clear: function clear3() {
      entry = void 0;
    }
  };
}
function createLruCache(maxSize, equals) {
  var entries = [];
  function get2(key) {
    var cacheIndex = entries.findIndex(function(entry2) {
      return equals(key, entry2.key);
    });
    if (cacheIndex > -1) {
      var entry = entries[cacheIndex];
      if (cacheIndex > 0) {
        entries.splice(cacheIndex, 1);
        entries.unshift(entry);
      }
      return entry.value;
    }
    return NOT_FOUND;
  }
  function put2(key, value) {
    if (get2(key) === NOT_FOUND) {
      entries.unshift({
        key,
        value
      });
      if (entries.length > maxSize) {
        entries.pop();
      }
    }
  }
  function getEntries() {
    return entries;
  }
  function clear3() {
    entries = [];
  }
  return {
    get: get2,
    put: put2,
    getEntries,
    clear: clear3
  };
}
function createCacheKeyComparator(equalityCheck) {
  return function areArgumentsShallowlyEqual(prev, next) {
    if (prev === null || next === null || prev.length !== next.length) {
      return false;
    }
    var length = prev.length;
    for (var i2 = 0; i2 < length; i2++) {
      if (!equalityCheck(prev[i2], next[i2])) {
        return false;
      }
    }
    return true;
  };
}
function defaultMemoize(func3, equalityCheckOrOptions) {
  var providedOptions = typeof equalityCheckOrOptions === "object" ? equalityCheckOrOptions : {
    equalityCheck: equalityCheckOrOptions
  };
  var _providedOptions$equa = providedOptions.equalityCheck, equalityCheck = _providedOptions$equa === void 0 ? defaultEqualityCheck : _providedOptions$equa, _providedOptions$maxS = providedOptions.maxSize, maxSize = _providedOptions$maxS === void 0 ? 1 : _providedOptions$maxS, resultEqualityCheck = providedOptions.resultEqualityCheck;
  var comparator = createCacheKeyComparator(equalityCheck);
  var cache = maxSize === 1 ? createSingletonCache(comparator) : createLruCache(maxSize, comparator);
  function memoized() {
    var value = cache.get(arguments);
    if (value === NOT_FOUND) {
      value = func3.apply(null, arguments);
      if (resultEqualityCheck) {
        var entries = cache.getEntries();
        var matchingEntry = entries.find(function(entry) {
          return resultEqualityCheck(entry.value, value);
        });
        if (matchingEntry) {
          value = matchingEntry.value;
        }
      }
      cache.put(arguments, value);
    }
    return value;
  }
  memoized.clearCache = function() {
    return cache.clear();
  };
  return memoized;
}
var NOT_FOUND, defaultEqualityCheck;
var init_defaultMemoize = __esm({
  "node_modules/reselect/es/defaultMemoize.js"() {
    NOT_FOUND = "NOT_FOUND";
    defaultEqualityCheck = function defaultEqualityCheck2(a2, b2) {
      return a2 === b2;
    };
  }
});

// node_modules/reselect/es/index.js
function getDependencies(funcs) {
  var dependencies = Array.isArray(funcs[0]) ? funcs[0] : funcs;
  if (!dependencies.every(function(dep) {
    return typeof dep === "function";
  })) {
    var dependencyTypes = dependencies.map(function(dep) {
      return typeof dep === "function" ? "function " + (dep.name || "unnamed") + "()" : typeof dep;
    }).join(", ");
    throw new Error("createSelector expects all input-selectors to be functions, but received the following types: [" + dependencyTypes + "]");
  }
  return dependencies;
}
function createSelectorCreator(memoize) {
  for (var _len = arguments.length, memoizeOptionsFromArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    memoizeOptionsFromArgs[_key - 1] = arguments[_key];
  }
  var createSelector2 = function createSelector3() {
    for (var _len2 = arguments.length, funcs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      funcs[_key2] = arguments[_key2];
    }
    var _recomputations = 0;
    var _lastResult;
    var directlyPassedOptions = {
      memoizeOptions: void 0
    };
    var resultFunc = funcs.pop();
    if (typeof resultFunc === "object") {
      directlyPassedOptions = resultFunc;
      resultFunc = funcs.pop();
    }
    if (typeof resultFunc !== "function") {
      throw new Error("createSelector expects an output function after the inputs, but received: [" + typeof resultFunc + "]");
    }
    var _directlyPassedOption = directlyPassedOptions, _directlyPassedOption2 = _directlyPassedOption.memoizeOptions, memoizeOptions = _directlyPassedOption2 === void 0 ? memoizeOptionsFromArgs : _directlyPassedOption2;
    var finalMemoizeOptions = Array.isArray(memoizeOptions) ? memoizeOptions : [memoizeOptions];
    var dependencies = getDependencies(funcs);
    var memoizedResultFunc = memoize.apply(void 0, [function recomputationWrapper() {
      _recomputations++;
      return resultFunc.apply(null, arguments);
    }].concat(finalMemoizeOptions));
    var selector = memoize(function dependenciesChecker() {
      var params = [];
      var length = dependencies.length;
      for (var i2 = 0; i2 < length; i2++) {
        params.push(dependencies[i2].apply(null, arguments));
      }
      _lastResult = memoizedResultFunc.apply(null, params);
      return _lastResult;
    });
    Object.assign(selector, {
      resultFunc,
      memoizedResultFunc,
      dependencies,
      lastResult: function lastResult() {
        return _lastResult;
      },
      recomputations: function recomputations() {
        return _recomputations;
      },
      resetRecomputations: function resetRecomputations() {
        return _recomputations = 0;
      }
    });
    return selector;
  };
  return createSelector2;
}
var createSelector;
var init_es = __esm({
  "node_modules/reselect/es/index.js"() {
    init_defaultMemoize();
    createSelector = createSelectorCreator(defaultMemoize);
  }
});

// node_modules/redux-thunk/es/index.js
function createThunkMiddleware(extraArgument) {
  var middleware = function middleware2(_ref) {
    var dispatch = _ref.dispatch, getState = _ref.getState;
    return function(next) {
      return function(action) {
        if (typeof action === "function") {
          return action(dispatch, getState, extraArgument);
        }
        return next(action);
      };
    };
  };
  return middleware;
}
var thunk, es_default;
var init_es2 = __esm({
  "node_modules/redux-thunk/es/index.js"() {
    thunk = createThunkMiddleware();
    thunk.withExtraArgument = createThunkMiddleware;
    es_default = thunk;
  }
});

// node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js
function isPlainObject2(value) {
  if (typeof value !== "object" || value === null)
    return false;
  var proto = Object.getPrototypeOf(value);
  if (proto === null)
    return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}
function getTimeMeasureUtils(maxDelay, fnName) {
  var elapsed = 0;
  return {
    measureTime: function(fn2) {
      var started = Date.now();
      try {
        return fn2();
      } finally {
        var finished = Date.now();
        elapsed += finished - started;
      }
    },
    warnIfExceeded: function() {
      if (elapsed > maxDelay) {
        console.warn(fnName + " took " + elapsed + "ms, which is more than the warning threshold of " + maxDelay + "ms. \nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\nIt is disabled in production builds, so you don't need to worry about that.");
      }
    }
  };
}
function freezeDraftable(val) {
  return t(val) ? immer_esm_default(val, function() {
  }) : val;
}
function invariant(condition, message) {
  if (condition) {
    return;
  }
  if (isProduction) {
    throw new Error(prefix);
  }
  throw new Error(prefix + ": " + (message || ""));
}
function stringify(obj, serializer, indent, decycler) {
  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);
}
function getSerialize(serializer, decycler) {
  var stack = [], keys = [];
  if (!decycler)
    decycler = function(_2, value) {
      if (stack[0] === value)
        return "[Circular ~]";
      return "[Circular ~." + keys.slice(0, stack.indexOf(value)).join(".") + "]";
    };
  return function(key, value) {
    if (stack.length > 0) {
      var thisPos = stack.indexOf(this);
      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);
      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);
      if (~stack.indexOf(value))
        value = decycler.call(this, key, value);
    } else
      stack.push(value);
    return serializer == null ? value : serializer.call(this, key, value);
  };
}
function isImmutableDefault(value) {
  return typeof value !== "object" || value == null || Object.isFrozen(value);
}
function trackForMutations(isImmutable, ignorePaths, obj) {
  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);
  return {
    detectMutations: function() {
      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj);
    }
  };
}
function trackProperties(isImmutable, ignorePaths, obj, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }
  if (path === void 0) {
    path = "";
  }
  var tracked = { value: obj };
  if (!isImmutable(obj)) {
    tracked.children = {};
    for (var key in obj) {
      var childPath = path ? path + "." + key : key;
      if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
        continue;
      }
      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);
    }
  }
  return tracked;
}
function detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {
  if (ignorePaths === void 0) {
    ignorePaths = [];
  }
  if (sameParentRef === void 0) {
    sameParentRef = false;
  }
  if (path === void 0) {
    path = "";
  }
  var prevObj = trackedProperty ? trackedProperty.value : void 0;
  var sameRef = prevObj === obj;
  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {
    return { wasMutated: true, path };
  }
  if (isImmutable(prevObj) || isImmutable(obj)) {
    return { wasMutated: false };
  }
  var keysToDetect = {};
  for (var key in trackedProperty.children) {
    keysToDetect[key] = true;
  }
  for (var key in obj) {
    keysToDetect[key] = true;
  }
  for (var key in keysToDetect) {
    var childPath = path ? path + "." + key : key;
    if (ignorePaths.length && ignorePaths.indexOf(childPath) !== -1) {
      continue;
    }
    var result = detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);
    if (result.wasMutated) {
      return result;
    }
  }
  return { wasMutated: false };
}
function createImmutableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  if (false) {
    return function() {
      return function(next) {
        return function(action) {
          return next(action);
        };
      };
    };
  }
  var _c = options.isImmutable, isImmutable = _c === void 0 ? isImmutableDefault : _c, ignoredPaths = options.ignoredPaths, _d = options.warnAfter, warnAfter = _d === void 0 ? 32 : _d, ignore = options.ignore;
  ignoredPaths = ignoredPaths || ignore;
  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);
  return function(_c2) {
    var getState = _c2.getState;
    var state = getState();
    var tracker = track(state);
    var result;
    return function(next) {
      return function(action) {
        var measureUtils = getTimeMeasureUtils(warnAfter, "ImmutableStateInvariantMiddleware");
        measureUtils.measureTime(function() {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          invariant(!result.wasMutated, "A state mutation was detected between dispatches, in the path '" + (result.path || "") + "'.  This may cause incorrect behavior. (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        var dispatchedAction = next(action);
        measureUtils.measureTime(function() {
          state = getState();
          result = tracker.detectMutations();
          tracker = track(state);
          result.wasMutated && invariant(!result.wasMutated, "A state mutation was detected inside a dispatch, in the path: " + (result.path || "") + ". Take a look at the reducer(s) handling the action " + stringify(action) + ". (https://redux.js.org/style-guide/style-guide#do-not-mutate-state)");
        });
        measureUtils.warnIfExceeded();
        return dispatchedAction;
      };
    };
  };
}
function isPlain(val) {
  var type = typeof val;
  return val == null || type === "string" || type === "boolean" || type === "number" || Array.isArray(val) || isPlainObject2(val);
}
function findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {
  if (path === void 0) {
    path = "";
  }
  if (isSerializable === void 0) {
    isSerializable = isPlain;
  }
  if (ignoredPaths === void 0) {
    ignoredPaths = [];
  }
  var foundNestedSerializable;
  if (!isSerializable(value)) {
    return {
      keyPath: path || "<root>",
      value
    };
  }
  if (typeof value !== "object" || value === null) {
    return false;
  }
  var entries = getEntries != null ? getEntries(value) : Object.entries(value);
  var hasIgnoredPaths = ignoredPaths.length > 0;
  for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
    var _c = entries_1[_i], key = _c[0], nestedValue = _c[1];
    var nestedPath = path ? path + "." + key : key;
    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath) >= 0) {
      continue;
    }
    if (!isSerializable(nestedValue)) {
      return {
        keyPath: nestedPath,
        value: nestedValue
      };
    }
    if (typeof nestedValue === "object") {
      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);
      if (foundNestedSerializable) {
        return foundNestedSerializable;
      }
    }
  }
  return false;
}
function createSerializableStateInvariantMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  if (false) {
    return function() {
      return function(next) {
        return function(action) {
          return next(action);
        };
      };
    };
  }
  var _c = options.isSerializable, isSerializable = _c === void 0 ? isPlain : _c, getEntries = options.getEntries, _d = options.ignoredActions, ignoredActions = _d === void 0 ? [] : _d, _e = options.ignoredActionPaths, ignoredActionPaths = _e === void 0 ? ["meta.arg", "meta.baseQueryMeta"] : _e, _f = options.ignoredPaths, ignoredPaths = _f === void 0 ? [] : _f, _g = options.warnAfter, warnAfter = _g === void 0 ? 32 : _g, _h = options.ignoreState, ignoreState = _h === void 0 ? false : _h, _j = options.ignoreActions, ignoreActions = _j === void 0 ? false : _j;
  return function(storeAPI) {
    return function(next) {
      return function(action) {
        var result = next(action);
        var measureUtils = getTimeMeasureUtils(warnAfter, "SerializableStateInvariantMiddleware");
        if (!ignoreActions && !(ignoredActions.length && ignoredActions.indexOf(action.type) !== -1)) {
          measureUtils.measureTime(function() {
            var foundActionNonSerializableValue = findNonSerializableValue(action, "", isSerializable, getEntries, ignoredActionPaths);
            if (foundActionNonSerializableValue) {
              var keyPath = foundActionNonSerializableValue.keyPath, value = foundActionNonSerializableValue.value;
              console.error("A non-serializable value was detected in an action, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the logic that dispatched this action: ", action, "\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)", "\n(To allow non-serializable values see: https://redux-toolkit.js.org/usage/usage-guide#working-with-non-serializable-data)");
            }
          });
        }
        if (!ignoreState) {
          measureUtils.measureTime(function() {
            var state = storeAPI.getState();
            var foundStateNonSerializableValue = findNonSerializableValue(state, "", isSerializable, getEntries, ignoredPaths);
            if (foundStateNonSerializableValue) {
              var keyPath = foundStateNonSerializableValue.keyPath, value = foundStateNonSerializableValue.value;
              console.error("A non-serializable value was detected in the state, in the path: `" + keyPath + "`. Value:", value, "\nTake a look at the reducer(s) handling this action type: " + action.type + ".\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)");
            }
          });
          measureUtils.warnIfExceeded();
        }
        return result;
      };
    };
  };
}
function isBoolean(x2) {
  return typeof x2 === "boolean";
}
function curryGetDefaultMiddleware() {
  return function curriedGetDefaultMiddleware(options) {
    return getDefaultMiddleware(options);
  };
}
function getDefaultMiddleware(options) {
  if (options === void 0) {
    options = {};
  }
  var _c = options.thunk, thunk2 = _c === void 0 ? true : _c, _d = options.immutableCheck, immutableCheck = _d === void 0 ? true : _d, _e = options.serializableCheck, serializableCheck = _e === void 0 ? true : _e;
  var middlewareArray = new MiddlewareArray();
  if (thunk2) {
    if (isBoolean(thunk2)) {
      middlewareArray.push(es_default);
    } else {
      middlewareArray.push(es_default.withExtraArgument(thunk2.extraArgument));
    }
  }
  if (true) {
    if (immutableCheck) {
      var immutableOptions = {};
      if (!isBoolean(immutableCheck)) {
        immutableOptions = immutableCheck;
      }
      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
    }
    if (serializableCheck) {
      var serializableOptions = {};
      if (!isBoolean(serializableCheck)) {
        serializableOptions = serializableCheck;
      }
      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
    }
  }
  return middlewareArray;
}
function configureStore(options) {
  var curriedGetDefaultMiddleware = curryGetDefaultMiddleware();
  var _c = options || {}, _d = _c.reducer, reducer16 = _d === void 0 ? void 0 : _d, _e = _c.middleware, middleware = _e === void 0 ? curriedGetDefaultMiddleware() : _e, _f = _c.devTools, devTools = _f === void 0 ? true : _f, _g = _c.preloadedState, preloadedState = _g === void 0 ? void 0 : _g, _h = _c.enhancers, enhancers = _h === void 0 ? void 0 : _h;
  var rootReducer2;
  if (typeof reducer16 === "function") {
    rootReducer2 = reducer16;
  } else if (isPlainObject2(reducer16)) {
    rootReducer2 = combineReducers(reducer16);
  } else {
    throw new Error('"reducer" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');
  }
  var finalMiddleware = middleware;
  if (typeof finalMiddleware === "function") {
    finalMiddleware = finalMiddleware(curriedGetDefaultMiddleware);
    if (!IS_PRODUCTION && !Array.isArray(finalMiddleware)) {
      throw new Error("when using a middleware builder function, an array of middleware must be returned");
    }
  }
  if (!IS_PRODUCTION && finalMiddleware.some(function(item) {
    return typeof item !== "function";
  })) {
    throw new Error("each middleware provided to configureStore must be a function");
  }
  var middlewareEnhancer = applyMiddleware.apply(void 0, finalMiddleware);
  var finalCompose = compose;
  if (devTools) {
    finalCompose = composeWithDevTools(__spreadValues({
      trace: !IS_PRODUCTION
    }, typeof devTools === "object" && devTools));
  }
  var storeEnhancers = [middlewareEnhancer];
  if (Array.isArray(enhancers)) {
    storeEnhancers = __spreadArray([middlewareEnhancer], enhancers);
  } else if (typeof enhancers === "function") {
    storeEnhancers = enhancers(storeEnhancers);
  }
  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);
  return createStore(rootReducer2, preloadedState, composedEnhancer);
}
function createAction(type, prepareAction) {
  function actionCreator() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }
    if (prepareAction) {
      var prepared = prepareAction.apply(void 0, args);
      if (!prepared) {
        throw new Error("prepareAction did not return an object");
      }
      return __spreadValues(__spreadValues({
        type,
        payload: prepared.payload
      }, "meta" in prepared && { meta: prepared.meta }), "error" in prepared && { error: prepared.error });
    }
    return { type, payload: args[0] };
  }
  actionCreator.toString = function() {
    return "" + type;
  };
  actionCreator.type = type;
  actionCreator.match = function(action) {
    return action.type === type;
  };
  return actionCreator;
}
function executeReducerBuilderCallback(builderCallback) {
  var actionsMap = {};
  var actionMatchers = [];
  var defaultCaseReducer;
  var builder = {
    addCase: function(typeOrActionCreator, reducer16) {
      if (true) {
        if (actionMatchers.length > 0) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addMatcher`");
        }
        if (defaultCaseReducer) {
          throw new Error("`builder.addCase` should only be called before calling `builder.addDefaultCase`");
        }
      }
      var type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
      if (type in actionsMap) {
        throw new Error("addCase cannot be called with two reducers for the same action type");
      }
      actionsMap[type] = reducer16;
      return builder;
    },
    addMatcher: function(matcher2, reducer16) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
        }
      }
      actionMatchers.push({ matcher: matcher2, reducer: reducer16 });
      return builder;
    },
    addDefaultCase: function(reducer16) {
      if (true) {
        if (defaultCaseReducer) {
          throw new Error("`builder.addDefaultCase` can only be called once");
        }
      }
      defaultCaseReducer = reducer16;
      return builder;
    }
  };
  builderCallback(builder);
  return [actionsMap, actionMatchers, defaultCaseReducer];
}
function isStateFunction(x2) {
  return typeof x2 === "function";
}
function createReducer(initialState9, mapOrBuilderCallback, actionMatchers, defaultCaseReducer) {
  if (actionMatchers === void 0) {
    actionMatchers = [];
  }
  var _c = typeof mapOrBuilderCallback === "function" ? executeReducerBuilderCallback(mapOrBuilderCallback) : [mapOrBuilderCallback, actionMatchers, defaultCaseReducer], actionsMap = _c[0], finalActionMatchers = _c[1], finalDefaultCaseReducer = _c[2];
  var getInitialState;
  if (isStateFunction(initialState9)) {
    getInitialState = function() {
      return freezeDraftable(initialState9());
    };
  } else {
    var frozenInitialState_1 = freezeDraftable(initialState9);
    getInitialState = function() {
      return frozenInitialState_1;
    };
  }
  function reducer16(state, action) {
    if (state === void 0) {
      state = getInitialState();
    }
    var caseReducers = __spreadArray([
      actionsMap[action.type]
    ], finalActionMatchers.filter(function(_c2) {
      var matcher2 = _c2.matcher;
      return matcher2(action);
    }).map(function(_c2) {
      var reducer22 = _c2.reducer;
      return reducer22;
    }));
    if (caseReducers.filter(function(cr) {
      return !!cr;
    }).length === 0) {
      caseReducers = [finalDefaultCaseReducer];
    }
    return caseReducers.reduce(function(previousState, caseReducer) {
      if (caseReducer) {
        if (r(previousState)) {
          var draft = previousState;
          var result = caseReducer(draft, action);
          if (result === void 0) {
            return previousState;
          }
          return result;
        } else if (!t(previousState)) {
          var result = caseReducer(previousState, action);
          if (result === void 0) {
            if (previousState === null) {
              return previousState;
            }
            throw Error("A case reducer on a non-draftable value must not return undefined");
          }
          return result;
        } else {
          return immer_esm_default(previousState, function(draft2) {
            return caseReducer(draft2, action);
          });
        }
      }
      return previousState;
    }, state);
  }
  reducer16.getInitialState = getInitialState;
  return reducer16;
}
function getType2(slice, actionKey) {
  return slice + "/" + actionKey;
}
function createSlice(options) {
  var name10 = options.name;
  if (!name10) {
    throw new Error("`name` is a required option for createSlice");
  }
  if (typeof process !== "undefined" && true) {
    if (options.initialState === void 0) {
      console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
    }
  }
  var initialState9 = typeof options.initialState == "function" ? options.initialState : freezeDraftable(options.initialState);
  var reducers42 = options.reducers || {};
  var reducerNames = Object.keys(reducers42);
  var sliceCaseReducersByName = {};
  var sliceCaseReducersByType = {};
  var actionCreators = {};
  reducerNames.forEach(function(reducerName) {
    var maybeReducerWithPrepare = reducers42[reducerName];
    var type = getType2(name10, reducerName);
    var caseReducer;
    var prepareCallback;
    if ("reducer" in maybeReducerWithPrepare) {
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }
    sliceCaseReducersByName[reducerName] = caseReducer;
    sliceCaseReducersByType[type] = caseReducer;
    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);
  });
  function buildReducer() {
    var _c = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers], _d = _c[0], extraReducers = _d === void 0 ? {} : _d, _e = _c[1], actionMatchers = _e === void 0 ? [] : _e, _f = _c[2], defaultCaseReducer = _f === void 0 ? void 0 : _f;
    var finalCaseReducers = __spreadValues(__spreadValues({}, extraReducers), sliceCaseReducersByType);
    return createReducer(initialState9, finalCaseReducers, actionMatchers, defaultCaseReducer);
  }
  var _reducer;
  return {
    name: name10,
    reducer: function(state, action) {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer(state, action);
    },
    actions: actionCreators,
    caseReducers: sliceCaseReducersByName,
    getInitialState: function() {
      if (!_reducer)
        _reducer = buildReducer();
      return _reducer.getInitialState();
    }
  };
}
var __extends, __spreadArray, __defProp, __getOwnPropSymbols, __hasOwnProp, __propIsEnum, __defNormalProp, __spreadValues, composeWithDevTools, devToolsEnhancer, MiddlewareArray, isProduction, prefix, IS_PRODUCTION, listener, completed, cancelled, taskCancelled, taskCompleted, listenerCancelled, listenerCompleted, alm, addListener, clearAllListeners, removeListener;
var init_redux_toolkit_esm = __esm({
  "node_modules/@reduxjs/toolkit/dist/redux-toolkit.esm.js"() {
    init_immer_esm();
    init_redux();
    init_immer_esm();
    init_es();
    init_immer_esm();
    init_es();
    init_redux();
    init_redux();
    init_es2();
    init_immer_esm();
    init_immer_esm();
    init_immer_esm();
    __extends = /* @__PURE__ */ function() {
      var extendStatics = function(d2, b2) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d3, b3) {
          d3.__proto__ = b3;
        } || function(d3, b3) {
          for (var p2 in b3)
            if (Object.prototype.hasOwnProperty.call(b3, p2))
              d3[p2] = b3[p2];
        };
        return extendStatics(d2, b2);
      };
      return function(d2, b2) {
        if (typeof b2 !== "function" && b2 !== null)
          throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
        extendStatics(d2, b2);
        function __() {
          this.constructor = d2;
        }
        d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
      };
    }();
    __spreadArray = function(to, from) {
      for (var i2 = 0, il = from.length, j2 = to.length; i2 < il; i2++, j2++)
        to[j2] = from[i2];
      return to;
    };
    __defProp = Object.defineProperty;
    __getOwnPropSymbols = Object.getOwnPropertySymbols;
    __hasOwnProp = Object.prototype.hasOwnProperty;
    __propIsEnum = Object.prototype.propertyIsEnumerable;
    __defNormalProp = function(obj, key, value) {
      return key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    };
    __spreadValues = function(a2, b2) {
      for (var prop in b2 || (b2 = {}))
        if (__hasOwnProp.call(b2, prop))
          __defNormalProp(a2, prop, b2[prop]);
      if (__getOwnPropSymbols)
        for (var _i = 0, _c = __getOwnPropSymbols(b2); _i < _c.length; _i++) {
          var prop = _c[_i];
          if (__propIsEnum.call(b2, prop))
            __defNormalProp(a2, prop, b2[prop]);
        }
      return a2;
    };
    composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
      if (arguments.length === 0)
        return void 0;
      if (typeof arguments[0] === "object")
        return compose;
      return compose.apply(null, arguments);
    };
    devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
      return function(noop22) {
        return noop22;
      };
    };
    MiddlewareArray = /** @class */
    function(_super) {
      __extends(MiddlewareArray2, _super);
      function MiddlewareArray2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        var _this = _super.apply(this, args) || this;
        Object.setPrototypeOf(_this, MiddlewareArray2.prototype);
        return _this;
      }
      Object.defineProperty(MiddlewareArray2, Symbol.species, {
        get: function() {
          return MiddlewareArray2;
        },
        enumerable: false,
        configurable: true
      });
      MiddlewareArray2.prototype.concat = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          arr[_i] = arguments[_i];
        }
        return _super.prototype.concat.apply(this, arr);
      };
      MiddlewareArray2.prototype.prepend = function() {
        var arr = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          arr[_i] = arguments[_i];
        }
        if (arr.length === 1 && Array.isArray(arr[0])) {
          return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr[0].concat(this))))();
        }
        return new (MiddlewareArray2.bind.apply(MiddlewareArray2, __spreadArray([void 0], arr.concat(this))))();
      };
      return MiddlewareArray2;
    }(Array);
    isProduction = false;
    prefix = "Invariant failed";
    IS_PRODUCTION = false;
    listener = "listener";
    completed = "completed";
    cancelled = "cancelled";
    taskCancelled = "task-" + cancelled;
    taskCompleted = "task-" + completed;
    listenerCancelled = listener + "-" + cancelled;
    listenerCompleted = listener + "-" + completed;
    alm = "listenerMiddleware";
    addListener = createAction(alm + "/add");
    clearAllListeners = createAction(alm + "/removeAll");
    removeListener = createAction(alm + "/remove");
    F();
  }
});

// node_modules/@frontegg/redux-store/auth/utils.js
var resetStateByKey, typeReducer, typeReducerForKey, typeReducerNestedKey, loadersReducerForKey, errorsReducerForKey, dialogStateForKey, dialogStateForKeyWithoutPayload, delay, chars, lookup, base64urlEncode, base64urlDecode, publicKeyCredentialToJSON;
var init_utils = __esm({
  "node_modules/@frontegg/redux-store/auth/utils.js"() {
    init_extends();
    resetStateByKey = (key, initialState9) => (state) => _extends({}, state, {
      [key]: initialState9[key]
    });
    typeReducer = (key) => (state, {
      payload
    }) => _extends({}, state, {
      [key]: payload
    });
    typeReducerForKey = (key) => ({
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, {
        payload
      }) => {
        return _extends({}, state, {
          [key]: _extends({}, state[key], payload)
        });
      }
    });
    typeReducerNestedKey = (key, nestedKey) => ({
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, {
        payload
      }) => {
        var _state$key;
        return _extends({}, state, {
          [key]: _extends({}, state[key], {
            [nestedKey]: _extends({}, state == null ? void 0 : (_state$key = state[key]) == null ? void 0 : _state$key[nestedKey], payload)
          })
        });
      }
    });
    loadersReducerForKey = (key) => ({
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, {
        payload
      }) => {
        var _state$key2, _payload$value;
        return _extends({}, state, {
          [key]: _extends({}, state[key], {
            loaders: _extends({}, (_state$key2 = state[key]) == null ? void 0 : _state$key2.loaders, {
              [payload.key]: (_payload$value = payload.value) != null ? _payload$value : true
            })
          })
        });
      }
    });
    errorsReducerForKey = (key) => ({
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, {
        payload
      }) => {
        var _payload$value2;
        return _extends({}, state, {
          [key]: _extends({}, state[key], {
            errors: _extends({}, state[key].errors, {
              [payload.key]: (_payload$value2 = payload.value) != null ? _payload$value2 : true
            })
          })
        });
      }
    });
    dialogStateForKey = (key, dialogKey, dialogState) => ({
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, {
        payload
      }) => {
        var _state$key3;
        return _extends({}, state, {
          [key]: _extends({}, state[key], {
            [dialogKey]: _extends({}, state == null ? void 0 : (_state$key3 = state[key]) == null ? void 0 : _state$key3[dialogKey], payload, dialogState)
          })
        });
      }
    });
    dialogStateForKeyWithoutPayload = (key, dialogKey, dialogState) => (state) => {
      var _state$key4;
      return _extends({}, state, {
        [key]: _extends({}, state[key], {
          [dialogKey]: _extends({}, state == null ? void 0 : (_state$key4 = state[key]) == null ? void 0 : _state$key4[dialogKey], dialogState)
        })
      });
    };
    delay = (delayTime = 500) => new Promise((resolve) => setTimeout(resolve, delayTime));
    chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_";
    lookup = new Uint8Array(256);
    for (let i2 = 0; i2 < chars.length; i2++) {
      lookup[chars.charCodeAt(i2)] = i2;
    }
    base64urlEncode = (arraybuffer) => {
      const bytes = new Uint8Array(arraybuffer);
      const len = bytes.length;
      let i2;
      let base64url = "";
      for (i2 = 0; i2 < len; i2 += 3) {
        base64url += chars[bytes[i2] >> 2];
        base64url += chars[(bytes[i2] & 3) << 4 | bytes[i2 + 1] >> 4];
        base64url += chars[(bytes[i2 + 1] & 15) << 2 | bytes[i2 + 2] >> 6];
        base64url += chars[bytes[i2 + 2] & 63];
      }
      if (len % 3 === 2) {
        base64url = base64url.substring(0, base64url.length - 1);
      } else if (len % 3 === 1) {
        base64url = base64url.substring(0, base64url.length - 2);
      }
      return base64url;
    };
    base64urlDecode = (base64string) => {
      const bufferLength = base64string.length * 0.75;
      const len = base64string.length;
      let i2, p2 = 0, encoded1, encoded2, encoded3, encoded4;
      const bytes = new Uint8Array(bufferLength);
      for (i2 = 0; i2 < len; i2 += 4) {
        encoded1 = lookup[base64string.charCodeAt(i2)];
        encoded2 = lookup[base64string.charCodeAt(i2 + 1)];
        encoded3 = lookup[base64string.charCodeAt(i2 + 2)];
        encoded4 = lookup[base64string.charCodeAt(i2 + 3)];
        bytes[p2++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p2++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p2++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }
      return bytes.buffer;
    };
    publicKeyCredentialToJSON = (pubKeyCred) => {
      if (pubKeyCred instanceof Array) {
        const arr = [];
        for (const i2 of pubKeyCred) {
          arr.push(publicKeyCredentialToJSON(i2));
        }
        return arr;
      } else if (pubKeyCred instanceof ArrayBuffer) {
        return base64urlEncode(pubKeyCred);
      } else if (pubKeyCred instanceof Object) {
        const obj = {};
        for (const key in pubKeyCred) {
          obj[key] = publicKeyCredentialToJSON(pubKeyCred[key]);
        }
        return obj;
      }
      return pubKeyCred;
    };
  }
});

// node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
var init_objectWithoutPropertiesLoose = __esm({
  "node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"() {
  }
});

// node_modules/@frontegg/rest-api/ContextHolder/index.js
var ContextHolder, FronteggContext;
var init_ContextHolder = __esm({
  "node_modules/@frontegg/rest-api/ContextHolder/index.js"() {
    ContextHolder = class _ContextHolder {
      constructor() {
        this.context = null;
        this.accessToken = null;
        this.user = null;
        this.requestSource = null;
        this.onRedirectTo = (path) => window.location.href = path;
        this.logout = () => window.location.href = "/account/logout";
        this.entitlementsOptions = null;
        this.appName = null;
        this.sessionContext = void 0;
      }
      static getInstance() {
        if (!_ContextHolder.instance) {
          _ContextHolder.instance = new _ContextHolder();
        }
        return _ContextHolder.instance;
      }
      static setContext(context) {
        _ContextHolder.getInstance().context = context;
      }
      static setAccessToken(accessToken) {
        _ContextHolder.getInstance().accessToken = accessToken;
      }
      static setUser(user) {
        _ContextHolder.getInstance().user = user;
      }
      static setRequestSource(requestSource) {
        _ContextHolder.getInstance().requestSource = requestSource;
      }
      static setOnRedirectTo(onRedirectTo) {
        _ContextHolder.getInstance().onRedirectTo = onRedirectTo;
      }
      static setLogout(logout3, logoutUrl) {
        _ContextHolder.getInstance().logout = (callback) => {
          if (!callback) {
            _ContextHolder.onRedirectTo(logoutUrl);
          } else {
            logout3(callback);
          }
        };
      }
      static setEntitlementsOptions(entitlementsOptions) {
        _ContextHolder.getInstance().entitlementsOptions = entitlementsOptions;
      }
      static setSessionContext(sessionContext) {
        const instance = _ContextHolder.getInstance();
        instance.sessionContext = sessionContext;
      }
      static setAppName(appName) {
        _ContextHolder.getInstance().appName = appName;
      }
      static getContext() {
        var _ContextHolder$getIns;
        return (_ContextHolder$getIns = _ContextHolder.getInstance().context) != null ? _ContextHolder$getIns : {
          baseUrl: window.location.href,
          tokenResolver: () => "my-authentication-token",
          logLevel: "error"
        };
      }
      static getAccessToken() {
        return _ContextHolder.getInstance().accessToken;
      }
      static getRequestSource() {
        return _ContextHolder.getInstance().requestSource;
      }
      static getUser() {
        return _ContextHolder.getInstance().user;
      }
      static onRedirectTo(path, opts) {
        return _ContextHolder.getInstance().onRedirectTo(path, opts);
      }
      static logout(callback) {
        return _ContextHolder.getInstance().logout(callback);
      }
      static shouldLoadEntitlements() {
        var _ContextHolder$getIns2;
        return ((_ContextHolder$getIns2 = _ContextHolder.getInstance().entitlementsOptions) == null ? void 0 : _ContextHolder$getIns2.enabled) || false;
      }
      static isSessionPerTenantEnabled() {
        var _ContextHolder$getIns3;
        return ((_ContextHolder$getIns3 = _ContextHolder.getInstance().sessionContext) == null ? void 0 : _ContextHolder$getIns3.enableSessionPerTenant) || false;
      }
      static getAppName() {
        return _ContextHolder.getInstance().appName;
      }
    };
    ContextHolder.instance = void 0;
    FronteggContext = {
      getContext: () => ContextHolder.getContext(),
      getAccessToken: () => ContextHolder.getAccessToken(),
      getUser: () => ContextHolder.getUser(),
      onRedirectTo: (path, opts) => ContextHolder.onRedirectTo(path, opts),
      logout: (callback) => ContextHolder.logout(callback)
    };
  }
});

// node_modules/@frontegg/rest-api/interfaces.js
var fronteggHeaders, RequestSource, FronteggFrameworks, PaginationOrderEnum;
var init_interfaces = __esm({
  "node_modules/@frontegg/rest-api/interfaces.js"() {
    fronteggHeaders = {
      frameWork: "x-frontegg-framework",
      fronteggSdkVersion: "x-frontegg-sdk",
      contentType: "Content-Type",
      source: "frontegg-source",
      scopedTenant: "frontegg-scoped-tenant"
    };
    (function(RequestSource2) {
      RequestSource2["AdminPortal"] = "admin-portal";
      RequestSource2["LoginBox"] = "login-box";
    })(RequestSource || (RequestSource = {}));
    (function(FronteggFrameworks2) {
      FronteggFrameworks2["Nextjs"] = "nextjs";
      FronteggFrameworks2["React"] = "react";
      FronteggFrameworks2["Angular"] = "angular";
      FronteggFrameworks2["Vuejs"] = "vuejs";
      FronteggFrameworks2["Flutter"] = "flutter";
      FronteggFrameworks2["Ios"] = "ios";
      FronteggFrameworks2["Android"] = "android";
      FronteggFrameworks2["Vanillajs"] = "vanillajs";
    })(FronteggFrameworks || (FronteggFrameworks = {}));
    (function(PaginationOrderEnum2) {
      PaginationOrderEnum2["ASC"] = "ASC";
      PaginationOrderEnum2["DESC"] = "DESC";
    })(PaginationOrderEnum || (PaginationOrderEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/error.js
var FronteggApiError;
var init_error = __esm({
  "node_modules/@frontegg/rest-api/error.js"() {
    FronteggApiError = class extends Error {
      constructor(message, statusCode) {
        super(message);
        this._statusCode = void 0;
        this._statusCode = statusCode;
      }
      get statusCode() {
        return this._statusCode;
      }
    };
  }
});

// node_modules/@frontegg/rest-api/constants.js
var urls, GENERIC_ERROR_MESSAGE;
var init_constants = __esm({
  "node_modules/@frontegg/rest-api/constants.js"() {
    urls = {
      vendor: "/vendors",
      identity: {
        webAuthnDevices: {
          v1: "/identity/resources/users/webauthn/v1/devices"
        },
        auth: {
          v1: "/identity/resources/auth/v1",
          v2: "/identity/resources/auth/v2"
        },
        users: {
          v1: "/identity/resources/users/v1",
          v2: "/identity/resources/users/v2",
          v3: "/identity/resources/users/v3",
          roles: {
            v3: "/identity/resources/users/v3/roles"
          },
          groups: {
            v3: "/identity/resources/users/v3/groups"
          },
          tenants: {
            me: {
              v1: "/identity/resources/users/v1/me/tenants",
              v3: "/identity/resources/users/v3/me/tenants"
            }
          },
          apiTokens: {
            v1: "/identity/resources/users/api-tokens/v1"
          },
          accessTokens: {
            v1: "/identity/resources/users/access-tokens/v1"
          },
          sessions: {
            v1: "/identity/resources/users/sessions/v1",
            currentUser: {
              v1: "/identity/resources/users/sessions/v1/me"
            },
            configurations: {
              v1: "/identity/resources/configurations/sessions/v1"
            }
          },
          invitation: {
            resendAll: {
              v1: "/identity/resources/users/v1/invitation/reset/all"
            }
          },
          passwords: {
            resetBreachedPasswords: {
              v1: "/identity/resources/users/v1/passwords/breached/reset/bulk"
            }
          },
          authorization: {
            v1: "/identity/resources/users/v1/me/authorization"
          },
          temporary: {
            v1: "/identity/resources/users/temporary/v1",
            configuration: {
              v1: "/identity/resources/users/temporary/v1/configuration"
            }
          }
        },
        configurations: {
          v1: "/identity/resources/configurations/v1"
        },
        restrictions: {
          emailDomain: {
            v1: "/identity/resources/configurations/restrictions/v1/email-domain"
          },
          ip: {
            v1: "/identity/resources/configurations/v1/restrictions/ip"
          }
        },
        sso: {
          v1: "/identity/resources/sso/v1",
          v2: "/identity/resources/sso/v2",
          custom: {
            v1: "/identity/resources/sso/custom/v1"
          }
        },
        permissions: {
          v1: "/identity/resources/permissions/v1"
        },
        tenants: {
          apiTokens: {
            v1: "/identity/resources/tenants/api-tokens/v1",
            v2: "/identity/resources/tenants/api-tokens/v2"
          },
          accessTokens: {
            v1: "/identity/resources/tenants/access-tokens/v1"
          },
          invites: {
            user: {
              v1: "/identity/resources/tenants/invites/v1/user"
            },
            verify: {
              v1: "/identity/resources/tenants/invites/v1/verify"
            },
            configuration: {
              v1: "/identity/resources/tenants/invites/v1/configuration"
            }
          },
          users: {
            v1: "/identity/resources/tenants/users/v1"
          }
        },
        roles: {
          v1: "/identity/resources/roles/v1"
        },
        subTenants: {
          v1: "/identity/resources/sub-tenants/users/v1",
          v2: "/identity/resources/sub-tenants/users/v2"
        },
        impersonate: {
          v1: "/identity/resources/impersonation/v1"
        },
        groups: {
          v1: "/identity/resources/groups/v1",
          configurations: {
            v1: "/identity/resources/groups/v1/config"
          },
          getByIds: {
            v1: "/identity/resources/groups/v1/bulkGet"
          }
        },
        phoneNumbers: {
          v1: "/identity/resources/users/phone-numbers/v1"
        }
      },
      team: {
        sso: {
          v1: "/team/resources/sso/v1",
          v2: "/team/resources/sso/v2"
        },
        members: {
          v1: "/team/resources/members/v1"
        },
        roles: {
          v1: "/team/resources/roles/v1"
        },
        stats: {
          v1: "/team/resources/stats/v1"
        },
        profile: {
          v1: "/team/resources/profile"
        }
      },
      tenants: {
        accountSettings: {
          v1: "/tenants/resources/account-settings/v1"
        },
        hierarchy: {
          v1: "/tenants/resources/hierarchy/v1",
          tree: {
            v1: "/tenants/resources/hierarchy/v1/tree"
          },
          parents: {
            v1: "/tenants/resources/hierarchy/v1/parents"
          },
          v2: "/tenants/resources/hierarchy/v2",
          metadata: {
            v2: "/tenants/resources/hierarchy/v2/metadata"
          }
        },
        subTenants: {
          v1: "/tenants/resources/sub-tenants/v1"
        }
      },
      integrations: {
        configurations: {
          v1: "/integrations/resources/configurations/v1",
          v2: "/integrations/resources/configurations/v2"
        }
      },
      subscriptions: {
        billing: {
          subscriptions: {
            v1: "/subscriptions/resources/billing/subscriptions/v1"
          },
          plans: {
            v1: "/subscriptions/resources/billing/plans/v1"
          },
          invoices: {
            v1: "/subscriptions/resources/billing/invoices/v1"
          },
          paymentMethods: {
            v1: "/subscriptions/resources/billing/payment-methods/v1"
          },
          summaries: {
            v1: "/subscriptions/resources/billing/summaries/v1"
          },
          tenantConfiguration: {
            v1: "/subscriptions/resources/billing/tenant-configurations/v1"
          },
          configurations: {
            vendorPublicConfigurations: {
              v1: "/subscriptions/resources/billing/configurations/vendor-public-configurations/v1"
            }
          },
          paymentProviders: {
            stripe: {
              customers: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/customers/v1"
              },
              publicConfigurations: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/public-configurations/v1"
              },
              subscriptions: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/subscriptions/v1"
              },
              setupIntents: {
                v1: "/subscriptions/resources/billing/payment-providers/stripe/setup-intents/v1"
              }
            }
          }
        },
        paymentProviders: {
          v1: "/subscriptions/resources/payment-providers/v1"
        },
        managedSubscriptions: {
          v1: "/subscriptions/resources/subscriptions/v1"
        }
      },
      reports: {
        service: {
          v1: "/reports/resources/reports/v1",
          v2: "/reports/resources/reports/v2"
        },
        trigger: {
          v1: "/reports/engine/resources/triggers/v1"
        }
      },
      notifications: {
        v1: "/notification"
      },
      audits: {
        v1: "/audits"
      },
      events: {
        configurations: {
          v1: "/event/resources/configurations/v1"
        }
      },
      webhooks: {
        v1: "/webhook"
      },
      oauth: {
        v1: "/oauth"
      },
      featureFlags: {
        v1: "/flags"
      },
      directory: {
        v1: "/directory/resources/v1/configurations/scim2",
        temp: "/directory/resources/scim/temp"
      },
      entitlements: {
        v1: "/entitlements/api/v1/user-entitlements",
        v2: "/entitlements/api/v2/user-entitlements"
      },
      securityCenter: {
        recommendations: {
          v1: "/security-center/resources/recommendations/v1"
        },
        insights: {
          v1: "/security-center/resources/insights/v1"
        }
      }
    };
    GENERIC_ERROR_MESSAGE = `We're facing some difficulties, Please try again`;
  }
});

// node_modules/@frontegg/rest-api/fetch.js
var fetch_exports = {};
__export(fetch_exports, {
  Delete: () => Delete,
  Get: () => Get,
  Patch: () => Patch,
  Post: () => Post,
  PostDownload: () => PostDownload,
  Put: () => Put,
  extractHeadersFromOptions: () => extractHeadersFromOptions,
  getBaseUrl: () => getBaseUrl,
  getMetadataHeaders: () => getMetadataHeaders,
  getScopedTenant: () => getScopedTenant
});
function getBaseUrl(context, url, withFronteggPrefix = true) {
  let baseUrl;
  if (typeof context.baseUrl === "function") {
    baseUrl = context.baseUrl(url);
  } else {
    baseUrl = context.baseUrl;
  }
  const prefix2 = context.urlPrefix || "frontegg";
  const removePrefix = prefix2 === "frontegg" && !withFronteggPrefix;
  if (!baseUrl.endsWith("/")) {
    baseUrl += "/";
  }
  if (!baseUrl.endsWith(prefix2) && !removePrefix) {
    baseUrl += prefix2;
  }
  return baseUrl;
}
async function prepareUrl(context, url, params) {
  const baseUrl = getBaseUrl(context, url);
  const paramsToSend = await buildQueryParams(context, params);
  let finalUrl = url.startsWith("http") ? url : `${baseUrl}${url}`;
  const hasKeys = Object.keys(paramsToSend).length > 0;
  if (paramsToSend && hasKeys) {
    const urlParams = new URLSearchParams(paramsToSend);
    finalUrl += `?${urlParams}`;
  }
  return finalUrl;
}
function getMetadataHeaders(context) {
  var _context$metadataHead, _context$metadataHead2;
  const headers = {};
  if (context != null && (_context$metadataHead = context.metadataHeaders) != null && _context$metadataHead.fronteggSdkVersion) {
    headers[fronteggHeaders.fronteggSdkVersion] = context.metadataHeaders.fronteggSdkVersion;
  }
  if (context != null && (_context$metadataHead2 = context.metadataHeaders) != null && _context$metadataHead2.framework) {
    headers[fronteggHeaders.frameWork] = context.metadataHeaders.framework;
  }
  return headers;
}
function getScopedTenant() {
  const urlParams = new URLSearchParams(window.location.search);
  const scopedTenant = urlParams.get("tenantId");
  if (scopedTenant) {
    return scopedTenant;
  }
  return null;
}
async function buildRequestHeaders(context, contentType) {
  var _context$tokenResolve;
  const headers = getMetadataHeaders(context);
  const authToken = await ((_context$tokenResolve = context == null ? void 0 : context.tokenResolver) != null ? _context$tokenResolve : ContextHolder.getAccessToken)();
  const requestSource = ContextHolder.getRequestSource();
  const scopedTenant = getScopedTenant();
  if (contentType) {
    headers[fronteggHeaders.contentType] = contentType;
  }
  if (requestSource) {
    headers[fronteggHeaders.source] = requestSource;
  }
  if (authToken) {
    headers.Authorization = `Bearer ${authToken}`;
  }
  if (scopedTenant) {
    headers[fronteggHeaders.scopedTenant] = scopedTenant;
  }
  for (const additionalHeader of await getAdditionalHeaders(context)) {
    headers[`${additionalHeader.key}`] = `${additionalHeader.value}`;
  }
  return headers;
}
async function buildQueryParams(context, params) {
  if (!params) {
    params = {};
  }
  const additionalQueryParams = await getAdditionalQueryParams(context);
  for (const queryParam of additionalQueryParams) {
    params[queryParam.key] = queryParam.value;
  }
  const keys = Object.keys(params);
  for (const key of keys) {
    const value = params[key];
    params[key] = typeof value === "object" ? JSON.stringify(value) : value;
  }
  return params;
}
async function getAdditionalQueryParams(context) {
  let output = [];
  if (context.additionalQueryParamsResolver) {
    output = await context.additionalQueryParamsResolver();
  }
  return output;
}
async function getAdditionalHeaders(context) {
  let output = [];
  if (context.additionalHeadersResolver) {
    output = await context.additionalHeadersResolver();
  }
  if (context.tenantResolver) {
    const resolvedTenantResult = await context.tenantResolver();
    if (!!(resolvedTenantResult != null && resolvedTenantResult.tenant)) {
      output.push({
        key: "frontegg-login-alias",
        value: resolvedTenantResult.tenant
      });
    }
  }
  return output;
}
var sendRequest, Get, Post, Patch, Put, Delete, PostDownload, extractHeadersFromOptions;
var init_fetch = __esm({
  "node_modules/@frontegg/rest-api/fetch.js"() {
    init_extends();
    init_ContextHolder();
    init_interfaces();
    init_error();
    init_constants();
    sendRequest = async (opts) => {
      var _opts$method, _ref, _opts$credentials;
      const context = ContextHolder.getContext();
      const headers = await buildRequestHeaders(context, opts.contentType);
      const url = await prepareUrl(context, opts.url, opts.params);
      const response = await fetch(url, {
        body: opts.body ? opts.contentType === "application/json" ? JSON.stringify(opts.body) : opts.body : null,
        method: (_opts$method = opts.method) != null ? _opts$method : "GET",
        headers: _extends({}, headers, opts.headers),
        credentials: (_ref = (_opts$credentials = opts.credentials) != null ? _opts$credentials : context.requestCredentials) != null ? _ref : "same-origin"
      });
      if (response.status === 302) {
        window.location.href = await response.text();
        return new Promise(() => {
        });
      }
      if (!response.ok) {
        var _context$logLevel, _context$logLevel2;
        if (response.status === 413) {
          throw new FronteggApiError("Error request is too large", response.status);
        }
        let errorMessage;
        let isJsonResponse = true;
        try {
          errorMessage = await response.text();
          errorMessage = JSON.parse(errorMessage);
        } catch (e2) {
          isJsonResponse = false;
        }
        if (errorMessage.errors) {
          errorMessage = errorMessage.errors.join(", ");
        } else if (typeof errorMessage !== "string") {
          errorMessage = `Error ${response.status} - ${response.statusText}`;
        }
        if (response.status >= 400 && response.status < 500 && ["warn"].includes((_context$logLevel = context.logLevel) != null ? _context$logLevel : ""))
          console.warn(errorMessage);
        else if (response.status === 500 && ["warn", "error"].includes((_context$logLevel2 = context.logLevel) != null ? _context$logLevel2 : ""))
          console.error(errorMessage);
        throw new FronteggApiError(isJsonResponse ? errorMessage : GENERIC_ERROR_MESSAGE, response.status);
      }
      if (!opts.responseType || opts.responseType === "json") {
        try {
          return await response.json();
        } catch (e2) {
          return {};
        }
      } else if (opts.responseType === "blob") {
        const {
          outputFileName
        } = opts.params;
        return await response.blob().then((blob) => URL.createObjectURL(blob)).then((url2) => {
          const tempLink = document.createElement("a");
          tempLink.href = url2;
          tempLink.setAttribute("download", outputFileName || "output");
          tempLink.click();
        });
      } else {
        return await response.text();
      }
    };
    Get = async (url, params, opts) => sendRequest(_extends({
      url,
      method: "GET",
      contentType: "application/json",
      params
    }, opts));
    Post = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "POST",
      contentType: "application/json",
      body
    }, opts));
    Patch = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "PATCH",
      contentType: "application/json",
      body
    }, opts));
    Put = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "PUT",
      contentType: "application/json",
      body
    }, opts));
    Delete = async (url, body, opts) => sendRequest(_extends({
      url,
      method: "DELETE",
      contentType: "application/json",
      body
    }, opts));
    PostDownload = async (url, body, params, opts) => sendRequest(_extends({
      url,
      method: "POST",
      contentType: "application/json",
      responseType: "blob",
      body,
      params
    }, opts));
    extractHeadersFromOptions = (options = {}) => _extends({}, options.jwt ? {
      Authorization: options.jwt
    } : {});
  }
});

// node_modules/@frontegg/rest-api/auth/constants.js
var FRONTEGG_SEPARATE_TABS_BY_TENANT, USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF, USE_ENTITLEMENTS_V2_ENDPOINT_FF;
var init_constants2 = __esm({
  "node_modules/@frontegg/rest-api/auth/constants.js"() {
    FRONTEGG_SEPARATE_TABS_BY_TENANT = "FRONTEGG_SEPARATE_TABS_BY_TENANT";
    USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF = "admin_portal_use_current_user_tenants_v1_endpoint";
    USE_ENTITLEMENTS_V2_ENDPOINT_FF = "admin_portal_use_entitlements_v2_endpoint";
  }
});

// node_modules/@frontegg/rest-api/feature-flags/index.js
var feature_flags_exports = {};
__export(feature_flags_exports, {
  FeatureFlags: () => FeatureFlags,
  loadFeatureFlags: () => loadFeatureFlags
});
async function loadFeatureFlags() {
  return Get(urls.featureFlags.v1);
}
var defaultFeatureFlags, FeatureFlags;
var init_feature_flags = __esm({
  "node_modules/@frontegg/rest-api/feature-flags/index.js"() {
    init_extends();
    init_constants();
    init_fetch();
    defaultFeatureFlags = {
      flags: {}
    };
    FeatureFlags = class _FeatureFlags {
      constructor() {
        var _defaultFeatureFlags$;
        this._flags = {};
        this._flags = (_defaultFeatureFlags$ = defaultFeatureFlags.flags) != null ? _defaultFeatureFlags$ : {};
      }
      static getInstance(name10 = "default") {
        return this._instances[name10];
      }
      static set(featureFlags, name10 = "default") {
        const featureFlagsInstance = new _FeatureFlags();
        featureFlagsInstance.set(featureFlags);
        _FeatureFlags._instances[name10] = featureFlagsInstance;
        return featureFlagsInstance;
      }
      static getFeatureFlags(flags, name10) {
        const featureFlagsInstance = this.getInstance(name10);
        return flags.map((flag) => (featureFlagsInstance == null ? void 0 : featureFlagsInstance._flags[flag]) === "on");
      }
      get flags() {
        var _this$flags;
        return (_this$flags = this.flags) != null ? _this$flags : {};
      }
      set(featureFlags) {
        var _defaultFeatureFlags$2;
        this._flags = _extends({}, (_defaultFeatureFlags$2 = defaultFeatureFlags == null ? void 0 : defaultFeatureFlags.flags) != null ? _defaultFeatureFlags$2 : {}, featureFlags != null ? featureFlags : {});
      }
    };
    FeatureFlags._instances = {};
  }
});

// node_modules/@frontegg/rest-api/users/index.js
var users_exports = {};
__export(users_exports, {
  GetUserJwt: () => GetUserJwt,
  getCurrentUserTenantsV1: () => getCurrentUserTenantsV1,
  getCurrentUserTenantsV3: () => getCurrentUserTenantsV3,
  getUsersGroups: () => getUsersGroups,
  getUsersRoles: () => getUsersRoles,
  getUsersV2: () => getUsersV2,
  getUsersV3: () => getUsersV3,
  sendResetBreachedPasswordEmails: () => sendResetBreachedPasswordEmails,
  updateUserProfileV2: () => updateUserProfileV2
});
async function GetUserJwt(body) {
  return Post(`${urls.identity.users.v3}/me/token`, body);
}
async function getUsersV2(queryParams, options) {
  return Get(urls.identity.users.v2, queryParams, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getUsersV3(queryParams, options) {
  return Get(urls.identity.users.v3, queryParams, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getUsersRoles(queryParams, options) {
  return Get(urls.identity.users.roles.v3, _extends({}, queryParams, {
    ids: queryParams.ids.join(",")
  }), {
    headers: extractHeadersFromOptions(options)
  });
}
async function getUsersGroups(queryParams, options) {
  return Get(urls.identity.users.groups.v3, _extends({}, queryParams, {
    ids: queryParams.ids.join(",")
  }), {
    headers: extractHeadersFromOptions(options)
  });
}
async function getCurrentUserTenantsV3(options) {
  return Get(urls.identity.users.tenants.me.v3, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getCurrentUserTenantsV1(options) {
  return Get(urls.identity.users.tenants.me.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function sendResetBreachedPasswordEmails() {
  return Post(urls.identity.users.passwords.resetBreachedPasswords.v1);
}
async function updateUserProfileV2(body) {
  return Put(`${urls.identity.users.v2}/me`, body);
}
var init_users = __esm({
  "node_modules/@frontegg/rest-api/users/index.js"() {
    init_extends();
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/auth/utils.js
async function executeConditionalPromise({
  shouldLoad,
  action
}) {
  if (!shouldLoad)
    return;
  return await action();
}
function setTabTenantInSessionStorage(tenantId) {
  if (!tenantId) {
    return;
  }
  sessionStorage.setItem(FRONTEGG_SEPARATE_TABS_BY_TENANT, tenantId);
}
function getTabTenantFromSessionStorage() {
  if (!ContextHolder.isSessionPerTenantEnabled()) {
    return null;
  }
  return sessionStorage.getItem(FRONTEGG_SEPARATE_TABS_BY_TENANT);
}
function getCurrentUserTenantsFunction() {
  const [useCurrentUserTenantsV1] = FeatureFlags.getFeatureFlags([USE_CURRENT_USER_TENANTS_V1_ENDPOINT_FF], ContextHolder.getAppName() || "");
  if (ContextHolder.isSessionPerTenantEnabled()) {
    return getCurrentUserTenantsV1;
  }
  return useCurrentUserTenantsV1 ? getCurrentUserTenantsV1 : getCurrentUserTenantsV3;
}
var init_utils2 = __esm({
  "node_modules/@frontegg/rest-api/auth/utils.js"() {
    init_ContextHolder();
    init_constants2();
    init_feature_flags();
    init_users();
    init_constants2();
  }
});

// node_modules/@frontegg/rest-api/tenants/index.js
var tenants_exports = {};
__export(tenants_exports, {
  getHierarchyMetadata: () => getHierarchyMetadata,
  getParentTenants: () => getParentTenants,
  getParentTenantsById: () => getParentTenantsById,
  getSubTenants: () => getSubTenants,
  getSubTenantsAsTree: () => getSubTenantsAsTree,
  getTenants: () => getTenants,
  getTenantsUsersCount: () => getTenantsUsersCount,
  searchSubTenants: () => searchSubTenants,
  switchTenant: () => switchTenant
});
async function switchTenant(body) {
  if (ContextHolder.isSessionPerTenantEnabled()) {
    setTabTenantInSessionStorage(body.tenantId);
  }
  return Put(`${urls.identity.users.v1}/tenant`, body);
}
async function getTenants() {
  return Get(`${urls.identity.users.v2}/me/tenants`);
}
async function getSubTenants(options) {
  return Get(urls.tenants.hierarchy.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getSubTenantsAsTree(options) {
  return Get(urls.tenants.hierarchy.tree.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getParentTenants(options) {
  return Get(urls.tenants.hierarchy.parents.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getParentTenantsById(tenantId, options) {
  return Get(`${urls.tenants.hierarchy.parents.v1}/${tenantId}`, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getTenantsUsersCount(body, options) {
  return Post(`${urls.identity.tenants.users.v1}/count`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function searchSubTenants(params, options) {
  return Get(urls.tenants.hierarchy.v2, params, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getHierarchyMetadata(params, options) {
  return Get(urls.tenants.hierarchy.metadata.v2, _extends({}, params, {
    _tenantIds: params._tenantIds.join(",")
  }), {
    headers: extractHeadersFromOptions(options)
  });
}
var init_tenants = __esm({
  "node_modules/@frontegg/rest-api/tenants/index.js"() {
    init_extends();
    init_fetch();
    init_constants();
    init_utils2();
    init_ContextHolder();
  }
});

// node_modules/@frontegg/rest-api/auth/secutiry-poilicy/index.js
async function getGlobalSecurityPolicy() {
  return Get(urls.identity.configurations.v1);
}
async function getMfaPolicy() {
  return Get(`${urls.identity.configurations.v1}/mfa-policy`);
}
async function getVendorMfaPolicy() {
  return Get(`${urls.identity.configurations.v1}/mfa-policy/vendor`);
}
async function saveMfaPolicy(body) {
  if (body.id) {
    return Patch(`${urls.identity.configurations.v1}/mfa-policy`, body);
  } else {
    return Post(`${urls.identity.configurations.v1}/mfa-policy`, body);
  }
}
async function getLockoutPolicy() {
  return Get(`${urls.identity.configurations.v1}/lockout-policy`);
}
async function getVendorLockoutPolicy() {
  return Get(`${urls.identity.configurations.v1}/lockout-policy/vendor`);
}
async function saveLockoutPolicy(body) {
  if (body.id) {
    return Patch(`${urls.identity.configurations.v1}/lockout-policy`, body);
  } else {
    return Post(`${urls.identity.configurations.v1}/lockout-policy`, body);
  }
}
async function getCaptchaPolicy() {
  try {
    return await Get(`${urls.identity.configurations.v1}/captcha-policy/public`);
  } catch {
    return null;
  }
}
async function getPasswordHistoryPolicy() {
  return Get(`${urls.identity.configurations.v1}/password-history-policy`);
}
async function getVendorPasswordHistoryPolicy() {
  return Get(`${urls.identity.configurations.v1}/password-history-policy/vendor`);
}
async function savePasswordHistoryPolicy(body) {
  if (body.id) {
    return Patch(`${urls.identity.configurations.v1}/password-history-policy`, body);
  } else {
    return Post(`${urls.identity.configurations.v1}/password-history-policy`, body);
  }
}
async function getPasswordConfigPolicy() {
  return Get(`${urls.identity.configurations.v1}/password`);
}
async function getDomainRestrictions() {
  return Get(`${urls.identity.restrictions.emailDomain.v1}`);
}
async function getDomainRestrictionsConfig() {
  return Get(`${urls.identity.restrictions.emailDomain.v1}/config`);
}
async function createDomainRestriction(body) {
  return Post(`${urls.identity.restrictions.emailDomain.v1}`, body);
}
async function updateDomainRestrictionConfig(body) {
  return Post(`${urls.identity.restrictions.emailDomain.v1}/config`, body);
}
async function deleteDomainRestriction(id) {
  return Delete(`${urls.identity.restrictions.emailDomain.v1}/${id}`);
}
async function getIPRestrictions(params) {
  return Get(`${urls.identity.restrictions.ip.v1}`, params);
}
async function getIPRestrictionsConfig() {
  return Get(`${urls.identity.restrictions.ip.v1}/config`);
}
async function createIPRestriction(body) {
  return Post(`${urls.identity.restrictions.ip.v1}`, body);
}
async function bulkCreateIPRestriction(body) {
  return Post(`${urls.identity.restrictions.ip.v1}/bulk`, body);
}
async function updateIPRestrictionConfig(body) {
  return Post(`${urls.identity.restrictions.ip.v1}/config`, body);
}
async function deleteIPRestriction(id) {
  return Delete(`${urls.identity.restrictions.ip.v1}/${id}`);
}
async function testCurrentIp() {
  return Post(`${urls.identity.restrictions.ip.v1}/verify`);
}
async function testCurrentIpInAllowList() {
  return Post(`${urls.identity.restrictions.ip.v1}/verify/allow`);
}
var init_secutiry_poilicy = __esm({
  "node_modules/@frontegg/rest-api/auth/secutiry-poilicy/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/auth/enums.js
var SocialLoginProviders, AuthStrategyEnum, MachineToMachineAuthStrategy;
var init_enums = __esm({
  "node_modules/@frontegg/rest-api/auth/enums.js"() {
    (function(SocialLoginProviders2) {
      SocialLoginProviders2["Microsoft"] = "microsoft";
      SocialLoginProviders2["Facebook"] = "facebook";
      SocialLoginProviders2["Google"] = "google";
      SocialLoginProviders2["Github"] = "github";
      SocialLoginProviders2["Slack"] = "slack";
      SocialLoginProviders2["Apple"] = "apple";
      SocialLoginProviders2["Linkedin"] = "linkedin";
    })(SocialLoginProviders || (SocialLoginProviders = {}));
    (function(AuthStrategyEnum2) {
      AuthStrategyEnum2["EmailAndPassword"] = "EmailAndPassword";
      AuthStrategyEnum2["MagicLink"] = "MagicLink";
      AuthStrategyEnum2["Code"] = "Code";
      AuthStrategyEnum2["NoLocalAuthentication"] = "NoLocalAuthentication";
      AuthStrategyEnum2["SmsCode"] = "SmsCode";
    })(AuthStrategyEnum || (AuthStrategyEnum = {}));
    (function(MachineToMachineAuthStrategy2) {
      MachineToMachineAuthStrategy2["ClientCredentials"] = "ClientCredentials";
      MachineToMachineAuthStrategy2["AccessToken"] = "AccessToken";
    })(MachineToMachineAuthStrategy || (MachineToMachineAuthStrategy = {}));
  }
});

// node_modules/@frontegg/rest-api/jwt.js
function polyfill(input) {
  const str = String(input).replace(/=+$/, "");
  if (str.length % 4 === 1) {
    throw new InvalidCharacterError("'atob' failed: The string to be decoded is not correctly encoded.");
  }
  let output = "";
  for (let bc = 0, bs, buffer3, idx = 0; buffer3 = str.charAt(idx++); ~buffer3 && (bs = bc % 4 ? bs * 64 + buffer3 : buffer3, bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0) {
    buffer3 = chars2.indexOf(buffer3);
  }
  return output;
}
function b64DecodeUnicode(str) {
  return decodeURIComponent(atob2(str).replace(/(.)/g, (m2, p2) => {
    let code = p2.charCodeAt(0).toString(16).toUpperCase();
    if (code.length < 2) {
      code = "0" + code;
    }
    return "%" + code;
  }));
}
var chars2, InvalidCharacterError, atob2, base64UrlDecode, InvalidTokenError, jwtDecode;
var init_jwt = __esm({
  "node_modules/@frontegg/rest-api/jwt.js"() {
    chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    InvalidCharacterError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    atob2 = typeof window !== "undefined" && window.atob && window.atob.bind(window) || polyfill;
    base64UrlDecode = (str) => {
      let output = str.replace(/-/g, "+").replace(/_/g, "/");
      switch (output.length % 4) {
        case 0:
          break;
        case 2:
          output += "==";
          break;
        case 3:
          output += "=";
          break;
        default:
          throw new Error("Illegal base64url string!");
      }
      try {
        return b64DecodeUnicode(output);
      } catch (err) {
        return atob2(output);
      }
    };
    InvalidTokenError = class extends Error {
      constructor(message) {
        super(message);
      }
    };
    jwtDecode = (token, options = {}) => {
      const pos = !!options.header ? 0 : 1;
      try {
        return JSON.parse(base64UrlDecode(token.split(".")[pos]));
      } catch (e2) {
        throw new InvalidTokenError("Invalid token specified: " + e2.message);
      }
    };
  }
});

// node_modules/@frontegg/rest-api/auth/secutiry-poilicy/interfaces.js
var RestrictionType;
var init_interfaces2 = __esm({
  "node_modules/@frontegg/rest-api/auth/secutiry-poilicy/interfaces.js"() {
    (function(RestrictionType2) {
      RestrictionType2["ALLOW"] = "ALLOW";
      RestrictionType2["BLOCK"] = "BLOCK";
    })(RestrictionType || (RestrictionType = {}));
  }
});

// node_modules/@frontegg/rest-api/auth/interfaces.js
var SecondaryAuthStrategy, WebAuthnDeviceType, MFAStrategyEnum, LOAD_AUTHORIZATION_FF;
var init_interfaces3 = __esm({
  "node_modules/@frontegg/rest-api/auth/interfaces.js"() {
    init_interfaces2();
    init_constants2();
    (function(SecondaryAuthStrategy2) {
      SecondaryAuthStrategy2["WebAuthnPlatform"] = "WebAuthnPlatform";
      SecondaryAuthStrategy2["WebAuthnCrossPlatform"] = "WebAuthnCrossPlatform";
      SecondaryAuthStrategy2["SmsCode"] = "SmsCode";
      SecondaryAuthStrategy2["SmsCodeV2"] = "SmsCodeV2";
      SecondaryAuthStrategy2["Passkeys"] = "Passkeys";
    })(SecondaryAuthStrategy || (SecondaryAuthStrategy = {}));
    (function(WebAuthnDeviceType2) {
      WebAuthnDeviceType2["Platform"] = "Platform";
      WebAuthnDeviceType2["CrossPlatform"] = "CrossPlatform";
    })(WebAuthnDeviceType || (WebAuthnDeviceType = {}));
    (function(MFAStrategyEnum2) {
      MFAStrategyEnum2["AuthenticatorApp"] = "AuthenticatorApp";
      MFAStrategyEnum2["WebAuthnPlatform"] = "WebAuthnPlatform";
      MFAStrategyEnum2["WebAuthnCrossPlatform"] = "WebAuthnCrossPlatform";
      MFAStrategyEnum2["SMS"] = "SMS";
      MFAStrategyEnum2["EmailCode"] = "EmailCode";
    })(MFAStrategyEnum || (MFAStrategyEnum = {}));
    LOAD_AUTHORIZATION_FF = "admin_portal_should_load_authorization";
  }
});

// node_modules/@frontegg/rest-api/entitlements/index.js
var entitlements_exports = {};
__export(entitlements_exports, {
  loadEntitlements: () => loadEntitlements,
  loadEntitlementsV2: () => loadEntitlementsV2
});
async function loadEntitlements() {
  return Get(urls.entitlements.v1);
}
async function loadEntitlementsV2() {
  return Get(urls.entitlements.v2);
}
var init_entitlements = __esm({
  "node_modules/@frontegg/rest-api/entitlements/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/entitlements/interfaces.js
var NotEntitledJustification, ADMIN_PORTAL_ENTITLEMENTS_FF;
var init_interfaces4 = __esm({
  "node_modules/@frontegg/rest-api/entitlements/interfaces.js"() {
    (function(NotEntitledJustification2) {
      NotEntitledJustification2["MISSING_PERMISSION"] = "MISSING_PERMISSION";
      NotEntitledJustification2["MISSING_FEATURE"] = "MISSING_FEATURE";
      NotEntitledJustification2["BUNDLE_EXPIRED"] = "BUNDLE_EXPIRED";
    })(NotEntitledJustification || (NotEntitledJustification = {}));
    ADMIN_PORTAL_ENTITLEMENTS_FF = "admin_portal_entitlements";
  }
});

// node_modules/@frontegg/rest-api/auth/index.js
var auth_exports = {};
__export(auth_exports, {
  AuthStrategyEnum: () => AuthStrategyEnum,
  MachineToMachineAuthStrategy: () => MachineToMachineAuthStrategy,
  OAuthLogout: () => OAuthLogout,
  SocialLoginProviders: () => SocialLoginProviders,
  acceptInvitation: () => acceptInvitation,
  activateAccount: () => activateAccount,
  activateAccountV2: () => activateAccountV2,
  bulkCreateIPRestriction: () => bulkCreateIPRestriction,
  changePhoneNumber: () => changePhoneNumber,
  changePhoneNumberWithVerification: () => changePhoneNumberWithVerification,
  checkIfAllowToRememberMfaDevice: () => checkIfAllowToRememberMfaDevice,
  createDomainRestriction: () => createDomainRestriction,
  createIPRestriction: () => createIPRestriction,
  createOrUpdateSessionConfigrations: () => createOrUpdateSessionConfigrations,
  createSSOConfiguration: () => createSSOConfiguration,
  createSSOConfigurationByMetadata: () => createSSOConfigurationByMetadata,
  createSSOConfigurationByMetadataUrl: () => createSSOConfigurationByMetadataUrl,
  createSSODomain: () => createSSODomain,
  createSSOGroup: () => createSSOGroup,
  createSamlGroup: () => createSamlGroup,
  createTenantAccessToken: () => createTenantAccessToken,
  createUserAccessToken: () => createUserAccessToken,
  deleteAllSessionsForUser: () => deleteAllSessionsForUser,
  deleteDomainRestriction: () => deleteDomainRestriction,
  deleteIPRestriction: () => deleteIPRestriction,
  deleteSSOConfiguration: () => deleteSSOConfiguration,
  deleteSSODomain: () => deleteSSODomain,
  deleteSSOGroup: () => deleteSSOGroup,
  deleteSamlGroup: () => deleteSamlGroup,
  deleteSessionForUser: () => deleteSessionForUser,
  deleteTenantAccessToken: () => deleteTenantAccessToken,
  deleteTenantApiToken: () => deleteTenantApiToken,
  deleteUserAccessToken: () => deleteUserAccessToken,
  deleteUserApiToken: () => deleteUserApiToken,
  deleteWebAuthnDevice: () => deleteWebAuthnDevice,
  disableMFAAuthenticatorApp: () => disableMFAAuthenticatorApp,
  disableMFASMS: () => disableMFASMS,
  disableMFAWebAuthn: () => disableMFAWebAuthn,
  disableMfa: () => disableMfa,
  enrollMFAAuthenticatorApp: () => enrollMFAAuthenticatorApp,
  enrollMFAAuthenticatorAppForLogin: () => enrollMFAAuthenticatorAppForLogin,
  enrollMFAAuthenticatorAppForLoginV2: () => enrollMFAAuthenticatorAppForLoginV2,
  enrollMFASMS: () => enrollMFASMS,
  enrollMFASMSForLogin: () => enrollMFASMSForLogin,
  enrollMFASMSForLoginV2: () => enrollMFASMSForLoginV2,
  enrollMFAWebAuthn: () => enrollMFAWebAuthn,
  enrollMFAWebAuthnForLogin: () => enrollMFAWebAuthnForLogin,
  enrollMFAWebAuthnForLoginV2: () => enrollMFAWebAuthnForLoginV2,
  enrollMfa: () => enrollMfa,
  exchangeOAuthTokens: () => exchangeOAuthTokens,
  exchangeOAuthTokensV2: () => exchangeOAuthTokensV2,
  forgotPassword: () => forgotPassword,
  generateLoginResponse: () => generateLoginResponse,
  generateLoginResponseFromOAuthResponse: () => generateLoginResponseFromOAuthResponse,
  generateLoginResponseFromOAuthResponseV2: () => generateLoginResponseFromOAuthResponseV2,
  generateLoginResponseV2: () => generateLoginResponseV2,
  generateLoginResponseV3: () => generateLoginResponseV3,
  generateStepupSession: () => generateStepupSession,
  getActivateAccountStrategy: () => getActivateAccountStrategy,
  getCaptchaPolicy: () => getCaptchaPolicy,
  getCurrentUserSession: () => getCurrentUserSession,
  getCurrentUserSessions: () => getCurrentUserSessions,
  getCurrentUserTenantsFunction: () => getCurrentUserTenantsFunction,
  getCustomSocialLoginProvidersV1: () => getCustomSocialLoginProvidersV1,
  getDomainRestrictions: () => getDomainRestrictions,
  getDomainRestrictionsConfig: () => getDomainRestrictionsConfig,
  getGlobalSecurityPolicy: () => getGlobalSecurityPolicy,
  getIPRestrictions: () => getIPRestrictions,
  getIPRestrictionsConfig: () => getIPRestrictionsConfig,
  getLockoutPolicy: () => getLockoutPolicy,
  getMFADevices: () => getMFADevices,
  getMFAStrategiesConfig: () => getMFAStrategiesConfig,
  getMeAndEntitlements: () => getMeAndEntitlements,
  getMeV2: () => getMeV2,
  getMfaPolicy: () => getMfaPolicy,
  getOidcConfiguration: () => getOidcConfiguration,
  getPasswordConfigPolicy: () => getPasswordConfigPolicy,
  getPasswordHistoryPolicy: () => getPasswordHistoryPolicy,
  getPublicAuthStrategiesConfigForAuthenticatedUser: () => getPublicAuthStrategiesConfigForAuthenticatedUser,
  getSSOConfigurations: () => getSSOConfigurations,
  getSSODefaultRoles: () => getSSODefaultRoles,
  getSSOGroups: () => getSSOGroups,
  getSSOPublicConfiguration: () => getSSOPublicConfiguration,
  getSamlConfiguration: () => getSamlConfiguration,
  getSamlRoles: () => getSamlRoles,
  getSamlRolesGroups: () => getSamlRolesGroups,
  getSamlVendorConfiguration: () => getSamlVendorConfiguration,
  getSessionConfigurations: () => getSessionConfigurations,
  getSocialLoginProviders: () => getSocialLoginProviders,
  getSocialLoginProvidersV2: () => getSocialLoginProvidersV2,
  getSocialLoginProvidersV2ForAuthenticatedUser: () => getSocialLoginProvidersV2ForAuthenticatedUser,
  getTabTenantFromSessionStorage: () => getTabTenantFromSessionStorage,
  getTenantAccessTokensData: () => getTenantAccessTokensData,
  getTenantApiTokensData: () => getTenantApiTokensData,
  getUserAccessTokensData: () => getUserAccessTokensData,
  getUserApiTokensData: () => getUserApiTokensData,
  getUserAuthorization: () => getUserAuthorization,
  getUserById: () => getUserById,
  getVendorConfig: () => getVendorConfig,
  getVendorLockoutPolicy: () => getVendorLockoutPolicy,
  getVendorMfaPolicy: () => getVendorMfaPolicy,
  getVendorPasswordHistoryPolicy: () => getVendorPasswordHistoryPolicy,
  getVendorPublicAuthStrategiesConfig: () => getVendorPublicAuthStrategiesConfig,
  getWebAuthnDevices: () => getWebAuthnDevices,
  loadPasswordConfig: () => loadPasswordConfig,
  login: () => login,
  loginViaSocialLogin: () => loginViaSocialLogin,
  loginWithMfa: () => loginWithMfa,
  loginWithMfaV2: () => loginWithMfaV2,
  loginv2: () => loginv2,
  logout: () => logout,
  oidcPostLogin: () => oidcPostLogin,
  oidcPostLoginV2: () => oidcPostLoginV2,
  passwordlessPostLogin: () => passwordlessPostLogin,
  passwordlessPostLoginV2: () => passwordlessPostLoginV2,
  passwordlessPreLogin: () => passwordlessPreLogin,
  postLogin: () => postLogin,
  preDisableMFASMS: () => preDisableMFASMS,
  preDisableMFAWebAuthn: () => preDisableMFAWebAuthn,
  preEnrollMFAAuthenticatorApp: () => preEnrollMFAAuthenticatorApp,
  preEnrollMFAAuthenticatorAppForLogin: () => preEnrollMFAAuthenticatorAppForLogin,
  preEnrollMFASMS: () => preEnrollMFASMS,
  preEnrollMFASMSForLogin: () => preEnrollMFASMSForLogin,
  preEnrollMFAWebAuthn: () => preEnrollMFAWebAuthn,
  preEnrollMFAWebAuthnForLogin: () => preEnrollMFAWebAuthnForLogin,
  preLogin: () => preLogin,
  preLoginV2: () => preLoginV2,
  preLoginWithIdpType: () => preLoginWithIdpType,
  preVerifyMFAEmailCode: () => preVerifyMFAEmailCode,
  preVerifyMFASMSForLogin: () => preVerifyMFASMSForLogin,
  preVerifyMFAWebAuthnForLogin: () => preVerifyMFAWebAuthnForLogin,
  recoverMfaToken: () => recoverMfaToken,
  refreshToken: () => refreshToken,
  refreshTokenV2: () => refreshTokenV2,
  refreshTokenV3: () => refreshTokenV3,
  resendActivationEmail: () => resendActivationEmail,
  resendInvitationEmail: () => resendInvitationEmail,
  resetPassword: () => resetPassword,
  resetPhoneNumber: () => resetPhoneNumber,
  revokeSessionsForUser: () => revokeSessionsForUser,
  saveLockoutPolicy: () => saveLockoutPolicy,
  saveMfaPolicy: () => saveMfaPolicy,
  savePasswordHistoryPolicy: () => savePasswordHistoryPolicy,
  setSSODefaultRoles: () => setSSODefaultRoles,
  setTabTenantInSessionStorage: () => setTabTenantInSessionStorage,
  signUpUser: () => signUpUser,
  silentOAuthRefreshToken: () => silentOAuthRefreshToken,
  silentOAuthRefreshTokenV2: () => silentOAuthRefreshTokenV2,
  testCurrentIp: () => testCurrentIp,
  testCurrentIpInAllowList: () => testCurrentIpInAllowList,
  updateDomainRestrictionConfig: () => updateDomainRestrictionConfig,
  updateIPRestrictionConfig: () => updateIPRestrictionConfig,
  updateSSOConfiguration: () => updateSSOConfiguration,
  updateSSOConfigurationByMetadata: () => updateSSOConfigurationByMetadata,
  updateSSOConfigurationByMetadataUrl: () => updateSSOConfigurationByMetadataUrl,
  updateSSOGroup: () => updateSSOGroup,
  updateSamlConfiguration: () => updateSamlConfiguration,
  updateSamlGroup: () => updateSamlGroup,
  updateSamlRoles: () => updateSamlRoles,
  updateSamlVendorMetadata: () => updateSamlVendorMetadata,
  updateTenantApiTokensData: () => updateTenantApiTokensData,
  updateUserApiTokensData: () => updateUserApiTokensData,
  validateSSODomain: () => validateSSODomain,
  validateSamlDomain: () => validateSamlDomain,
  verifyChangePhoneNumber: () => verifyChangePhoneNumber,
  verifyInviteToken: () => verifyInviteToken,
  verifyMFAAuthenticatorAppForLogin: () => verifyMFAAuthenticatorAppForLogin,
  verifyMFAEmailCode: () => verifyMFAEmailCode,
  verifyMFAEmailCodeV2: () => verifyMFAEmailCodeV2,
  verifyMFASMSForLogin: () => verifyMFASMSForLogin,
  verifyMFASMSForLoginV2: () => verifyMFASMSForLoginV2,
  verifyMFAWebAuthnForLogin: () => verifyMFAWebAuthnForLogin,
  verifyMFAWebAuthnForLoginV2: () => verifyMFAWebAuthnForLoginV2,
  verifyMfa: () => verifyMfa,
  verifyNewDeviceSession: () => verifyNewDeviceSession,
  verifyResetPhoneNumber: () => verifyResetPhoneNumber,
  webAuthnCreateNewDeviceSession: () => webAuthnCreateNewDeviceSession,
  webAuthnPostLogin: () => webAuthnPostLogin,
  webAuthnPostLoginV2: () => webAuthnPostLoginV2,
  webAuthnPreLogin: () => webAuthnPreLogin
});
async function generateLoginResponse(loginResponse) {
  if (!loginResponse.accessToken) {
    return loginResponse;
  }
  ContextHolder.setAccessToken(loginResponse.accessToken);
  const me = await getMeAndEntitlements();
  const decodedContent = loginResponse.accessToken ? jwtDecode(loginResponse.accessToken) : {};
  const user = _extends({}, loginResponse, decodedContent, me);
  ContextHolder.setUser(user);
  return user;
}
async function generateLoginResponseV2(loginResponse) {
  if (!loginResponse.accessToken) {
    return {
      user: loginResponse
    };
  }
  ContextHolder.setAccessToken(loginResponse.accessToken);
  const [me, tenants] = await Promise.all([getMeAndEntitlements(), getTenants()]);
  const decodedContent = loginResponse.accessToken ? jwtDecode(loginResponse.accessToken) : {};
  const user = _extends({}, loginResponse, decodedContent, me);
  ContextHolder.setUser(user);
  return {
    user,
    tenants
  };
}
function shouldLoadEntitlements() {
  if (!ContextHolder.shouldLoadEntitlements()) {
    return false;
  }
  const [isEntitlementsFFOn] = FeatureFlags.getFeatureFlags([ADMIN_PORTAL_ENTITLEMENTS_FF], ContextHolder.getAppName() || "");
  return isEntitlementsFFOn;
}
function shouldLoadMeAuthorization() {
  const [shouldLoadAuthorization] = FeatureFlags.getFeatureFlags([LOAD_AUTHORIZATION_FF], ContextHolder.getAppName() || "");
  return shouldLoadAuthorization;
}
async function generateLoginResponseV3(loginResponse) {
  const {
    accessToken
  } = loginResponse;
  if (!accessToken) {
    return {
      user: loginResponse
    };
  }
  ContextHolder.setAccessToken(accessToken);
  const [me, currentUserTenants] = await Promise.all([getMeAndEntitlements(), getCurrentUserTenantsFunction()()]);
  const decodedContent = accessToken ? jwtDecode(accessToken) : {};
  const user = _extends({}, loginResponse, decodedContent, me);
  if (ContextHolder.isSessionPerTenantEnabled()) {
    setTabTenantInSessionStorage(user.tenantId);
  }
  ContextHolder.setUser(user);
  return {
    user,
    tenants: currentUserTenants.tenants,
    activeTenant: currentUserTenants.activeTenant
  };
}
async function generateLoginResponseFromOAuthResponse(oauthResponse) {
  ContextHolder.setAccessToken(oauthResponse.id_token);
  const me = await getMeAndEntitlements();
  const decodedContent = oauthResponse.id_token ? jwtDecode(oauthResponse.id_token) : {};
  const user = _extends({
    mfaRequired: false,
    accessToken: oauthResponse.id_token,
    refreshToken: oauthResponse.refresh_token
  }, decodedContent, me, {
    expiresIn: oauthResponse.expires_in || 300
  });
  ContextHolder.setUser(user);
  return user;
}
async function generateLoginResponseFromOAuthResponseV2(oauthResponse) {
  ContextHolder.setAccessToken(oauthResponse.id_token);
  const [me, currentUserTenants] = await Promise.all([getMeAndEntitlements(), getCurrentUserTenantsFunction()()]);
  const decodedContent = oauthResponse.id_token ? jwtDecode(oauthResponse.id_token) : {};
  const user = _extends({
    mfaRequired: false,
    accessToken: oauthResponse.id_token,
    refreshToken: oauthResponse.refresh_token
  }, decodedContent, me, {
    expiresIn: oauthResponse.expires_in || 300
  });
  if (ContextHolder.isSessionPerTenantEnabled()) {
    setTabTenantInSessionStorage(user.tenantId);
  }
  ContextHolder.setUser(user);
  return {
    user,
    tenants: currentUserTenants.tenants,
    activeTenant: currentUserTenants.activeTenant
  };
}
async function preLogin(body) {
  try {
    const {
      address
    } = await Post(`${urls.identity.auth.v1}/user/saml/prelogin`, body);
    return address;
  } catch {
    return null;
  }
}
async function preLoginWithIdpType(body) {
  return Post(`${urls.identity.auth.v1}/user/saml/prelogin`, body);
}
async function postLogin(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/saml/postlogin`, body);
  return generateLoginResponse(data);
}
async function oidcPostLogin(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/oidc/postlogin`, body);
  return generateLoginResponse(data);
}
async function login(body) {
  const data = await Post(`${urls.identity.auth.v1}/user`, body);
  return generateLoginResponse(data);
}
async function loginv2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user`, body);
  return generateLoginResponseV3(data);
}
async function loginWithMfa(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/verify`, body);
  return generateLoginResponse(data);
}
async function loginWithMfaV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/verify`, body);
  return generateLoginResponseV3(data);
}
async function activateAccount(body) {
  return Post(`${urls.identity.users.v1}/activate`, body);
}
async function activateAccountV2(body) {
  const data = await Post(`${urls.identity.users.v1}/activate`, body);
  return generateLoginResponseV3(data);
}
async function getActivateAccountStrategy(params) {
  return Get(`${urls.identity.users.v1}/activate/strategy`, params);
}
async function resendActivationEmail(body) {
  return Post(`${urls.identity.users.v1}/activate/reset`, body);
}
async function resendInvitationEmail(body) {
  return Post(`${urls.identity.users.v1}/invitation/reset`, body);
}
async function acceptInvitation(body) {
  return Post(`${urls.identity.users.v1}/invitation/accept`, body);
}
async function refreshToken() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.identity.auth.v1}/user/token/refresh`, {
    tenantId: tabTenantId
  });
  return generateLoginResponse(data);
}
async function refreshTokenV2() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.identity.auth.v1}/user/token/refresh`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseV2(data);
}
async function refreshTokenV3() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.identity.auth.v1}/user/token/refresh`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseV3(data);
}
async function logout() {
  return Post(`${urls.identity.auth.v1}/logout`);
}
async function OAuthLogout(params) {
  return Get(`${urls.oauth.v1}/logout`, params);
}
async function forgotPassword(body) {
  return Post(`${urls.identity.users.v1}/passwords/reset`, body);
}
async function resetPassword(body) {
  return Post(`${urls.identity.users.v1}/passwords/reset/verify`, body);
}
async function loadPasswordConfig(params) {
  return Get(`${urls.identity.users.v1}/passwords/config`, params);
}
async function recoverMfaToken(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/recover`, body);
}
async function enrollMfa() {
  return Post(`${urls.identity.users.v1}/mfa/enroll`);
}
async function preEnrollMFAAuthenticatorApp() {
  return Post(`${urls.identity.users.v1}/mfa/authenticator/enroll`);
}
async function enrollMFAAuthenticatorApp(body) {
  return Post(`${urls.identity.users.v1}/mfa/authenticator/enroll/verify`, body);
}
async function preEnrollMFASMS(body) {
  return Post(`${urls.identity.users.v1}/mfa/sms/enroll`, body);
}
async function enrollMFASMS(body) {
  return Post(`${urls.identity.users.v1}/mfa/sms/enroll/verify`, body);
}
async function preEnrollMFAWebAuthn() {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/enroll`);
}
async function enrollMFAWebAuthn(body) {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/enroll/verify`, body);
}
async function verifyMfa(body) {
  return Post(`${urls.identity.users.v1}/mfa/enroll/verify`, body);
}
async function disableMfa(body) {
  return Post(`${urls.identity.users.v1}/mfa/disable`, body);
}
async function disableMFAAuthenticatorApp(deviceId, body) {
  return Post(`${urls.identity.users.v1}/mfa/authenticator/${deviceId}/disable/verify`, body);
}
async function preDisableMFASMS(deviceId) {
  return Post(`${urls.identity.users.v1}/mfa/sms/${deviceId}/disable`);
}
async function disableMFASMS(deviceId, body) {
  return Post(`${urls.identity.users.v1}/mfa/sms/${deviceId}/disable/verify`, body);
}
async function preDisableMFAWebAuthn(deviceId) {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/${deviceId}/disable`);
}
async function disableMFAWebAuthn(deviceId, body) {
  return Post(`${urls.identity.users.v1}/mfa/webauthn/${deviceId}/disable/verify`, body);
}
async function getMFADevices() {
  return Get(`${urls.identity.users.v1}/mfa/devices`);
}
async function preEnrollMFAAuthenticatorAppForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/authenticator/enroll`, body);
}
async function enrollMFAAuthenticatorAppForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/authenticator/enroll/verify`, body);
}
async function enrollMFAAuthenticatorAppForLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/authenticator/enroll/verify`, body);
  return generateLoginResponseV3(data);
}
async function verifyMFAAuthenticatorAppForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/authenticator/${deviceId}/verify`, body);
}
async function preVerifyMFAEmailCode(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/emailcode`, body);
}
async function verifyMFAEmailCode(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/emailcode/verify`, body);
}
async function verifyMFAEmailCodeV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/emailcode/verify`, body);
  return generateLoginResponseV3(data);
}
async function preEnrollMFASMSForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/enroll`, body);
}
async function enrollMFASMSForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/enroll/verify`, body);
}
async function enrollMFASMSForLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/sms/enroll/verify`, body);
  return generateLoginResponseV3(data);
}
async function preVerifyMFASMSForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/${deviceId}`, body);
}
async function verifyMFASMSForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/sms/${deviceId}/verify`, body);
}
async function verifyMFASMSForLoginV2(deviceId, body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/sms/${deviceId}/verify`, body);
  return generateLoginResponseV3(data);
}
async function preEnrollMFAWebAuthnForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/enroll`, body);
}
async function enrollMFAWebAuthnForLogin(body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/enroll/verify`, body);
}
async function enrollMFAWebAuthnForLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/webauthn/enroll/verify`, body);
  return generateLoginResponseV3(data);
}
async function preVerifyMFAWebAuthnForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}`, body);
}
async function verifyMFAWebAuthnForLogin(deviceId, body) {
  return Post(`${urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}/verify`, body);
}
async function verifyMFAWebAuthnForLoginV2(deviceId, body) {
  const data = await Post(`${urls.identity.auth.v1}/user/mfa/webauthn/${deviceId}/verify`, body);
  return generateLoginResponseV3(data);
}
async function getSamlConfiguration() {
  return Get(`${urls.team.sso.v1}/saml/configurations`);
}
async function updateSamlConfiguration(body) {
  return Post(`${urls.team.sso.v1}/saml/configurations`, body);
}
async function getSamlVendorConfiguration() {
  return Get(`${urls.team.sso.v1}/saml/configurations/vendor-config`);
}
async function updateSamlVendorMetadata(body) {
  return Put(`${urls.team.sso.v1}/saml/configurations/metadata`, body);
}
async function validateSamlDomain() {
  return Put(`${urls.team.sso.v1}/saml/validations/domain`);
}
async function getSamlRoles() {
  return Get(`${urls.team.sso.v1}/saml/configurations/roles/default`);
}
async function getSamlRolesGroups() {
  return Get(`${urls.team.sso.v2}/saml/configurations/groups`);
}
async function updateSamlRoles({
  roleIds
}) {
  return Post(`${urls.team.sso.v1}/saml/configurations/roles/default`, {
    roleIds
  });
}
async function createSamlGroup({
  roleIds,
  group
}) {
  return Post(`${urls.team.sso.v2}/saml/configurations/groups`, {
    group,
    roleIds
  });
}
async function updateSamlGroup({
  roleIds,
  group,
  id
}) {
  return Patch(`${urls.team.sso.v2}/saml/configurations/groups/${id}`, {
    group,
    roleIds
  });
}
async function deleteSamlGroup({
  id
}) {
  return Delete(`${urls.team.sso.v2}/saml/configurations/groups/${id}`);
}
async function getOidcConfiguration() {
  return Get(`${urls.team.sso.v1}/oidc/configurations`);
}
async function getSSOPublicConfiguration() {
  return Get(`${urls.team.sso.v2}/configurations/public`);
}
async function getSocialLoginProviders() {
  return Get(urls.identity.sso.v1);
}
async function getSocialLoginProvidersV2() {
  return Get(urls.identity.sso.v2);
}
async function getSocialLoginProvidersV2ForAuthenticatedUser() {
  return Get(`${urls.identity.sso.v2}/authenticated`);
}
async function getCustomSocialLoginProvidersV1() {
  return Get(urls.identity.sso.custom.v1);
}
async function loginViaSocialLogin({
  provider,
  code,
  idToken,
  redirectUri,
  codeVerifier,
  metadata,
  invitationToken,
  state
}) {
  const params = {};
  if (code) {
    params.code = code;
  }
  if (idToken) {
    params.id_token = idToken;
  }
  if (redirectUri) {
    params.redirectUri = redirectUri;
  }
  if (codeVerifier) {
    params.code_verifier = codeVerifier;
  }
  if (state) {
    params.state = state;
  }
  return Post(`${urls.identity.auth.v1}/user/sso/${provider}/postlogin`, {
    metadata,
    invitationToken
  }, {
    params
  });
}
async function getVendorConfig() {
  return Get(`${urls.identity.configurations.v1}/public`);
}
async function signUpUser(body) {
  const {
    shouldActivate,
    authResponse,
    userId,
    tenantId
  } = await Post(`${urls.identity.users.v1}/signUp`, body);
  const response = {
    shouldActivate,
    userId,
    tenantId
  };
  if (!shouldActivate && authResponse) {
    const {
      user,
      tenants,
      activeTenant
    } = await generateLoginResponseV3(authResponse);
    return _extends({}, response, {
      user,
      tenants,
      activeTenant
    });
  }
  return response;
}
async function getCurrentUserSessions() {
  return Get(urls.identity.users.sessions.currentUser.v1);
}
async function getCurrentUserSession() {
  return Get(`${urls.identity.users.sessions.currentUser.v1}/current`);
}
async function revokeSessionsForUser(userId) {
  return Post(`${urls.identity.users.sessions.v1}/revoke`, {
    userId
  });
}
async function getSessionConfigurations() {
  return Get(urls.identity.users.sessions.configurations.v1);
}
async function createOrUpdateSessionConfigrations(body) {
  await Post(urls.identity.users.sessions.configurations.v1, body);
}
async function deleteSessionForUser(id) {
  await Delete(`${urls.identity.users.sessions.currentUser.v1}/${id}`);
}
async function deleteAllSessionsForUser() {
  await Delete(`${urls.identity.users.sessions.currentUser.v1}/all`);
}
async function getUserAccessTokensData() {
  return Get(urls.identity.users.accessTokens.v1);
}
async function getTenantAccessTokensData() {
  return Get(urls.identity.tenants.accessTokens.v1);
}
async function deleteTenantAccessToken({
  id
}) {
  return Delete(`${urls.identity.tenants.accessTokens.v1}/${id}`);
}
async function deleteUserAccessToken({
  id
}) {
  return Delete(`${urls.identity.users.accessTokens.v1}/${id}`);
}
async function createUserAccessToken(body) {
  return Post(urls.identity.users.accessTokens.v1, body);
}
async function createTenantAccessToken(body) {
  return Post(urls.identity.tenants.accessTokens.v1, body);
}
async function getUserApiTokensData() {
  return Get(urls.identity.users.apiTokens.v1);
}
async function getTenantApiTokensData() {
  return Get(urls.identity.tenants.apiTokens.v1);
}
async function updateUserApiTokensData(body) {
  return Post(urls.identity.users.apiTokens.v1, body);
}
async function updateTenantApiTokensData(body) {
  return Post(urls.identity.tenants.apiTokens.v2, body);
}
async function deleteTenantApiToken({
  tokenId
}) {
  return Delete(`${urls.identity.tenants.apiTokens.v1}/${tokenId}`);
}
async function deleteUserApiToken({
  tokenId
}) {
  return Delete(`${urls.identity.users.apiTokens.v1}/${tokenId}`);
}
async function getUserById({
  userId
}) {
  return Get(`${urls.identity.users.v1}/${userId}`);
}
async function checkIfAllowToRememberMfaDevice(mfaToken) {
  return Get(`${urls.identity.configurations.v1}/mfa-policy/allow-remember-device`, {
    mfaToken
  });
}
async function passwordlessPreLogin(_ref) {
  let {
    type
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded);
  return Post(`${urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/prelogin`, body);
}
async function passwordlessPostLoginV2(_ref2) {
  let {
    type
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2, _excluded2);
  const data = await Post(`${urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/postlogin`, body);
  return generateLoginResponseV3(data);
}
async function passwordlessPostLogin(_ref3) {
  let {
    type
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3, _excluded3);
  return Post(`${urls.identity.auth.v1}/passwordless/${type.toLocaleLowerCase()}/postlogin`, body);
}
async function verifyInviteToken({
  token
}) {
  return Post(urls.identity.tenants.invites.verify.v1, {
    token
  });
}
async function getSSOConfigurations() {
  return Get(`${urls.team.sso.v1}/configurations`);
}
async function createSSOConfiguration(body) {
  return Post(`${urls.team.sso.v1}/configurations`, body);
}
async function updateSSOConfiguration(ssoConfigId, body) {
  return Patch(`${urls.team.sso.v1}/configurations/${ssoConfigId}`, body);
}
async function deleteSSOConfiguration(ssoConfigId) {
  return Delete(`${urls.team.sso.v1}/configurations/${ssoConfigId}`);
}
async function createSSOConfigurationByMetadata(body) {
  return Post(`${urls.team.sso.v1}/configurations/metadata`, body);
}
async function updateSSOConfigurationByMetadata(ssoConfigId, body) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/metadata`, body);
}
async function createSSOConfigurationByMetadataUrl(body) {
  return Post(`${urls.team.sso.v1}/configurations/metadata-url`, body);
}
async function updateSSOConfigurationByMetadataUrl(ssoConfigId, body) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/metadata-url`, body);
}
async function createSSODomain(ssoConfigId, body) {
  return Post(`${urls.team.sso.v1}/configurations/${ssoConfigId}/domains`, body);
}
async function deleteSSODomain(ssoConfigId, domainId) {
  return Delete(`${urls.team.sso.v1}/configurations/${ssoConfigId}/domains/${domainId}`);
}
async function validateSSODomain(ssoConfigId, domainId) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/domains/${domainId}/validate`);
}
async function getSSODefaultRoles(ssoConfigId) {
  return Get(`${urls.team.sso.v1}/configurations/${ssoConfigId}/roles`);
}
async function setSSODefaultRoles(ssoConfigId, body) {
  return Put(`${urls.team.sso.v1}/configurations/${ssoConfigId}/roles`, body);
}
async function createSSOGroup(ssoConfigId, body) {
  return Post(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups`, body);
}
async function updateSSOGroup(ssoConfigId, {
  roleIds,
  group,
  id
}) {
  return Patch(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups/${id}`, {
    group,
    roleIds
  });
}
async function deleteSSOGroup(ssoConfigId, groupId) {
  return Delete(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups/${groupId}`);
}
async function getSSOGroups(ssoConfigId) {
  return Get(`${urls.team.sso.v1}/configurations/${ssoConfigId}/groups`);
}
async function preLoginV2(body) {
  return Post(`${urls.identity.auth.v2}/user/sso/prelogin`, body);
}
async function oidcPostLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v2}/user/oidc/postlogin`, body);
  return generateLoginResponse(data);
}
async function exchangeOAuthTokensV2(body) {
  const data = await Post(`${urls.oauth.v1}/token`, body);
  return generateLoginResponseFromOAuthResponseV2(data);
}
async function silentOAuthRefreshTokenV2() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.oauth.v1}/authorize/silent`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseFromOAuthResponseV2(data);
}
async function exchangeOAuthTokens(body) {
  const data = await Post(`${urls.oauth.v1}/token`, body);
  return generateLoginResponseFromOAuthResponse(data);
}
async function silentOAuthRefreshToken() {
  const tabTenantId = getTabTenantFromSessionStorage();
  const data = await Post(`${urls.oauth.v1}/authorize/silent`, {
    tenantId: tabTenantId
  });
  return generateLoginResponseFromOAuthResponse(data);
}
async function resetPhoneNumber(body) {
  return Post(`${urls.identity.users.v1}/phone/reset`, body);
}
async function verifyResetPhoneNumber(body) {
  return Post(`${urls.identity.users.v1}/phone/reset/verify`, body);
}
async function changePhoneNumberWithVerification(body) {
  return Post(`${urls.identity.users.v1}/phone`, body);
}
async function verifyChangePhoneNumber(body) {
  return Post(`${urls.identity.users.v1}/phone/verify`, body);
}
async function changePhoneNumber(body) {
  return Put(`${urls.identity.users.v1}/phone/change`, body);
}
async function webAuthnPreLogin(body) {
  return Post(`${urls.identity.auth.v1}/webauthn/prelogin`, body);
}
async function webAuthnPostLogin(body) {
  return Post(`${urls.identity.auth.v1}/webauthn/postlogin`, body);
}
async function webAuthnPostLoginV2(body) {
  const data = await Post(`${urls.identity.auth.v1}/webauthn/postlogin`, body);
  return generateLoginResponseV3(data);
}
async function webAuthnCreateNewDeviceSession() {
  return Post(urls.identity.webAuthnDevices.v1);
}
async function getWebAuthnDevices() {
  return Get(urls.identity.webAuthnDevices.v1);
}
async function deleteWebAuthnDevice(deviceId) {
  return Delete(`${urls.identity.webAuthnDevices.v1}/${deviceId}`);
}
async function verifyNewDeviceSession(body) {
  return Post(`${urls.identity.webAuthnDevices.v1}/verify`, body);
}
async function getVendorPublicAuthStrategiesConfig() {
  return Get(`${urls.identity.configurations.v1}/auth/strategies/public`);
}
async function getPublicAuthStrategiesConfigForAuthenticatedUser() {
  return Get(`${urls.identity.configurations.v1}/auth/strategies`);
}
async function getMFAStrategiesConfig() {
  return Get(`${urls.identity.configurations.v1}/mfa/strategies`);
}
async function getUserAuthorization() {
  return Get(`${urls.identity.users.authorization.v1}`);
}
async function getMeV2() {
  return Get(`${urls.identity.users.v2}/me`);
}
async function getMeAndEntitlements() {
  const [useEntitlementsV2] = FeatureFlags.getFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF], ContextHolder.getAppName() || "");
  const actions49 = [{
    action: getMeV2,
    shouldLoad: true
  }, {
    action: useEntitlementsV2 ? noThrowLoadEntitlements : loadEntitlements,
    shouldLoad: shouldLoadEntitlements()
  }, {
    action: getUserAuthorization,
    shouldLoad: shouldLoadMeAuthorization()
  }];
  const promises = actions49.map((action) => executeConditionalPromise(action));
  const [me, entitlements, authorization] = await Promise.all(promises);
  const tabTenant = getTabTenantFromSessionStorage();
  if (tabTenant) {
    me.tenantId = tabTenant;
  }
  return _extends({}, me, authorization != null ? authorization : {}, {
    entitlements
  });
}
async function generateStepupSession(body) {
  const data = await Post(`${urls.identity.auth.v1}/user/step-up/generate`, body);
  if (!data.accessToken) {
    return data;
  }
  return generateLoginResponseV3(data);
}
var _excluded, _excluded2, _excluded3, noThrowLoadEntitlements;
var init_auth = __esm({
  "node_modules/@frontegg/rest-api/auth/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_tenants();
    init_secutiry_poilicy();
    init_enums();
    init_utils2();
    init_constants();
    init_ContextHolder();
    init_fetch();
    init_jwt();
    init_interfaces3();
    init_entitlements();
    init_interfaces4();
    init_feature_flags();
    init_utils2();
    init_constants2();
    _excluded = ["type"];
    _excluded2 = ["type"];
    _excluded3 = ["type"];
    noThrowLoadEntitlements = async () => {
      try {
        return await loadEntitlementsV2();
      } catch (e2) {
      }
    };
  }
});

// node_modules/@frontegg/rest-api/teams/index.js
var teams_exports = {};
__export(teams_exports, {
  addUser: () => addUser,
  changePassword: () => changePassword,
  createInviteUserLink: () => createInviteUserLink,
  deleteInviteUserLink: () => deleteInviteUserLink,
  deleteUser: () => deleteUser,
  getInviteLinkConfiguration: () => getInviteLinkConfiguration,
  getInviteUserLink: () => getInviteUserLink,
  getProfile: () => getProfile,
  getTemporaryUserConfiguration: () => getTemporaryUserConfiguration,
  loadAvailablePermissions: () => loadAvailablePermissions,
  loadAvailableRoles: () => loadAvailableRoles,
  loadStats: () => loadStats,
  loadUsers: () => loadUsers,
  resendActivationLink: () => resendActivationLink,
  resendInvitationLink: () => resendInvitationLink,
  resendInvitationLinkToAllTenants: () => resendInvitationLinkToAllTenants,
  setPermanentUser: () => setPermanentUser,
  updateInviteUserLink: () => updateInviteUserLink,
  updateProfile: () => updateProfile,
  updateProfileImage: () => updateProfileImage,
  updateUser: () => updateUser,
  updateUserExpirationTime: () => updateUserExpirationTime
});
async function getProfile(params) {
  return Get(`${urls.identity.users.v2}/me`, params != null ? params : {
    addRoles: true
  });
}
async function updateProfile(body) {
  return Put(`${urls.identity.users.v2}/me`, body);
}
async function updateProfileImage(body) {
  return Put(`${urls.team.profile.v1}/me/image/v1`, body, {
    responseType: "plain",
    contentType: void 0
  });
}
async function changePassword(body) {
  return Post(`${urls.identity.users.v1}/passwords/change`, body);
}
async function loadUsers(params) {
  var _params$sort, _params$sort$0$id, _params$sort2, _params$sort2$, _params$sort3, _params$sort3$;
  const filters = (params.filter || []).reduce((p2, n2) => _extends({}, p2, {
    [n2.id]: n2.value
  }), {});
  const sorts = (_params$sort = params.sort) != null && _params$sort.length ? {
    sortBy: (_params$sort$0$id = (_params$sort2 = params.sort) == null ? void 0 : (_params$sort2$ = _params$sort2[0]) == null ? void 0 : _params$sort2$.id) != null ? _params$sort$0$id : "name",
    sortDirection: (_params$sort3 = params.sort) != null && (_params$sort3$ = _params$sort3[0]) != null && _params$sort3$.desc ? "desc" : "asc"
  } : null;
  return Get(urls.team.members.v1, _extends({
    pageOffset: params.pageOffset,
    pageSize: params.pageSize
  }, filters, sorts));
}
async function addUser(body) {
  return Post(urls.identity.users.v2, _extends({}, body, {
    provider: "local"
  }));
}
async function deleteUser(body) {
  return Delete(`${urls.team.members.v1}/${body.userId}`);
}
async function updateUser(body) {
  return Put(urls.team.members.v1, body);
}
async function updateUserExpirationTime(body) {
  const {
    userId,
    expirationInSeconds
  } = body;
  return Put(`${urls.identity.users.temporary.v1}/${userId}`, {
    expirationInSeconds
  });
}
async function setPermanentUser(userId) {
  return Delete(`${urls.identity.users.temporary.v1}/${userId}`);
}
async function getTemporaryUserConfiguration() {
  return Get(urls.identity.users.temporary.configuration.v1);
}
async function createInviteUserLink(body) {
  return Post(urls.identity.tenants.invites.user.v1, _extends({}, body));
}
async function updateInviteUserLink(body) {
  return Patch(urls.identity.tenants.invites.user.v1, _extends({}, body));
}
async function deleteInviteUserLink() {
  return Delete(urls.identity.tenants.invites.user.v1);
}
async function getInviteUserLink() {
  return Get(urls.identity.tenants.invites.user.v1);
}
async function getInviteLinkConfiguration() {
  return Get(urls.identity.tenants.invites.configuration.v1);
}
async function loadAvailableRoles() {
  return Get(urls.team.roles.v1);
}
async function loadAvailablePermissions() {
  return Get(urls.identity.permissions.v1);
}
async function loadStats() {
  return Get(`${urls.team.stats.v1}/members`);
}
async function resendActivationLink(body) {
  return Post(`${urls.team.members.v1}/${body.userId}/resendActivationEmail`, {});
}
async function resendInvitationLink(body) {
  return Post(urls.identity.users.v2, _extends({}, body, {
    provider: "local"
  }));
}
async function resendInvitationLinkToAllTenants(body) {
  return Post(urls.identity.users.invitation.resendAll.v1, _extends({}, body));
}
var init_teams = __esm({
  "node_modules/@frontegg/rest-api/teams/index.js"() {
    init_extends();
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/metadata/index.js
var metadata_exports = {};
__export(metadata_exports, {
  getAdminBoxMetadata: () => getAdminBoxMetadata,
  getAuditsMetadata: () => getAuditsMetadata,
  getCurrentUserIpMetadata: () => getCurrentUserIpMetadata,
  getIpAdressMetadata: () => getIpAdressMetadata,
  getNotificationsMetadata: () => getNotificationsMetadata,
  getSamlMetadata: () => getSamlMetadata,
  updateAdminBoxMetadata: () => updateAdminBoxMetadata
});
async function getMetadata(body) {
  var _data$rows, _data$rows2;
  const data = await Get("/metadata", body);
  if (data != null && (_data$rows = data.rows) != null && _data$rows[0])
    return data == null ? void 0 : (_data$rows2 = data.rows) == null ? void 0 : _data$rows2[0];
  throw new Error(`metadata not found: ${body.entityName}`);
}
async function getAdminBoxMetadata() {
  return Get("/metadata/admin-box");
}
async function updateAdminBoxMetadata(body) {
  return Post("/metadata/admin-box", body);
}
async function getIpMetadata(ip) {
  const data = await Get(`/metadata/ip/${ip}`);
  if (data)
    return data;
  throw new Error(`ip metadata not found`);
}
async function getCurrentUserIpMetadata() {
  const data = await Get(`/metadata/ipme`);
  if (data)
    return data;
  throw new Error(`ip metadata not found`);
}
var getNotificationsMetadata, getSamlMetadata, getAuditsMetadata, getIpAdressMetadata;
var init_metadata = __esm({
  "node_modules/@frontegg/rest-api/metadata/index.js"() {
    init_fetch();
    getNotificationsMetadata = async () => getMetadata({
      entityName: "notifications"
    });
    getSamlMetadata = async () => getMetadata({
      entityName: "saml"
    });
    getAuditsMetadata = async () => getMetadata({
      entityName: "audits"
    });
    getIpAdressMetadata = async (ip) => getIpMetadata(ip);
  }
});

// node_modules/@frontegg/rest-api/reports/index.js
var reports_exports = {};
__export(reports_exports, {
  downloadReport: () => downloadReport,
  getReport: () => getReport,
  getReports: () => getReports,
  renderReport: () => renderReport,
  scheduleReport: () => scheduleReport,
  sendReport: () => sendReport
});
async function getReports(body) {
  return Get(`${urls.reports.service.v2}/tenant-reports`, body);
}
async function getReport(body) {
  return Get(`${urls.reports.service.v2}/${body.id}/tenant-reports`);
}
async function renderReport(_ref) {
  let {
    dataFilters
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded4);
  const html = await Get(`${urls.reports.trigger.v1}/preview-report`, _extends({}, body, {
    dataFilters: btoa(JSON.stringify(dataFilters || {})),
    responseType: "html"
  }), {
    responseType: "plain"
  });
  return {
    html
  };
}
async function scheduleReport(_ref2) {
  let {
    templateId,
    dataFilters
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2, _excluded22);
  return Post(`${urls.reports.service.v2}/${templateId}/tenant-reports`, _extends({}, body, {
    dataFilters: btoa(JSON.stringify(dataFilters || {}))
  }));
}
async function downloadReport(_ref3) {
  let {
    dataFilters
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3, _excluded32);
  const blob = await Get(`${urls.reports.trigger.v1}/preview-report`, _extends({}, body, {
    dataFilters: btoa(JSON.stringify(dataFilters || {}))
  }), {
    responseType: "blob"
  });
  let contentType = "text/html";
  let contentExt = "html";
  if (body.responseType === "pdf") {
    contentType = "application/pdf";
    contentExt = "pdf";
  } else if (body.responseType === "image") {
    contentType = "image/jpeg";
    contentExt = "jpg";
  }
  const newBlob = new Blob([blob], {
    type: contentType
  });
  const fileURL = URL.createObjectURL(newBlob);
  const tempLink = document.createElement("a");
  tempLink.href = fileURL;
  tempLink.setAttribute("download", `report_${body.name || ""}.${contentExt}`);
  tempLink.click();
  setTimeout(tempLink.remove.bind(tempLink));
}
async function sendReport(body) {
  return Post(`${urls.reports.trigger.v1}/tenant-reports`, body);
}
var _excluded4, _excluded22, _excluded32;
var init_reports = __esm({
  "node_modules/@frontegg/rest-api/reports/index.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded4 = ["dataFilters"];
    _excluded22 = ["templateId", "dataFilters"];
    _excluded32 = ["dataFilters"];
  }
});

// node_modules/@frontegg/rest-api/notifications/index.js
var notifications_exports = {};
__export(notifications_exports, {
  getNotifications: () => getNotifications,
  markAllAsRead: () => markAllAsRead,
  updateNotificationIsPinned: () => updateNotificationIsPinned,
  updateNotificationStatus: () => updateNotificationStatus
});
async function getNotifications(params) {
  return Get(urls.notifications.v1, {
    params
  });
}
async function updateNotificationStatus(params) {
  return Put(`${urls.notifications.v1}/status`, {
    params
  });
}
async function updateNotificationIsPinned(params) {
  const {
    notificationId,
    pinStatus
  } = params;
  return Put(`${urls.notifications.v1}/${pinStatus}`, {
    notificationId
  });
}
async function markAllAsRead() {
  return Post(`${urls.notifications.v1}/status/mark-all-read`);
}
var init_notifications = __esm({
  "node_modules/@frontegg/rest-api/notifications/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/audits/index.js
var audits_exports = {};
__export(audits_exports, {
  exportAudits: () => exportAudits,
  getAudits: () => getAudits,
  getAuditsStats: () => getAuditsStats
});
async function getAudits(params) {
  return Get(urls.audits.v1, params);
}
async function getAuditsStats(params) {
  return Get(`${urls.audits.v1}/stats`, params);
}
async function exportAudits(params) {
  const {
    endpoint,
    headerProps
  } = params, restParams = _objectWithoutPropertiesLoose(params, _excluded5);
  return PostDownload(`${urls.audits.v1}/export/${endpoint}`, {
    properties: headerProps
  }, restParams);
}
var _excluded5;
var init_audits = __esm({
  "node_modules/@frontegg/rest-api/audits/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded5 = ["endpoint", "headerProps"];
  }
});

// node_modules/@frontegg/rest-api/connectivity/index.js
var connectivity_exports = {};
__export(connectivity_exports, {
  deleteEmailConfiguration: () => deleteEmailConfiguration,
  deleteEmailSubscriptions: () => deleteEmailSubscriptions,
  deleteSMSConfiguration: () => deleteSMSConfiguration,
  deleteSMSSubscriptions: () => deleteSMSSubscriptions,
  deleteSlackConfiguration: () => deleteSlackConfiguration,
  deleteWebhooksConfiguration: () => deleteWebhooksConfiguration,
  getCategories: () => getCategories,
  getChannelMaps: () => getChannelMaps,
  getEmailConfiguration: () => getEmailConfiguration,
  getSMSConfiguration: () => getSMSConfiguration,
  getSlackChannels: () => getSlackChannels,
  getSlackConfiguration: () => getSlackConfiguration,
  getSlackScope: () => getSlackScope,
  getWebhookLog: () => getWebhookLog,
  getWebhooksConfigurations: () => getWebhooksConfigurations,
  patchEmailConfiguration: () => patchEmailConfiguration,
  patchSMSConfiguration: () => patchSMSConfiguration,
  postEmailConfiguration: () => postEmailConfiguration,
  postSMSConfiguration: () => postSMSConfiguration,
  postSlackCode: () => postSlackCode,
  postSlackConfiguration: () => postSlackConfiguration,
  postWebhookRetry: () => postWebhookRetry,
  postWebhookTest: () => postWebhookTest,
  postWebhooksConfiguration: () => postWebhooksConfiguration,
  putEmailSubscriptions: () => putEmailSubscriptions,
  putSMSSubscriptions: () => putSMSSubscriptions
});
var _excluded6, _excluded23, getSlackConfiguration, getSlackScope, getSlackChannels, postSlackConfiguration, deleteSlackConfiguration, postSlackCode, getEmailConfiguration, postEmailConfiguration, patchEmailConfiguration, deleteEmailSubscriptions, putEmailSubscriptions, deleteEmailConfiguration, getSMSConfiguration, postSMSConfiguration, patchSMSConfiguration, deleteSMSSubscriptions, putSMSSubscriptions, deleteSMSConfiguration, getWebhooksConfigurations, postWebhooksConfiguration, deleteWebhooksConfiguration, getWebhookLog, postWebhookTest, postWebhookRetry, getCategories, getChannelMaps;
var init_connectivity = __esm({
  "node_modules/@frontegg/rest-api/connectivity/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_constants();
    init_fetch();
    _excluded6 = ["eventKey"];
    _excluded23 = ["eventKey"];
    getSlackConfiguration = () => {
      return Get(`${urls.integrations.configurations.v1}/slack`);
    };
    getSlackScope = () => {
      return Get(`${urls.integrations.configurations.v1}/slack/applications`);
    };
    getSlackChannels = () => {
      return Get(`${urls.integrations.configurations.v1}/slack/channels`);
    };
    postSlackConfiguration = (data) => {
      if (data.id) {
        return Patch(`${urls.integrations.configurations.v1}/slack/subscription/${data.id}`, data);
      }
      return Post(`${urls.integrations.configurations.v1}/slack/subscriptions`, data);
    };
    deleteSlackConfiguration = (data) => {
      return Delete(`${urls.integrations.configurations.v1}/slack/subscriptions/${data.id}`);
    };
    postSlackCode = (code) => {
      return Post(`${urls.integrations.configurations.v1}/slack/applications/registrations`, {
        code
      });
    };
    getEmailConfiguration = () => {
      return Get(`${urls.integrations.configurations.v1}/emails`);
    };
    postEmailConfiguration = (_ref) => {
      let {
        eventKey
      } = _ref, data = _objectWithoutPropertiesLoose(_ref, _excluded6);
      return Post(`${urls.integrations.configurations.v1}/emails/${eventKey}`, data);
    };
    patchEmailConfiguration = ({
      eventKey,
      enabled
    }) => {
      return Patch(`${urls.integrations.configurations.v1}/emails/${eventKey}`, {
        enabled
      });
    };
    deleteEmailSubscriptions = (eventKey, subscriptionId) => {
      return Delete(`${urls.integrations.configurations.v1}/emails/${eventKey}/subscriptions/${subscriptionId}`);
    };
    putEmailSubscriptions = (subscriptionId, eventKey, data) => {
      return Put(`${urls.integrations.configurations.v1}/emails/${eventKey}/subscriptions/${subscriptionId}`, data);
    };
    deleteEmailConfiguration = (eventKey) => {
      return Delete(`${urls.integrations.configurations.v1}/emails/${eventKey}`);
    };
    getSMSConfiguration = () => {
      return Get(`${urls.integrations.configurations.v2}/sms`);
    };
    postSMSConfiguration = (_ref2) => {
      let {
        eventKey
      } = _ref2, data = _objectWithoutPropertiesLoose(_ref2, _excluded23);
      return Post(`${urls.integrations.configurations.v2}/sms/${eventKey}`, data);
    };
    patchSMSConfiguration = ({
      eventKey,
      enabled
    }) => {
      return Patch(`${urls.integrations.configurations.v2}/sms/${eventKey}`, {
        enabled
      });
    };
    deleteSMSSubscriptions = (eventKey, subscriptionId) => {
      return Delete(`${urls.integrations.configurations.v2}/sms/${eventKey}/subscriptions/${subscriptionId}`);
    };
    putSMSSubscriptions = (subscriptionId, eventKey, data) => {
      return Put(`${urls.integrations.configurations.v2}/sms/${eventKey}/subscriptions/${subscriptionId}`, data);
    };
    deleteSMSConfiguration = (eventKey) => {
      return Delete(`${urls.integrations.configurations.v2}/sms/${eventKey}`);
    };
    getWebhooksConfigurations = () => {
      return Get(urls.webhooks.v1);
    };
    postWebhooksConfiguration = (data) => {
      if (data._id) {
        return Patch(`${urls.webhooks.v1}/${data._id}`, data);
      } else {
        return Post(`${urls.webhooks.v1}/custom`, data);
      }
    };
    deleteWebhooksConfiguration = (id) => {
      return Delete(`${urls.webhooks.v1}/${id}`);
    };
    getWebhookLog = (id, offset = 0, limit = 10) => {
      const query = new URLSearchParams({
        id,
        offset: `${offset}`,
        limit: `${limit}`
      });
      return Get(`${urls.webhooks.v1}/logs/?${query.toString()}`);
    };
    postWebhookTest = (data) => {
      return Post(`${urls.webhooks.v1}/test`, data);
    };
    postWebhookRetry = (id) => {
      return Post(`${urls.webhooks.v1}/logs/${id}/retries`);
    };
    getCategories = () => {
      return Get(`${urls.events.configurations.v1}/categories`);
    };
    getChannelMaps = (channels2) => {
      return Get(urls.events.configurations.v1, {
        channels: channels2
      });
    };
  }
});

// node_modules/@frontegg/rest-api/account-settings/index.js
var account_settings_exports = {};
__export(account_settings_exports, {
  getPublicSettings: () => getPublicSettings,
  getSettings: () => getSettings,
  updateSettings: () => updateSettings
});
async function updateSettings(body, options) {
  return Put(urls.tenants.accountSettings.v1, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getSettings(options) {
  return Get(urls.tenants.accountSettings.v1, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function getPublicSettings() {
  return Get(`${urls.tenants.accountSettings.v1}/public`);
}
var init_account_settings = __esm({
  "node_modules/@frontegg/rest-api/account-settings/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/roles/index.js
var roles_exports = {};
__export(roles_exports, {
  addRole: () => addRole,
  attachPermissionToRoles: () => attachPermissionToRoles,
  attachPermissionsToRole: () => attachPermissionsToRole,
  deleteRole: () => deleteRole,
  getPermissionCategories: () => getPermissionCategories,
  getPermissions: () => getPermissions,
  getRoles: () => getRoles,
  updateRole: () => updateRole
});
async function getRoles() {
  return Get(urls.identity.roles.v1);
}
async function addRole(body) {
  return Post(urls.identity.roles.v1, body);
}
async function deleteRole({
  roleId
}) {
  return Delete(`${urls.identity.roles.v1}/${roleId}`);
}
async function updateRole(_ref) {
  let {
    roleId
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded7);
  return Patch(`${urls.identity.roles.v1}/${roleId}`, body);
}
async function attachPermissionsToRole(_ref2) {
  let {
    roleId
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2, _excluded24);
  return Put(`${urls.identity.roles.v1}/${roleId}/permissions`, body);
}
async function getPermissions() {
  return Get(urls.identity.permissions.v1);
}
async function attachPermissionToRoles(_ref3) {
  let {
    permissionId
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3, _excluded33);
  return Put(`${urls.identity.permissions.v1}/${permissionId}/roles`, body);
}
async function getPermissionCategories() {
  return Get(`${urls.identity.permissions.v1}/categories`);
}
var _excluded7, _excluded24, _excluded33;
var init_roles = __esm({
  "node_modules/@frontegg/rest-api/roles/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded7 = ["roleId"];
    _excluded24 = ["roleId"];
    _excluded33 = ["permissionId"];
  }
});

// node_modules/@frontegg/rest-api/subscriptions/subscriptions.js
async function getSubscriptions() {
  return Get(urls.subscriptions.billing.subscriptions.v1);
}
async function getSubscription(subscriptionId) {
  return Get(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}`);
}
async function cancelSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}/cancellations/`, {});
}
async function renewSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}/renewals/`, {});
}
async function updateSubscription(subscriptionId, {
  paymentMethodId,
  planId
}) {
  return Put(`${urls.subscriptions.billing.subscriptions.v1}/${subscriptionId}`, {
    paymentMethodId,
    planId
  });
}
var init_subscriptions = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/subscriptions.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/managedSubscriptions.js
async function getManagedSubscription(subscriptionId) {
  return Get(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}`);
}
async function getManagedSubscriptions() {
  return Get(`${urls.subscriptions.managedSubscriptions.v1}`);
}
async function cancelManagedSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}/cancellations/`, {});
}
async function renewManagedSubscription(subscriptionId) {
  return Put(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}/renewals/`, {});
}
async function updateManagedSubscription(subscriptionId, {
  paymentMethodId,
  planId
}) {
  return Put(`${urls.subscriptions.managedSubscriptions.v1}/${subscriptionId}`, {
    paymentMethodId,
    planId
  });
}
var init_managedSubscriptions = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/managedSubscriptions.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/plans.js
async function getSubscriptionPlans() {
  return Get(urls.subscriptions.billing.plans.v1);
}
async function getSubscriptionPlan(planId) {
  return Get(`${urls.subscriptions.billing.plans.v1}/${planId}`);
}
var init_plans = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/plans.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/invoices.js
async function getSubscriptionInvoices() {
  return Get(urls.subscriptions.billing.invoices.v1);
}
async function getSubscriptionInvoice(invoiceId) {
  return Get(`${urls.subscriptions.billing.invoices.v1}/${invoiceId}`);
}
async function getSubscriptionInvoicePdf(invoiceId, outputFileName) {
  return Get(`${urls.subscriptions.billing.invoices.v1}/${invoiceId}/pdf`, {
    outputFileName
  }, {
    responseType: "blob"
  });
}
var init_invoices = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/invoices.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/paymentMethods.js
async function getPaymentMethods() {
  return Get(urls.subscriptions.billing.paymentMethods.v1);
}
async function getPaymentMethod(paymentMethodId) {
  return Get(`${urls.subscriptions.billing.paymentMethods.v1}/${paymentMethodId}`);
}
async function updatePaymentMethodBillingDetails(paymentMethodId, _ref) {
  let {
    email
  } = _ref, address = _objectWithoutPropertiesLoose(_ref, _excluded8);
  return Patch(`${urls.subscriptions.billing.paymentMethods.v1}/${paymentMethodId}/billing-details`, {
    email,
    address
  });
}
var _excluded8;
var init_paymentMethods = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/paymentMethods.js"() {
    init_objectWithoutPropertiesLoose();
    init_fetch();
    init_constants();
    _excluded8 = ["email"];
  }
});

// node_modules/@frontegg/rest-api/subscriptions/providers/stripe/index.js
async function createSubscription(request) {
  return Post(urls.subscriptions.billing.paymentProviders.stripe.subscriptions.v1, request);
}
async function getStripeCustomer(tenantId) {
  return Get(`${urls.subscriptions.billing.paymentProviders.stripe.customers.v1}/${tenantId}`);
}
async function createStripeCustomer(request) {
  return Post(`${urls.subscriptions.billing.paymentProviders.stripe.customers.v1}`, request);
}
async function getStripePaymentProviderConfiguration() {
  return Get(`${urls.subscriptions.billing.paymentProviders.stripe.publicConfigurations.v1}`);
}
async function createStripePaymentMethodSetupIntentSecret(request) {
  return Post(`${urls.subscriptions.billing.paymentProviders.stripe.setupIntents.v1}`, request);
}
var init_stripe = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/providers/stripe/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/providers/index.js
var init_providers = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/providers/index.js"() {
    init_stripe();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/summaries.js
async function getSubscriptionSummaries(tenantId) {
  return Get(`${urls.subscriptions.billing.summaries.v1}/${tenantId}`);
}
var init_summaries = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/summaries.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/tenantConfiguration.js
async function getTenantConfiguration(tenantId) {
  return Get(`${urls.subscriptions.billing.tenantConfiguration.v1}/${tenantId}`);
}
async function createTenantConfiguration(request) {
  return Post(`${urls.subscriptions.billing.tenantConfiguration.v1}`, request);
}
var init_tenantConfiguration = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/tenantConfiguration.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/paymentProviders.js
async function getPaymentProviders() {
  return Get(urls.subscriptions.paymentProviders.v1);
}
var init_paymentProviders = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/paymentProviders.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/vendorPublicConfigurations.js
async function getVendorPublicConfigurations() {
  return Get(`${urls.subscriptions.billing.configurations.vendorPublicConfigurations.v1}`);
}
var init_vendorPublicConfigurations = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/vendorPublicConfigurations.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/subscriptions/enums.js
var ISubscriptionStatus, PaymentMethodType, ISubscriptionCancellationPolicy, ProviderType, TrialEndAction, TenantCreatedAction;
var init_enums2 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/enums.js"() {
    (function(ISubscriptionStatus2) {
      ISubscriptionStatus2["ACTIVE"] = "active";
      ISubscriptionStatus2["CANCELED"] = "canceled";
      ISubscriptionStatus2["INCOMPLETE"] = "incomplete";
      ISubscriptionStatus2["EXPIRED"] = "expired";
      ISubscriptionStatus2["TRIALING"] = "trialing";
      ISubscriptionStatus2["TRIAL_ENDED"] = "trialEnded";
    })(ISubscriptionStatus || (ISubscriptionStatus = {}));
    (function(PaymentMethodType3) {
      PaymentMethodType3["UNKNWON"] = "unknown";
      PaymentMethodType3["CARD"] = "card";
    })(PaymentMethodType || (PaymentMethodType = {}));
    (function(ISubscriptionCancellationPolicy2) {
      ISubscriptionCancellationPolicy2["AT_PERIOD_END"] = "atPeriodEnd";
    })(ISubscriptionCancellationPolicy || (ISubscriptionCancellationPolicy = {}));
    (function(ProviderType2) {
      ProviderType2["Stripe"] = "Stripe";
    })(ProviderType || (ProviderType = {}));
    (function(TrialEndAction2) {
      TrialEndAction2["CHANGE_TO_DEFAULT"] = "change_to_default";
      TrialEndAction2["RETAIN_TRIAL"] = "retain_trial";
    })(TrialEndAction || (TrialEndAction = {}));
    (function(TenantCreatedAction2) {
      TenantCreatedAction2["CREATE"] = "create_customer";
    })(TenantCreatedAction || (TenantCreatedAction = {}));
  }
});

// node_modules/@frontegg/rest-api/subscriptions/index.js
var subscriptions_exports = {};
__export(subscriptions_exports, {
  ISubscriptionCancellationPolicy: () => ISubscriptionCancellationPolicy,
  ISubscriptionStatus: () => ISubscriptionStatus,
  PaymentMethodType: () => PaymentMethodType,
  ProviderType: () => ProviderType,
  TenantCreatedAction: () => TenantCreatedAction,
  TrialEndAction: () => TrialEndAction,
  cancelManagedSubscription: () => cancelManagedSubscription,
  cancelSubscription: () => cancelSubscription,
  createStripeCustomer: () => createStripeCustomer,
  createStripePaymentMethodSetupIntentSecret: () => createStripePaymentMethodSetupIntentSecret,
  createSubscription: () => createSubscription,
  createTenantConfiguration: () => createTenantConfiguration,
  getManagedSubscription: () => getManagedSubscription,
  getManagedSubscriptions: () => getManagedSubscriptions,
  getPaymentMethod: () => getPaymentMethod,
  getPaymentMethods: () => getPaymentMethods,
  getPaymentProviders: () => getPaymentProviders,
  getStripeCustomer: () => getStripeCustomer,
  getStripePaymentProviderConfiguration: () => getStripePaymentProviderConfiguration,
  getSubscription: () => getSubscription,
  getSubscriptionInvoice: () => getSubscriptionInvoice,
  getSubscriptionInvoicePdf: () => getSubscriptionInvoicePdf,
  getSubscriptionInvoices: () => getSubscriptionInvoices,
  getSubscriptionPlan: () => getSubscriptionPlan,
  getSubscriptionPlans: () => getSubscriptionPlans,
  getSubscriptionSummaries: () => getSubscriptionSummaries,
  getSubscriptions: () => getSubscriptions,
  getTenantConfiguration: () => getTenantConfiguration,
  getVendorPublicConfigurations: () => getVendorPublicConfigurations,
  renewManagedSubscription: () => renewManagedSubscription,
  renewSubscription: () => renewSubscription,
  updateManagedSubscription: () => updateManagedSubscription,
  updatePaymentMethodBillingDetails: () => updatePaymentMethodBillingDetails,
  updateSubscription: () => updateSubscription
});
var init_subscriptions2 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/index.js"() {
    init_subscriptions();
    init_managedSubscriptions();
    init_plans();
    init_invoices();
    init_paymentMethods();
    init_providers();
    init_summaries();
    init_tenantConfiguration();
    init_paymentProviders();
    init_vendorPublicConfigurations();
    init_enums2();
  }
});

// node_modules/@frontegg/rest-api/vendor/index.js
var vendor_exports = {};
__export(vendor_exports, {
  getVendorPublicInfo: () => getVendorPublicInfo
});
async function getVendorPublicInfo() {
  return Get(`${urls.vendor}/public`);
}
var init_vendor = __esm({
  "node_modules/@frontegg/rest-api/vendor/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/sub-tenants/index.js
var sub_tenants_exports = {};
__export(sub_tenants_exports, {
  addUserRolesForSubTenants: () => addUserRolesForSubTenants,
  addUserToTenantAndSubTenants: () => addUserToTenantAndSubTenants,
  addUsersToSubTenant: () => addUsersToSubTenant,
  createSubTenant: () => createSubTenant,
  deleteSubTenant: () => deleteSubTenant,
  loadAllUsers: () => loadAllUsers,
  removeUserFromTenantAndSubTenants: () => removeUserFromTenantAndSubTenants,
  removeUserRolesFromSubTenants: () => removeUserRolesFromSubTenants,
  setUserRolesForSubTenants: () => setUserRolesForSubTenants,
  updateSubAccountAccess: () => updateSubAccountAccess,
  updateSubTenant: () => updateSubTenant
});
async function loadAllUsers(params) {
  return Get(urls.identity.subTenants.v1, params);
}
async function addUserToTenantAndSubTenants(body) {
  return Post(urls.identity.subTenants.v1, body);
}
async function removeUserFromTenantAndSubTenants(body, options) {
  return Delete(urls.identity.subTenants.v1, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function addUserRolesForSubTenants(userId, body, options) {
  return Post(`${urls.identity.subTenants.v1}/${userId}/roles`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function removeUserRolesFromSubTenants(userId, body, options) {
  return Delete(`${urls.identity.subTenants.v1}/${userId}/roles`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function setUserRolesForSubTenants(userId, body, options) {
  return Patch(`${urls.identity.subTenants.v1}/${userId}/roles`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function createSubTenant(body, options) {
  return Post(urls.tenants.subTenants.v1, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function deleteSubTenant(tenantId, options) {
  return Delete(`${urls.tenants.subTenants.v1}/${tenantId}`, void 0, {
    headers: extractHeadersFromOptions(options)
  });
}
async function updateSubTenant({
  tenantId
}, body, options) {
  return Patch(`${urls.tenants.subTenants.v1}/${tenantId}`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function updateSubAccountAccess(userId, body, options) {
  return Put(`${urls.identity.subTenants.v1}/${userId}/access`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
async function addUsersToSubTenant(body, options) {
  return Post(`${urls.identity.subTenants.v2}/`, body, {
    headers: extractHeadersFromOptions(options)
  });
}
var init_sub_tenants = __esm({
  "node_modules/@frontegg/rest-api/sub-tenants/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/directory/index.js
var directory_exports = {};
__export(directory_exports, {
  countConfigurationUsers: () => countConfigurationUsers,
  createConfiguration: () => createConfiguration,
  deleteConfiguration: () => deleteConfiguration,
  getConfigs: () => getConfigs,
  updateConfiguration: () => updateConfiguration
});
async function getConfigs() {
  return Get(`${urls.directory.v1}`);
}
async function updateConfiguration(id, body) {
  return Patch(`${urls.directory.v1}/${id}`, body);
}
async function createConfiguration(body) {
  return Post(`${urls.directory.v1}`, body);
}
async function deleteConfiguration(id) {
  return Delete(`${urls.directory.v1}/${id}`);
}
async function countConfigurationUsers(id) {
  return Get(`${urls.directory.temp}/${id}/Users/count`);
}
var init_directory = __esm({
  "node_modules/@frontegg/rest-api/directory/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/impersonate/index.js
var impersonate_exports = {};
__export(impersonate_exports, {
  impersonate: () => impersonate
});
async function impersonate(body) {
  return Post(`${urls.identity.impersonate.v1}`, body);
}
var init_impersonate = __esm({
  "node_modules/@frontegg/rest-api/impersonate/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/groups/index.js
var groups_exports = {};
__export(groups_exports, {
  addRolesToGroup: () => addRolesToGroup,
  addUsersToGroup: () => addUsersToGroup,
  createGroup: () => createGroup,
  deleteGroup: () => deleteGroup,
  deleteRolesFromGroup: () => deleteRolesFromGroup,
  deleteUsersFromGroup: () => deleteUsersFromGroup,
  getGroupById: () => getGroupById,
  getGroupConfiguration: () => getGroupConfiguration,
  getGroups: () => getGroups,
  getGroupsByIds: () => getGroupsByIds,
  updateGroup: () => updateGroup,
  updateGroupConfiguration: () => updateGroupConfiguration
});
async function getGroupById({
  groupId
}, query) {
  return Get(`${urls.identity.groups.v1}/${groupId}`, _extends({}, query));
}
async function getGroups(query) {
  return Get(`${urls.identity.groups.v1}`, _extends({}, query));
}
async function getGroupsByIds(body, params) {
  return Post(`${urls.identity.groups.getByIds.v1}`, body, {
    params
  });
}
async function createGroup(body) {
  return Post(`${urls.identity.groups.v1}`, body);
}
async function updateGroup(_ref) {
  let {
    groupId
  } = _ref, body = _objectWithoutPropertiesLoose(_ref, _excluded9);
  return Patch(`${urls.identity.groups.v1}/${groupId}`, body);
}
async function deleteGroup(groupId) {
  return Delete(`${urls.identity.groups.v1}/${groupId}`);
}
async function addRolesToGroup(groupId, body) {
  return Post(`${urls.identity.groups.v1}/${groupId}/roles`, body);
}
async function deleteRolesFromGroup(groupId, body) {
  return Delete(`${urls.identity.groups.v1}/${groupId}/roles`, body);
}
async function addUsersToGroup(groupId, body) {
  return Post(`${urls.identity.groups.v1}/${groupId}/users`, body);
}
async function deleteUsersFromGroup(groupId, body) {
  return Delete(`${urls.identity.groups.v1}/${groupId}/users`, body);
}
async function getGroupConfiguration() {
  return Get(`${urls.identity.groups.configurations.v1}`);
}
async function updateGroupConfiguration(body) {
  return Post(`${urls.identity.groups.configurations.v1}`, body);
}
var _excluded9;
var init_groups = __esm({
  "node_modules/@frontegg/rest-api/groups/index.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_constants();
    init_fetch();
    _excluded9 = ["groupId"];
  }
});

// node_modules/@frontegg/rest-api/security-center/index.js
var security_center_exports = {};
__export(security_center_exports, {
  getInsights: () => getInsights,
  getRecommendations: () => getRecommendations
});
async function getRecommendations() {
  return Get(urls.securityCenter.recommendations.v1);
}
async function getInsights() {
  return Get(urls.securityCenter.insights.v1);
}
var init_security_center = __esm({
  "node_modules/@frontegg/rest-api/security-center/index.js"() {
    init_fetch();
    init_constants();
  }
});

// node_modules/@frontegg/rest-api/user-phone-numbers/index.js
var user_phone_numbers_exports = {};
__export(user_phone_numbers_exports, {
  createPhoneNumber: () => createPhoneNumber,
  deletePhoneNumber: () => deletePhoneNumber,
  getUserPhoneNumbers: () => getUserPhoneNumbers,
  preVerifyPhoneNumber: () => preVerifyPhoneNumber,
  verifyDeletePhoneNumber: () => verifyDeletePhoneNumber,
  verifyPhoneNumber: () => verifyPhoneNumber
});
async function getUserPhoneNumbers(queryParams) {
  return Get(`${urls.identity.phoneNumbers.v1}`, queryParams);
}
async function createPhoneNumber(body) {
  return Post(`${urls.identity.phoneNumbers.v1}`, body);
}
async function deletePhoneNumber(phoneId) {
  return Delete(`${urls.identity.phoneNumbers.v1}/${phoneId}`);
}
async function preVerifyPhoneNumber(body) {
  return Post(`${urls.identity.phoneNumbers.v1}/preverify`, body);
}
async function verifyPhoneNumber(body) {
  return Post(`${urls.identity.phoneNumbers.v1}/verify`, body);
}
async function verifyDeletePhoneNumber(phoneId, body) {
  return Post(`${urls.identity.phoneNumbers.v1}/${phoneId}/delete/verify`, body);
}
var init_user_phone_numbers = __esm({
  "node_modules/@frontegg/rest-api/user-phone-numbers/index.js"() {
    init_constants();
    init_fetch();
  }
});

// node_modules/@frontegg/rest-api/teams/interfaces.js
var UserManagedByEnum;
var init_interfaces5 = __esm({
  "node_modules/@frontegg/rest-api/teams/interfaces.js"() {
    (function(UserManagedByEnum2) {
      UserManagedByEnum2["FRONTEGG"] = "frontegg";
      UserManagedByEnum2["SCIM2"] = "scim2";
    })(UserManagedByEnum || (UserManagedByEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/metadata/interfaces.js
var init_interfaces6 = __esm({
  "node_modules/@frontegg/rest-api/metadata/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/reports/interfaces.js
var init_interfaces7 = __esm({
  "node_modules/@frontegg/rest-api/reports/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/connectivity/interfaces.js
var init_interfaces8 = __esm({
  "node_modules/@frontegg/rest-api/connectivity/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/notifications/interfaces.js
var init_interfaces9 = __esm({
  "node_modules/@frontegg/rest-api/notifications/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/audits/interfaces.js
var init_interfaces10 = __esm({
  "node_modules/@frontegg/rest-api/audits/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/tenants/interfaces.js
var TenantSortByEnum, TenantType;
var init_interfaces11 = __esm({
  "node_modules/@frontegg/rest-api/tenants/interfaces.js"() {
    (function(TenantSortByEnum2) {
      TenantSortByEnum2["createdAt"] = "createdAt";
      TenantSortByEnum2["name"] = "name";
      TenantSortByEnum2["tenantId"] = "tenantId";
    })(TenantSortByEnum || (TenantSortByEnum = {}));
    (function(TenantType2) {
      TenantType2["CUSTOMER"] = "customer";
      TenantType2["SPAM"] = "spam";
      TenantType2["TEST"] = "test";
      TenantType2["RESELLER"] = "reseller";
      TenantType2["HEADQUARTER"] = "headquarter";
    })(TenantType || (TenantType = {}));
  }
});

// node_modules/@frontegg/rest-api/account-settings/interfaces.js
var init_interfaces12 = __esm({
  "node_modules/@frontegg/rest-api/account-settings/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/roles/interfaces.js
var init_interfaces13 = __esm({
  "node_modules/@frontegg/rest-api/roles/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/subscriptions/providers/stripe/interfaces.js
var init_interfaces14 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/providers/stripe/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/subscriptions/interfaces.js
var init_interfaces15 = __esm({
  "node_modules/@frontegg/rest-api/subscriptions/interfaces.js"() {
    init_interfaces14();
  }
});

// node_modules/@frontegg/rest-api/vendor/interfaces.js
var init_interfaces16 = __esm({
  "node_modules/@frontegg/rest-api/vendor/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/sub-tenants/interfaces.js
var init_interfaces17 = __esm({
  "node_modules/@frontegg/rest-api/sub-tenants/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/routers.js
var fronteggAuthApiRoutesRegex, fronteggRefreshTokenUrl, fronteggSilentRefreshTokenUrl, fronteggUsersUrl, fronteggTenantsUrl, fronteggTenantsV3Url;
var init_routers = __esm({
  "node_modules/@frontegg/rest-api/routers.js"() {
    init_constants();
    fronteggAuthApiRoutesRegex = [/^(.*)\/logout$/g, "/logout", /^\/identity\/resources\/auth\/v[0-9]*\/user\/[^\/]*\/postlogin$/g, /^\/identity\/resources\/auth\/v[0-9]*\/passwordless\/[^\/]*\/postlogin$/g, /^\/identity\/resources\/auth\/v[0-9]*\/webauthn\/postlogin$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user\/token\/refresh$/g, /^\/identity\/resources\/users\/v[0-9]*$/g, /^\/identity\/resources\/users\/v[0-9]*\/signUp$/g, /^\/identity\/resources\/users\/v[0-9]*\/activate$/g, /^\/identity\/resources\/users\/v[0-9]*\/invitation\/accept$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user\/mfa\/verify$/g, /^\/identity\/resources\/auth\/v[0-9]*\/user\/mfa\/[^\/]*\/[^\/]*\/verify$/g, /^\/oauth\/token$/g, /^\/oauth\/authorize\/silent$/g];
    fronteggRefreshTokenUrl = `${urls.identity.auth.v1}/user/token/refresh`;
    fronteggSilentRefreshTokenUrl = `${urls.oauth.v1}/authorize/silent`;
    fronteggUsersUrl = `${urls.identity.users.v2}/me`;
    fronteggTenantsUrl = `${urls.identity.users.v2}/me/tenants`;
    fronteggTenantsV3Url = `${urls.identity.users.v3}/me/tenants`;
  }
});

// node_modules/@frontegg/rest-api/feature-flags/interfaces.js
var init_interfaces18 = __esm({
  "node_modules/@frontegg/rest-api/feature-flags/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/directory/interfaces.js
var ScimConnectionSource;
var init_interfaces19 = __esm({
  "node_modules/@frontegg/rest-api/directory/interfaces.js"() {
    (function(ScimConnectionSource2) {
      ScimConnectionSource2["FRONTEGG"] = "frontegg";
      ScimConnectionSource2["OKTA"] = "okta";
      ScimConnectionSource2["AZURE_AD"] = "azure-ad";
      ScimConnectionSource2["OTHER"] = "other";
    })(ScimConnectionSource || (ScimConnectionSource = {}));
  }
});

// node_modules/@frontegg/rest-api/impersonate/interfaces.js
var init_interfaces20 = __esm({
  "node_modules/@frontegg/rest-api/impersonate/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/groups/interfaces.js
var init_interfaces21 = __esm({
  "node_modules/@frontegg/rest-api/groups/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/groups/enums.js
var GroupRelations, GroupManagedByEnum;
var init_enums3 = __esm({
  "node_modules/@frontegg/rest-api/groups/enums.js"() {
    (function(GroupRelations3) {
      GroupRelations3["roles"] = "roles";
      GroupRelations3["users"] = "users";
      GroupRelations3["rolesAndUsers"] = "rolesAndUsers";
    })(GroupRelations || (GroupRelations = {}));
    (function(GroupManagedByEnum2) {
      GroupManagedByEnum2["FRONTEGG"] = "frontegg";
      GroupManagedByEnum2["SCIM2"] = "scim2";
    })(GroupManagedByEnum || (GroupManagedByEnum = {}));
  }
});

// node_modules/@frontegg/rest-api/users/interfaces.js
var SortByEnum, GetUsersFilterPreset, providersArray;
var init_interfaces22 = __esm({
  "node_modules/@frontegg/rest-api/users/interfaces.js"() {
    (function(SortByEnum2) {
      SortByEnum2["createdAt"] = "createdAt";
      SortByEnum2["name"] = "name";
      SortByEnum2["email"] = "email";
      SortByEnum2["id"] = "id";
      SortByEnum2["verified"] = "verified";
      SortByEnum2["isLocked"] = "isLocked";
      SortByEnum2["provider"] = "provider";
      SortByEnum2["tenantId"] = "tenantId";
    })(SortByEnum || (SortByEnum = {}));
    (function(GetUsersFilterPreset2) {
      GetUsersFilterPreset2["MFA_UNENROLLED"] = "mfa-unenrolled";
      GetUsersFilterPreset2["BREACHED_PASSWORDS"] = "breached-passwords";
      GetUsersFilterPreset2["INACTIVE"] = "inactive";
    })(GetUsersFilterPreset || (GetUsersFilterPreset = {}));
    providersArray = ["local", "saml", "google", "github", "facebook", "microsoft", "scim2", "slack"];
  }
});

// node_modules/@frontegg/rest-api/security-center/interfaces.js
var RecommendationCode, InsightCode, RecommendationActionKey, RecommendationSeverity, SecurityCategory;
var init_interfaces23 = __esm({
  "node_modules/@frontegg/rest-api/security-center/interfaces.js"() {
    (function(RecommendationCode2) {
      RecommendationCode2["FORCE_MFA"] = "FORCE_MFA";
      RecommendationCode2["BREACHED_PASSWORDS_EXIST"] = "BREACHED_PASSWORDS_EXIST";
      RecommendationCode2["ENABLE_USER_LOCKOUT"] = "ENABLE_USER_LOCKOUT";
      RecommendationCode2["STRENGTHEN_USER_LOCKOUT"] = "STRENGTHEN_USER_LOCKOUT";
      RecommendationCode2["ENABLE_PASSWORD_HISTORY"] = "ENABLE_PASSWORD_HISTORY";
      RecommendationCode2["STRENGTHEN_PASSWORD_HISTORY"] = "STRENGTHEN_PASSWORD_HISTORY";
      RecommendationCode2["ENABLE_FORCE_RELOGIN"] = "ENABLE_FORCE_RELOGIN";
      RecommendationCode2["SET_FORCE_RELOGIN"] = "SET_FORCE_RELOGIN";
      RecommendationCode2["ENABLE_SESSION_CONCURRENCY"] = "ENABLE_SESSION_CONCURRENCY";
      RecommendationCode2["SET_SESSION_CONCURRENCY"] = "SET_SESSION_CONCURRENCY";
      RecommendationCode2["ENABLE_IDLE_SESSION"] = "ENABLE_IDLE_SESSION";
      RecommendationCode2["SET_IDLE_SESSION"] = "SET_IDLE_SESSION";
      RecommendationCode2["ENABLE_IP_RESTRICTIONS"] = "ENABLE_IP_RESTRICTIONS";
      RecommendationCode2["CHANGE_IP_TO_ALLOWLIST"] = "CHANGE_IP_TO_ALLOWLIST";
      RecommendationCode2["ENABLE_DOMAIN_RESTRICTIONS"] = "ENABLE_DOMAIN_RESTRICTIONS";
      RecommendationCode2["CHANGE_DOMAIN_TO_ALLOWLIST"] = "CHANGE_DOMAIN_TO_ALLOWLIST";
      RecommendationCode2["CONFIGURE_SSO"] = "CONFIGURE_SSO";
    })(RecommendationCode || (RecommendationCode = {}));
    (function(InsightCode2) {
      InsightCode2["MFA_FORCED"] = "MFA_FORCED";
      InsightCode2["PARTIALLY_FORCED_MFA"] = "PARTIALLY_FORCED_MFA";
      InsightCode2["PARTIAL_MFA_USAGE"] = "PARTIAL_MFA_USAGE";
      InsightCode2["FULL_MFA_USAGE"] = "FULL_MFA_USAGE";
      InsightCode2["BREACHED_PASSWORD_USERS_EXIST"] = "BREACHED_PASSWORD_USERS_EXIST";
      InsightCode2["IMPROVE_LOCKOUT_POLICY"] = "IMPROVE_LOCKOUT_POLICY";
      InsightCode2["IMPROVE_PASSWORD_HISTORY_POLICY"] = "IMPROVE_PASSWORD_HISTORY_POLICY";
      InsightCode2["NO_SESSION_SETTINGS"] = "NO_SESSION_SETTINGS";
      InsightCode2["PARTIAL_SESSION_SETTINGS"] = "PARTIAL_SESSION_SETTINGS";
      InsightCode2["FULL_SESSION_SETTINGS"] = "FULL_SESSION_SETTINGS";
      InsightCode2["NO_IP_RESTRICTIONS"] = "NO_IP_RESTRICTIONS";
      InsightCode2["IP_ALLOWLIST"] = "IP_ALLOWLIST";
      InsightCode2["IP_DENYLIST"] = "IP_DENYLIST";
      InsightCode2["NO_DOMAIN_RESTRICTIONS"] = "NO_DOMAIN_RESTRICTIONS";
      InsightCode2["DOMAIN_ALLOWLIST"] = "DOMAIN_ALLOWLIST";
      InsightCode2["DOMAIN_DENYLIST"] = "DOMAIN_DENYLIST";
      InsightCode2["FULL_PASSWORD_SETTINGS"] = "FULL_PASSWORD_SETTINGS";
    })(InsightCode || (InsightCode = {}));
    (function(RecommendationActionKey2) {
      RecommendationActionKey2["SEND_RESET_BREACHED_PASSWORD_EMAIL"] = "SEND_RESET_BREACHED_PASSWORD_EMAIL";
      RecommendationActionKey2["ADJUST_FORCE_RELOGIN"] = "ADJUST_FORCE_RELOGIN";
      RecommendationActionKey2["ADJUST_MAX_CONCURRENT_SESSIONS"] = "ADJUST_MAX_CONCURRENT_SESSIONS";
      RecommendationActionKey2["ADJUST_IDLE_TIMEOUT"] = "ADJUST_IDLE_TIMEOUT";
    })(RecommendationActionKey || (RecommendationActionKey = {}));
    (function(RecommendationSeverity2) {
      RecommendationSeverity2["SEVERE"] = "SEVERE";
      RecommendationSeverity2["WARNING"] = "WARNING";
      RecommendationSeverity2["INFO"] = "INFO";
    })(RecommendationSeverity || (RecommendationSeverity = {}));
    (function(SecurityCategory2) {
      SecurityCategory2["MFA"] = "MFA";
      SecurityCategory2["SESSIONS"] = "SESSIONS";
      SecurityCategory2["PASSWORD"] = "PASSWORD";
      SecurityCategory2["INACTIVITY"] = "INACTIVITY";
      SecurityCategory2["IP"] = "IP";
      SecurityCategory2["DOMAIN"] = "DOMAIN";
      SecurityCategory2["SSO"] = "SSO";
    })(SecurityCategory || (SecurityCategory = {}));
  }
});

// node_modules/@frontegg/rest-api/user-phone-numbers/interfaces.js
var init_interfaces24 = __esm({
  "node_modules/@frontegg/rest-api/user-phone-numbers/interfaces.js"() {
  }
});

// node_modules/@frontegg/rest-api/index.js
var rest_api_exports = {};
__export(rest_api_exports, {
  ADMIN_PORTAL_ENTITLEMENTS_FF: () => ADMIN_PORTAL_ENTITLEMENTS_FF,
  AuthStrategyEnum: () => AuthStrategyEnum,
  ContextHolder: () => ContextHolder,
  FeatureFlags: () => FeatureFlags,
  FronteggApiError: () => FronteggApiError,
  FronteggContext: () => FronteggContext,
  FronteggFrameworks: () => FronteggFrameworks,
  GetUsersFilterPreset: () => GetUsersFilterPreset,
  GroupManagedByEnum: () => GroupManagedByEnum,
  GroupRelations: () => GroupRelations,
  ISubscriptionCancellationPolicy: () => ISubscriptionCancellationPolicy,
  ISubscriptionStatus: () => ISubscriptionStatus,
  InsightCode: () => InsightCode,
  LOAD_AUTHORIZATION_FF: () => LOAD_AUTHORIZATION_FF,
  MFAStrategyEnum: () => MFAStrategyEnum,
  MachineToMachineAuthStrategy: () => MachineToMachineAuthStrategy,
  NotEntitledJustification: () => NotEntitledJustification,
  PaginationOrderEnum: () => PaginationOrderEnum,
  PaymentMethodType: () => PaymentMethodType,
  ProviderType: () => ProviderType,
  RecommendationActionKey: () => RecommendationActionKey,
  RecommendationCode: () => RecommendationCode,
  RecommendationSeverity: () => RecommendationSeverity,
  RequestSource: () => RequestSource,
  RestrictionType: () => RestrictionType,
  ScimConnectionSource: () => ScimConnectionSource,
  SecondaryAuthStrategy: () => SecondaryAuthStrategy,
  SecurityCategory: () => SecurityCategory,
  SocialLoginProviders: () => SocialLoginProviders,
  SortByEnum: () => SortByEnum,
  TenantSortByEnum: () => TenantSortByEnum,
  TenantType: () => TenantType,
  USE_ENTITLEMENTS_V2_ENDPOINT_FF: () => USE_ENTITLEMENTS_V2_ENDPOINT_FF,
  UserManagedByEnum: () => UserManagedByEnum,
  WebAuthnDeviceType: () => WebAuthnDeviceType,
  api: () => api,
  countConfigurationUsers: () => countConfigurationUsers,
  createConfiguration: () => createConfiguration,
  default: () => rest_api_default,
  deleteConfiguration: () => deleteConfiguration,
  fetch: () => fetch_exports,
  fronteggAuthApiRoutesRegex: () => fronteggAuthApiRoutesRegex,
  fronteggHeaders: () => fronteggHeaders,
  fronteggRefreshTokenUrl: () => fronteggRefreshTokenUrl,
  fronteggSilentRefreshTokenUrl: () => fronteggSilentRefreshTokenUrl,
  fronteggTenantsUrl: () => fronteggTenantsUrl,
  fronteggTenantsV3Url: () => fronteggTenantsV3Url,
  fronteggUsersUrl: () => fronteggUsersUrl,
  getConfigs: () => getConfigs,
  getCurrentUserTenantsFunction: () => getCurrentUserTenantsFunction,
  getTabTenantFromSessionStorage: () => getTabTenantFromSessionStorage,
  loadFeatureFlags: () => loadFeatureFlags,
  providersArray: () => providersArray,
  setTabTenantInSessionStorage: () => setTabTenantInSessionStorage,
  updateConfiguration: () => updateConfiguration
});
var api, rest_api_default;
var init_rest_api = __esm({
  "node_modules/@frontegg/rest-api/index.js"() {
    init_auth();
    init_auth();
    init_teams();
    init_metadata();
    init_reports();
    init_notifications();
    init_audits();
    init_fetch();
    init_connectivity();
    init_tenants();
    init_account_settings();
    init_roles();
    init_subscriptions2();
    init_subscriptions2();
    init_error();
    init_vendor();
    init_sub_tenants();
    init_feature_flags();
    init_directory();
    init_impersonate();
    init_groups();
    init_users();
    init_entitlements();
    init_security_center();
    init_user_phone_numbers();
    init_ContextHolder();
    init_interfaces();
    init_interfaces3();
    init_auth();
    init_interfaces5();
    init_interfaces6();
    init_interfaces7();
    init_interfaces8();
    init_interfaces9();
    init_interfaces10();
    init_interfaces11();
    init_interfaces12();
    init_interfaces13();
    init_interfaces15();
    init_interfaces16();
    init_interfaces17();
    init_routers();
    init_feature_flags();
    init_interfaces18();
    init_directory();
    init_interfaces19();
    init_interfaces20();
    init_interfaces21();
    init_enums3();
    init_interfaces22();
    init_interfaces4();
    init_interfaces23();
    init_interfaces24();
    api = {
      auth: auth_exports,
      teams: teams_exports,
      metadata: metadata_exports,
      reports: reports_exports,
      connectivity: connectivity_exports,
      notifications: notifications_exports,
      audits: audits_exports,
      tenants: tenants_exports,
      accountSettings: account_settings_exports,
      roles: roles_exports,
      subscriptions: subscriptions_exports,
      vendor: vendor_exports,
      subTenants: sub_tenants_exports,
      featureFlags: feature_flags_exports,
      directory: directory_exports,
      impersonate: impersonate_exports,
      groups: groups_exports,
      users: users_exports,
      entitlements: entitlements_exports,
      securityCenter: security_center_exports,
      userPhoneNumbers: user_phone_numbers_exports
    };
    rest_api_default = {
      fetch: fetch_exports,
      ContextHolder,
      FronteggContext,
      api,
      FronteggApiError,
      AuthStrategyEnum,
      MachineToMachineAuthStrategy,
      SocialLoginProviders,
      ISubscriptionCancellationPolicy,
      ISubscriptionStatus,
      PaymentMethodType,
      ProviderType
    };
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/interfaces.js
var LoginStep, LoginFlow, QuickLoginStrategy, LoginActionTypes;
var init_interfaces25 = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/interfaces.js"() {
    init_rest_api();
    (function(LoginStep2) {
      LoginStep2["preLogin"] = "preLogin";
      LoginStep2["magicLinkPreLoginSuccess"] = "magicLinkPreLoginSuccess";
      LoginStep2["loginWithSmsOtc"] = "loginWithSmsOtc";
      LoginStep2["loginWithQuickSmsOtc"] = "loginWithQuickSmsOtc";
      LoginStep2["loginWithOtc"] = "loginWithOtc";
      LoginStep2["loginWithPassword"] = "loginWithPassword";
      LoginStep2["loginWithTwoFactor"] = "loginWithTwoFactor";
      LoginStep2["redirectToSSO"] = "redirectToSSO";
      LoginStep2["loginWithSSOFailed"] = "loginWithSSOFailed";
      LoginStep2["success"] = "success";
      LoginStep2["forceTwoFactor"] = "forceTwoFactor";
      LoginStep2["recoverTwoFactor"] = "recoverTwoFactor";
      LoginStep2["promptPasskeys"] = "promptPasskeys";
      LoginStep2["breachedPassword"] = "breachedPassword";
      LoginStep2["breachedPasswordSuccess"] = "breachedPasswordSuccess";
    })(LoginStep || (LoginStep = {}));
    (function(LoginFlow2) {
      LoginFlow2["Login"] = "login";
      LoginFlow2["RegisterQuickLogin"] = "registerQuickLogin";
    })(LoginFlow || (LoginFlow = {}));
    (function(QuickLoginStrategy2) {
      QuickLoginStrategy2["Internal"] = "internal";
      QuickLoginStrategy2["UsbKey"] = "usb-key";
      QuickLoginStrategy2["Android"] = "android";
      QuickLoginStrategy2["Sms"] = "sms";
    })(QuickLoginStrategy || (QuickLoginStrategy = {}));
    (function(LoginActionTypes2) {
      LoginActionTypes2["social-login"] = "social-login";
      LoginActionTypes2["custom-social-login"] = "custom-social-login";
      LoginActionTypes2["direct"] = "direct";
    })(LoginActionTypes || (LoginActionTypes = {}));
  }
});

// node_modules/@frontegg/redux-store/constants.js
var FRONTEGG_AFTER_AUTH_REDIRECT_URL, HOSTED_LOGIN_VERIFIER_KEY, authStoreName, impersonationStoreName, connectivityStoreName, auditsStoreName, subscriptionsStoreName, vendorStoreName;
var init_constants3 = __esm({
  "node_modules/@frontegg/redux-store/constants.js"() {
    FRONTEGG_AFTER_AUTH_REDIRECT_URL = "FRONTEGG_AFTER_AUTH_REDIRECT_URL";
    HOSTED_LOGIN_VERIFIER_KEY = "HOSTED_LOGIN_VERIFIER_KEY";
    authStoreName = "auth";
    impersonationStoreName = "impersonation";
    connectivityStoreName = "connectivity";
    auditsStoreName = "auditLogs";
    subscriptionsStoreName = "subscriptions";
    vendorStoreName = "vendor";
  }
});

// node_modules/@frontegg/redux-store/auth/MfaState/interfaces.js
var MFAStep;
var init_interfaces26 = __esm({
  "node_modules/@frontegg/redux-store/auth/MfaState/interfaces.js"() {
    (function(MFAStep2) {
      MFAStep2["verify"] = "verify";
      MFAStep2["recoveryCode"] = "recoveryCode";
      MFAStep2["authenticatorApp"] = "authenticatorApp";
      MFAStep2["smsSetPhoneNumber"] = "smsSetPhoneNumber";
      MFAStep2["smsVerifyCode"] = "smsVerifyCode";
      MFAStep2["emailVerifyCode"] = "emailVerifyCode";
      MFAStep2["noMFAEnrolledStepUp"] = "noMFAEnrolledStepUp";
    })(MFAStep || (MFAStep = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/utils.js
function isEmailPayload(payload) {
  return "email" in payload;
}
var isAbsoluteUrl, isValidRedirectUrl, getRedirectUrl, getSearchParamsFromUrl, getPathAndSearchParamsFromUrl, getSearchParam, TENANT_ID_PARAM_KEY, isMfaRequired, getNumberOfMfaDevices, getMfaStepForEnrolledUsers, getMfaStepForNotEnrolledUsers, isOauthCallbackRoute;
var init_utils3 = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/utils.js"() {
    init_rest_api();
    init_interfaces26();
    isAbsoluteUrl = (path) => {
      try {
        new URL(path);
        return true;
      } catch (e2) {
        return false;
      }
    };
    isValidRedirectUrl = (redirectUrl, allowedRedirectOrigins) => {
      const currentUrl = new URL(window.location.href);
      const redirectURL = new URL(redirectUrl);
      const isSameSite = redirectURL.origin === currentUrl.origin;
      const isOriginInWhiteList = allowedRedirectOrigins.includes(redirectURL.origin);
      return isOriginInWhiteList || isSameSite;
    };
    getRedirectUrl = ({
      authenticatedUrl,
      enforceRedirectToSameSite,
      allowedRedirectOrigins,
      includeQueryParam
    }) => {
      const currentUrl = new URL(window.location.href);
      let redirectUrl = authenticatedUrl;
      const redirectUrlQueryParam = currentUrl.searchParams.get("redirectUrl");
      if (redirectUrlQueryParam) {
        if (!enforceRedirectToSameSite || !isAbsoluteUrl(redirectUrlQueryParam)) {
          redirectUrl = redirectUrlQueryParam;
        } else {
          if (isValidRedirectUrl(redirectUrlQueryParam, allowedRedirectOrigins)) {
            redirectUrl = redirectUrlQueryParam;
          } else {
            console.warn("The redirect url param is not valid, the origin is a different site");
          }
        }
      } else if (includeQueryParam) {
        redirectUrl += window.location.search;
      }
      return redirectUrl;
    };
    getSearchParamsFromUrl = (url) => {
      const {
        searchParams
      } = new URL(url);
      const stringifySearchParam = searchParams.toString();
      if (stringifySearchParam) {
        return `?${stringifySearchParam}`;
      }
    };
    getPathAndSearchParamsFromUrl = (url) => {
      const {
        pathname
      } = new URL(url);
      const searchParams = getSearchParamsFromUrl(url);
      if (searchParams) {
        return pathname + searchParams;
      }
      return pathname;
    };
    getSearchParam = (key) => {
      const params = new URLSearchParams(window.location.search);
      const param = params.get(key);
      return param != null ? param : void 0;
    };
    TENANT_ID_PARAM_KEY = "tenantId";
    isMfaRequired = (user) => {
      if (user.mfaRequired && user.mfaToken) {
        ContextHolder.setAccessToken(null);
        ContextHolder.setUser(null);
        return true;
      } else {
        ContextHolder.setAccessToken(user.accessToken);
        ContextHolder.setUser(user);
        return false;
      }
    };
    getNumberOfMfaDevices = (mfaDevices) => {
      const numberOfWebAuthnDevices = +Boolean(mfaDevices.webauthn.length);
      const numberOfPhoneDevices = +Boolean(mfaDevices.phones.length);
      const numberOfAuthenticators = +Boolean(mfaDevices.authenticators.length);
      const numberOfEmails = +Boolean(mfaDevices.emails.length);
      const totalDevices = numberOfWebAuthnDevices + numberOfPhoneDevices + numberOfAuthenticators + numberOfEmails;
      return {
        numberOfWebAuthnDevices,
        numberOfPhoneDevices,
        numberOfAuthenticators,
        numberOfEmails,
        totalDevices
      };
    };
    getMfaStepForEnrolledUsers = (mfaDevices) => {
      const {
        numberOfPhoneDevices,
        numberOfAuthenticators,
        numberOfEmails,
        totalDevices
      } = getNumberOfMfaDevices(mfaDevices);
      if (totalDevices === 1) {
        if (numberOfAuthenticators) {
          return MFAStep.authenticatorApp;
        } else if (numberOfPhoneDevices) {
          return MFAStep.smsVerifyCode;
        } else if (numberOfEmails) {
          return MFAStep.emailVerifyCode;
        }
      }
      return MFAStep.verify;
    };
    getMfaStepForNotEnrolledUsers = (mfaStrategies) => {
      if (mfaStrategies.length === 1) {
        const [strategy] = mfaStrategies;
        if (strategy === MFAStrategyEnum.AuthenticatorApp) {
          return MFAStep.authenticatorApp;
        } else if (strategy === MFAStrategyEnum.SMS) {
          return MFAStep.smsSetPhoneNumber;
        } else if (strategy === MFAStrategyEnum.EmailCode) {
          return MFAStep.emailVerifyCode;
        }
      }
      return MFAStep.verify;
    };
    isOauthCallbackRoute = (activeUri) => {
      return activeUri === "/oauth/callback";
    };
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/consts.js
var authStrategyLoginStepMap, defaultFronteggRoutes;
var init_consts = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/consts.js"() {
    init_rest_api();
    init_interfaces25();
    authStrategyLoginStepMap = {
      [AuthStrategyEnum.Code]: LoginStep.loginWithOtc,
      [AuthStrategyEnum.EmailAndPassword]: LoginStep.loginWithPassword,
      [AuthStrategyEnum.MagicLink]: LoginStep.magicLinkPreLoginSuccess,
      [AuthStrategyEnum.SmsCode]: LoginStep.loginWithSmsOtc
    };
    defaultFronteggRoutes = {
      authenticatedUrl: "/",
      loginUrl: "/account/login",
      stepUpUrl: "/account/step-up",
      logoutUrl: "/account/logout",
      activateUrl: "/account/activate",
      impersonationUrl: "/account/impersonate",
      acceptInvitationUrl: "/account/invitation/accept",
      forgetPasswordUrl: "/account/forget-password",
      resetPhoneNumberUrl: "/account/reset-phone-number",
      resetPasswordUrl: "/account/reset-password",
      socialLoginCallbackUrl: "/account/social/success",
      signUpUrl: "/account/sign-up",
      oidcRedirectUrl: "/account/oidc/callback",
      samlCallbackUrl: "/account/saml/callback",
      magicLinkCallbackUrl: "/account/login/magic-link",
      hostedLoginRedirectUrl: "/oauth/callback",
      openAppUrl: "/account/redirect"
    };
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/index.js
var loginState, reducers, actions;
var init_LoginState = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/index.js"() {
    init_redux_toolkit_esm();
    init_interfaces25();
    init_utils();
    init_constants3();
    init_utils3();
    init_consts();
    loginState = {
      flow: LoginFlow.Login,
      step: LoginStep.preLogin,
      loading: false,
      email: "",
      tenants: []
    };
    reducers = {
      setLoginState: typeReducerForKey("loginState"),
      resetLoginState: resetStateByKey("loginState", {
        loginState
      })
    };
    actions = {
      requestAuthorize: createAction(`${authStoreName}/requestAuthorize`, (payload = false) => ({
        payload
      })),
      requestAuthorizeSSR: createAction(`${authStoreName}/requestAuthorizeSSR`, (payload) => ({
        payload
      })),
      requestHostedLoginAuthorize: createAction(`${authStoreName}/requestHostedLoginAuthorize`, (payload) => ({
        payload
      })),
      requestHostedLoginAuthorizeV2: createAction(`${authStoreName}/requestHostedLoginAuthorizeV2`, (payload) => ({
        payload
      })),
      handleHostedLoginCallback: createAction(`${authStoreName}/handleHostedLoginCallback`, (payload) => ({
        payload
      })),
      afterAuthNavigation: createAction(`${authStoreName}/afterAuthNavigation`),
      preLogin: createAction(`${authStoreName}/preLogin`, (payload) => ({
        payload
      })),
      postLogin: createAction(`${authStoreName}/postLogin`, (payload) => ({
        payload
      })),
      login: createAction(`${authStoreName}/login`, (payload) => ({
        payload
      })),
      loginWithMfa: createAction(`${authStoreName}/loginWithMfa`, (payload) => ({
        payload
      })),
      recoverMfa: createAction(`${authStoreName}/recoverMfa`, (payload) => ({
        payload
      })),
      logout: createAction(`${authStoreName}/logout`, (payload) => ({
        payload
      })),
      silentLogout: createAction(`${authStoreName}/silentLogout`, (payload) => ({
        payload
      })),
      checkIfAllowToRememberMfaDevice: createAction(`${authStoreName}/checkIfAllowToRememberMfaDevice`, (payload) => ({
        payload
      })),
      changePhoneNumberWithVerification: createAction(`${authStoreName}/changePhoneNumberWithVerification`, (payload) => ({
        payload
      })),
      verifyChangePhoneNumber: createAction(`${authStoreName}/verifyChangePhoneNumber`, (payload) => ({
        payload
      })),
      quickSmsPasswordlessPreLogin: createAction(`${authStoreName}/quickSmsPasswordlessPreLogin`, (payload) => ({
        payload
      })),
      passwordlessPreLogin: createAction(`${authStoreName}/passwordlessPreLogin`, (payload) => ({
        payload
      })),
      passwordlessPostLogin: createAction(`${authStoreName}/passwordlessPostLogin`, (payload) => ({
        payload
      })),
      verifyInviteToken: createAction(`${authStoreName}/verifyInviteToken`, (payload) => ({
        payload
      })),
      webAuthnPrelogin: createAction(`${authStoreName}/webAuthnPrelogin`, (payload) => ({
        payload
      })),
      webAuthnPostLogin: createAction(`${authStoreName}/webAuthnPostLogin`, (payload) => ({
        payload
      })),
      webAuthnCreateNewDeviceSession: createAction(`${authStoreName}/webAuthnCreateNewDeviceSession`, (payload) => ({
        payload
      })),
      webAuthnVerifyNewDeviceSession: createAction(`${authStoreName}/webAuthnVerifyNewDeviceSession`, (payload) => ({
        payload
      })),
      getUserIP: createAction(`${authStoreName}/getUserIP`, (payload) => ({
        payload
      })),
      preEnrollMFAWebAuthnForLogin: createAction(`${authStoreName}/preEnrollWebAuthNForLogin`, (payload) => ({
        payload
      })),
      enrollMFAWebAuthnForLogin: createAction(`${authStoreName}/enrollWebAuthNForLogin`, (payload) => ({
        payload
      })),
      enrollMFAAuthenticatorAppForLogin: createAction(`${authStoreName}/enrollMFAAuthenticatorAppForLogin`, (payload) => ({
        payload
      })),
      preEnrollMFASMSForLogin: createAction(`${authStoreName}/preEnrollMFASMSForLogin`, (payload) => ({
        payload
      })),
      enrollMFASMSForLogin: createAction(`${authStoreName}/enrollMFASMSForLogin`, (payload) => ({
        payload
      })),
      preVerifyMFAWebAuthnForLogin: createAction(`${authStoreName}/preVerifyMFAWebAuthnForLogin`, (payload) => ({
        payload
      })),
      verifyMFAWebAuthnForLogin: createAction(`${authStoreName}/verifyMFAWebAuthnForLogin`, (payload) => ({
        payload
      })),
      preVerifyMFASMSForLogin: createAction(`${authStoreName}/preVerifyMFASMSForLogin`, (payload) => ({
        payload
      })),
      verifyMFASMSForLogin: createAction(`${authStoreName}/verifyMFASMSForLogin`, (payload) => ({
        payload
      })),
      preVerifyMFAEmailCode: createAction(`${authStoreName}/preVerifyMFAEmailCode`, (payload) => ({
        payload
      })),
      verifyMFAEmailCode: createAction(`${authStoreName}/verifyMFAEmailCode`, (payload) => ({
        payload
      })),
      resetBreachedPassword: createAction(`${authStoreName}/resetBreachedPassword`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/ActivateState/interfaces.js
var ActivateAccountStep;
var init_interfaces27 = __esm({
  "node_modules/@frontegg/redux-store/auth/ActivateState/interfaces.js"() {
    (function(ActivateAccountStep2) {
      ActivateAccountStep2["activating"] = "activating";
      ActivateAccountStep2["success"] = "success";
      ActivateAccountStep2["resend"] = "resend";
      ActivateAccountStep2["activatingForm"] = "activatingForm";
    })(ActivateAccountStep || (ActivateAccountStep = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/ActivateState/index.js
var activateState, reducers2, actions2;
var init_ActivateState = __esm({
  "node_modules/@frontegg/redux-store/auth/ActivateState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_interfaces27();
    init_constants3();
    activateState = {
      step: ActivateAccountStep.activating,
      loading: false,
      resentEmail: false,
      activationStrategy: {
        loading: false
      }
    };
    reducers2 = {
      setActivateState: typeReducerForKey("activateState"),
      resetActivateState: resetStateByKey("activateState", {
        activateState
      }),
      setActivateStrategyState: typeReducerNestedKey("activateState", "activationStrategy")
    };
    actions2 = {
      activateAccount: createAction(`${authStoreName}/activateAccount`, (payload) => ({
        payload
      })),
      preActivateAccount: createAction(`${authStoreName}/preActivateAccount`, (payload) => ({
        payload
      })),
      getActivateAccountStrategy: createAction(`${authStoreName}/getActivateAccountStrategy`, (payload) => ({
        payload
      })),
      resendActivationEmail: createAction(`${authStoreName}/resendActivationEmail`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/AcceptInvitationState/interfaces.js
var AcceptInvitationStep;
var init_interfaces28 = __esm({
  "node_modules/@frontegg/redux-store/auth/AcceptInvitationState/interfaces.js"() {
    (function(AcceptInvitationStep2) {
      AcceptInvitationStep2["validate"] = "validate";
      AcceptInvitationStep2["invalid"] = "invalid";
      AcceptInvitationStep2["pending"] = "pending";
      AcceptInvitationStep2["success"] = "success";
      AcceptInvitationStep2["failed"] = "failed";
    })(AcceptInvitationStep || (AcceptInvitationStep = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/AcceptInvitationState/index.js
var acceptInvitationState, reducers3, actions3;
var init_AcceptInvitationState = __esm({
  "node_modules/@frontegg/redux-store/auth/AcceptInvitationState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_interfaces28();
    init_constants3();
    acceptInvitationState = {
      step: AcceptInvitationStep.validate
    };
    reducers3 = {
      setAcceptInvitationState: typeReducerForKey("acceptInvitationState"),
      resetAcceptInvitationState: resetStateByKey("acceptInvitationState", {
        acceptInvitationState
      })
    };
    actions3 = {
      acceptInvitation: createAction(`${authStoreName}/acceptInvitation`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/ForgotPasswordState/interfaces.js
var ForgotPasswordStep;
var init_interfaces29 = __esm({
  "node_modules/@frontegg/redux-store/auth/ForgotPasswordState/interfaces.js"() {
    (function(ForgotPasswordStep2) {
      ForgotPasswordStep2["forgotPassword"] = "forgotPassword";
      ForgotPasswordStep2["success"] = "success";
    })(ForgotPasswordStep || (ForgotPasswordStep = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/ForgotPasswordState/index.js
var forgotPasswordState, reducers4, actions4;
var init_ForgotPasswordState = __esm({
  "node_modules/@frontegg/redux-store/auth/ForgotPasswordState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_interfaces29();
    init_constants3();
    forgotPasswordState = {
      step: ForgotPasswordStep.forgotPassword,
      loading: false,
      email: "",
      passwordConfig: null
    };
    reducers4 = {
      setForgotPasswordState: typeReducerForKey("forgotPasswordState"),
      resetForgotPasswordState: resetStateByKey("forgotPasswordState", {
        forgotPasswordState
      })
    };
    actions4 = {
      forgotPassword: createAction(`${authStoreName}/forgotPassword`, (payload) => ({
        payload
      })),
      resetPassword: createAction(`${authStoreName}/resetPassword`, (payload) => ({
        payload
      })),
      loadPasswordConfig: createAction(`${authStoreName}/loadPasswordConfig`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/interfaces.js
var ResetPhoneNumberStep;
var init_interfaces30 = __esm({
  "node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/interfaces.js"() {
    (function(ResetPhoneNumberStep2) {
      ResetPhoneNumberStep2["ResetPhoneNumber"] = "ResetPhoneNumber";
      ResetPhoneNumberStep2["VerifyResetPhoneNumber"] = "VerifyResetPhoneNumber";
      ResetPhoneNumberStep2["ChangePhoneNumber"] = "ChangePhoneNumber";
    })(ResetPhoneNumberStep || (ResetPhoneNumberStep = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/index.js
var resetPhoneNumberState, reducers5, actions5;
var init_ResetPhoneNumberState = __esm({
  "node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_interfaces30();
    init_constants3();
    resetPhoneNumberState = {
      step: ResetPhoneNumberStep.ResetPhoneNumber,
      loading: false
    };
    reducers5 = {
      setResetPhoneNumberState: typeReducerForKey("resetPhoneNumberState"),
      resetResetPhoneNumberState: resetStateByKey("resetPhoneNumberState", {
        resetPhoneNumberState
      })
    };
    actions5 = {
      resetPhoneNumber: createAction(`${authStoreName}/resetPhoneNumber`, (payload) => ({
        payload
      })),
      verifyResetPhoneNumber: createAction(`${authStoreName}/verifyResetPhoneNumber`, (payload) => ({
        payload
      })),
      changePhoneNumber: createAction(`${authStoreName}/changePhoneNumber`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/SSOState/index.js
var ssoState, reducers6, actions6;
var init_SSOState = __esm({
  "node_modules/@frontegg/redux-store/auth/SSOState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    ssoState = {
      firstLoad: true,
      loading: true,
      saving: false,
      errors: {},
      loaders: {},
      ssoConfigurations: []
    };
    reducers6 = {
      setSSOLoader: loadersReducerForKey("ssoState"),
      setSSOError: errorsReducerForKey("ssoState"),
      setSSOState: typeReducerForKey("ssoState"),
      resetSSOState: resetStateByKey("ssoState", {
        ssoState
      })
    };
    actions6 = {
      loadSSOConfigurationsV2: createAction(`${authStoreName}/loadSSOConfigurationsV2`),
      saveSSOConfigurationV2: createAction(`${authStoreName}/saveSSOConfigurationV2`, (payload) => ({
        payload
      })),
      updateSSOConfiguration: createAction(`${authStoreName}/updateSSOConfiguration`, (payload) => ({
        payload
      })),
      deleteSSOConfiguration: createAction(`${authStoreName}/deleteSSOConfiguration`, (payload) => ({
        payload
      })),
      saveSSODomain: createAction(`${authStoreName}/saveSSODomain`, (payload) => ({
        payload
      })),
      deleteSSODomain: createAction(`${authStoreName}/deleteSSODomain`, (payload) => ({
        payload
      })),
      validateSSODomainV2: createAction(`${authStoreName}/validateSSODomainV2`, (payload) => ({
        payload
      })),
      setSSODefaultRoles: createAction(`${authStoreName}/setSSODefaultRoles`, (payload) => ({
        payload
      })),
      setSSOGroups: createAction(`${authStoreName}/setSSOGroups`, (payload) => ({
        payload
      })),
      updateSSOGroups: createAction(`${authStoreName}/updateSSOGroups`, (payload) => ({
        payload
      })),
      saveSSOConfigurationByMetadata: createAction(`${authStoreName}/saveSSOConfigurationByMetadata`, (payload) => ({
        payload
      })),
      updateSSOConfigurationByMetadata: createAction(`${authStoreName}/updateSSOConfigurationByMetadata`, (payload) => ({
        payload
      })),
      loadSSOConfigurations: createAction(`${authStoreName}/loadSSOConfigurations`),
      loadSSOAuthorizationRoles: createAction(`${authStoreName}/loadSSOAuthorizationRoles`),
      saveSSOConfigurations: createAction(`${authStoreName}/saveSSOConfigurations`, (payload) => ({
        payload
      })),
      // NOTE: use withCallback in case of promise response
      saveSSOConfigurationsFile: createAction(`${authStoreName}/saveSSOConfigurationsFile`, (payload) => ({
        payload
      })),
      saveSSOConfigurationByData: createAction(`${authStoreName}/saveSSOConfigurationByData`, (payload) => ({
        payload
      })),
      saveSSOConfigurationByUrl: createAction(`${authStoreName}/saveSSOConfigurationByUrl`, (payload) => ({
        payload
      })),
      saveSSOConfigurationsFileWithCallback: createAction(`${authStoreName}/saveSSOConfigurationsFileWithCallback`, (payload) => ({
        payload
      })),
      validateSSODomain: createAction(`${authStoreName}/validateSSODomain`, (payload) => ({
        payload
      })),
      updateSSOAuthorizationRoles: createAction(`${authStoreName}/updateSSOAuthorizationRoles`, (payload) => ({
        payload
      })),
      deleteSamlGroup: createAction(`${authStoreName}/deleteSamlGroup`, (payload) => ({
        payload
      })),
      createSamlGroup: createAction(`${authStoreName}/createSamlGroup`, (payload) => ({
        payload
      })),
      oidcPostlogin: createAction(`${authStoreName}/oidcPostlogin`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/ProfileState/index.js
var profileState, reducers7, actions7;
var init_ProfileState = __esm({
  "node_modules/@frontegg/redux-store/auth/ProfileState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    profileState = {
      loading: false,
      error: null
    };
    reducers7 = {
      setProfileState: typeReducerForKey("profileState"),
      resetProfileState: resetStateByKey("profileState", {
        profileState
      })
    };
    actions7 = {
      loadProfile: createAction(`${authStoreName}/loadProfile`),
      saveProfile: createAction(`${authStoreName}/saveProfile`, (payload) => ({
        payload
      })),
      changePassword: createAction(`${authStoreName}/changePassword`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/MfaState/index.js
var mfaState, reducers8, actions8;
var init_MfaState = __esm({
  "node_modules/@frontegg/redux-store/auth/MfaState/index.js"() {
    init_redux_toolkit_esm();
    init_interfaces26();
    init_utils();
    init_constants3();
    mfaState = {
      step: MFAStep.verify,
      loading: false,
      saving: false
    };
    reducers8 = {
      setMfaState: typeReducerForKey("mfaState"),
      resetMfaState: resetStateByKey("mfaState", {
        mfaState
      })
    };
    actions8 = {
      enrollMfa: createAction(`${authStoreName}/enrollMfa`),
      getMFADevices: createAction(`${authStoreName}/getMFADevices`),
      getMFAStrategies: createAction(`${authStoreName}/getMFAStrategies`),
      verifyMfa: createAction(`${authStoreName}/verifyMfa`, (payload) => ({
        payload
      })),
      verifyMfaAfterForce: createAction(`${authStoreName}/verifyMfaAfterForce`, (payload) => ({
        payload
      })),
      disableMfa: createAction(`${authStoreName}/disableMfa`, (payload) => ({
        payload
      })),
      preDisableMfaSms: createAction(`${authStoreName}/preDisableMfaSms`, (payload) => ({
        payload
      })),
      disableMfaSms: createAction(`${authStoreName}/disableMfaSms`, (payload) => ({
        payload
      })),
      preEnrollMfaSms: createAction(`${authStoreName}/preEnrollMfaSms`, (payload) => ({
        payload
      })),
      enrollMfaSms: createAction(`${authStoreName}/enrollMfaSms`, (payload) => ({
        payload
      })),
      preEnrollMfaWebAuthn: createAction(`${authStoreName}/preEnrollMfaWebAuthn`, (payload) => ({
        payload
      })),
      enrollMfaWebAuthn: createAction(`${authStoreName}/enrollMfaWebAuthn`, (payload) => ({
        payload
      })),
      preDisableMfaWebAuthn: createAction(`${authStoreName}/preDisableMfaWebAuthn`, (payload) => ({
        payload
      })),
      disableMfaWebAuthn: createAction(`${authStoreName}/disableMfaWebAuthn`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/TeamState/index.js
var teamState, reducers9, actions9;
var init_TeamState = __esm({
  "node_modules/@frontegg/redux-store/auth/TeamState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    teamState = {
      loaders: {},
      pageOffset: 0,
      pageSize: 20,
      errors: {},
      users: [],
      allUsers: [],
      roles: [],
      permissions: [],
      totalPages: 0,
      shouldShowSubTenantUsersIfReseller: false,
      allUsersQueryParams: {
        _filter: null,
        _offset: 0,
        _limit: 20,
        _order: "DESC",
        _sortBy: "name"
      },
      addUserDialogState: {
        loading: false,
        open: false
      },
      deleteUserDialogState: {
        loading: false,
        open: false
      },
      lockUserDialogState: {
        loading: false,
        open: false
      }
    };
    reducers9 = {
      setTeamLoader: loadersReducerForKey("teamState"),
      setTeamError: errorsReducerForKey("teamState"),
      setTeamState: typeReducerForKey("teamState"),
      resetTeamState: resetStateByKey("teamState", {
        teamState
      })
    };
    actions9 = {
      loadUsersV2: createAction(`${authStoreName}/loadUsersV2`, (payload) => ({
        payload
      })),
      loadUsers: createAction(`${authStoreName}/loadUsers`, (payload) => ({
        payload
      })),
      loadAllSubTenantsUsers: createAction(`${authStoreName}/loadAllSubTenantsUsers`, (payload) => ({
        payload
      })),
      loadRoles: createAction(`${authStoreName}/loadRoles`, (payload) => ({
        payload
      })),
      addUser: createAction(`${authStoreName}/addUser`, (payload) => ({
        payload
      })),
      addUsersBulk: createAction(`${authStoreName}/addUsersBulk`, (payload) => ({
        payload
      })),
      addUserToSubTenants: createAction(`${authStoreName}/addUserToSubTenants`, (payload) => ({
        payload
      })),
      updateUser: createAction(`${authStoreName}/updateUser`, (payload) => ({
        payload
      })),
      deleteUser: createAction(`${authStoreName}/deleteUser`, (payload) => ({
        payload
      })),
      setUserRolesForSubTenants: createAction(`${authStoreName}/setUserRolesForSubTenants`, (payload) => ({
        payload
      })),
      deleteUserFromSubTenants: createAction(`${authStoreName}/deleteUserFromSubTenants`, (payload) => ({
        payload
      })),
      lockUser: createAction(`${authStoreName}/lockUser`, (payload) => ({
        payload
      })),
      resendActivationLink: createAction(`${authStoreName}/resendActivationLink`, (payload) => ({
        payload
      })),
      resendInvitationLink: createAction(`${authStoreName}/resendInvitationLink`, (payload) => ({
        payload
      })),
      resendInvitationEmail: createAction(`${authStoreName}/resendInvitationEmail`, (payload) => ({
        payload
      })),
      resendInvitationLinkToAllSubTenants: createAction(`${authStoreName}/resendInvitationLinkToAllSubTenants`, (payload) => ({
        payload
      })),
      getTemporaryUsersConfig: createAction(`${authStoreName}/getTemporaryUsersConfig`),
      updateUserExpirationTime: createAction(`${authStoreName}/updateUserExpirationTime`, (payload) => ({
        payload
      })),
      setUserAsPermanent: createAction(`${authStoreName}/setUserAsPermanent`, (payload) => ({
        payload
      })),
      getInvitationLink: createAction(`${authStoreName}/getInvitationLink`),
      createInvitationLink: createAction(`${authStoreName}/createInvitationLink`, (payload) => ({
        payload
      })),
      updateInvitationLink: createAction(`${authStoreName}/updateInvitationLink`, (payload) => ({
        payload
      })),
      deleteInvitationLink: createAction(`${authStoreName}/deleteInvitationLink`, (payload) => ({
        payload
      })),
      openAddUserDialog: createAction(`${authStoreName}/openAddUserDialog`, (payload) => ({
        payload
      })),
      closeAddUserDialog: createAction(`${authStoreName}/closeAddUserDialog`, (payload) => ({
        payload
      })),
      openDeleteUserDialog: createAction(`${authStoreName}/openDeleteUserDialog`, (payload) => ({
        payload
      })),
      closeDeleteUserDialog: createAction(`${authStoreName}/closeDeleteUserDialog`, (payload) => ({
        payload
      })),
      openLockUserDialog: createAction(`${authStoreName}/openLockUserDialog`, (payload) => ({
        payload
      })),
      closeLockUserDialog: createAction(`${authStoreName}/closeLockUserDialog`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/SocialLogins/index.js
var socialLoginState, reducers10, actions10;
var init_SocialLogins = __esm({
  "node_modules/@frontegg/redux-store/auth/SocialLogins/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    socialLoginState = {
      firstLoad: true,
      loading: false,
      error: ""
    };
    reducers10 = {
      setSocialLoginsState: typeReducerForKey("socialLoginState"),
      resetSocialLoginsState: resetStateByKey("socialLoginState", {
        socialLoginState
      })
    };
    actions10 = {
      loadSocialLoginsConfiguration: createAction(`${authStoreName}/loadSocialLoginsConfiguration`),
      loadSocialLoginsConfigurationV2: createAction(`${authStoreName}/loadSocialLoginsConfigurationV2`, (payload) => ({
        payload
      })),
      loginViaSocialLogin: createAction(`${authStoreName}/loginViaSocialLogin`, (payload) => ({
        payload
      })),
      setSocialLoginError: createAction(`${authStoreName}/setSocialLoginError`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/SignUp/interfaces.js
var SignUpStage;
var init_interfaces31 = __esm({
  "node_modules/@frontegg/redux-store/auth/SignUp/interfaces.js"() {
    (function(SignUpStage2) {
      SignUpStage2["SignUp"] = "SignUp";
      SignUpStage2["SignUpSuccess"] = "SignUpSuccess";
    })(SignUpStage || (SignUpStage = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/SignUp/index.js
var signUpState, reducers11, actions11;
var init_SignUp = __esm({
  "node_modules/@frontegg/redux-store/auth/SignUp/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_interfaces31();
    init_constants3();
    signUpState = {
      loading: false,
      allowSignUps: false,
      allowNotVerifiedUsersLogin: false,
      firstLoad: true,
      stage: SignUpStage.SignUp
    };
    reducers11 = {
      setSignUpState: typeReducerForKey("signUpState"),
      resetSignUpState: resetStateByKey("signUpState", {
        signUpState
      })
    };
    actions11 = {
      signUpUser: createAction(`${authStoreName}/signUpUser`, (payload) => ({
        payload
      })),
      resetSignUpStateSoft: createAction(`${authStoreName}/resetSignUpStateSoft`)
    };
  }
});

// node_modules/@frontegg/redux-store/auth/ApiTokensState/index.js
var apiTokensState, reducers12, actions12;
var init_ApiTokensState = __esm({
  "node_modules/@frontegg/redux-store/auth/ApiTokensState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    apiTokensState = {
      apiTokenType: null,
      searchValue: "",
      showAddTokenDialog: false,
      createdByUserIdColumn: "show",
      deleteTokenDialog: {
        open: false,
        clientId: ""
      },
      successDialog: {
        open: false,
        secret: "",
        clientId: ""
      },
      loaders: {},
      apiTokensDataTenant: [],
      apiTokensDataUser: [],
      roles: [],
      permissions: [],
      errors: {}
    };
    reducers12 = {
      setApiTokensLoader: loadersReducerForKey("apiTokensState"),
      setApiTokensError: errorsReducerForKey("apiTokensState"),
      setApiTokensState: typeReducerForKey("apiTokensState"),
      resetApiTokensState: resetStateByKey("apiTokensState", {
        apiTokensState
      })
    };
    actions12 = {
      loadApiTokens: createAction(`${authStoreName}/loadApiTokens`, (payload) => ({
        payload
      })),
      loadUserApiTokens: createAction(`${authStoreName}/loadUserApiTokens`, (payload) => ({
        payload
      })),
      loadTenantApiTokens: createAction(`${authStoreName}/loadTenantApiTokens`, (payload) => ({
        payload
      })),
      initApiTokensData: createAction(`${authStoreName}/initApiTokensData`, (payload) => ({
        payload
      })),
      addTenantApiToken: createAction(`${authStoreName}/addTenantApiToken`, (payload) => ({
        payload
      })),
      addUserApiToken: createAction(`${authStoreName}/addUserApiToken`, (payload) => ({
        payload
      })),
      deleteUserApiToken: createAction(`${authStoreName}/deleteUserApiToken`, (payload) => ({
        payload
      })),
      deleteTenantApiToken: createAction(`${authStoreName}/deleteTenantApiToken`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityPolicyState/index.js
var securityPolicyState, reducers13, actions13;
var init_SecurityPolicyState = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityPolicyState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    securityPolicyState = {
      globalPolicy: {
        loading: true
      },
      publicPolicy: {
        loading: false
      },
      vendorMfaPolicy: {
        loading: true
      },
      mfaPolicy: {
        loading: true
      },
      vendorLockoutPolicy: {
        loading: true
      },
      lockoutPolicy: {
        loading: true
      },
      captchaPolicy: {
        loading: true
      },
      passwordHistoryPolicy: {
        loading: true
      },
      passwordPolicy: {
        loading: true
      },
      vendorPasswordHistoryPolicy: {
        loading: true
      },
      publicAuthStrategyPolicy: {
        loading: true
      }
    };
    reducers13 = {
      setSecurityPolicyState: typeReducerForKey("securityPolicyState"),
      setSecurityPolicyGlobalState: typeReducerNestedKey("securityPolicyState", "globalPolicy"),
      setSecurityPolicyPublicState: typeReducerNestedKey("securityPolicyState", "publicPolicy"),
      setSecurityPolicyAuthStrategyPublicState: typeReducerNestedKey("securityPolicyState", "publicAuthStrategyPolicy"),
      setSecurityPolicyMfaState: typeReducerNestedKey("securityPolicyState", "mfaPolicy"),
      setSecurityPolicyVendorMfaState: typeReducerNestedKey("securityPolicyState", "vendorMfaPolicy"),
      setSecurityPolicyVendorLockoutState: typeReducerNestedKey("securityPolicyState", "vendorLockoutPolicy"),
      setSecurityPolicyVendorPasswordHistoryState: typeReducerNestedKey("securityPolicyState", "vendorPasswordHistoryPolicy"),
      setSecurityPolicyLockoutState: typeReducerNestedKey("securityPolicyState", "lockoutPolicy"),
      setSecurityPolicyCaptchaState: typeReducerNestedKey("securityPolicyState", "captchaPolicy"),
      setSecurityPolicyPasswordHistoryState: typeReducerNestedKey("securityPolicyState", "passwordHistoryPolicy"),
      setSecurityPolicyPasswordState: typeReducerNestedKey("securityPolicyState", "passwordPolicy"),
      resetSecurityPolicyState: resetStateByKey("securityPolicyState", {
        securityPolicyState
      })
    };
    actions13 = {
      loadSecurityPolicy: createAction(`${authStoreName}/loadSecurityPolicy`),
      loadPublicSecurityPolicy: createAction(`${authStoreName}/loadPublicSecurityPolicy`),
      loadSecurityPolicyMfa: createAction(`${authStoreName}/loadSecurityPolicyMfa`),
      loadSecurityPolicyVendorMfa: createAction(`${authStoreName}/loadSecurityPolicyVendorMfa`),
      saveSecurityPolicyMfa: createAction(`${authStoreName}/saveSecurityPolicyMfa`, (payload) => ({
        payload
      })),
      loadSecurityPolicyLockout: createAction(`${authStoreName}/loadSecurityPolicyLockout`),
      loadSecurityPolicyVendorLockout: createAction(`${authStoreName}/loadSecurityPolicyVendorLockout`),
      saveSecurityPolicyLockout: createAction(`${authStoreName}/saveSecurityPolicyLockout`, (payload) => ({
        payload
      })),
      loadSecurityPolicyCaptcha: createAction(`${authStoreName}/loadSecurityPolicyCaptcha`),
      loadSecurityPolicyPasswordHistory: createAction(`${authStoreName}/loadSecurityPolicyPasswordHistory`),
      loadSecurityPolicyVendorPasswordHistory: createAction(`${authStoreName}/loadSecurityPolicyVendorPasswordHistory`),
      saveSecurityPolicyPasswordHistory: createAction(`${authStoreName}/saveSecurityPolicyPasswordHistory`, (payload) => ({
        payload
      })),
      loadVendorPasswordConfig: createAction(`${authStoreName}/loadVendorPasswordConfig`),
      loadPublicAuthStrategiesPolicy: createAction(`${authStoreName}/loadPublicAuthStrategiesPolicy`)
    };
  }
});

// node_modules/@frontegg/redux-store/auth/AccountSettingsState/index.js
var accountSettingsState, reducers14, actions14;
var init_AccountSettingsState = __esm({
  "node_modules/@frontegg/redux-store/auth/AccountSettingsState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    accountSettingsState = {
      loading: false
    };
    reducers14 = {
      setAccountSettingsState: typeReducerForKey("accountSettingsState"),
      resetAccountSettingsState: resetStateByKey("accountSettingsState", {
        accountSettingsState
      })
    };
    actions14 = {
      loadAccountSettings: createAction(`${authStoreName}/loadAccountSettings`, (payload) => ({
        payload
      })),
      saveAccountSettings: createAction(`${authStoreName}/saveAccountSettings`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/TenantsState/index.js
var tenantsState, reducers15, actions15;
var init_TenantsState = __esm({
  "node_modules/@frontegg/redux-store/auth/TenantsState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    tenantsState = {
      tenants: [],
      subTenants: [],
      loading: true,
      tenantTree: null
    };
    reducers15 = {
      setTenantsState: typeReducerForKey("tenantsState"),
      resetTenantsState: resetStateByKey("tenantsState", {
        tenantsState
      })
    };
    actions15 = {
      switchTenant: createAction(`${authStoreName}/switchTenant`, (payload) => ({
        payload
      })),
      loadTenants: createAction(`${authStoreName}/loadTenants`, (payload) => ({
        payload
      })),
      loadSubTenants: createAction(`${authStoreName}/loadSubTenants`, (payload) => ({
        payload
      })),
      loadSubTenantsTree: createAction(`${authStoreName}/loadSubTenantsTree`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/RolesState/index.js
var rolesState, reducers16, actions16;
var init_RolesState = __esm({
  "node_modules/@frontegg/redux-store/auth/RolesState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    rolesState = {
      loaders: {},
      errors: {},
      roles: [],
      permissions: [],
      permissionCategories: []
    };
    reducers16 = {
      setRolesState: typeReducerForKey("rolesState"),
      resetRolesState: resetStateByKey("rolesState", {
        rolesState
      }),
      setRolesStateLoader: loadersReducerForKey("rolesState"),
      setRolesStateError: errorsReducerForKey("rolesState")
    };
    actions16 = {
      loadRolesAndPermissions: createAction(`${authStoreName}/loadRoles`, (payload) => ({
        payload
      })),
      addRole: createAction(`${authStoreName}/addRole`, (payload) => ({
        payload
      })),
      updateRole: createAction(`${authStoreName}/updateRole`, (payload) => ({
        payload
      })),
      deleteRole: createAction(`${authStoreName}/deleteRole`, (payload) => ({
        payload
      })),
      attachPermissionsToRole: createAction(`${authStoreName}/attachPermissionsToRole`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/SessionsState/index.js
var sessionsState, reducers17, actions17;
var init_SessionsState = __esm({
  "node_modules/@frontegg/redux-store/auth/SessionsState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    sessionsState = {
      loading: false,
      sessions: []
    };
    reducers17 = {
      setSessionsState: typeReducerForKey("sessionsState"),
      resetSessionsState: resetStateByKey("sessionsState", {
        sessionsState
      })
    };
    actions17 = {
      loadUserSessions: createAction(`${authStoreName}/loadUserSessions`),
      loadCurrentUserSession: createAction(`${authStoreName}/loadCurrentUserSession`),
      deleteUserSession: createAction(`${authStoreName}/deleteUserSession`, (payload) => ({
        payload
      })),
      deleteAllUserSessions: createAction(`${authStoreName}/deleteAllUserSessions`),
      revokeUserSessions: createAction(`${authStoreName}/revokeUserSessions`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SessionsPolicyState/index.js
var sessionsPolicyState, reducers18, actions18;
var init_SessionsPolicyState = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SessionsPolicyState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    sessionsPolicyState = {
      loading: false,
      configurations: {}
    };
    reducers18 = {
      setSessionsPolicyState: typeReducerForKey("sessionsPolicyState"),
      resetSessionsPolicyState: resetStateByKey("sessionsPolicyState", {
        sessionsPolicyState
      })
    };
    actions18 = {
      loadSessionsPolicy: createAction(`${authStoreName}/loadSessionsPolicy`),
      createOrUpdateSessionsPolicy: createAction(`${authStoreName}/createOrUpdateSessionsPolicy`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Security/RestrictionsState/index.js
var restrictionsState, reducers19, actions19;
var init_RestrictionsState = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/RestrictionsState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    init_rest_api();
    restrictionsState = {
      ipRestrictions: {
        loading: false,
        pagination: {
          _offset: 0,
          _limit: 4,
          _filter: RestrictionType.ALLOW
        },
        totalPages: 1,
        userIpValid: false
      },
      emailDomainRestrictions: {
        loading: true
      }
    };
    reducers19 = {
      setRestrictionsState: typeReducerForKey("restrictionsState"),
      setIpRestrictionsState: typeReducerNestedKey("restrictionsState", "ipRestrictions"),
      setEmailDomainRestrictionsState: typeReducerNestedKey("restrictionsState", "emailDomainRestrictions")
    };
    actions19 = {
      checkIfUserIpValid: createAction(`${authStoreName}/checkIfUserIpValid`),
      addCurrentUserIpAndActivate: createAction(`${authStoreName}/addCurrentUserIpAndActivate`, (payload) => ({
        payload
      })),
      loadIpRestrictions: createAction(`${authStoreName}/loadIpRestrictions`),
      saveIpRestriction: createAction(`${authStoreName}/saveIpRestriction`, (payload) => ({
        payload
      })),
      saveIpRestrictionsConfig: createAction(`${authStoreName}/saveIpRestrictionsConfig`, (payload) => ({
        payload
      })),
      deleteIpRestriction: createAction(`${authStoreName}/deleteIpRestriction`, (payload) => ({
        payload
      })),
      loadEmailDomainRestrictions: createAction(`${authStoreName}/loadEmailDomainRestrictions`),
      saveEmailDomainRestriction: createAction(`${authStoreName}/saveEmailDomainRestriction`, (payload) => ({
        payload
      })),
      saveEmailDomainRestrictionsConfig: createAction(`${authStoreName}/saveEmailDomainRestrictionsConfig`, (payload) => ({
        payload
      })),
      deleteEmailDomainRestriction: createAction(`${authStoreName}/deleteEmailDomainRestriction`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Provisioning/index.js
var provisioningState, reducers20, actions20;
var init_Provisioning = __esm({
  "node_modules/@frontegg/redux-store/auth/Provisioning/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    provisioningState = {
      loading: false
    };
    reducers20 = {
      setProvisioningState: typeReducerForKey("provisioningState"),
      resetProvisioningState: resetStateByKey("provisioningState", {
        provisioningState
      })
    };
    actions20 = {
      loadProvisionConnections: createAction(`${authStoreName}/loadProvisionConnections`),
      createProvisionConnection: createAction(`${authStoreName}/createProvisionConnection`, (payload) => ({
        payload
      })),
      deleteProvisionConnection: createAction(`${authStoreName}/deleteProvisionConnection`, (payload) => ({
        payload
      })),
      updateProvisionConnection: createAction(`${authStoreName}/updateProvisionConnection`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/PasskeysState/index.js
var passkeysState, reducers21, actions21;
var init_PasskeysState = __esm({
  "node_modules/@frontegg/redux-store/auth/PasskeysState/index.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_utils();
    passkeysState = {
      devices: [],
      loading: false,
      error: null
    };
    reducers21 = {
      setPasskeysState: typeReducerForKey("passkeysState"),
      resetPasskeysState: resetStateByKey("passkeysState", {
        passkeysState
      })
    };
    actions21 = {
      loadWebAuthnDevices: createAction(`${authStoreName}/loadWebAuthnDevices`),
      deleteWebAuthnDevice: createAction(`${authStoreName}/deleteWebAuthnDevice`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/GroupsState/index.js
var groupsState, reducers22, actions22;
var init_GroupsState = __esm({
  "node_modules/@frontegg/redux-store/auth/GroupsState/index.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_utils();
    groupsState = {
      loaders: {},
      errors: {},
      groups: [],
      groupsConfiguration: {}
    };
    reducers22 = {
      setUsersGroupsLoader: loadersReducerForKey("groupsState"),
      setUsersGroupsError: errorsReducerForKey("groupsState"),
      setGroupsState: typeReducerForKey("groupsState"),
      resetUsersGroupsState: resetStateByKey("groupsState", {
        groupsState
      })
    };
    actions22 = {
      loadGroups: createAction(`${authStoreName}/loadUsersGroups`),
      getGroupById: createAction(`${authStoreName}/getGroupById`, (payload) => ({
        payload
      })),
      createGroup: createAction(`${authStoreName}/createGroup`, (payload) => ({
        payload
      })),
      updateGroup: createAction(`${authStoreName}/updateGroup`, (payload) => ({
        payload
      })),
      deleteGroup: createAction(`${authStoreName}/deleteGroup`, (payload) => ({
        payload
      })),
      addRolesToGroup: createAction(`${authStoreName}/addRolesToGroup`, (payload) => ({
        payload
      })),
      deleteRolesFromGroup: createAction(`${authStoreName}/deleteRolesFromGroup`, (payload) => ({
        payload
      })),
      addUsersToGroup: createAction(`${authStoreName}/addUsersToGroup`, (payload) => ({
        payload
      })),
      deleteUsersFromGroup: createAction(`${authStoreName}/deleteUsersFromGroup`, (payload) => ({
        payload
      })),
      getGroupConfiguration: createAction(`${authStoreName}/getGroupConfiguration`),
      updateGroupConfiguration: createAction(`${authStoreName}/updateGroupConfiguration`, (payload) => ({
        payload
      })),
      getTeamUsers: createAction(`${authStoreName}/getUsers`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/GroupsState/groupsDialogsState.js
var groupsDialogsState, reducers23, actions23;
var init_groupsDialogsState = __esm({
  "node_modules/@frontegg/redux-store/auth/GroupsState/groupsDialogsState.js"() {
    init_utils();
    groupsDialogsState = {
      addGroupDialogState: {
        loading: false,
        open: false
      },
      editGroupDialogState: {
        loading: false,
        open: false
      },
      deleteGroupDialogState: {
        loading: false,
        open: false
      },
      addMembersToGroupDialogState: {
        loading: false,
        open: false,
        userIds: []
      },
      deleteMemberFromGroupDialogState: {
        loading: false,
        open: false
      }
    };
    reducers23 = {
      setGroupsDialogsState: typeReducerForKey("groupsDialogsState"),
      resetGroupsDialogsState: resetStateByKey("groupsState", {
        groupsDialogsState
      }),
      // Add group dialog reducers
      openAddGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "addGroupDialogState", {
        open: true
      }),
      closeAddGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "addGroupDialogState", {
        open: false
      }),
      // Edit group dialog reducers
      openEditGroupDialog: dialogStateForKey("groupsDialogsState", "editGroupDialogState", {
        open: true
      }),
      closeEditGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "editGroupDialogState", {
        open: false,
        loading: false,
        group: void 0
      }),
      // Delete group dialog reducers
      openDeleteGroupDialog: dialogStateForKey("groupsDialogsState", "deleteGroupDialogState", {
        open: true
      }),
      closeDeleteGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "deleteGroupDialogState", {
        open: false,
        loading: false,
        group: void 0
      }),
      // Add members to group dialog reducers
      openAddMembersToGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "addMembersToGroupDialogState", {
        open: true
      }),
      closeAddMembersToGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "addMembersToGroupDialogState", {
        open: false,
        userIds: []
      }),
      // Delete member from group dialog reducers
      openDeleteMemberFromGroupDialog: dialogStateForKey("groupsDialogsState", "deleteMemberFromGroupDialogState", {
        open: true
      }),
      closeDeleteMemberFromGroupDialog: dialogStateForKeyWithoutPayload("groupsDialogsState", "deleteMemberFromGroupDialogState", {
        open: false,
        userId: void 0
      })
    };
    actions23 = {};
  }
});

// node_modules/@frontegg/redux-store/auth/CustomLoginState/index.js
var customLoginState, reducers24, actions24;
var init_CustomLoginState = __esm({
  "node_modules/@frontegg/redux-store/auth/CustomLoginState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    customLoginState = {
      loading: true,
      error: null
    };
    reducers24 = {
      setCustomLoginState: typeReducerForKey("customLoginState"),
      resetCustomLoginState: resetStateByKey("customLoginState", {
        customLoginState
      })
    };
    actions24 = {
      loadTenantMetadata: createAction(`${authStoreName}/loadTenantMetadata`),
      updateTenantMetadata: createAction(`${authStoreName}/updateTenantMetadata`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/types/dialogsStateTypes.js
var init_dialogsStateTypes = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/types/dialogsStateTypes.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/types/stateTypes.js
var AllAccountsStateKeys;
var init_stateTypes = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/types/stateTypes.js"() {
    (function(AllAccountsStateKeys2) {
      AllAccountsStateKeys2["GET_ACCOUNTS"] = "GET_ACCOUNTS";
      AllAccountsStateKeys2["SEARCH_ACCOUNTS"] = "SEARCH_ACCOUNTS";
      AllAccountsStateKeys2["SET_ROOT_ACCOUNT_DATA"] = "SET_ROOT_ACCOUNT_DATA";
      AllAccountsStateKeys2["SET_SELECTED_SUB_ACCOUNT_DATA"] = "SET_SELECTED_SUB_ACCOUNT_DATA";
      AllAccountsStateKeys2["LOAD_NUMBER_OF_USERS_FOR_ACCOUNT"] = "LOAD_NUMBER_OF_USERS_FOR_ACCOUNT";
      AllAccountsStateKeys2["UPDATE_SUB_ACCOUNT_ACCESS_FOR_USER"] = "UPDATE_SUB_ACCOUNT_ACCESS_FOR_USER";
      AllAccountsStateKeys2["CREATE_SUB_ACCOUNT"] = "CREATE_SUB_ACCOUNT";
      AllAccountsStateKeys2["UPDATE_SUB_ACCOUNT"] = "UPDATE_SUB_ACCOUNT";
      AllAccountsStateKeys2["DELETE_SUB_ACCOUNT"] = "DELETE_SUB_ACCOUNT";
      AllAccountsStateKeys2["GET_ACCOUNT_USERS"] = "GET_ACCOUNT_USERS";
      AllAccountsStateKeys2["ADD_USERS_TO_ACCOUNT"] = "ADD_USERS_TO_ACCOUNT";
      AllAccountsStateKeys2["DELETE_USERS_FROM_ACCOUNT"] = "DELETE_USERS_FROM_ACCOUNT";
      AllAccountsStateKeys2["SET_USER_ROLES_FOR_SUB_ACCOUNT"] = "SET_USER_ROLES_FOR_SUB_ACCOUNT";
      AllAccountsStateKeys2["UPDATE_SUB_ACCOUNT_SETTINGS"] = "UPDATE_SUB_ACCOUNT_SETTINGS";
      AllAccountsStateKeys2["GET_USER_JWT"] = "GET_USER_JWT";
      AllAccountsStateKeys2["GET_TEAM_USERS"] = "GET_TEAM_USERS";
    })(AllAccountsStateKeys || (AllAccountsStateKeys = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/types/index.js
var init_types = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/types/index.js"() {
    init_dialogsStateTypes();
    init_stateTypes();
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/index.js
var allAccountsInitialState, reducers25, actions25;
var init_AllAccountsState = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/index.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_utils();
    init_rest_api();
    init_types();
    allAccountsInitialState = {
      loaders: {},
      errors: {},
      accounts: {
        tenantId: "",
        children: []
      },
      accountsQueryParams: {
        _limit: 50,
        _offset: 0,
        _filter: "",
        _subTenantId: ""
      },
      searchAccountsData: [],
      rootAccount: {
        tenantId: ""
      },
      selectedAccount: {
        tenantId: "",
        userJwt: {
          accessToken: "",
          expiresIn: 0,
          expires: ""
        },
        users: [],
        usersQueryParams: {
          _offset: 0,
          _limit: 10,
          _order: PaginationOrderEnum.DESC,
          _sortBy: SortByEnum.name
        },
        usersPageOffset: 0,
        accountSettings: {}
      }
    };
    reducers25 = {
      setAllAccountsLoader: loadersReducerForKey("allAccountsState"),
      setAllAccountsError: errorsReducerForKey("allAccountsState"),
      setAllAccountsState: typeReducerForKey("allAccountsState"),
      setSelectedAccountState: typeReducerNestedKey("allAccountsState", "selectedAccount"),
      resetAllAccountsState: resetStateByKey("allAccountsState", {
        allAccountsState: allAccountsInitialState
      })
    };
    actions25 = {
      loadAccounts: createAction(`${authStoreName}/loadAccounts`, (payload) => ({
        payload
      })),
      searchAccounts: createAction(`${authStoreName}/searchAccounts`, (payload) => ({
        payload
      })),
      updateSubAccountAccessForUser: createAction(`${authStoreName}/updateSubAccountAccessForUser`, (payload) => ({
        payload
      })),
      createSubAccount: createAction(`${authStoreName}/createSubAccount`, (payload) => ({
        payload
      })),
      updateSubAccount: createAction(`${authStoreName}/updateAccount`, (payload) => ({
        payload
      })),
      deleteSubAccount: createAction(`${authStoreName}/deleteAccount`, (payload) => ({
        payload
      })),
      updateSubAccountSettings: createAction(`${authStoreName}/updateSubAccountSettings`, (payload) => ({
        payload
      })),
      addUsersToAccount: createAction(`${authStoreName}/addUsersToAccount`, (payload) => ({
        payload
      })),
      getAccountUsers: createAction(`${authStoreName}/getAccountUsers`, (payload) => ({
        payload
      })),
      deleteUsersFromAccount: createAction(`${authStoreName}/deleteUsersFromAccount`, (payload) => ({
        payload
      })),
      setUserRolesForSubAccount: createAction(`${authStoreName}/setUserRolesForSubAccount`, (payload) => ({
        payload
      })),
      getUserJwtForSubAccount: createAction(`${authStoreName}/getUserJwtForSubAccount`, (payload) => ({
        payload
      })),
      setRootAccountData: createAction(`${authStoreName}/setRootAccountData`),
      setSelectedSubAccountData: createAction(`${authStoreName}/setSelectedSubAccountData`, (payload) => ({
        payload
      })),
      loadNumberOfUsersForSelectedSubAccount: createAction(`${authStoreName}/loadNumberOfUsersForSelectedSubAccount`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/allAccountsDialogsState.js
var allAccountsDialogsState, reducers26;
var init_allAccountsDialogsState = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/allAccountsDialogsState.js"() {
    init_utils();
    allAccountsDialogsState = {
      createSubAccountDialog: {
        loading: false,
        open: false,
        error: false,
        jwt: "",
        canSelectParentAccount: false
      },
      updateSubAccountDialog: {
        accountId: "",
        accountName: "",
        loading: false,
        open: false,
        error: false,
        jwt: ""
      },
      deleteSubAccountDialog: {
        accountId: "",
        accountName: "",
        isParentAccount: false,
        loading: false,
        open: false,
        error: false,
        jwt: ""
      },
      addUsersToAccountDialog: {
        loading: false,
        open: false,
        accountName: "",
        accountId: "",
        permissionToGiveAccessToSubAccounts: false,
        jwt: ""
      },
      deleteUserFromAccountDialog: {
        userId: "",
        userName: "",
        accountId: "",
        loading: false,
        open: false,
        jwt: ""
      },
      editUserRolesDialog: {
        loading: false,
        open: false,
        jwt: "",
        accountId: "",
        userId: "",
        userName: "",
        userRoles: []
      }
    };
    reducers26 = {
      setAllAccountDialogsState: typeReducerForKey("allAccountsDialogsState"),
      resetAllAccountDialogsState: resetStateByKey("allAccountsDialogsState", {
        allAccountsDialogsState
      }),
      // Create new account dialog
      openCreateSubAccountDialog: dialogStateForKey("allAccountsDialogsState", "createSubAccountDialog", {
        open: true
      }),
      closeCreateSubAccountDialog: dialogStateForKeyWithoutPayload("allAccountsDialogsState", "createSubAccountDialog", allAccountsDialogsState.createSubAccountDialog),
      // Update account dialog
      openUpdateSubAccountDialog: dialogStateForKey("allAccountsDialogsState", "updateSubAccountDialog", {
        open: true
      }),
      closeUpdateSubAccountDialog: dialogStateForKeyWithoutPayload("allAccountsDialogsState", "updateSubAccountDialog", allAccountsDialogsState.updateSubAccountDialog),
      // Delete account dialog
      openDeleteSubAccountDialog: dialogStateForKey("allAccountsDialogsState", "deleteSubAccountDialog", {
        open: true
      }),
      closeDeleteSubAccountDialog: dialogStateForKeyWithoutPayload("allAccountsDialogsState", "deleteSubAccountDialog", allAccountsDialogsState.deleteSubAccountDialog),
      // Add users to account dialog
      openAddUsersToAccountDialog: dialogStateForKey("allAccountsDialogsState", "addUsersToAccountDialog", {
        open: true
      }),
      closeAddUsersToAccountDialog: dialogStateForKeyWithoutPayload("allAccountsDialogsState", "addUsersToAccountDialog", allAccountsDialogsState.addUsersToAccountDialog),
      // Delete user from account dialog
      openDeleteUserFromAccountDialog: dialogStateForKey("allAccountsDialogsState", "deleteUserFromAccountDialog", {
        open: true
      }),
      closeDeleteUserFromAccountDialog: dialogStateForKeyWithoutPayload("allAccountsDialogsState", "deleteUserFromAccountDialog", allAccountsDialogsState.deleteUserFromAccountDialog),
      // Edit user roles dialog
      openEditUserRolesDialog: dialogStateForKey("allAccountsDialogsState", "editUserRolesDialog", {
        open: true
      }),
      closeEditUserRolesDialog: dialogStateForKeyWithoutPayload("allAccountsDialogsState", "editUserRolesDialog", allAccountsDialogsState.editUserRolesDialog)
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/index.js
var securityCenterState, reducers27, actions26;
var init_SecurityCenterState = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/index.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_utils();
    securityCenterState = {
      loaders: {},
      errors: {},
      recommendations: void 0,
      insights: void 0,
      score: 0,
      breachedPasswordUsersTable: {
        users: [],
        usersPageOffset: 0,
        totalUsersItems: 0,
        totalUsersPages: 0,
        queryParams: {
          _offset: 0,
          _limit: 10
        }
      },
      unenrolledMfaUsersTable: {
        users: [],
        usersPageOffset: 0,
        totalUsersItems: 0,
        totalUsersPages: 0,
        queryParams: {
          _offset: 0,
          _limit: 10
        }
      },
      inactiveUsersTable: {
        users: [],
        usersPageOffset: 0,
        totalUsersItems: 0,
        totalUsersPages: 0,
        queryParams: {
          _offset: 0,
          _limit: 10,
          _maxInactiveSeconds: 7776e3
        }
      }
    };
    reducers27 = {
      setSecurityCenterState: typeReducerForKey("securityCenterState"),
      resetSecurityCenterState: resetStateByKey("securityCenterState", {
        securityCenterState
      }),
      setSecurityCenterStateLoader: loadersReducerForKey("securityCenterState"),
      setSecurityCenterStateError: errorsReducerForKey("securityCenterState")
    };
    actions26 = {
      loadRecommendations: createAction(`${authStoreName}/loadRecommendations`),
      loadInsights: createAction(`${authStoreName}/loadInsights`),
      sendResetBreachedPasswordEmail: createAction(`${authStoreName}/sendResetBreachedPasswordEmail`, (payload) => ({
        payload
      })),
      sendBulkResetBreachedPasswordEmails: createAction(`${authStoreName}/sendBulkResetBreachedPasswordEmails`, (payload) => ({
        payload
      })),
      loadBreachedPasswordUsers: createAction(`${authStoreName}/loadBreachedPasswordUsers`, (payload) => ({
        payload
      })),
      loadUnenrolledMfaUsers: createAction(`${authStoreName}/loadUnenrolledMfaUsers`, (payload) => ({
        payload
      })),
      loadInactiveUsers: createAction(`${authStoreName}/loadInactiveUsers`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/SmsState/index.js
var smsState, reducers28, actions27;
var init_SmsState = __esm({
  "node_modules/@frontegg/redux-store/auth/SmsState/index.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_utils();
    smsState = {
      loading: false,
      error: null,
      phoneNumbers: void 0
    };
    reducers28 = {
      setSmsState: typeReducerForKey("smsState"),
      resetSmsState: resetStateByKey("smsState", {
        smsState
      })
    };
    actions27 = {
      loadPhoneNumbers: createAction(`${authStoreName}/loadPhoneNumbers`),
      setUpPhoneNumber: createAction(`${authStoreName}/setUpPhoneNumber`, (payload) => ({
        payload
      })),
      verifyPhoneNumber: createAction(`${authStoreName}/verifyPhoneNumber`, (payload) => ({
        payload
      })),
      deletePhoneNumber: createAction(`${authStoreName}/deletePhoneNumber`, (payload) => ({
        payload
      })),
      verifyDeletePhoneNumber: createAction(`${authStoreName}/verifyDeletePhoneNumber`, (payload) => ({
        payload
      })),
      preVerifyPhoneNumber: createAction(`${authStoreName}/preVerifyPhoneNumber`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/consts.js
var ACR_VALUE, AMR_MFA_VALUE, AMR_ADDITIONAL_VALUE, SHOULD_STEP_UP_KEY, STEP_UP_MAX_AGE_PARAM_NAME;
var init_consts2 = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/consts.js"() {
    ACR_VALUE = "http://schemas.openid.net/pape/policies/2007/06/multi-factor";
    AMR_MFA_VALUE = "mfa";
    AMR_ADDITIONAL_VALUE = ["otp", "sms", "hwk"];
    SHOULD_STEP_UP_KEY = "SHOULD_STEP_UP";
    STEP_UP_MAX_AGE_PARAM_NAME = "maxAge";
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/utils.js
function setAfterAuthRedirectUrlForStepUp() {
  const encodedRedirectUrl = window.location.pathname + window.location.search;
  window.localStorage.setItem(FRONTEGG_AFTER_AUTH_REDIRECT_URL, encodedRedirectUrl);
}
var isSteppedUp, redirectByStepUpUrl;
var init_utils4 = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/utils.js"() {
    init_constants3();
    init_consts2();
    isSteppedUp = (user, {
      maxAge
    } = {}) => {
      if (!user)
        return false;
      const {
        amr = [],
        acr = "",
        auth_time
      } = user;
      if (maxAge && auth_time) {
        const isMaxAgeValid = Date.now() / 1e3 - auth_time <= maxAge;
        if (!isMaxAgeValid)
          return false;
      }
      const isACRValid = acr === ACR_VALUE;
      const isAMRIncludesMFA = amr.indexOf(AMR_MFA_VALUE) !== -1;
      const isAMRIncludesMethod = AMR_ADDITIONAL_VALUE.find((method) => amr.indexOf(method)) !== void 0;
      return isACRValid && isAMRIncludesMFA && isAMRIncludesMethod;
    };
    redirectByStepUpUrl = (stepUpUrl, onRedirectTo, maxAge) => {
      setAfterAuthRedirectUrlForStepUp();
      const searchParams = new URLSearchParams(window.location.search);
      if (maxAge) {
        searchParams.set(STEP_UP_MAX_AGE_PARAM_NAME, maxAge.toString());
      }
      onRedirectTo(`${stepUpUrl}${searchParams ? `?${searchParams}` : ""}`, {
        refresh: false
      });
    };
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/index.js
var stepUpState, reducers29, actions28;
var init_StepUpState = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/index.js"() {
    init_redux_toolkit_esm();
    init_utils();
    init_constants3();
    init_utils4();
    init_consts2();
    stepUpState = {
      loading: false,
      mfaDevices: void 0,
      mfaToken: ""
    };
    reducers29 = {
      setStepUpState: typeReducerForKey("stepUpState"),
      resetStepUpState: resetStateByKey("stepUpState", {
        stepUpState
      })
    };
    actions28 = {
      stepUpHostedLogin: createAction(`${authStoreName}/stepUpHostedLogin`, (payload) => ({
        payload
      })),
      generateStepUpSession: createAction(`${authStoreName}/generateStepUpSession`, (payload) => ({
        payload
      })),
      stepUpWithAuthenticator: createAction(`${authStoreName}/stepUpWithAuthenticator`, (payload) => ({
        payload
      })),
      preVerifyMFASMSForStepUp: createAction(`${authStoreName}/preVerifyMFASMSForStepUp`, (payload) => ({
        payload
      })),
      verifyMFASMSForStepUp: createAction(`${authStoreName}/verifyMFASMSForStepUp`, (payload) => ({
        payload
      })),
      preVerifyMFAWebAuthnForStepUp: createAction(`${authStoreName}/preVerifyMFAWebAuthnForStepUp`, (payload) => ({
        payload
      })),
      verifyMFAWebAuthnForStepUp: createAction(`${authStoreName}/verifyMFAWebAuthnForStepUp`, (payload) => ({
        payload
      })),
      preVerifyMFAEmailCodeForStepUp: createAction(`${authStoreName}/preVerifyMFAEmailCodeForStepUp`, (payload) => ({
        payload
      })),
      verifyMFAEmailCodeForStepUp: createAction(`${authStoreName}/verifyMFAEmailCodeForStepUp`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/initialState.js
var reinitializeState, initialState;
var init_initialState = __esm({
  "node_modules/@frontegg/redux-store/auth/initialState.js"() {
    init_extends();
    init_LoginState();
    init_ActivateState();
    init_AcceptInvitationState();
    init_ForgotPasswordState();
    init_ResetPhoneNumberState();
    init_SSOState();
    init_ProfileState();
    init_MfaState();
    init_TeamState();
    init_SocialLogins();
    init_SignUp();
    init_ApiTokensState();
    init_SecurityPolicyState();
    init_AccountSettingsState();
    init_TenantsState();
    init_RolesState();
    init_SessionsState();
    init_SessionsPolicyState();
    init_RestrictionsState();
    init_Provisioning();
    init_PasskeysState();
    init_GroupsState();
    init_groupsDialogsState();
    init_CustomLoginState();
    init_AllAccountsState();
    init_allAccountsDialogsState();
    init_SecurityCenterState();
    init_consts();
    init_SmsState();
    init_StepUpState();
    reinitializeState = {
      isAuthenticated: false,
      isLoading: true,
      isSSOAuth: false,
      user: null,
      signUpState,
      loginState,
      stepUpState,
      activateState,
      acceptInvitationState,
      forgotPasswordState,
      ssoState,
      profileState,
      customLoginState,
      mfaState,
      teamState,
      groupsState,
      groupsDialogsState,
      socialLoginState,
      apiTokensState,
      securityPolicyState,
      accountSettingsState,
      tenantsState,
      rolesState,
      resetPhoneNumberState,
      sessionsState,
      sessionsPolicyState,
      restrictionsState,
      provisioningState,
      passkeysState,
      allAccountsState: allAccountsInitialState,
      allAccountsDialogsState,
      securityCenterState,
      smsState
    };
    initialState = _extends({
      routes: defaultFronteggRoutes,
      onRedirectTo: () => {
      }
    }, reinitializeState);
  }
});

// node_modules/@frontegg/redux-store/auth/ImpersonationState/interfaces.js
var ImpersonateStep;
var init_interfaces32 = __esm({
  "node_modules/@frontegg/redux-store/auth/ImpersonationState/interfaces.js"() {
    (function(ImpersonateStep2) {
      ImpersonateStep2["impersonating"] = "impersonating";
      ImpersonateStep2["success"] = "success";
    })(ImpersonateStep || (ImpersonateStep = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/ImpersonationState/index.js
var impersonateState, reducers30, actions29;
var init_ImpersonationState = __esm({
  "node_modules/@frontegg/redux-store/auth/ImpersonationState/index.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_utils();
    init_interfaces32();
    impersonateState = {
      step: ImpersonateStep.impersonating,
      loading: false
    };
    reducers30 = {
      setImpersonateState: typeReducerForKey("impersonateState"),
      resetImpersonateState: resetStateByKey("impersonateState", {
        impersonateState
      })
    };
    actions29 = {
      impersonate: createAction(`${impersonationStoreName}/impersonate`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/auth/reducer.js
var reducer, sliceActions, actions30;
var init_reducer = __esm({
  "node_modules/@frontegg/redux-store/auth/reducer.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_utils();
    init_initialState();
    init_constants3();
    init_LoginState();
    init_StepUpState();
    init_ActivateState();
    init_AcceptInvitationState();
    init_ForgotPasswordState();
    init_SSOState();
    init_MfaState();
    init_ProfileState();
    init_TeamState();
    init_SocialLogins();
    init_SignUp();
    init_ApiTokensState();
    init_SecurityPolicyState();
    init_AccountSettingsState();
    init_TenantsState();
    init_RolesState();
    init_ResetPhoneNumberState();
    init_SessionsState();
    init_SessionsPolicyState();
    init_RestrictionsState();
    init_Provisioning();
    init_ImpersonationState();
    init_PasskeysState();
    init_GroupsState();
    init_groupsDialogsState();
    init_CustomLoginState();
    init_AllAccountsState();
    init_allAccountsDialogsState();
    init_SecurityCenterState();
    init_SmsState();
    ({
      reducer,
      actions: sliceActions
    } = createSlice({
      name: authStoreName,
      initialState,
      reducers: _extends({
        resetState: (state) => _extends({}, state, reinitializeState),
        setState: (state, {
          payload
        }) => _extends({}, state, payload),
        setUser: typeReducer("user"),
        setEntitlements: typeReducerNestedKey("user", "entitlements")
      }, reducers, reducers29, reducers10, reducers2, reducers30, reducers3, reducers4, reducers5, reducers11, reducers7, reducers24, reducers6, reducers8, reducers9, reducers22, reducers23, reducers12, reducers13, reducers14, reducers15, reducers16, reducers17, reducers18, reducers19, reducers20, reducers21, reducers25, reducers26, reducers27, reducers28)
    }));
    actions30 = _extends({
      loadEntitlements: createAction(`${authStoreName}/loadEntitlements`, (payload) => ({
        payload
      }))
    }, sliceActions, actions, actions28, actions10, actions2, actions3, actions4, actions5, actions11, actions7, actions24, actions6, actions8, actions9, actions22, actions23, actions12, actions13, actions14, actions15, actions16, actions17, actions18, actions19, actions20, actions29, actions21, actions25, actions26, actions27);
  }
});

// node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js
var createSymbol, CANCEL, CHANNEL_END_TYPE, IO, MATCH, MULTICAST, SAGA_ACTION, SELF_CANCELLATION, TASK, TASK_CANCEL, TERMINATE, SAGA_LOCATION;
var init_redux_saga_symbols_esm = __esm({
  "node_modules/@redux-saga/symbols/dist/redux-saga-symbols.esm.js"() {
    createSymbol = function createSymbol2(name10) {
      return "@@redux-saga/" + name10;
    };
    CANCEL = createSymbol("CANCEL_PROMISE");
    CHANNEL_END_TYPE = createSymbol("CHANNEL_END");
    IO = createSymbol("IO");
    MATCH = createSymbol("MATCH");
    MULTICAST = createSymbol("MULTICAST");
    SAGA_ACTION = createSymbol("SAGA_ACTION");
    SELF_CANCELLATION = createSymbol("SELF_CANCELLATION");
    TASK = createSymbol("TASK");
    TASK_CANCEL = createSymbol("TASK_CANCEL");
    TERMINATE = createSymbol("TERMINATE");
    SAGA_LOCATION = createSymbol("LOCATION");
  }
});

// node_modules/@redux-saga/is/dist/redux-saga-is.esm.js
var undef, notUndef, func, string, array, object, promise, iterator, task, buffer, pattern, channel, stringableFunc, symbol, multicast, effect;
var init_redux_saga_is_esm = __esm({
  "node_modules/@redux-saga/is/dist/redux-saga-is.esm.js"() {
    init_redux_saga_symbols_esm();
    undef = function undef2(v2) {
      return v2 === null || v2 === void 0;
    };
    notUndef = function notUndef2(v2) {
      return v2 !== null && v2 !== void 0;
    };
    func = function func2(f3) {
      return typeof f3 === "function";
    };
    string = function string2(s2) {
      return typeof s2 === "string";
    };
    array = Array.isArray;
    object = function object2(obj) {
      return obj && !array(obj) && typeof obj === "object";
    };
    promise = function promise2(p2) {
      return p2 && func(p2.then);
    };
    iterator = function iterator2(it) {
      return it && func(it.next) && func(it.throw);
    };
    task = function task2(t2) {
      return t2 && t2[TASK];
    };
    buffer = function buffer2(buf) {
      return buf && func(buf.isEmpty) && func(buf.take) && func(buf.put);
    };
    pattern = function pattern2(pat) {
      return pat && (string(pat) || symbol(pat) || func(pat) || array(pat) && pat.every(pattern2));
    };
    channel = function channel2(ch) {
      return ch && func(ch.take) && func(ch.close);
    };
    stringableFunc = function stringableFunc2(f3) {
      return func(f3) && f3.hasOwnProperty("toString");
    };
    symbol = function symbol2(sym) {
      return Boolean(sym) && typeof Symbol === "function" && sym.constructor === Symbol && sym !== Symbol.prototype;
    };
    multicast = function multicast2(ch) {
      return channel(ch) && ch[MULTICAST];
    };
    effect = function effect2(eff) {
      return eff && eff[IO];
    };
  }
});

// node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js
function delayP(ms, val) {
  if (val === void 0) {
    val = true;
  }
  if (ms > MAX_SIGNED_INT) {
    throw new Error("delay only supports a maximum value of " + MAX_SIGNED_INT + "ms");
  }
  var timeoutId;
  var promise3 = new Promise(function(resolve) {
    timeoutId = setTimeout(resolve, Math.min(MAX_SIGNED_INT, ms), val);
  });
  promise3[CANCEL] = function() {
    clearTimeout(timeoutId);
  };
  return promise3;
}
var MAX_SIGNED_INT, redux_saga_delay_p_esm_default;
var init_redux_saga_delay_p_esm = __esm({
  "node_modules/@redux-saga/delay-p/dist/redux-saga-delay-p.esm.js"() {
    init_redux_saga_symbols_esm();
    MAX_SIGNED_INT = 2147483647;
    redux_saga_delay_p_esm_default = delayP;
  }
});

// node_modules/@redux-saga/core/dist/io-22ea0cf9.js
function check(value, predicate3, error) {
  if (!predicate3(value)) {
    throw new Error(error);
  }
}
function remove(array4, item) {
  var index = array4.indexOf(item);
  if (index >= 0) {
    array4.splice(index, 1);
  }
}
function once(fn2) {
  var called = false;
  return function() {
    if (called) {
      return;
    }
    called = true;
    fn2();
  };
}
function makeIterator(next, thro, name10) {
  if (thro === void 0) {
    thro = kThrow;
  }
  if (name10 === void 0) {
    name10 = "iterator";
  }
  var iterator3 = {
    meta: {
      name: name10
    },
    next,
    throw: thro,
    return: kReturn,
    isSagaIterator: true
  };
  if (typeof Symbol !== "undefined") {
    iterator3[Symbol.iterator] = function() {
      return iterator3;
    };
  }
  return iterator3;
}
function logError(error, _ref2) {
  var sagaStack2 = _ref2.sagaStack;
  console.error(error);
  console.error(sagaStack2);
}
function createAllStyleChildCallbacks(shape, parentCallback) {
  var keys = Object.keys(shape);
  var totalCount = keys.length;
  if (true) {
    check(totalCount, function(c2) {
      return c2 > 0;
    }, "createAllStyleChildCallbacks: get an empty array or object");
  }
  var completedCount = 0;
  var completed2;
  var results = array(shape) ? createEmptyArray(totalCount) : {};
  var childCallbacks = {};
  function checkEnd() {
    if (completedCount === totalCount) {
      completed2 = true;
      parentCallback(results);
    }
  }
  keys.forEach(function(key) {
    var chCbAtKey = function chCbAtKey2(res, isErr) {
      if (completed2) {
        return;
      }
      if (isErr || shouldComplete(res)) {
        parentCallback.cancel();
        parentCallback(res, isErr);
      } else {
        results[key] = res;
        completedCount++;
        checkEnd();
      }
    };
    chCbAtKey.cancel = noop;
    childCallbacks[key] = chCbAtKey;
  });
  parentCallback.cancel = function() {
    if (!completed2) {
      completed2 = true;
      keys.forEach(function(key) {
        return childCallbacks[key].cancel();
      });
    }
  };
  return childCallbacks;
}
function getMetaInfo(fn2) {
  return {
    name: fn2.name || "anonymous",
    location: getLocation(fn2)
  };
}
function getLocation(instrumented) {
  return instrumented[SAGA_LOCATION];
}
function compose2() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }
  if (funcs.length === 0) {
    return function(arg) {
      return arg;
    };
  }
  if (funcs.length === 1) {
    return funcs[0];
  }
  return funcs.reduce(function(a2, b2) {
    return function() {
      return a2(b2.apply(void 0, arguments));
    };
  });
}
function ringBuffer(limit, overflowAction) {
  if (limit === void 0) {
    limit = 10;
  }
  var arr = new Array(limit);
  var length = 0;
  var pushIndex = 0;
  var popIndex = 0;
  var push = function push2(it) {
    arr[pushIndex] = it;
    pushIndex = (pushIndex + 1) % limit;
    length++;
  };
  var take2 = function take3() {
    if (length != 0) {
      var it = arr[popIndex];
      arr[popIndex] = null;
      length--;
      popIndex = (popIndex + 1) % limit;
      return it;
    }
  };
  var flush3 = function flush4() {
    var items = [];
    while (length) {
      items.push(take2());
    }
    return items;
  };
  return {
    isEmpty: function isEmpty() {
      return length == 0;
    },
    put: function put2(it) {
      if (length < limit) {
        push(it);
      } else {
        var doubledLimit;
        switch (overflowAction) {
          case ON_OVERFLOW_THROW:
            throw new Error(BUFFER_OVERFLOW);
          case ON_OVERFLOW_SLIDE:
            arr[pushIndex] = it;
            pushIndex = (pushIndex + 1) % limit;
            popIndex = pushIndex;
            break;
          case ON_OVERFLOW_EXPAND:
            doubledLimit = 2 * limit;
            arr = flush3();
            length = arr.length;
            pushIndex = arr.length;
            popIndex = 0;
            arr.length = doubledLimit;
            limit = doubledLimit;
            push(it);
            break;
          default:
        }
      }
    },
    take: take2,
    flush: flush3
  };
}
function take(patternOrChannel, multicastPattern) {
  if (patternOrChannel === void 0) {
    patternOrChannel = "*";
  }
  if (arguments.length) {
    check(arguments[0], notUndef, "take(patternOrChannel): patternOrChannel is undefined");
  }
  if (pattern(patternOrChannel)) {
    if (notUndef(multicastPattern)) {
      console.warn("take(pattern) takes one argument but two were provided. Consider passing an array for listening to several action types");
    }
    return makeEffect(TAKE, {
      pattern: patternOrChannel
    });
  }
  if (multicast(patternOrChannel) && notUndef(multicastPattern) && pattern(multicastPattern)) {
    return makeEffect(TAKE, {
      channel: patternOrChannel,
      pattern: multicastPattern
    });
  }
  if (channel(patternOrChannel)) {
    if (notUndef(multicastPattern)) {
      console.warn("take(channel) takes one argument but two were provided. Second argument is ignored.");
    }
    return makeEffect(TAKE, {
      channel: patternOrChannel
    });
  }
  if (true) {
    throw new Error("take(patternOrChannel): argument " + patternOrChannel + " is not valid channel or a valid pattern");
  }
}
function put(channel$1, action) {
  if (true) {
    if (arguments.length > 1) {
      check(channel$1, notUndef, "put(channel, action): argument channel is undefined");
      check(channel$1, channel, "put(channel, action): argument " + channel$1 + " is not a valid channel");
      check(action, notUndef, "put(channel, action): argument action is undefined");
    } else {
      check(channel$1, notUndef, "put(action): argument action is undefined");
    }
  }
  if (undef(action)) {
    action = channel$1;
    channel$1 = void 0;
  }
  return makeEffect(PUT, {
    channel: channel$1,
    action
  });
}
function all(effects) {
  var eff = makeEffect(ALL, effects);
  eff.combinator = true;
  return eff;
}
function getFnCallDescriptor(fnDescriptor, args) {
  var context = null;
  var fn2;
  if (func(fnDescriptor)) {
    fn2 = fnDescriptor;
  } else {
    if (array(fnDescriptor)) {
      context = fnDescriptor[0];
      fn2 = fnDescriptor[1];
    } else {
      context = fnDescriptor.context;
      fn2 = fnDescriptor.fn;
    }
    if (context && string(fn2) && func(context[fn2])) {
      fn2 = context[fn2];
    }
  }
  return {
    context,
    fn: fn2,
    args
  };
}
function call(fnDescriptor) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  if (true) {
    var arg0 = typeof args[0] === "number" ? args[0] : "ms";
    check(fnDescriptor, isNotDelayEffect, "instead of writing `yield call(delay, " + arg0 + ")` where delay is an effect from `redux-saga/effects` you should write `yield delay(" + arg0 + ")`");
    validateFnDescriptor("call", fnDescriptor);
  }
  return makeEffect(CALL, getFnCallDescriptor(fnDescriptor, args));
}
function fork(fnDescriptor) {
  if (true) {
    validateFnDescriptor("fork", fnDescriptor);
    check(fnDescriptor, function(arg) {
      return !effect(arg);
    }, "fork: argument must not be an effect");
  }
  for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    args[_key3 - 1] = arguments[_key3];
  }
  return makeEffect(FORK, getFnCallDescriptor(fnDescriptor, args));
}
function cancel(taskOrTasks) {
  if (taskOrTasks === void 0) {
    taskOrTasks = SELF_CANCELLATION;
  }
  if (true) {
    if (arguments.length > 1) {
      throw new Error("cancel(...tasks) is not supported any more. Please use cancel([...tasks]) to cancel multiple tasks.");
    }
    if (array(taskOrTasks)) {
      taskOrTasks.forEach(function(t2) {
        check(t2, task, "cancel([...tasks]): argument " + t2 + " is not a valid Task object " + TEST_HINT);
      });
    } else if (taskOrTasks !== SELF_CANCELLATION && notUndef(taskOrTasks)) {
      check(taskOrTasks, task, "cancel(task): argument " + taskOrTasks + " is not a valid Task object " + TEST_HINT);
    }
  }
  return makeEffect(CANCEL2, taskOrTasks);
}
function select(selector) {
  if (selector === void 0) {
    selector = identity;
  }
  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
    args[_key5 - 1] = arguments[_key5];
  }
  if (arguments.length) {
    check(arguments[0], notUndef, "select(selector, [...]): argument selector is undefined");
    check(selector, func, "select(selector, [...]): argument " + selector + " is not a function");
  }
  return makeEffect(SELECT, {
    selector,
    args
  });
}
var konst, kTrue, noop, identity, hasSymbol, asyncIteratorSymbol, assignWithSymbols, flatMap, kThrow, kReturn, internalErr, createSetContextWarning, FROZEN_ACTION_ERROR, createEmptyArray, wrapSagaDispatch, shouldTerminate, shouldCancel, shouldComplete, BUFFER_OVERFLOW, ON_OVERFLOW_THROW, ON_OVERFLOW_DROP, ON_OVERFLOW_SLIDE, ON_OVERFLOW_EXPAND, zeroBuffer, none, fixed, dropping, sliding, expanding, buffers, TAKE, PUT, ALL, RACE, CALL, CPS, FORK, JOIN, CANCEL2, SELECT, ACTION_CHANNEL, CANCELLED, FLUSH, GET_CONTEXT, SET_CONTEXT, effectTypes, TEST_HINT, makeEffect, validateFnDescriptor, isNotDelayEffect, delay2;
var init_io_22ea0cf9 = __esm({
  "node_modules/@redux-saga/core/dist/io-22ea0cf9.js"() {
    init_redux_saga_symbols_esm();
    init_extends();
    init_redux_saga_is_esm();
    init_redux_saga_delay_p_esm();
    konst = function konst2(v2) {
      return function() {
        return v2;
      };
    };
    kTrue = konst(true);
    noop = function noop2() {
    };
    if (typeof Proxy !== "undefined") {
      noop = new Proxy(noop, {
        set: function set() {
          throw internalErr("There was an attempt to assign a property to internal `noop` function.");
        }
      });
    }
    identity = function identity2(v2) {
      return v2;
    };
    hasSymbol = typeof Symbol === "function";
    asyncIteratorSymbol = hasSymbol && Symbol.asyncIterator ? Symbol.asyncIterator : "@@asyncIterator";
    assignWithSymbols = function assignWithSymbols2(target, source) {
      _extends(target, source);
      if (Object.getOwnPropertySymbols) {
        Object.getOwnPropertySymbols(source).forEach(function(s2) {
          target[s2] = source[s2];
        });
      }
    };
    flatMap = function flatMap2(mapper, arr) {
      var _ref;
      return (_ref = []).concat.apply(_ref, arr.map(mapper));
    };
    kThrow = function kThrow2(err) {
      throw err;
    };
    kReturn = function kReturn2(value) {
      return {
        value,
        done: true
      };
    };
    internalErr = function internalErr2(err) {
      return new Error("\n  redux-saga: Error checking hooks detected an inconsistent state. This is likely a bug\n  in redux-saga code and not yours. Thanks for reporting this in the project's github repo.\n  Error: " + err + "\n");
    };
    createSetContextWarning = function createSetContextWarning2(ctx, props) {
      return (ctx ? ctx + "." : "") + "setContext(props): argument " + props + " is not a plain object";
    };
    FROZEN_ACTION_ERROR = "You can't put (a.k.a. dispatch from saga) frozen actions.\nWe have to define a special non-enumerable property on those actions for scheduling purposes.\nOtherwise you wouldn't be able to communicate properly between sagas & other subscribers (action ordering would become far less predictable).\nIf you are using redux and you care about this behaviour (frozen actions),\nthen you might want to switch to freezing actions in a middleware rather than in action creator.\nExample implementation:\n\nconst freezeActions = store => next => action => next(Object.freeze(action))\n";
    createEmptyArray = function createEmptyArray2(n2) {
      return Array.apply(null, new Array(n2));
    };
    wrapSagaDispatch = function wrapSagaDispatch2(dispatch) {
      return function(action) {
        if (true) {
          check(action, function(ac) {
            return !Object.isFrozen(ac);
          }, FROZEN_ACTION_ERROR);
        }
        return dispatch(Object.defineProperty(action, SAGA_ACTION, {
          value: true
        }));
      };
    };
    shouldTerminate = function shouldTerminate2(res) {
      return res === TERMINATE;
    };
    shouldCancel = function shouldCancel2(res) {
      return res === TASK_CANCEL;
    };
    shouldComplete = function shouldComplete2(res) {
      return shouldTerminate(res) || shouldCancel(res);
    };
    BUFFER_OVERFLOW = "Channel's Buffer overflow!";
    ON_OVERFLOW_THROW = 1;
    ON_OVERFLOW_DROP = 2;
    ON_OVERFLOW_SLIDE = 3;
    ON_OVERFLOW_EXPAND = 4;
    zeroBuffer = {
      isEmpty: kTrue,
      put: noop,
      take: noop
    };
    none = function none2() {
      return zeroBuffer;
    };
    fixed = function fixed2(limit) {
      return ringBuffer(limit, ON_OVERFLOW_THROW);
    };
    dropping = function dropping2(limit) {
      return ringBuffer(limit, ON_OVERFLOW_DROP);
    };
    sliding = function sliding2(limit) {
      return ringBuffer(limit, ON_OVERFLOW_SLIDE);
    };
    expanding = function expanding2(initialSize) {
      return ringBuffer(initialSize, ON_OVERFLOW_EXPAND);
    };
    buffers = Object.freeze({
      __proto__: null,
      none,
      fixed,
      dropping,
      sliding,
      expanding
    });
    TAKE = "TAKE";
    PUT = "PUT";
    ALL = "ALL";
    RACE = "RACE";
    CALL = "CALL";
    CPS = "CPS";
    FORK = "FORK";
    JOIN = "JOIN";
    CANCEL2 = "CANCEL";
    SELECT = "SELECT";
    ACTION_CHANNEL = "ACTION_CHANNEL";
    CANCELLED = "CANCELLED";
    FLUSH = "FLUSH";
    GET_CONTEXT = "GET_CONTEXT";
    SET_CONTEXT = "SET_CONTEXT";
    effectTypes = Object.freeze({
      __proto__: null,
      TAKE,
      PUT,
      ALL,
      RACE,
      CALL,
      CPS,
      FORK,
      JOIN,
      CANCEL: CANCEL2,
      SELECT,
      ACTION_CHANNEL,
      CANCELLED,
      FLUSH,
      GET_CONTEXT,
      SET_CONTEXT
    });
    TEST_HINT = "\n(HINT: if you are getting these errors in tests, consider using createMockTask from @redux-saga/testing-utils)";
    makeEffect = function makeEffect2(type, payload) {
      var _ref;
      return _ref = {}, _ref[IO] = true, _ref.combinator = false, _ref.type = type, _ref.payload = payload, _ref;
    };
    validateFnDescriptor = function validateFnDescriptor2(effectName, fnDescriptor) {
      check(fnDescriptor, notUndef, effectName + ": argument fn is undefined or null");
      if (func(fnDescriptor)) {
        return;
      }
      var context = null;
      var fn2;
      if (array(fnDescriptor)) {
        context = fnDescriptor[0];
        fn2 = fnDescriptor[1];
        check(fn2, notUndef, effectName + ": argument of type [context, fn] has undefined or null `fn`");
      } else if (object(fnDescriptor)) {
        context = fnDescriptor.context;
        fn2 = fnDescriptor.fn;
        check(fn2, notUndef, effectName + ": argument of type {context, fn} has undefined or null `fn`");
      } else {
        check(fnDescriptor, func, effectName + ": argument fn is not function");
        return;
      }
      if (context && string(fn2)) {
        check(context[fn2], func, effectName + ': context arguments has no such method - "' + fn2 + '"');
        return;
      }
      check(fn2, func, effectName + ": unpacked fn argument (from [context, fn] or {context, fn}) is not a function");
    };
    isNotDelayEffect = function isNotDelayEffect2(fn2) {
      return fn2 !== delay2;
    };
    delay2 = call.bind(null, redux_saga_delay_p_esm_default);
  }
});

// node_modules/@redux-saga/core/dist/redux-saga-effects.esm.js
function safeName(patternOrChannel) {
  if (channel(patternOrChannel)) {
    return "channel";
  }
  if (stringableFunc(patternOrChannel)) {
    return String(patternOrChannel);
  }
  if (func(patternOrChannel)) {
    return patternOrChannel.name;
  }
  return String(patternOrChannel);
}
function fsmIterator(fsm, startState, name10) {
  var stateUpdater, errorState, effect3, nextState = startState;
  function next(arg, error) {
    if (nextState === qEnd) {
      return done(arg);
    }
    if (error && !errorState) {
      nextState = qEnd;
      throw error;
    } else {
      stateUpdater && stateUpdater(arg);
      var currentState = error ? fsm[errorState](error) : fsm[nextState]();
      nextState = currentState.nextState;
      effect3 = currentState.effect;
      stateUpdater = currentState.stateUpdater;
      errorState = currentState.errorState;
      return nextState === qEnd ? done(arg) : effect3;
    }
  }
  return makeIterator(next, function(error) {
    return next(null, error);
  }, name10);
}
function takeEvery(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  var yTake = {
    done: false,
    value: take(patternOrChannel)
  };
  var yFork = function yFork2(ac) {
    return {
      done: false,
      value: fork.apply(void 0, [worker].concat(args, [ac]))
    };
  };
  var action, setAction = function setAction2(ac) {
    return action = ac;
  };
  return fsmIterator({
    q1: function q1() {
      return {
        nextState: "q2",
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: "q1",
        effect: yFork(action)
      };
    }
  }, "q1", "takeEvery(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}
function takeLatest(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  var yTake = {
    done: false,
    value: take(patternOrChannel)
  };
  var yFork = function yFork2(ac) {
    return {
      done: false,
      value: fork.apply(void 0, [worker].concat(args, [ac]))
    };
  };
  var yCancel = function yCancel2(task4) {
    return {
      done: false,
      value: cancel(task4)
    };
  };
  var task3, action;
  var setTask = function setTask2(t2) {
    return task3 = t2;
  };
  var setAction = function setAction2(ac) {
    return action = ac;
  };
  return fsmIterator({
    q1: function q1() {
      return {
        nextState: "q2",
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return task3 ? {
        nextState: "q3",
        effect: yCancel(task3)
      } : {
        nextState: "q1",
        effect: yFork(action),
        stateUpdater: setTask
      };
    },
    q3: function q3() {
      return {
        nextState: "q1",
        effect: yFork(action),
        stateUpdater: setTask
      };
    }
  }, "q1", "takeLatest(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}
function takeLeading(patternOrChannel, worker) {
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  var yTake = {
    done: false,
    value: take(patternOrChannel)
  };
  var yCall = function yCall2(ac) {
    return {
      done: false,
      value: call.apply(void 0, [worker].concat(args, [ac]))
    };
  };
  var action;
  var setAction = function setAction2(ac) {
    return action = ac;
  };
  return fsmIterator({
    q1: function q1() {
      return {
        nextState: "q2",
        effect: yTake,
        stateUpdater: setAction
      };
    },
    q2: function q2() {
      return {
        nextState: "q1",
        effect: yCall(action)
      };
    }
  }, "q1", "takeLeading(" + safeName(patternOrChannel) + ", " + worker.name + ")");
}
function retry(maxTries, delayLength, fn2) {
  var counter = maxTries;
  for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
    args[_key - 3] = arguments[_key];
  }
  var yCall = {
    done: false,
    value: call.apply(void 0, [fn2].concat(args))
  };
  var yDelay = {
    done: false,
    value: delay2(delayLength)
  };
  return fsmIterator({
    q1: function q1() {
      return {
        nextState: "q2",
        effect: yCall,
        errorState: "q10"
      };
    },
    q2: function q2() {
      return {
        nextState: qEnd
      };
    },
    q10: function q10(error) {
      counter -= 1;
      if (counter <= 0) {
        throw error;
      }
      return {
        nextState: "q1",
        effect: yDelay
      };
    }
  }, "q1", "retry(" + fn2.name + ")");
}
function takeEvery$1(patternOrChannel, worker) {
  if (true) {
    validateTakeEffect(takeEvery$1, patternOrChannel, worker);
  }
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  return fork.apply(void 0, [takeEvery, patternOrChannel, worker].concat(args));
}
function takeLatest$1(patternOrChannel, worker) {
  if (true) {
    validateTakeEffect(takeLatest$1, patternOrChannel, worker);
  }
  for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
    args[_key2 - 2] = arguments[_key2];
  }
  return fork.apply(void 0, [takeLatest, patternOrChannel, worker].concat(args));
}
function takeLeading$1(patternOrChannel, worker) {
  if (true) {
    validateTakeEffect(takeLeading$1, patternOrChannel, worker);
  }
  for (var _len3 = arguments.length, args = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
    args[_key3 - 2] = arguments[_key3];
  }
  return fork.apply(void 0, [takeLeading, patternOrChannel, worker].concat(args));
}
function retry$1(maxTries, delayLength, worker) {
  for (var _len5 = arguments.length, args = new Array(_len5 > 3 ? _len5 - 3 : 0), _key5 = 3; _key5 < _len5; _key5++) {
    args[_key5 - 3] = arguments[_key5];
  }
  return call.apply(void 0, [retry, maxTries, delayLength, worker].concat(args));
}
var done, qEnd, validateTakeEffect;
var init_redux_saga_effects_esm = __esm({
  "node_modules/@redux-saga/core/dist/redux-saga-effects.esm.js"() {
    init_redux_saga_symbols_esm();
    init_extends();
    init_redux_saga_is_esm();
    init_io_22ea0cf9();
    init_io_22ea0cf9();
    init_redux_saga_delay_p_esm();
    done = function done2(value) {
      return {
        done: true,
        value
      };
    };
    qEnd = {};
    validateTakeEffect = function validateTakeEffect2(fn2, patternOrChannel, worker) {
      check(patternOrChannel, notUndef, fn2.name + " requires a pattern or channel");
      check(worker, notUndef, fn2.name + " requires a saga parameter");
    };
  }
});

// node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js
var init_redux_saga_effects_npm_proxy_esm = __esm({
  "node_modules/redux-saga/dist/redux-saga-effects-npm-proxy.esm.js"() {
    init_redux_saga_effects_esm();
  }
});

// node_modules/@frontegg/redux-store/auth/SSOState/interfaces.js
var SSOStateKeys, SamlVendors;
var init_interfaces33 = __esm({
  "node_modules/@frontegg/redux-store/auth/SSOState/interfaces.js"() {
    (function(SSOStateKeys2) {
      SSOStateKeys2["LOAD_SSO_CONFIGURATIONS"] = "LOAD_SSO_CONFIGURATIONS";
      SSOStateKeys2["SAVE_SSO_CONFIGURATION"] = "SAVE_SSO_CONFIGURATION";
      SSOStateKeys2["UPDATE_SSO_CONFIGURATION"] = "UPDATE_SSO_CONFIGURATION";
      SSOStateKeys2["SAVE_SSO_CONFIGURATION_BY_METADATA"] = "SAVE_SSO_CONFIGURATION_BY_METADATA";
      SSOStateKeys2["UPDATE_SSO_CONFIGURATION_BY_METADATA"] = "UPDATE_SSO_CONFIGURATION";
      SSOStateKeys2["DELETE_SSO_CONFIGURATION"] = "DELETE_SSO_CONFIGURATION";
      SSOStateKeys2["SAVE_SSO_DOMAIN"] = "SAVE_SSO_DOMAIN";
      SSOStateKeys2["DELETE_SSO_DOMAIN"] = "DELETE_SSO_DOMAIN";
      SSOStateKeys2["VALIDATE_SSO_DOMAIN"] = "VALIDATE_SSO_DOMAIN";
      SSOStateKeys2["UPDATE_SSO_DEFAULT_ROLES"] = "UPDATE_SSO_DEFAULT_ROLES";
      SSOStateKeys2["DELETE_SSO_GROUPS"] = "DELETE_SSO_GROUPS";
      SSOStateKeys2["SAVE_SSO_GROUPS"] = "SAVE_SSO_GROUPS";
      SSOStateKeys2["GET_SSO_AUTHORIZATION_ROLES"] = "GET_SSO_AUTHORIZATION_ROLES";
    })(SSOStateKeys || (SSOStateKeys = {}));
    (function(SamlVendors2) {
      SamlVendors2["Saml"] = "saml";
      SamlVendors2["Okta"] = "okta";
      SamlVendors2["Azure"] = "azure";
      SamlVendors2["Google"] = "google";
      SamlVendors2["Oidc"] = "oidc";
    })(SamlVendors || (SamlVendors = {}));
  }
});

// node_modules/@frontegg/redux-store/utils/sha256.js
var ERROR, ARRAY_BUFFER, HEX_CHARS, EXTRA, SHIFT, K, OUTPUT_TYPES, blocks, createOutputMethod, createMethod, createHmacOutputMethod, createHmacMethod, Sha256, HmacSha256, sha256, hmac;
var init_sha256 = __esm({
  "node_modules/@frontegg/redux-store/utils/sha256.js"() {
    ERROR = "input is invalid type";
    ARRAY_BUFFER = typeof ArrayBuffer !== "undefined";
    HEX_CHARS = "0123456789abcdef".split("");
    EXTRA = [-2147483648, 8388608, 32768, 128];
    SHIFT = [24, 16, 8, 0];
    K = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];
    OUTPUT_TYPES = ["hex", "array", "digest", "arrayBuffer"];
    blocks = [];
    if (!Array.isArray) {
      Array.isArray = function(arg) {
        return Object.prototype.toString.call(arg) === "[object Array]";
      };
    }
    if (ARRAY_BUFFER && !ArrayBuffer.isView) {
      ArrayBuffer.isView = function(arg) {
        return typeof arg === "object" && arg.buffer && arg.buffer.constructor === ArrayBuffer;
      };
    }
    createOutputMethod = function(outputType) {
      return function(message) {
        const instance = new Sha256(true);
        const sha256MessageInstance = instance.update(message);
        return sha256MessageInstance == null ? void 0 : sha256MessageInstance[outputType]();
      };
    };
    createMethod = function() {
      const method = createOutputMethod("hex");
      method.create = function() {
        return new Sha256();
      };
      method.update = function(message) {
        return method.create().update(message);
      };
      for (let i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
        const type = OUTPUT_TYPES[i2];
        method[type] = createOutputMethod(type);
      }
      return method;
    };
    createHmacOutputMethod = function(outputType) {
      return function(key, message) {
        const instance = new HmacSha256(key, true);
        const hmacMessageInstance = instance.update(message);
        return hmacMessageInstance == null ? void 0 : hmacMessageInstance[outputType]();
      };
    };
    createHmacMethod = function() {
      const method = createHmacOutputMethod("hex");
      method.create = function(key) {
        return new HmacSha256(key);
      };
      method.update = function(key, message) {
        return method.create(key).update(message);
      };
      for (let i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
        const type = OUTPUT_TYPES[i2];
        method[type] = createHmacOutputMethod(type);
      }
      return method;
    };
    Sha256 = class _Sha256 {
      constructor(sharedMemory = false) {
        this.blocks = void 0;
        this.h0 = void 0;
        this.h1 = void 0;
        this.h2 = void 0;
        this.h3 = void 0;
        this.h4 = void 0;
        this.h5 = void 0;
        this.h6 = void 0;
        this.h7 = void 0;
        this.block = void 0;
        this.start = void 0;
        this.bytes = void 0;
        this.hBytes = void 0;
        this.finalized = void 0;
        this.hashed = void 0;
        this.first = void 0;
        this.lastByteIndex = void 0;
        this.sharedMemory = false;
        this.toString = () => this.hex();
        this.array = () => _Sha256.prototype.digest();
        if (sharedMemory) {
          blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] = blocks[4] = blocks[5] = blocks[6] = blocks[7] = blocks[8] = blocks[9] = blocks[10] = blocks[11] = blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;
          this.blocks = blocks;
        } else {
          this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        }
        this.h0 = 1779033703;
        this.h1 = 3144134277;
        this.h2 = 1013904242;
        this.h3 = 2773480762;
        this.h4 = 1359893119;
        this.h5 = 2600822924;
        this.h6 = 528734635;
        this.h7 = 1541459225;
        this.block = this.start = this.bytes = this.hBytes = 0;
        this.finalized = this.hashed = false;
        this.first = true;
        this.sharedMemory = sharedMemory;
      }
      update(message) {
        if (this.finalized) {
          return void 0;
        }
        let notString;
        const type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
          notString = true;
        }
        let code, index = 0, i2;
        const length = message.length;
        const blocks2 = this.blocks;
        while (index < length) {
          if (this.hashed) {
            this.hashed = false;
            blocks2[0] = this.block;
            blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < 64; ++index) {
              blocks2[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < 64; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks2[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks2[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks2[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks2[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks2[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          this.bytes += i2 - this.start;
          if (i2 >= 64) {
            this.block = blocks2[16];
            this.start = i2 - 64;
            this.hash();
            this.hashed = true;
          } else {
            this.start = i2;
          }
        }
        if (this.bytes > 4294967295) {
          this.hBytes += this.bytes / 4294967296 << 0;
          this.bytes = this.bytes % 4294967296;
        }
        return this;
      }
      finalize() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        const blocks2 = this.blocks, i2 = this.lastByteIndex;
        blocks2[16] = this.block;
        blocks2[i2 >> 2] |= EXTRA[i2 & 3];
        this.block = blocks2[16];
        if (i2 >= 56) {
          if (!this.hashed) {
            this.hash();
          }
          blocks2[0] = this.block;
          blocks2[16] = blocks2[1] = blocks2[2] = blocks2[3] = blocks2[4] = blocks2[5] = blocks2[6] = blocks2[7] = blocks2[8] = blocks2[9] = blocks2[10] = blocks2[11] = blocks2[12] = blocks2[13] = blocks2[14] = blocks2[15] = 0;
        }
        blocks2[14] = this.hBytes << 3 | this.bytes >>> 29;
        blocks2[15] = this.bytes << 3;
        this.hash();
      }
      hash() {
        let a2 = this.h0, b2 = this.h1, c2 = this.h2, d2 = this.h3, e2 = this.h4, f3 = this.h5, g2 = this.h6, h2 = this.h7, j2, s0, s1, maj, t1, t2, ch, ab, da, cd, bc;
        const blocks2 = this.blocks;
        for (j2 = 16; j2 < 64; ++j2) {
          t1 = blocks2[j2 - 15];
          s0 = (t1 >>> 7 | t1 << 25) ^ (t1 >>> 18 | t1 << 14) ^ t1 >>> 3;
          t1 = blocks2[j2 - 2];
          s1 = (t1 >>> 17 | t1 << 15) ^ (t1 >>> 19 | t1 << 13) ^ t1 >>> 10;
          blocks2[j2] = blocks2[j2 - 16] + s0 + blocks2[j2 - 7] + s1 << 0;
        }
        bc = b2 & c2;
        for (j2 = 0; j2 < 64; j2 += 4) {
          if (this.first) {
            ab = 704751109;
            t1 = blocks2[0] - 210244248;
            h2 = t1 - 1521486534 << 0;
            d2 = t1 + 143694565 << 0;
            this.first = false;
          } else {
            s0 = (a2 >>> 2 | a2 << 30) ^ (a2 >>> 13 | a2 << 19) ^ (a2 >>> 22 | a2 << 10);
            s1 = (e2 >>> 6 | e2 << 26) ^ (e2 >>> 11 | e2 << 21) ^ (e2 >>> 25 | e2 << 7);
            ab = a2 & b2;
            maj = ab ^ a2 & c2 ^ bc;
            ch = e2 & f3 ^ ~e2 & g2;
            t1 = h2 + s1 + ch + K[j2] + blocks2[j2];
            t2 = s0 + maj;
            h2 = d2 + t1 << 0;
            d2 = t1 + t2 << 0;
          }
          s0 = (d2 >>> 2 | d2 << 30) ^ (d2 >>> 13 | d2 << 19) ^ (d2 >>> 22 | d2 << 10);
          s1 = (h2 >>> 6 | h2 << 26) ^ (h2 >>> 11 | h2 << 21) ^ (h2 >>> 25 | h2 << 7);
          da = d2 & a2;
          maj = da ^ d2 & b2 ^ ab;
          ch = h2 & e2 ^ ~h2 & f3;
          t1 = g2 + s1 + ch + K[j2 + 1] + blocks2[j2 + 1];
          t2 = s0 + maj;
          g2 = c2 + t1 << 0;
          c2 = t1 + t2 << 0;
          s0 = (c2 >>> 2 | c2 << 30) ^ (c2 >>> 13 | c2 << 19) ^ (c2 >>> 22 | c2 << 10);
          s1 = (g2 >>> 6 | g2 << 26) ^ (g2 >>> 11 | g2 << 21) ^ (g2 >>> 25 | g2 << 7);
          cd = c2 & d2;
          maj = cd ^ c2 & a2 ^ da;
          ch = g2 & h2 ^ ~g2 & e2;
          t1 = f3 + s1 + ch + K[j2 + 2] + blocks2[j2 + 2];
          t2 = s0 + maj;
          f3 = b2 + t1 << 0;
          b2 = t1 + t2 << 0;
          s0 = (b2 >>> 2 | b2 << 30) ^ (b2 >>> 13 | b2 << 19) ^ (b2 >>> 22 | b2 << 10);
          s1 = (f3 >>> 6 | f3 << 26) ^ (f3 >>> 11 | f3 << 21) ^ (f3 >>> 25 | f3 << 7);
          bc = b2 & c2;
          maj = bc ^ b2 & d2 ^ cd;
          ch = f3 & g2 ^ ~f3 & h2;
          t1 = e2 + s1 + ch + K[j2 + 3] + blocks2[j2 + 3];
          t2 = s0 + maj;
          e2 = a2 + t1 << 0;
          a2 = t1 + t2 << 0;
        }
        this.h0 = this.h0 + a2 << 0;
        this.h1 = this.h1 + b2 << 0;
        this.h2 = this.h2 + c2 << 0;
        this.h3 = this.h3 + d2 << 0;
        this.h4 = this.h4 + e2 << 0;
        this.h5 = this.h5 + f3 << 0;
        this.h6 = this.h6 + g2 << 0;
        this.h7 = this.h7 + h2 << 0;
      }
      hex() {
        this.finalize();
        const h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
        let hex = HEX_CHARS[h0 >> 28 & 15] + HEX_CHARS[h0 >> 24 & 15] + HEX_CHARS[h0 >> 20 & 15] + HEX_CHARS[h0 >> 16 & 15] + HEX_CHARS[h0 >> 12 & 15] + HEX_CHARS[h0 >> 8 & 15] + HEX_CHARS[h0 >> 4 & 15] + HEX_CHARS[h0 & 15] + HEX_CHARS[h1 >> 28 & 15] + HEX_CHARS[h1 >> 24 & 15] + HEX_CHARS[h1 >> 20 & 15] + HEX_CHARS[h1 >> 16 & 15] + HEX_CHARS[h1 >> 12 & 15] + HEX_CHARS[h1 >> 8 & 15] + HEX_CHARS[h1 >> 4 & 15] + HEX_CHARS[h1 & 15] + HEX_CHARS[h2 >> 28 & 15] + HEX_CHARS[h2 >> 24 & 15] + HEX_CHARS[h2 >> 20 & 15] + HEX_CHARS[h2 >> 16 & 15] + HEX_CHARS[h2 >> 12 & 15] + HEX_CHARS[h2 >> 8 & 15] + HEX_CHARS[h2 >> 4 & 15] + HEX_CHARS[h2 & 15] + HEX_CHARS[h3 >> 28 & 15] + HEX_CHARS[h3 >> 24 & 15] + HEX_CHARS[h3 >> 20 & 15] + HEX_CHARS[h3 >> 16 & 15] + HEX_CHARS[h3 >> 12 & 15] + HEX_CHARS[h3 >> 8 & 15] + HEX_CHARS[h3 >> 4 & 15] + HEX_CHARS[h3 & 15] + HEX_CHARS[h4 >> 28 & 15] + HEX_CHARS[h4 >> 24 & 15] + HEX_CHARS[h4 >> 20 & 15] + HEX_CHARS[h4 >> 16 & 15] + HEX_CHARS[h4 >> 12 & 15] + HEX_CHARS[h4 >> 8 & 15] + HEX_CHARS[h4 >> 4 & 15] + HEX_CHARS[h4 & 15] + HEX_CHARS[h5 >> 28 & 15] + HEX_CHARS[h5 >> 24 & 15] + HEX_CHARS[h5 >> 20 & 15] + HEX_CHARS[h5 >> 16 & 15] + HEX_CHARS[h5 >> 12 & 15] + HEX_CHARS[h5 >> 8 & 15] + HEX_CHARS[h5 >> 4 & 15] + HEX_CHARS[h5 & 15] + HEX_CHARS[h6 >> 28 & 15] + HEX_CHARS[h6 >> 24 & 15] + HEX_CHARS[h6 >> 20 & 15] + HEX_CHARS[h6 >> 16 & 15] + HEX_CHARS[h6 >> 12 & 15] + HEX_CHARS[h6 >> 8 & 15] + HEX_CHARS[h6 >> 4 & 15] + HEX_CHARS[h6 & 15];
        hex += HEX_CHARS[h7 >> 28 & 15] + HEX_CHARS[h7 >> 24 & 15] + HEX_CHARS[h7 >> 20 & 15] + HEX_CHARS[h7 >> 16 & 15] + HEX_CHARS[h7 >> 12 & 15] + HEX_CHARS[h7 >> 8 & 15] + HEX_CHARS[h7 >> 4 & 15] + HEX_CHARS[h7 & 15];
        return hex;
      }
      digest() {
        this.finalize();
        const h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3, h4 = this.h4, h5 = this.h5, h6 = this.h6, h7 = this.h7;
        const arr = [h0 >> 24 & 255, h0 >> 16 & 255, h0 >> 8 & 255, h0 & 255, h1 >> 24 & 255, h1 >> 16 & 255, h1 >> 8 & 255, h1 & 255, h2 >> 24 & 255, h2 >> 16 & 255, h2 >> 8 & 255, h2 & 255, h3 >> 24 & 255, h3 >> 16 & 255, h3 >> 8 & 255, h3 & 255, h4 >> 24 & 255, h4 >> 16 & 255, h4 >> 8 & 255, h4 & 255, h5 >> 24 & 255, h5 >> 16 & 255, h5 >> 8 & 255, h5 & 255, h6 >> 24 & 255, h6 >> 16 & 255, h6 >> 8 & 255, h6 & 255];
        arr.push(h7 >> 24 & 255, h7 >> 16 & 255, h7 >> 8 & 255, h7 & 255);
        return arr;
      }
      arrayBuffer() {
        this.finalize();
        const buffer3 = new ArrayBuffer(32);
        const dataView = new DataView(buffer3);
        dataView.setUint32(0, this.h0);
        dataView.setUint32(4, this.h1);
        dataView.setUint32(8, this.h2);
        dataView.setUint32(12, this.h3);
        dataView.setUint32(16, this.h4);
        dataView.setUint32(20, this.h5);
        dataView.setUint32(24, this.h6);
        dataView.setUint32(28, this.h7);
        return buffer3;
      }
    };
    HmacSha256 = class extends Sha256 {
      constructor(key, sharedMemory = false) {
        super(sharedMemory);
        this.inner = void 0;
        this.oKeyPad = void 0;
        let i2;
        const type = typeof key;
        if (type === "string") {
          const bytes = [], length = key.length;
          let index = 0, code;
          for (i2 = 0; i2 < length; ++i2) {
            code = key.charCodeAt(i2);
            if (code < 128) {
              bytes[index++] = code;
            } else if (code < 2048) {
              bytes[index++] = 192 | code >> 6;
              bytes[index++] = 128 | code & 63;
            } else if (code < 55296 || code >= 57344) {
              bytes[index++] = 224 | code >> 12;
              bytes[index++] = 128 | code >> 6 & 63;
              bytes[index++] = 128 | code & 63;
            } else {
              code = 65536 + ((code & 1023) << 10 | key.charCodeAt(++i2) & 1023);
              bytes[index++] = 240 | code >> 18;
              bytes[index++] = 128 | code >> 12 & 63;
              bytes[index++] = 128 | code >> 6 & 63;
              bytes[index++] = 128 | code & 63;
            }
          }
          key = bytes;
        } else {
          if (type === "object") {
            if (key === null) {
              throw new Error(ERROR);
            } else if (ARRAY_BUFFER && key.constructor === ArrayBuffer) {
              key = new Uint8Array(key);
            } else if (!Array.isArray(key)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(key)) {
                throw new Error(ERROR);
              }
            }
          } else {
            throw new Error(ERROR);
          }
        }
        if (key.length > 64) {
          var _Sha256$update;
          key = (_Sha256$update = new Sha256(true).update(key)) == null ? void 0 : _Sha256$update.array();
        }
        const oKeyPad = [], iKeyPad = [];
        for (i2 = 0; i2 < 64; ++i2) {
          const b2 = key[i2] || 0;
          oKeyPad[i2] = 92 ^ b2;
          iKeyPad[i2] = 54 ^ b2;
        }
        Sha256.call(this, sharedMemory);
        this.update(iKeyPad);
        this.oKeyPad = oKeyPad;
        this.inner = true;
        this.sharedMemory = sharedMemory;
      }
      finalize() {
        super.finalize();
        if (this.inner) {
          this.inner = false;
          const innerHash = this.array();
          Sha256.call(this, this.sharedMemory);
          this.update(this.oKeyPad);
          this.update(innerHash);
          Sha256.prototype.finalize.call(this);
        }
      }
    };
    sha256 = createMethod();
    hmac = createHmacMethod();
  }
});

// node_modules/@frontegg/redux-store/helpers.js
function omitProps(props, keys) {
  const newProps = _extends({}, props);
  keys.forEach((key) => {
    delete newProps[key];
  });
  return newProps;
}
function generateActionCreator(storeName2) {
  return (key, withPayload) => withPayload ? createAction(`${storeName2}/${key}`, (payload) => ({
    payload
  })) : createAction(`${storeName2}/${key}`);
}
async function generateCodeChallengePureJs(codeVerifier) {
  const digest = sha256.digest(new TextEncoder().encode(codeVerifier));
  return btoa(String.fromCharCode(...new Uint8Array(digest))).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
async function generateCodeChallengeNative(codeVerifier) {
  const digest = await crypto.subtle.digest("SHA-256", new TextEncoder().encode(codeVerifier));
  return btoa(String.fromCharCode(...new Uint8Array(digest))).replace(/=/g, "").replace(/\+/g, "-").replace(/\//g, "_");
}
async function generateCodeChallenge(codeVerifier) {
  var _window$crypto, _window$crypto$subtle;
  if ((_window$crypto = window.crypto) != null && (_window$crypto$subtle = _window$crypto.subtle) != null && _window$crypto$subtle.digest) {
    return generateCodeChallengeNative(codeVerifier);
  } else {
    console.warn("Generating CodeChallenge in non-secure domain:", window.location.origin);
    return generateCodeChallengePureJs(codeVerifier);
  }
}
function createRandomString(length = 16) {
  let text = "";
  const possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  for (let i2 = 0; i2 < length; i2++) {
    text += possible.charAt(Math.floor(Math.random() * possible.length));
  }
  return text;
}
function* getFeatureFlags(flags) {
  const appName = yield select((state) => state.root.appName);
  return FeatureFlags.getFeatureFlags(flags, appName);
}
var readFileAsText;
var init_helpers = __esm({
  "node_modules/@frontegg/redux-store/helpers.js"() {
    init_extends();
    init_rest_api();
    init_redux_toolkit_esm();
    init_redux_saga_effects_npm_proxy_esm();
    init_sha256();
    readFileAsText = (file) => new Promise((resolve, reject) => {
      const reader = new FileReader();
      reader.readAsText(file);
      reader.onload = () => resolve(reader.result);
      reader.onerror = reject;
    });
  }
});

// node_modules/@frontegg/redux-store/auth/ApiTokensState/interfaces.js
var ApiStateKeys;
var init_interfaces34 = __esm({
  "node_modules/@frontegg/redux-store/auth/ApiTokensState/interfaces.js"() {
    init_rest_api();
    (function(ApiStateKeys2) {
      ApiStateKeys2["LOAD_API_TOKENS"] = "LOAD_API_TOKENS";
      ApiStateKeys2["ADD_API_TOKEN"] = "ADD_API_TOKEN";
      ApiStateKeys2["DELETE_API_TOKEN"] = "DELETE_API_TOKEN";
    })(ApiStateKeys || (ApiStateKeys = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/dummy.js
var apiTokensDataDemo, apiTokensDataTenantDemo, rolesAdminViewerDemo, roleDemo, rolePermissionDemo, userProfileDemo, userDemo, profileStateDemo, policyDemo, publicSecurityPolicy, policyMfaDemo, policyLockoutDemo, policyPasswordHistoryDemo, samlConfigurationDemo, samlMetadataDemo, rolesDemo, ssoStateDemo, permissionsDemo, userTeamDemo2, userTeamDemo2V3, userTeamDemo, userTeamDemoV3, userSubTenantDemo, usersDemo, usersDemoV3, allUsersDemo, tenantsDemo, sessionsMock, sessionsConfigDummies, dummyIpConfig, dummyIps, generateGroupUsers, generateRoleByName, allGroupsDummy, securityCenterRecommendationsMock, securityCenterInsightsMock, securityCenterBreachedPasswordUsersMock, securityCenterInactivityPasswordUsersMock, securityCenterUnenrolledMfaUsersMock;
var init_dummy = __esm({
  "node_modules/@frontegg/redux-store/auth/dummy.js"() {
    init_extends();
    init_rest_api();
    init_interfaces34();
    apiTokensDataDemo = {
      clientId: "CLIENT_ID_16806d3d-8fc3-4450-be97-abdaf66b723e",
      secret: "SECRET_16806d3d-8fc3-4450-be97-abdaf66b723e",
      createdAt: "createdAt",
      description: "Demo API Token (preview only)"
    };
    apiTokensDataTenantDemo = _extends({}, apiTokensDataDemo, {
      roleIds: [],
      tenantId: "my-tenant-id",
      createdByUserId: "createdByUserId"
    });
    rolesAdminViewerDemo = [{
      id: "a040dcf6-b907-4e83-9970-6bd23c88fd40",
      key: "ReadOnly",
      name: "Read Only",
      description: null,
      isDefault: false,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      permissions: ["5b7dafe6-12a1-402b-9082-8eb2777cfcd8", "da1d1990-c99c-4086-b845-2d465de3227b"],
      tenantId: "tenantId",
      vendorId: "vendorId"
    }, {
      id: "b43b2c4b-e056-4eec-8c55-d200a475bbc0",
      key: "Admin",
      name: "Admin",
      description: null,
      isDefault: true,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      permissions: ["502b112e-50fd-4e8d-875e-3abda628d94a", "da015508-7cb1-4dcd-9436-d0518a2ecd21"],
      tenantId: "tenantId",
      vendorId: "vendorId"
    }];
    roleDemo = [{
      id: "roleId",
      key: "admin",
      isDefault: false,
      name: "Admin",
      description: null,
      permissions: ["adminPermissionId"],
      tenantId: "tenantId",
      vendorId: "vendorId",
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    }];
    rolePermissionDemo = [{
      id: "adminPermissionId",
      key: "fe.*",
      name: "General Admin",
      description: "description",
      categoryId: "category",
      fePermission: true,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      roleIds: []
    }];
    userProfileDemo = {
      sub: "",
      tenants: [],
      id: "testId",
      name: "Demo User Name",
      email: "demo-user@frontegg.com",
      mfaEnrolled: true,
      profilePictureUrl: "https://www.gravatar.com/avatar/42b2ad2bad6fc9b9db5086dfcf8072ac?d=https://ui-avatars.com/api/fe/128/random?t=1617261890875?t=1617261917434",
      roles: roleDemo,
      permissions: rolePermissionDemo,
      tenantId: "my-tenant-id",
      tenantIds: ["my-tenant-id"],
      activatedForTenant: true,
      metadata: JSON.stringify({
        phoneNumber: "+972-54123456",
        jobTitle: "Developer",
        address: {
          city: "Tel Aviv",
          country: "Israel"
        }
      }),
      verified: false
    };
    userDemo = _extends({}, userProfileDemo, {
      accessToken: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1MTY5YmY0Zi02YmI5LTQ5NGMtOGNkZS05MDc4NDQ0NWY4MDciLCJuYW1lIjoiRHVtbXkgVXNlciIsImVtYWlsIjoiZHVtbXlAZnJvbnRlZ2cuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsIm1ldGFkYXRhIjp7fSwicm9sZXMiOlsiYWRtaW4iXSwicGVybWlzc2lvbnMiOlsiZmUuKiJdLCJ0ZW5hbnRJZCI6Im15LXRlbmFudC1pZCIsInRlbmFudElkcyI6WyJteS10ZW5hbnQtaWQiXSwicHJvZmlsZVBpY3R1cmVVcmwiOiJodHRwczovL3d3dy5ncmF2YXRhci5jb20vYXZhdGFyLzQyYjJhZDJiYWQ2ZmM5YjlkYjUwODZkZmNmODA3MmFjP2Q9aHR0cHM6Ly91aS1hdmF0YXJzLmNvbS9hcGkvZmUvMTI4L3JhbmRvbT90PTE2MTcyNjE4OTA4NzU_dD0xNjE3MjYxOTE3NDM0IiwidHlwZSI6InVzZXJUb2tlbiIsImlhdCI6MTYxNzkwNjMyNCwiZXhwIjoxNjE3OTkyNzI0LCJpc3MiOiJmcm9udGVnZyJ9.paaXLkpWEWbQmUtoK2P8IwXCxK4WJp7XhXonvzF8g1I",
      expiresIn: 86400,
      mfaRequired: false,
      refreshToken: "refresh-token-dummy-de39dc9c-9d22-4852-b7f5-c3c0aa613b58",
      type: "userToken",
      iat: 1617906324,
      exp: 1617992724,
      iss: "frontegg",
      email_verified: true
    });
    profileStateDemo = {
      loading: false,
      error: void 0,
      saving: true,
      profile: userProfileDemo
    };
    policyDemo = {
      id: "id",
      enforceMFAType: "DontForce",
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      allowOverrideEnforcePasswordHistory: true,
      allowOverridePasswordComplexity: false,
      allowOverridePasswordExpiration: false,
      allowSignups: true,
      apiTokensEnabled: true,
      cookieSameSite: "cookieSameSite",
      defaultRefreshTokenExpiration: 0,
      defaultTokenExpiration: 1,
      publicKey: "publicKey"
    };
    publicSecurityPolicy = {
      allowSignups: true,
      allowNotVerifiedUsersLogin: false,
      apiTokensEnabled: true,
      forcePermissions: false,
      authStrategy: AuthStrategyEnum.EmailAndPassword,
      machineToMachineAuthStrategy: MachineToMachineAuthStrategy.ClientCredentials
    };
    policyMfaDemo = {
      id: "id",
      enforceMFAType: "DontForce",
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    policyLockoutDemo = {
      id: "id",
      enabled: true,
      maxAttempts: 1,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    policyPasswordHistoryDemo = {
      id: "id",
      enabled: true,
      historySize: 1,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date()
    };
    samlConfigurationDemo = {
      enabled: true,
      domain: "domain",
      validated: true,
      generatedVerification: "generatedVerification",
      ssoEndpoint: "ssoEndpoint",
      publicCertificate: "publicCertificate",
      signRequest: true,
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      acsUrl: void 0,
      spEntityId: void 0,
      oidcClientId: void 0,
      oidcSecret: void 0,
      type: void 0
    };
    samlMetadataDemo = {
      id: "id",
      createdAt: "createdAt",
      updatedAt: "updatedAt",
      properties: [],
      vendorId: "vendorId",
      entityName: "saml",
      isActive: true,
      configuration: {
        acsUrl: "acsUrl",
        spEntityId: "spEntityId"
      }
    };
    rolesDemo = [{
      id: "id",
      description: "description",
      key: "key",
      name: "name",
      permissions: [],
      permissionLevel: 1
    }];
    ssoStateDemo = {
      firstLoad: false,
      loading: false,
      error: void 0,
      saving: false,
      samlConfiguration: samlConfigurationDemo,
      roles: rolesDemo,
      authorizationRoles: [],
      errors: {},
      loaders: {},
      ssoConfigurations: []
    };
    permissionsDemo = [{
      description: "string",
      fePermission: true,
      id: "id",
      key: "key",
      name: "name",
      roleIds: [],
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      categoryId: "categoryId"
    }];
    userTeamDemo2 = {
      id: "id2",
      email: "demo-user2@frontegg.com",
      name: "Demo User Name2",
      phone: void 0,
      profileImage: void 0,
      profileImageUrl: void 0,
      tenantId: "tenantId",
      vendorId: "vendorId",
      roleIds: [],
      activatedForTenant: true,
      verified: false,
      createdAt: (/* @__PURE__ */ new Date()).toISOString(),
      customData: void 0,
      lastLogin: void 0,
      mfaEnabled: void 0,
      roles: [rolesAdminViewerDemo[0]],
      groups: [{
        id: "id2",
        name: "Developers",
        color: "#03A9F4",
        roles: [rolesAdminViewerDemo[0]],
        managedBy: GroupManagedByEnum.FRONTEGG
      }]
    };
    userTeamDemo2V3 = {
      id: userTeamDemo2.id,
      email: userTeamDemo2.email,
      name: userTeamDemo2.name,
      phoneNumber: void 0,
      profileImage: void 0,
      tenantId: "tenantId",
      activatedForTenant: true,
      createdAt: new Date(2022, 4, 1),
      verified: true,
      lastLogin: new Date(2022, 5, 25),
      mfaEnrolled: false,
      roles: [rolesAdminViewerDemo[1]],
      tenantIds: [],
      metadata: "",
      sub: "",
      tenants: []
    };
    userTeamDemo = {
      id: "id",
      email: "demo-user@frontegg.com",
      name: "Demo User Name",
      phone: void 0,
      profileImage: void 0,
      profileImageUrl: void 0,
      tenantId: "tenantId",
      vendorId: "vendorId",
      roleIds: [],
      activatedForTenant: true,
      createdAt: new Date(2022, 4, 1).toISOString(),
      verified: true,
      customData: void 0,
      lastLogin: new Date(2022, 5, 25).toISOString(),
      mfaEnabled: void 0,
      roles: [rolesAdminViewerDemo[1]],
      groups: [{
        id: "id1",
        name: "Designers",
        color: "#E1F5E2",
        roles: [rolesAdminViewerDemo[0]],
        managedBy: GroupManagedByEnum.FRONTEGG
      }]
    };
    userTeamDemoV3 = {
      id: userTeamDemo.id,
      email: userTeamDemo.email,
      name: userTeamDemo.name,
      phoneNumber: void 0,
      profileImage: void 0,
      tenantId: "tenantId",
      activatedForTenant: true,
      createdAt: new Date(2022, 4, 1),
      verified: true,
      lastLogin: new Date(2022, 5, 25),
      mfaEnrolled: false,
      roles: [rolesAdminViewerDemo[1]],
      tenantIds: [],
      metadata: "",
      sub: "",
      tenants: []
    };
    userSubTenantDemo = {
      metadata: "",
      mfaEnrolled: false,
      provider: "",
      sub: "",
      tenantIds: [],
      tenants: [],
      verified: false,
      id: "id",
      email: "email",
      name: "name",
      tenantId: "tenantId",
      createdAt: /* @__PURE__ */ new Date()
    };
    usersDemo = [userTeamDemo, userTeamDemo2];
    usersDemoV3 = [userTeamDemoV3, userTeamDemo2V3];
    allUsersDemo = [userSubTenantDemo];
    tenantsDemo = [{
      id: "my-tenant-id",
      isReseller: false,
      name: "Frontegg demo",
      deletedAt: null,
      metadata: void 0,
      tenantId: "my-tenant-id",
      vendorId: "vendorId",
      createdAt: /* @__PURE__ */ new Date(),
      updatedAt: /* @__PURE__ */ new Date(),
      address: void 0,
      timezone: void 0,
      dateFormat: void 0,
      timeFormat: void 0,
      currency: void 0,
      logo: void 0
    }];
    sessionsMock = [{
      id: `laptop`,
      userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15",
      createdAt: /* @__PURE__ */ new Date(),
      ipAddress: "190.194.88.251",
      current: true
    }, {
      id: `iphone`,
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 15_2_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.2 Mobile/15E148 Safari/604.1",
      createdAt: new Date(Date.now() - 1e4),
      ipAddress: "191.49.203.21"
    }, {
      id: `tablet`,
      userAgent: "Mozilla/5.0 (Linux; Android 6.0.1; SGP771 Build/32.2.A.0.253; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/52.0.2743.98 Safari/537.36",
      createdAt: new Date(Date.now() - 3e4),
      ipAddress: "130.19.196.136"
    }, {
      id: `anotherlaptop`,
      userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Safari/605.1.15",
      createdAt: new Date(Date.now() - 1002232300),
      ipAddress: "2.228.163.92"
    }];
    sessionsConfigDummies = {
      sessionConcurrentConfiguration: {
        isActive: true,
        maxSessions: 10
      },
      sessionIdleTimeoutConfiguration: {
        isActive: true,
        timeout: 3600
      },
      sessionTimeoutConfiguration: {
        isActive: true,
        timeout: 7776e3
      }
    };
    dummyIpConfig = {
      isActive: true,
      strategy: RestrictionType.ALLOW
    };
    dummyIps = [{
      updatedAt: /* @__PURE__ */ new Date(),
      createdAt: /* @__PURE__ */ new Date(),
      id: "1",
      ip: "255.255.255.255",
      isActive: true,
      strategy: RestrictionType.ALLOW,
      description: "My IP"
    }, {
      updatedAt: /* @__PURE__ */ new Date(),
      createdAt: /* @__PURE__ */ new Date(),
      id: "2",
      ip: "255.255.255.254",
      isActive: true,
      strategy: RestrictionType.ALLOW,
      description: "IP 2"
    }, {
      updatedAt: /* @__PURE__ */ new Date(),
      createdAt: /* @__PURE__ */ new Date(),
      id: "3",
      ip: "255.255.255.253",
      isActive: true,
      strategy: RestrictionType.BLOCK,
      description: "IP 3"
    }, {
      updatedAt: /* @__PURE__ */ new Date(),
      createdAt: /* @__PURE__ */ new Date(),
      id: "4",
      ip: "255.255.255.253",
      isActive: true,
      strategy: RestrictionType.BLOCK,
      description: "IP 4"
    }];
    generateGroupUsers = (count) => {
      const users = [];
      Array.from({
        length: count
      }).forEach((_2, i2) => {
        users.push(_extends({}, userTeamDemo, {
          name: "Demo User",
          id: `id${i2}`,
          profilePictureUrl: null,
          createdAt: /* @__PURE__ */ new Date()
        }));
      });
      return users;
    };
    generateRoleByName = (roleName) => {
      return {
        id: "b43b2c4b-e056-4eec-8c55-d200a475bbc0" + roleName,
        key: roleName,
        name: roleName,
        description: null,
        isDefault: true,
        createdAt: /* @__PURE__ */ new Date(),
        updatedAt: /* @__PURE__ */ new Date(),
        permissions: [],
        tenantId: "tenantId",
        vendorId: "vendorId"
      };
    };
    allGroupsDummy = [{
      id: "id1",
      name: "Designers",
      color: "#E1F5E2",
      description: "The whole design team",
      users: generateGroupUsers(6),
      roles: [generateRoleByName("Editor")],
      metadata: '{"lastTermsCheck":"2022-08-16T10:31:11.270Z"}',
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id2",
      name: "Developers",
      color: "#03A9F4",
      description: "All frontend and backend developers",
      users: generateGroupUsers(44),
      roles: [generateRoleByName("Editor")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id3",
      name: "Product",
      color: "#E1583E",
      description: "PMs and team leads",
      users: generateGroupUsers(8),
      roles: [generateRoleByName("Viewer")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id4",
      name: "Management",
      color: "#9AE0FF",
      description: "Executives",
      users: generateGroupUsers(5),
      roles: [generateRoleByName("Admin")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id5",
      name: "Sales",
      color: "#ED8E7C",
      users: generateGroupUsers(21),
      description: "BDR, AE, and inside sales",
      roles: [generateRoleByName("Viewer")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id6",
      name: "Support",
      color: "#A79D7B",
      users: generateGroupUsers(23),
      description: "Dev success and customer success",
      roles: [generateRoleByName("Admin")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id7",
      name: "Marketing",
      color: "#2CA744",
      users: generateGroupUsers(10),
      description: "The marketing department",
      roles: [generateRoleByName("Viewer")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id8",
      name: "HR",
      color: "#EAE1C2",
      users: generateGroupUsers(4),
      description: "Human resources",
      roles: [generateRoleByName("Viewer")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id9",
      name: "Finance",
      color: "#5587C0",
      users: generateGroupUsers(3),
      roles: [generateRoleByName("Viewer")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id10",
      name: "Operations",
      color: "#B1CAE7",
      users: generateGroupUsers(8),
      roles: [generateRoleByName("Editor")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }, {
      id: "id11",
      name: "Legal",
      color: "#2CA744",
      users: generateGroupUsers(4),
      roles: [generateRoleByName("Viewer")],
      managedBy: GroupManagedByEnum.FRONTEGG
    }];
    securityCenterRecommendationsMock = {
      scoring: {
        score: 79
      },
      recommendations: {
        items: [{
          code: RecommendationCode.FORCE_MFA,
          severity: RecommendationSeverity.WARNING,
          category: SecurityCategory.MFA
        }, {
          code: RecommendationCode.ENABLE_FORCE_RELOGIN,
          severity: RecommendationSeverity.WARNING,
          category: SecurityCategory.SESSIONS
        }]
      }
    };
    securityCenterInsightsMock = {
      insights: {
        items: [{
          category: SecurityCategory.MFA,
          code: InsightCode.PARTIALLY_FORCED_MFA,
          metadata: {
            totalUsers: 2,
            mfa: {
              enrolledUsersCount: 1
            }
          }
        }, {
          category: SecurityCategory.SESSIONS,
          code: InsightCode.PARTIAL_SESSION_SETTINGS,
          metadata: {
            totalUsers: 2,
            sessions: {
              idleTimeoutRecommendation: 1800
            }
          }
        }, {
          category: SecurityCategory.PASSWORD,
          code: InsightCode.IMPROVE_PASSWORD_HISTORY_POLICY,
          metadata: {
            password: {
              userLockoutRecommendation: 5,
              historyRecommendations: 5
            }
          }
        }, {
          category: SecurityCategory.DOMAIN,
          code: InsightCode.NO_IP_RESTRICTIONS,
          metadata: {
            restrictions: {
              ipsCount: 1,
              domainsCount: 1
            }
          }
        }]
      }
    };
    securityCenterBreachedPasswordUsersMock = {
      users: usersDemoV3,
      totalUsersItems: 2,
      totalUsersPages: 1,
      usersPageOffset: 0
    };
    securityCenterInactivityPasswordUsersMock = {
      users: [usersDemoV3[0]],
      totalUsersItems: 1,
      totalUsersPages: 1,
      usersPageOffset: 0,
      queryParams: {
        _maxInactiveSeconds: 7776e3
      }
    };
    securityCenterUnenrolledMfaUsersMock = {
      users: [usersDemoV3[1]],
      totalUsersItems: 1,
      totalUsersPages: 1,
      usersPageOffset: 0
    };
  }
});

// node_modules/@frontegg/redux-store/auth/interfaces.js
var UserVeirifedOriginTypes, AuthenticationTypes, AdminPortalPagesForEvents, AdminPortalPages;
var init_interfaces35 = __esm({
  "node_modules/@frontegg/redux-store/auth/interfaces.js"() {
    (function(UserVeirifedOriginTypes2) {
      UserVeirifedOriginTypes2["SOCIAL_LOGIN"] = "SOCIAL_LOGIN";
      UserVeirifedOriginTypes2["PASSWORDLESS"] = "PASSWORDLESS";
      UserVeirifedOriginTypes2["ACTIVATION_LINK"] = "ACTIVATION_LINK";
    })(UserVeirifedOriginTypes || (UserVeirifedOriginTypes = {}));
    (function(AuthenticationTypes2) {
      AuthenticationTypes2["SOCIAL_LOGIN"] = "SOCIAL_LOGIN";
      AuthenticationTypes2["PASSWORD"] = "PASSWORD";
    })(AuthenticationTypes || (AuthenticationTypes = {}));
    (function(AdminPortalPagesForEvents2) {
      AdminPortalPagesForEvents2["profile"] = "profile";
      AdminPortalPagesForEvents2["privacy"] = "privacy";
      AdminPortalPagesForEvents2["personalApiTokens"] = "personalApiTokens";
      AdminPortalPagesForEvents2["account"] = "account";
      AdminPortalPagesForEvents2["users"] = "users";
      AdminPortalPagesForEvents2["groups"] = "groups";
      AdminPortalPagesForEvents2["security"] = "security";
      AdminPortalPagesForEvents2["sso"] = "sso";
      AdminPortalPagesForEvents2["audits"] = "audits";
      AdminPortalPagesForEvents2["webhooks"] = "webhooks";
      AdminPortalPagesForEvents2["apiTokens"] = "apiTokens";
      AdminPortalPagesForEvents2["roles"] = "roles";
      AdminPortalPagesForEvents2["subscriptions"] = "subscription";
      AdminPortalPagesForEvents2["allAccounts"] = "allAccounts";
    })(AdminPortalPagesForEvents || (AdminPortalPagesForEvents = {}));
    AdminPortalPages = {
      profile: AdminPortalPagesForEvents.profile,
      privacy: AdminPortalPagesForEvents.privacy,
      personalApiTokens: AdminPortalPagesForEvents.personalApiTokens,
      account: AdminPortalPagesForEvents.account,
      users: AdminPortalPagesForEvents.users,
      groups: AdminPortalPagesForEvents.groups,
      security: AdminPortalPagesForEvents.security,
      sso: AdminPortalPagesForEvents.sso,
      audits: AdminPortalPagesForEvents.audits,
      webhooks: AdminPortalPagesForEvents.webhooks,
      apiTokens: AdminPortalPagesForEvents.apiTokens,
      roles: AdminPortalPagesForEvents.roles,
      subscriptions: AdminPortalPagesForEvents.subscriptions,
      allAccounts: AdminPortalPagesForEvents.allAccounts
    };
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaRequiredState.saga.js
function* getMfaRequiredState(user) {
  let step = LoginStep.loginWithTwoFactor;
  let mfaState2 = {};
  const {
    loginState: loginState2
  } = yield select((state) => state.auth);
  const {
    isAllowedToRemember,
    mfaDeviceExpiration
  } = yield call(api.auth.checkIfAllowToRememberMfaDevice, user.mfaToken);
  const isEnrolled = !(user.hasOwnProperty("mfaEnrolled") && !user.mfaEnrolled);
  if (isEnrolled) {
    mfaState2 = {
      mfaDevices: user.mfaDevices,
      step: getMfaStepForEnrolledUsers(user.mfaDevices)
    };
  } else {
    mfaState2 = {
      step: getMfaStepForNotEnrolledUsers(user.mfaStrategies),
      qrCode: user.qrCode,
      recoveryCode: user.recoveryCode,
      loading: false,
      mfaToken: user.mfaToken,
      mfaStrategies: user.mfaStrategies
    };
    step = LoginStep.forceTwoFactor;
  }
  let quickLoginState = {};
  const quickLoginToRegister = localStorage.getItem("register-quick-login");
  if (quickLoginToRegister) {
    quickLoginState = {
      quickLoginToRegister,
      flow: LoginFlow.RegisterQuickLogin
    };
  }
  return {
    user: void 0,
    isAuthenticated: false,
    mfaState: mfaState2,
    loginState: _extends({}, loginState2, quickLoginState, {
      mfaToken: user.mfaToken,
      mfaRequired: user.mfaRequired,
      loading: false,
      error: void 0,
      step,
      tenantsLoading: true,
      email: user.userEmail,
      tenants: [],
      allowRememberMfaDevice: isAllowedToRemember,
      mfaDeviceExpiration,
      isBreachedPassword: user.isBreachedPassword
    })
  };
}
var init_mfaRequiredState_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaRequiredState.saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_utils3();
    init_interfaces25();
  }
});

// node_modules/@frontegg/redux-store/utils/errorHandler.js
var isFronteggApiError, isError2, GENERIC_ERROR_MESSAGE2, errorHandler;
var init_errorHandler = __esm({
  "node_modules/@frontegg/redux-store/utils/errorHandler.js"() {
    isFronteggApiError = (error) => Boolean(error == null ? void 0 : error.statusCode);
    isError2 = (error) => {
      if (error instanceof Error) {
        return true;
      }
      return (error == null ? void 0 : error.message) && (error == null ? void 0 : error.stack) && (error == null ? void 0 : error.name) === "Error";
    };
    GENERIC_ERROR_MESSAGE2 = `We're facing some difficulties, Please try again`;
    errorHandler = (error, fallback) => {
      if (!error) {
        return fallback;
      }
      if (isFronteggApiError(error)) {
        return error.message;
      }
      if (isError2(error)) {
        console.error(error.message);
      } else if (typeof error === "string") {
        console.error(error);
      }
      return fallback != null ? fallback : GENERIC_ERROR_MESSAGE2;
    };
  }
});

// node_modules/@frontegg/redux-store/utils/gtm.js
function reportGTMEvent(action, payload) {
  var _window$onFronteggEve, _window;
  (_window$onFronteggEve = (_window = window).onFronteggEvent) == null ? void 0 : _window$onFronteggEve.call(_window, action, payload);
}
var GTMEventAction;
var init_gtm = __esm({
  "node_modules/@frontegg/redux-store/utils/gtm.js"() {
    (function(GTMEventAction2) {
      GTMEventAction2["SIGNUP_COMPLETED"] = "signup_completed";
      GTMEventAction2["USER_VERIFIED"] = "user_verified";
    })(GTMEventAction || (GTMEventAction = {}));
  }
});

// node_modules/@frontegg/redux-store/utils/index.js
var init_utils5 = __esm({
  "node_modules/@frontegg/redux-store/utils/index.js"() {
    init_errorHandler();
    init_sha256();
    init_gtm();
  }
});

// node_modules/@frontegg/redux-store/auth/CustomLoginState/utils.js
var mapMetaDataObjectToActions;
var init_utils6 = __esm({
  "node_modules/@frontegg/redux-store/auth/CustomLoginState/utils.js"() {
    mapMetaDataObjectToActions = (obj, path = []) => {
      return Object.entries(obj).reduce((acc, [key, value]) => {
        if (typeof value === "object") {
          return [...acc, ...mapMetaDataObjectToActions(value, [...path, key])];
        }
        return [...acc, {
          type: [...path, key].join("/"),
          payload: value
        }];
      }, []);
    };
  }
});

// node_modules/@frontegg/redux-store/auth/CustomLoginState/saga.js
function* loadTenantMetadata() {
  yield put(actions30.setCustomLoginState({
    loading: true
  }));
  try {
    const tenantMetadata = yield call(api.metadata.getAdminBoxMetadata);
    yield put(actions30.setCustomLoginState({
      tenantMetadata,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setCustomLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* updateTenantMetadata(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, state = _objectWithoutPropertiesLoose(_ref.payload, _excluded10);
  try {
    yield put(actions30.setCustomLoginState({
      error: null,
      saving: true
    }));
    const requestActions = mapMetaDataObjectToActions(state);
    if (requestActions.length === 0) {
      throw new Error("No changes to update");
    }
    yield call(api.metadata.updateAdminBoxMetadata, {
      actions: requestActions
    });
    const tenantMetadata = yield call(api.metadata.getAdminBoxMetadata);
    yield put(actions30.setCustomLoginState({
      tenantMetadata,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setCustomLoginState({
      error: errorHandler(e2, "No changes to update"),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* customLoginEnabled() {
  const customLoginAlias = yield call(getCustomLoginAlias);
  return !!customLoginAlias;
}
function* getCustomLoginAlias() {
  const context = ContextHolder.getContext();
  if (!(context != null && context.tenantResolver)) {
    return;
  }
  const resolvedTenantResult = yield context.tenantResolver();
  if (resolvedTenantResult != null && resolvedTenantResult.tenant) {
    return resolvedTenantResult.tenant;
  }
  const {
    customLoginAlias,
    hasCustomLogin
  } = yield select((state) => {
    var _state$auth, _state$auth$tenantsSt;
    const activeTenant = (_state$auth = state.auth) == null ? void 0 : (_state$auth$tenantsSt = _state$auth.tenantsState) == null ? void 0 : _state$auth$tenantsSt.activeTenant;
    return {
      customLoginAlias: activeTenant == null ? void 0 : activeTenant.alias,
      hasCustomLogin: activeTenant == null ? void 0 : activeTenant.hasCustomLogin
    };
  });
  if (hasCustomLogin) {
    return customLoginAlias;
  }
}
function* loadCustomLoginRoutes() {
  try {
    var _getSearchParamsFromU;
    const isCustomLoginEnabled = yield call(customLoginEnabled);
    if (!isCustomLoginEnabled) {
      return;
    }
    const isAuthenticated = yield select((state) => state.auth.isAuthenticated);
    const {
      getSettings: getSettings2,
      getPublicSettings: getPublicSettings2
    } = api.accountSettings;
    const {
      applicationUrl
    } = yield call(isAuthenticated ? getSettings2 : getPublicSettings2);
    if (!applicationUrl) {
      return;
    }
    const {
      routes
    } = yield select((state) => state.auth);
    const searchParams = (_getSearchParamsFromU = getSearchParamsFromUrl(applicationUrl)) != null ? _getSearchParamsFromU : "";
    yield put(actions30.setState({
      routes: _extends({}, routes, {
        customLoginAuthenticatedUrl: applicationUrl,
        customLoginUrl: routes.loginUrl + searchParams
      })
    }));
    yield put(actions30.setCustomLoginState({
      customLoginSearchParams: searchParams != null ? searchParams : void 0
    }));
  } catch {
  }
}
function* customLoginSagas() {
  yield takeLeading$1(actions30.loadTenantMetadata, loadTenantMetadata);
  yield takeLeading$1(actions30.updateTenantMetadata, updateTenantMetadata);
}
var _excluded10;
var init_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/CustomLoginState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_rest_api();
    init_redux_saga_effects_npm_proxy_esm();
    init_reducer();
    init_utils();
    init_utils6();
    init_utils5();
    init_utils3();
    _excluded10 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/types.js
var SecurityCenterStateKeys;
var init_types2 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/types.js"() {
    (function(SecurityCenterStateKeys2) {
      SecurityCenterStateKeys2["RECOMMENDATIONS"] = "recommendations";
      SecurityCenterStateKeys2["INSIGHTS"] = "insights";
      SecurityCenterStateKeys2["SEND_BULK_RESET_BREACHED_PASSWORD_EMAILS"] = "sendBulkResetBreachedPasswordEmails";
      SecurityCenterStateKeys2["SEND_BREACHED_PASSWORD_EMAIL"] = "sendBreachedPasswordEmail";
      SecurityCenterStateKeys2["BREACHED_PASSWORD_USERS_TABLE"] = "breachedPasswordUsersTable";
      SecurityCenterStateKeys2["UNENROLLED_MFA_USERS_TABLE"] = "unenrolledMfaUsersTable";
      SecurityCenterStateKeys2["INACTIVE_USERS_TABLE"] = "inactiveUsersTable";
    })(SecurityCenterStateKeys || (SecurityCenterStateKeys = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/saga.js
function securityCenterSagaWrapper(action) {
  return function* (props) {
    const [securityCenterFeatureFlag] = yield call(getFeatureFlags, ["security-center-admin-portal-major-version"]);
    yield action(props);
    if (securityCenterFeatureFlag) {
      yield loadRecommendations();
      yield loadInsights();
    }
  };
}
function* loadRecommendations() {
  const key = SecurityCenterStateKeys.RECOMMENDATIONS;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  try {
    var _scoring$score;
    const {
      recommendations,
      scoring
    } = yield call(api.securityCenter.getRecommendations);
    yield put(actions30.setSecurityCenterState({
      recommendations: recommendations.items,
      score: (_scoring$score = scoring == null ? void 0 : scoring.score) != null ? _scoring$score : 0
    }));
  } catch (e2) {
    yield put(actions30.setSecurityCenterStateError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setSecurityCenterStateLoader({
      key,
      value: false
    }));
  }
}
function* loadInsights() {
  const key = SecurityCenterStateKeys.INSIGHTS;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  try {
    const {
      insights
    } = yield call(api.securityCenter.getInsights);
    yield put(actions30.setSecurityCenterState({
      insights: insights.items
    }));
  } catch (e2) {
    yield put(actions30.setSecurityCenterStateError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setSecurityCenterStateLoader({
      key,
      value: false
    }));
  }
}
function* sendResetBreachedPasswordEmail(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref.payload, _excluded11);
  const key = SecurityCenterStateKeys.SEND_BREACHED_PASSWORD_EMAIL;
  yield put(actions30.setSecurityCenterStateError({
    key,
    value: false
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  try {
    yield call(api.auth.forgotPassword, payload);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSecurityCenterStateError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false, e2);
  } finally {
    yield put(actions30.setSecurityCenterStateLoader({
      key,
      value: false
    }));
  }
}
function* sendBulkResetBreachedPasswordEmails({
  payload: {
    callback
  }
}) {
  const key = SecurityCenterStateKeys.SEND_BULK_RESET_BREACHED_PASSWORD_EMAILS;
  yield put(actions30.setSecurityCenterStateError({
    key,
    value: false
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  try {
    yield call(api.users.sendResetBreachedPasswordEmails);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSecurityCenterStateError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setSecurityCenterStateLoader({
      key,
      value: false
    }));
  }
}
function* getUsersWithRoles(users) {
  const usersIds = users.map((user) => user.id);
  const allRoles = yield call(api.roles.getRoles);
  const usersRoles = yield call(api.users.getUsersRoles, {
    ids: usersIds
  });
  const usersWithRoles = users.map((user) => {
    var _usersRoles$find, _ref2;
    const userRolesIds = usersRoles == null ? void 0 : (_usersRoles$find = usersRoles.find((role) => role.userId === user.id)) == null ? void 0 : _usersRoles$find.roleIds;
    return _extends({}, user, {
      roles: (_ref2 = userRolesIds == null ? void 0 : userRolesIds.map((roleId) => {
        var _allRoles$find;
        return (_allRoles$find = allRoles == null ? void 0 : allRoles.find((role) => role.id === roleId)) != null ? _allRoles$find : [];
      })) != null ? _ref2 : []
    });
  });
  return usersWithRoles;
}
function* loadUsersTableSecurityCenter({
  key,
  tableState,
  updateStateKey,
  _offset: offset,
  _limit: limit,
  _preset,
  _email,
  _maxInactiveSeconds
}) {
  var _ref3, _tableState$queryPara, _ref4, _tableState$queryPara2;
  yield put(actions30.setSecurityCenterStateError({
    key,
    value: false
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  const _offset = (_ref3 = offset != null ? offset : tableState == null ? void 0 : (_tableState$queryPara = tableState.queryParams) == null ? void 0 : _tableState$queryPara._offset) != null ? _ref3 : 0;
  const _limit = (_ref4 = limit != null ? limit : tableState == null ? void 0 : (_tableState$queryPara2 = tableState.queryParams) == null ? void 0 : _tableState$queryPara2._limit) != null ? _ref4 : 10;
  const tableStateQueryParams = _extends({
    _offset,
    _limit,
    _includeSubTenants: false,
    _preset,
    _maxInactiveSeconds
  }, !!_email && {
    _email
  });
  try {
    const {
      items: usersItems,
      _metadata: {
        totalItems,
        totalPages
      }
    } = yield call(api.users.getUsersV3, tableStateQueryParams);
    const partialTableObj = {
      totalUsersItems: totalItems,
      totalUsersPages: totalPages,
      usersPageOffset: _offset,
      queryParams: _extends({
        _offset,
        _limit,
        _maxInactiveSeconds
      }, !!_email && {
        _email
      })
    };
    if (usersItems.length) {
      const usersWithRoles = yield getUsersWithRoles(usersItems);
      yield put(actions30.setSecurityCenterState({
        [updateStateKey]: _extends({
          users: usersWithRoles
        }, partialTableObj)
      }));
    } else {
      yield put(actions30.setSecurityCenterState({
        [updateStateKey]: _extends({
          users: []
        }, partialTableObj)
      }));
    }
  } catch (e2) {
    yield put(actions30.setSecurityCenterStateError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setSecurityCenterStateLoader({
      key,
      value: false
    }));
  }
}
function* loadBreachedPasswordUsers({
  payload
}) {
  var _select;
  const key = SecurityCenterStateKeys.BREACHED_PASSWORD_USERS_TABLE;
  const breachedPasswordUsersTable = yield (_select = select((state) => {
    var _state$auth$securityC;
    return (_state$auth$securityC = state.auth.securityCenterState) == null ? void 0 : _state$auth$securityC.breachedPasswordUsersTable;
  })) != null ? _select : {};
  yield loadUsersTableSecurityCenter(_extends({
    key,
    updateStateKey: "breachedPasswordUsersTable",
    _preset: GetUsersFilterPreset.BREACHED_PASSWORDS,
    tableState: breachedPasswordUsersTable
  }, payload));
}
function* loadUnenrolledMfaUsers({
  payload
}) {
  var _select2;
  const key = SecurityCenterStateKeys.UNENROLLED_MFA_USERS_TABLE;
  const unenrolledMfaUsersTable = yield (_select2 = select((state) => {
    var _state$auth$securityC2;
    return (_state$auth$securityC2 = state.auth.securityCenterState) == null ? void 0 : _state$auth$securityC2.unenrolledMfaUsersTable;
  })) != null ? _select2 : {};
  yield loadUsersTableSecurityCenter(_extends({
    key,
    updateStateKey: "unenrolledMfaUsersTable",
    _preset: GetUsersFilterPreset.MFA_UNENROLLED,
    tableState: unenrolledMfaUsersTable
  }, payload));
}
function* loadInactiveUsers({
  payload
}) {
  var _select3;
  const key = SecurityCenterStateKeys.INACTIVE_USERS_TABLE;
  const inactiveUsersTable = yield (_select3 = select((state) => {
    var _state$auth$securityC3;
    return (_state$auth$securityC3 = state.auth.securityCenterState) == null ? void 0 : _state$auth$securityC3.inactiveUsersTable;
  })) != null ? _select3 : {};
  yield loadUsersTableSecurityCenter(_extends({
    key,
    updateStateKey: "inactiveUsersTable",
    _preset: GetUsersFilterPreset.INACTIVE,
    tableState: inactiveUsersTable
  }, payload));
}
function* securityCenterSagas() {
  yield takeEvery$1(actions30.loadRecommendations, loadRecommendations);
  yield takeEvery$1(actions30.loadInsights, loadInsights);
  yield takeEvery$1(actions30.sendResetBreachedPasswordEmail, sendResetBreachedPasswordEmail);
  yield takeEvery$1(actions30.sendBulkResetBreachedPasswordEmails, sendBulkResetBreachedPasswordEmails);
  yield takeEvery$1(actions30.loadBreachedPasswordUsers, loadBreachedPasswordUsers);
  yield takeEvery$1(actions30.loadUnenrolledMfaUsers, loadUnenrolledMfaUsers);
  yield takeEvery$1(actions30.loadInactiveUsers, loadInactiveUsers);
}
function* loadRecommendationsMock() {
  const key = SecurityCenterStateKeys.RECOMMENDATIONS;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  yield delay2(500);
  yield put(actions30.setSecurityCenterState({
    recommendations: securityCenterRecommendationsMock.recommendations.items,
    score: securityCenterRecommendationsMock.scoring.score
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: false
  }));
}
function* loadInsightsMock() {
  const key = SecurityCenterStateKeys.INSIGHTS;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  yield delay2(500);
  yield put(actions30.setSecurityCenterState({
    insights: securityCenterInsightsMock.insights.items
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: false
  }));
}
function* loadBreachedPasswordUsersMock() {
  const key = SecurityCenterStateKeys.BREACHED_PASSWORD_USERS_TABLE;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  yield delay2(500);
  yield put(actions30.setSecurityCenterState({
    breachedPasswordUsersTable: securityCenterBreachedPasswordUsersMock
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: false
  }));
}
function* loadUnenrolledMfaUsersMock() {
  const key = SecurityCenterStateKeys.UNENROLLED_MFA_USERS_TABLE;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  yield delay2(500);
  yield put(actions30.setSecurityCenterState({
    unenrolledMfaUsersTable: securityCenterUnenrolledMfaUsersMock
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: false
  }));
}
function* loadInactiveUsersMock() {
  const key = SecurityCenterStateKeys.INACTIVE_USERS_TABLE;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  yield delay2(500);
  yield put(actions30.setSecurityCenterState({
    inactiveUsersTable: securityCenterInactivityPasswordUsersMock
  }));
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: false
  }));
}
function* sendResetBreachedPasswordEmailMock({
  payload: {
    callback
  }
}) {
  const key = SecurityCenterStateKeys.SEND_BREACHED_PASSWORD_EMAIL;
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: true
  }));
  yield delay2(500);
  callback == null ? void 0 : callback(true);
  yield put(actions30.setSecurityCenterStateLoader({
    key,
    value: false
  }));
}
function* securityCenterSagasMock() {
  yield takeEvery$1(actions30.loadRecommendations, loadRecommendationsMock);
  yield takeEvery$1(actions30.loadInsights, loadInsightsMock);
  yield takeEvery$1(actions30.loadBreachedPasswordUsers, loadBreachedPasswordUsersMock);
  yield takeEvery$1(actions30.loadUnenrolledMfaUsers, loadUnenrolledMfaUsersMock);
  yield takeEvery$1(actions30.loadInactiveUsers, loadInactiveUsersMock);
  yield takeEvery$1(actions30.sendResetBreachedPasswordEmail, sendResetBreachedPasswordEmailMock);
}
var _excluded11;
var init_saga2 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_reducer();
    init_utils5();
    init_rest_api();
    init_types2();
    init_helpers();
    init_dummy();
    _excluded11 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityPolicyState/saga.js
function* loadSecurityPolicy() {
  yield put(actions30.setSecurityPolicyGlobalState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getGlobalSecurityPolicy);
    yield put(actions30.setSecurityPolicyGlobalState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyGlobalState({
      error: errorHandler(e2),
      loading: false
    }));
  }
  yield put(actions30.loadSecurityPolicyMfa());
  yield put(actions30.loadSecurityPolicyVendorMfa());
  yield put(actions30.loadSecurityPolicyLockout());
  yield put(actions30.loadSecurityPolicyVendorLockout());
  yield put(actions30.loadSecurityPolicyVendorPasswordHistory());
  yield put(actions30.loadSecurityPolicyCaptcha());
  yield put(actions30.loadPublicAuthStrategiesPolicy());
}
function* getSecurityPolicyPublicStateWithCustomLogin(securityPolicyPublicState) {
  var _authStrategies$mainA, _authStrategies$mainA2;
  const isCustomLoginEnabled = yield call(customLoginEnabled);
  if (!isCustomLoginEnabled) {
    return securityPolicyPublicState;
  }
  const authStrategies = yield call(getAuthStrategy);
  if (!(authStrategies != null && (_authStrategies$mainA = authStrategies.mainAuthStrategies) != null && (_authStrategies$mainA2 = _authStrategies$mainA[0]) != null && _authStrategies$mainA2.strategy)) {
    return securityPolicyPublicState;
  }
  return _extends({}, securityPolicyPublicState, {
    authStrategy: authStrategies.mainAuthStrategies[0].strategy
  });
}
function* setSecurityPolicyPublicStateForCustomLogin(authStrategy) {
  const isCustomLoginEnabled = yield call(customLoginEnabled);
  if (!authStrategy || !isCustomLoginEnabled) {
    return;
  }
  const {
    policy
  } = yield select(({
    auth
  }) => {
    var _auth$securityPolicyS;
    return (_auth$securityPolicyS = auth.securityPolicyState) == null ? void 0 : _auth$securityPolicyS.publicPolicy;
  });
  yield put(actions30.setSecurityPolicyPublicState({
    policy: _extends({}, policy, {
      authStrategy
    }),
    loading: false
  }));
}
function* loadPublicSecurityPolicy() {
  yield put(actions30.setSecurityPolicyPublicState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getVendorConfig);
    const policyWithCustomLoginAuthStrategy = yield getSecurityPolicyPublicStateWithCustomLogin(policy);
    yield put(actions30.setSecurityPolicyPublicState({
      policy: policyWithCustomLoginAuthStrategy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyPublicState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* getAuthStrategy() {
  const isAuthenticated = yield select(({
    auth
  }) => auth.isAuthenticated);
  let policy;
  if (isAuthenticated) {
    policy = yield call(api.auth.getPublicAuthStrategiesConfigForAuthenticatedUser);
  } else {
    policy = yield call(api.auth.getVendorPublicAuthStrategiesConfig);
  }
  return policy;
}
function* loadPublicAuthStrategiesPolicy() {
  yield put(actions30.setSecurityPolicyAuthStrategyPublicState({
    loading: true,
    error: null
  }));
  try {
    var _policy$mainAuthStrat, _policy$mainAuthStrat2;
    const policy = yield call(getAuthStrategy);
    yield setSecurityPolicyPublicStateForCustomLogin(policy == null ? void 0 : (_policy$mainAuthStrat = policy.mainAuthStrategies) == null ? void 0 : (_policy$mainAuthStrat2 = _policy$mainAuthStrat[0]) == null ? void 0 : _policy$mainAuthStrat2.strategy);
    yield put(actions30.setSecurityPolicyAuthStrategyPublicState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyAuthStrategyPublicState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* loadSecurityPolicyMfa() {
  yield put(actions30.setSecurityPolicyMfaState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getMfaPolicy);
    yield put(actions30.setSecurityPolicyMfaState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyMfaState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* loadSecurityPolicyVendorMfa() {
  yield put(actions30.setSecurityPolicyMfaState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getVendorMfaPolicy);
    yield put(actions30.setSecurityPolicyVendorMfaState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyVendorMfaState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* saveSecurityPolicyMfa(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, newSecurityPolicy = _objectWithoutPropertiesLoose(_ref.payload, _excluded12);
  yield put(actions30.setSecurityPolicyMfaState({
    saving: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.saveMfaPolicy, newSecurityPolicy);
    yield put(actions30.setSecurityPolicyMfaState({
      policy,
      saving: false
    }));
    callback == null ? void 0 : callback(policy);
  } catch (e2) {
    yield put(actions30.setSecurityPolicyMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* loadSecurityPolicyLockout() {
  yield put(actions30.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getLockoutPolicy);
    yield put(actions30.setSecurityPolicyLockoutState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyLockoutState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* saveSecurityPolicyLockout(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2, newSecurityPolicy = _objectWithoutPropertiesLoose(_ref2.payload, _excluded25);
  yield put(actions30.setSecurityPolicyLockoutState({
    saving: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.saveLockoutPolicy, newSecurityPolicy);
    yield put(actions30.setSecurityPolicyLockoutState({
      policy,
      saving: false
    }));
    callback == null ? void 0 : callback(policy);
  } catch (e2) {
    yield put(actions30.setSecurityPolicyLockoutState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* loadSecurityPolicyVendorLockout() {
  yield put(actions30.setSecurityPolicyVendorLockoutState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getVendorLockoutPolicy);
    yield put(actions30.setSecurityPolicyVendorLockoutState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyVendorLockoutState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* loadSecurityPolicyCaptcha() {
  yield put(actions30.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getCaptchaPolicy);
    yield put(actions30.setSecurityPolicyCaptchaState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyCaptchaState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* loadSecurityPolicyPasswordHistory() {
  yield put(actions30.setSecurityPolicyPasswordHistoryState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getPasswordHistoryPolicy);
    yield put(actions30.setSecurityPolicyPasswordHistoryState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyPasswordHistoryState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* loadSecurityPolicyVendorPasswordHistory() {
  yield put(actions30.setSecurityPolicyVendorPasswordHistoryState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getVendorPasswordHistoryPolicy);
    yield put(actions30.setSecurityPolicyVendorPasswordHistoryState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyVendorPasswordHistoryState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* saveSecurityPolicyPasswordHistory(_ref3) {
  let {
    payload: {
      callback
    }
  } = _ref3, newSecurityPolicy = _objectWithoutPropertiesLoose(_ref3.payload, _excluded34);
  yield put(actions30.setSecurityPolicyPasswordHistoryState({
    saving: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.savePasswordHistoryPolicy, newSecurityPolicy);
    yield put(actions30.setSecurityPolicyPasswordHistoryState({
      policy,
      saving: false
    }));
    callback == null ? void 0 : callback(policy);
  } catch (e2) {
    yield put(actions30.setSecurityPolicyPasswordHistoryState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* loadVendorPasswordConfig() {
  yield put(actions30.setSecurityPolicyPasswordState({
    loading: true,
    error: null
  }));
  try {
    const policy = yield call(api.auth.getPasswordConfigPolicy);
    yield put(actions30.setSecurityPolicyPasswordState({
      policy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyPasswordState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* securityPolicySagas() {
  yield takeLeading$1(actions30.loadSecurityPolicy, loadSecurityPolicy);
  yield takeEvery$1(actions30.saveSecurityPolicyMfa, securityCenterSagaWrapper(saveSecurityPolicyMfa));
  yield takeEvery$1(actions30.loadSecurityPolicyMfa, loadSecurityPolicyMfa);
  yield takeEvery$1(actions30.loadSecurityPolicyVendorMfa, loadSecurityPolicyVendorMfa);
  yield takeEvery$1(actions30.saveSecurityPolicyLockout, securityCenterSagaWrapper(saveSecurityPolicyLockout));
  yield takeEvery$1(actions30.loadSecurityPolicyLockout, loadSecurityPolicyLockout);
  yield takeEvery$1(actions30.loadSecurityPolicyVendorLockout, loadSecurityPolicyVendorLockout);
  yield takeEvery$1(actions30.loadSecurityPolicyCaptcha, loadSecurityPolicyCaptcha);
  yield takeEvery$1(actions30.saveSecurityPolicyPasswordHistory, securityCenterSagaWrapper(saveSecurityPolicyPasswordHistory));
  yield takeEvery$1(actions30.loadSecurityPolicyPasswordHistory, loadSecurityPolicyPasswordHistory);
  yield takeEvery$1(actions30.loadSecurityPolicyVendorPasswordHistory, loadSecurityPolicyVendorPasswordHistory);
  yield takeEvery$1(actions30.loadVendorPasswordConfig, loadVendorPasswordConfig);
  yield takeEvery$1(actions30.loadPublicSecurityPolicy, loadPublicSecurityPolicy);
  yield takeEvery$1(actions30.loadPublicAuthStrategiesPolicy, loadPublicAuthStrategiesPolicy);
}
function* loadPublicSecurityPolicyMock() {
  yield put(actions30.setSecurityPolicyPublicState({
    loading: true,
    error: null
  }));
  try {
    yield put(actions30.setSecurityPolicyPublicState({
      policy: publicSecurityPolicy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSecurityPolicyPublicState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* loadSecurityPolicyMock() {
  yield put(actions30.setSecurityPolicyGlobalState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyGlobalState({
    policy: policyDemo,
    loading: false
  }));
  yield put(actions30.loadSecurityPolicyMfa());
  yield put(actions30.loadSecurityPolicyVendorMfa());
  yield put(actions30.loadSecurityPolicyLockout());
  yield put(actions30.loadSecurityPolicyVendorLockout());
  yield put(actions30.loadSecurityPolicyPasswordHistory());
  yield put(actions30.loadSecurityPolicyVendorPasswordHistory());
  yield put(actions30.loadSecurityPolicyCaptcha());
}
function* loadSecurityPolicyMfaMock() {
  yield put(actions30.setSecurityPolicyMfaState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyMfaState({
    policy: policyMfaDemo,
    loading: false
  }));
}
function* loadSecurityPolicyVendorMfaMock() {
  yield put(actions30.setSecurityPolicyVendorMfaState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyVendorMfaState({
    policy: policyMfaDemo,
    loading: false
  }));
}
function* saveSecurityPolicyMfaMock(_ref4) {
  var _newSecurityPolicy$id;
  let {
    payload: {
      callback
    }
  } = _ref4, newSecurityPolicy = _objectWithoutPropertiesLoose(_ref4.payload, _excluded42);
  yield put(actions30.setSecurityPolicyMfaState({
    saving: true,
    error: null
  }));
  const policy = _extends({}, policyLockoutDemo, {
    id: (_newSecurityPolicy$id = newSecurityPolicy.id) != null ? _newSecurityPolicy$id : policyLockoutDemo.id,
    enforceMFAType: newSecurityPolicy.enforceMFAType
  });
  yield delay();
  yield put(actions30.setSecurityPolicyMfaState({
    policy,
    saving: false
  }));
  callback == null ? void 0 : callback(policy);
}
function* loadSecurityPolicyLockoutMock() {
  yield put(actions30.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyLockoutState({
    policy: policyLockoutDemo,
    loading: false
  }));
}
function* loadSecurityPolicyVendorLockoutMock() {
  yield put(actions30.setSecurityPolicyVendorLockoutState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyVendorLockoutState({
    policy: policyLockoutDemo,
    loading: false
  }));
}
function* saveSecurityPolicyLockoutMock(_ref5) {
  let {
    payload: {
      callback
    }
  } = _ref5, newSecurityPolicy = _objectWithoutPropertiesLoose(_ref5.payload, _excluded52);
  yield put(actions30.setSecurityPolicyLockoutState({
    saving: true,
    error: null
  }));
  yield delay();
  const policy = _extends({}, policyLockoutDemo, newSecurityPolicy, {
    id: newSecurityPolicy.id ? newSecurityPolicy.id : policyLockoutDemo.id
  });
  callback == null ? void 0 : callback(policy);
  yield put(actions30.setSecurityPolicyLockoutState({
    policy,
    saving: false
  }));
}
function* loadSecurityPolicyCaptchaMock() {
  yield put(actions30.setSecurityPolicyLockoutState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyLockoutState({
    policy: policyLockoutDemo,
    loading: false
  }));
}
function* loadSecurityPolicyPasswordHistoryMock() {
  yield put(actions30.setSecurityPolicyPasswordHistoryState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyPasswordHistoryState({
    policy: policyPasswordHistoryDemo,
    loading: false
  }));
}
function* loadSecurityPolicyVendorPasswordHistoryMock() {
  yield put(actions30.setSecurityPolicyVendorPasswordHistoryState({
    loading: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setSecurityPolicyVendorPasswordHistoryState({
    policy: policyPasswordHistoryDemo,
    loading: false
  }));
}
function* saveSecurityPolicyPasswordHistoryMock(_ref6) {
  let {
    payload: {
      callback
    }
  } = _ref6, newSecurityPolicy = _objectWithoutPropertiesLoose(_ref6.payload, _excluded62);
  yield put(actions30.setSecurityPolicyPasswordHistoryState({
    saving: true,
    error: null
  }));
  yield delay();
  const policy = _extends({}, policyPasswordHistoryDemo, newSecurityPolicy, {
    id: newSecurityPolicy.id ? newSecurityPolicy.id : policyPasswordHistoryDemo.id
  });
  callback == null ? void 0 : callback(policy);
  yield put(actions30.setSecurityPolicyPasswordHistoryState({
    policy,
    saving: false
  }));
}
function* securityPolicySagasMock() {
  yield takeLeading$1(actions30.loadSecurityPolicy, loadSecurityPolicyMock);
  yield takeEvery$1(actions30.loadPublicSecurityPolicy, loadPublicSecurityPolicyMock);
  yield takeEvery$1(actions30.saveSecurityPolicyMfa, saveSecurityPolicyMfaMock);
  yield takeEvery$1(actions30.loadSecurityPolicyMfa, loadSecurityPolicyMfaMock);
  yield takeEvery$1(actions30.loadSecurityPolicyVendorMfa, loadSecurityPolicyVendorMfaMock);
  yield takeEvery$1(actions30.saveSecurityPolicyLockout, saveSecurityPolicyLockoutMock);
  yield takeEvery$1(actions30.loadSecurityPolicyLockout, loadSecurityPolicyLockoutMock);
  yield takeEvery$1(actions30.loadSecurityPolicyVendorLockout, loadSecurityPolicyVendorLockoutMock);
  yield takeEvery$1(actions30.loadSecurityPolicyCaptcha, loadSecurityPolicyCaptchaMock);
  yield takeEvery$1(actions30.saveSecurityPolicyPasswordHistory, saveSecurityPolicyPasswordHistoryMock);
  yield takeEvery$1(actions30.loadSecurityPolicyPasswordHistory, loadSecurityPolicyPasswordHistoryMock);
  yield takeEvery$1(actions30.loadSecurityPolicyVendorPasswordHistory, loadSecurityPolicyVendorPasswordHistoryMock);
}
var _excluded12, _excluded25, _excluded34, _excluded42, _excluded52, _excluded62;
var init_saga3 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityPolicyState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_utils();
    init_dummy();
    init_utils5();
    init_saga();
    init_saga2();
    _excluded12 = ["callback"];
    _excluded25 = ["callback"];
    _excluded34 = ["callback"];
    _excluded42 = ["callback"];
    _excluded52 = ["callback"];
    _excluded62 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/SignUp/saga.js
function* loadAllowSignUps() {
  yield put(actions30.setSignUpState({
    loading: true
  }));
  try {
    const policy = yield call(api.auth.getVendorConfig);
    const policyWithCustomLoginAuthStrategy = yield getSecurityPolicyPublicStateWithCustomLogin(policy);
    const {
      allowSignups: allowSignUps,
      allowNotVerifiedUsersLogin
    } = policy;
    yield put(actions30.setSignUpState({
      loading: false,
      allowSignUps,
      allowNotVerifiedUsersLogin,
      firstLoad: false
    }));
    yield put(actions30.setSecurityPolicyPublicState({
      policy: policyWithCustomLoginAuthStrategy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSignUpState({
      loading: false,
      error: errorHandler(e2),
      firstLoad: false
    }));
  }
}
function* signUpUser2(_ref2) {
  let {
    payload: {
      events,
      url
    }
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2.payload, _excluded26);
  yield put(actions30.setSignUpState({
    loading: true
  }));
  try {
    const {
      routes,
      onRedirectTo
    } = yield select((state) => state.auth);
    const {
      shouldActivate,
      user,
      tenantId,
      userId,
      tenants = [],
      activeTenant
    } = yield call(
      api.auth.signUpUser,
      //Currently we are not supporting phone number in signup in the backend
      //Remove this line when we will support it (also make sure when field is optional no empty string is sent)
      extractPhoneNumber(payload)
    );
    if (!payload.invitationToken) {
      var _events$signUpComplet;
      const {
        email,
        name: name10,
        companyName,
        phoneNumber
      } = payload;
      const signUpCompletePayload = {
        email,
        name: name10,
        companyName,
        url,
        phoneNumber: phoneNumber || void 0,
        authenticationType: AuthenticationTypes.PASSWORD,
        id: userId,
        tenantId,
        createdAt: /* @__PURE__ */ new Date()
      };
      events == null ? void 0 : (_events$signUpComplet = events.signUpComplete) == null ? void 0 : _events$signUpComplet.call(events, signUpCompletePayload);
      reportGTMEvent(GTMEventAction.SIGNUP_COMPLETED, signUpCompletePayload);
    }
    if (!shouldActivate && user && isMfaRequired(user)) {
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl);
    } else {
      const {
        tenantsState: tenantsState2
      } = yield select((state) => state.auth);
      yield put(actions30.setSignUpState({
        loading: false,
        shouldActivate,
        stage: SignUpStage.SignUpSuccess
      }));
      yield put(actions30.setState({
        user,
        isAuthenticated: !!(user != null && user.accessToken),
        tenantsState: _extends({}, tenantsState2, {
          tenants,
          activeTenant
        })
      }));
    }
  } catch (e2) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setSignUpState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
  yield put(actions30.setSignUpState({
    loading: false
  }));
}
function* resetSignUpStateSoft() {
  const {
    allowSignUps,
    allowNotVerifiedUsersLogin
  } = yield select((state) => state.auth.signUpState);
  yield put(actions30.resetSignUpState());
  yield put(actions30.setSignUpState({
    allowSignUps,
    allowNotVerifiedUsersLogin
  }));
}
function* signUpSaga() {
  yield takeLeading$1(actions30.signUpUser, signUpUser2);
  yield takeLeading$1(actions30.resetSignUpStateSoft, resetSignUpStateSoft);
}
var _excluded13, _excluded26, extractPhoneNumber;
var init_saga4 = __esm({
  "node_modules/@frontegg/redux-store/auth/SignUp/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces31();
    init_interfaces35();
    init_mfaRequiredState_saga();
    init_utils5();
    init_utils3();
    init_saga3();
    _excluded13 = ["phoneNumber"];
    _excluded26 = ["events", "url"];
    extractPhoneNumber = (_ref) => {
      let rest = _objectWithoutPropertiesLoose(_ref, _excluded13);
      return rest;
    };
  }
});

// node_modules/@frontegg/redux-store/vendor/VendorState/index.js
var reducers31, actions31;
var init_VendorState = __esm({
  "node_modules/@frontegg/redux-store/vendor/VendorState/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_constants3();
    reducers31 = {
      setVendorState: (state, {
        payload
      }) => _extends({}, state, payload)
    };
    actions31 = {
      loadVendorPublicInfo: createAction(`${vendorStoreName}/loadVendorPublicInfo`)
    };
  }
});

// node_modules/@frontegg/redux-store/vendor/reducer.js
var initialState2, reducer2, sliceActions2, actions32;
var init_reducer2 = __esm({
  "node_modules/@frontegg/redux-store/vendor/reducer.js"() {
    init_extends();
    init_constants3();
    init_redux_toolkit_esm();
    init_VendorState();
    initialState2 = {
      loading: false
    };
    ({
      reducer: reducer2,
      actions: sliceActions2
    } = createSlice({
      name: vendorStoreName,
      initialState: initialState2,
      reducers: _extends({}, reducers31)
    }));
    actions32 = _extends({}, sliceActions2, actions31);
  }
});

// node_modules/@frontegg/redux-store/vendor/saga.js
function* loadVendorPublicInfo() {
  yield put(actions32.setVendorState({
    loading: true
  }));
  try {
    const {
      whiteLabelMode = false
    } = yield api.vendor.getVendorPublicInfo();
    yield put(actions32.setVendorState({
      whiteLabelMode,
      loading: false
    }));
  } catch (e2) {
    yield put(actions32.setVendorState({
      loading: false
    }));
    console.error("failed to getVendorPublicInfo - ", e2);
  }
}
function* sagas() {
  yield takeEvery$1(actions32.loadVendorPublicInfo, loadVendorPublicInfo);
}
var init_saga5 = __esm({
  "node_modules/@frontegg/redux-store/vendor/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer2();
    init_utils();
  }
});

// node_modules/fast-deep-equal/index.js
var require_fast_deep_equal = __commonJS({
  "node_modules/fast-deep-equal/index.js"(exports, module) {
    "use strict";
    module.exports = function equal(a2, b2) {
      if (a2 === b2)
        return true;
      if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
        if (a2.constructor !== b2.constructor)
          return false;
        var length, i2, keys;
        if (Array.isArray(a2)) {
          length = a2.length;
          if (length != b2.length)
            return false;
          for (i2 = length; i2-- !== 0; )
            if (!equal(a2[i2], b2[i2]))
              return false;
          return true;
        }
        if (a2.constructor === RegExp)
          return a2.source === b2.source && a2.flags === b2.flags;
        if (a2.valueOf !== Object.prototype.valueOf)
          return a2.valueOf() === b2.valueOf();
        if (a2.toString !== Object.prototype.toString)
          return a2.toString() === b2.toString();
        keys = Object.keys(a2);
        length = keys.length;
        if (length !== Object.keys(b2).length)
          return false;
        for (i2 = length; i2-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b2, keys[i2]))
            return false;
        for (i2 = length; i2-- !== 0; ) {
          var key = keys[i2];
          if (!equal(a2[key], b2[key]))
            return false;
        }
        return true;
      }
      return a2 !== a2 && b2 !== b2;
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Entitlements/saga.js
function isEntitlementsDeeplyEqual(oldEntitlements, newEntitlements) {
  return (0, import_fast_deep_equal.default)(oldEntitlements, newEntitlements);
}
function* handleFetchedEntitlements(newEntitlementsResponse) {
  const oldEntitlements = yield select((state) => {
    var _state$auth$user;
    return (_state$auth$user = state.auth.user) == null ? void 0 : _state$auth$user.entitlements;
  });
  if (isEntitlementsDeeplyEqual(oldEntitlements, newEntitlementsResponse)) {
    return;
  }
  yield put(actions30.setEntitlements(newEntitlementsResponse));
}
function* loadEntitlements2({
  payload
}) {
  const callback = payload == null ? void 0 : payload.callback;
  const [useEntitlementsV2] = yield call(getFeatureFlags, [USE_ENTITLEMENTS_V2_ENDPOINT_FF]);
  try {
    const entitlements = yield call(useEntitlementsV2 ? api.entitlements.loadEntitlementsV2 : api.entitlements.loadEntitlements);
    yield handleFetchedEntitlements(entitlements);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    callback == null ? void 0 : callback(false);
  } finally {
  }
}
function* entitlementsSagas() {
  yield takeLeading$1(actions30.loadEntitlements, loadEntitlements2);
}
var import_fast_deep_equal;
var init_saga6 = __esm({
  "node_modules/@frontegg/redux-store/auth/Entitlements/saga.js"() {
    import_fast_deep_equal = __toESM(require_fast_deep_equal());
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_helpers();
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/rules/types.js
var require_types = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/rules/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RuleEvaluationResultEnum = exports.TreatmentEnum = exports.ConditionLogicEnum = void 0;
    var ConditionLogicEnum;
    (function(ConditionLogicEnum2) {
      ConditionLogicEnum2["And"] = "and";
    })(ConditionLogicEnum = exports.ConditionLogicEnum || (exports.ConditionLogicEnum = {}));
    var TreatmentEnum;
    (function(TreatmentEnum2) {
      TreatmentEnum2["True"] = "true";
      TreatmentEnum2["False"] = "false";
    })(TreatmentEnum = exports.TreatmentEnum || (exports.TreatmentEnum = {}));
    var RuleEvaluationResultEnum;
    (function(RuleEvaluationResultEnum2) {
      RuleEvaluationResultEnum2["Treatable"] = "treatable";
      RuleEvaluationResultEnum2["Insufficient"] = "insufficient";
    })(RuleEvaluationResultEnum = exports.RuleEvaluationResultEnum || (exports.RuleEvaluationResultEnum = {}));
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/types/operation.enum.js
var require_operation_enum = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/types/operation.enum.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OperationEnum = void 0;
    var OperationEnum;
    (function(OperationEnum2) {
      OperationEnum2["InList"] = "in_list";
      OperationEnum2["StartsWith"] = "starts_with";
      OperationEnum2["EndsWith"] = "ends_with";
      OperationEnum2["Contains"] = "contains";
      OperationEnum2["Matches"] = "matches";
      OperationEnum2["Equal"] = "equal";
      OperationEnum2["GreaterThan"] = "greater_than";
      OperationEnum2["GreaterThanEqual"] = "greater_than_equal";
      OperationEnum2["LesserThan"] = "lower_than";
      OperationEnum2["LesserThanEqual"] = "lower_than_equal";
      OperationEnum2["BetweenNumeric"] = "between_numeric";
      OperationEnum2["Is"] = "is";
      OperationEnum2["On"] = "on";
      OperationEnum2["BetweenDate"] = "between_date";
      OperationEnum2["OnOrAfter"] = "on_or_after";
      OperationEnum2["OnOrBefore"] = "on_or_before";
    })(OperationEnum = exports.OperationEnum || (exports.OperationEnum = {}));
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/types/index.js
var require_types2 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/types/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_operation_enum(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/operations.js
var require_operations = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/operations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMatchesOperation = exports.useInListOperation = exports.useContainsOperation = exports.useEndsWithOperation = exports.useStartsWithOperation = void 0;
    function useStartsWithOperation(payload) {
      return (attribute) => ({ isValid: payload.list.some((value) => attribute.startsWith(value)) });
    }
    exports.useStartsWithOperation = useStartsWithOperation;
    function useEndsWithOperation(payload) {
      return (attribute) => ({ isValid: payload.list.some((value) => attribute.endsWith(value)) });
    }
    exports.useEndsWithOperation = useEndsWithOperation;
    function useContainsOperation(payload) {
      return (attribute) => ({ isValid: payload.list.some((value) => attribute.includes(value)) });
    }
    exports.useContainsOperation = useContainsOperation;
    function useInListOperation(payload) {
      return (attribute) => ({ isValid: payload.list.includes(attribute) });
    }
    exports.useInListOperation = useInListOperation;
    function useMatchesOperation(payload) {
      return (attribute) => {
        let expression;
        try {
          expression = new RegExp(payload.string);
        } catch (e2) {
          return { isValid: false };
        }
        return { isValid: expression.test(attribute) };
      };
    }
    exports.useMatchesOperation = useMatchesOperation;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/types.js
var require_types3 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/index.js
var require_string = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringOperationsMapper = void 0;
    var types_1 = require_types2();
    var operations_1 = require_operations();
    __exportStar(require_operations(), exports);
    __exportStar(require_types3(), exports);
    exports.StringOperationsMapper = {
      [types_1.OperationEnum.StartsWith]: (value) => (0, operations_1.useStartsWithOperation)(value),
      [types_1.OperationEnum.EndsWith]: (value) => (0, operations_1.useEndsWithOperation)(value),
      [types_1.OperationEnum.Contains]: (value) => (0, operations_1.useContainsOperation)(value),
      [types_1.OperationEnum.InList]: (value) => (0, operations_1.useInListOperation)(value),
      [types_1.OperationEnum.Matches]: (value) => (0, operations_1.useMatchesOperation)(value)
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/operations.js
var require_operations2 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/operations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useBetweenNumericOperation = exports.useLesserThanEqualOperation = exports.useLesserThanOperation = exports.useGreaterThanEqualOperation = exports.useGreaterThanOperation = exports.useEqualsOperation = void 0;
    function useEqualsOperation(payload) {
      return (attribute) => ({ isValid: attribute === payload.number });
    }
    exports.useEqualsOperation = useEqualsOperation;
    function useGreaterThanOperation(payload) {
      return (attribute) => ({ isValid: attribute > payload.number });
    }
    exports.useGreaterThanOperation = useGreaterThanOperation;
    function useGreaterThanEqualOperation(payload) {
      return (attribute) => ({ isValid: attribute >= payload.number });
    }
    exports.useGreaterThanEqualOperation = useGreaterThanEqualOperation;
    function useLesserThanOperation(payload) {
      return (attribute) => ({ isValid: attribute < payload.number });
    }
    exports.useLesserThanOperation = useLesserThanOperation;
    function useLesserThanEqualOperation(payload) {
      return (attribute) => ({ isValid: attribute <= payload.number });
    }
    exports.useLesserThanEqualOperation = useLesserThanEqualOperation;
    function useBetweenNumericOperation(payload) {
      return (attribute) => ({ isValid: attribute >= payload.start && attribute <= payload.end });
    }
    exports.useBetweenNumericOperation = useBetweenNumericOperation;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/sanitizers.js
var require_sanitizers = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/sanitizers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumericSanitizersMapper = exports.sanitizeNumericRange = exports.sanitizeSingleNumber = void 0;
    var types_1 = require_types2();
    var isNumber = (value) => typeof value === "number";
    var sanitizeSingleNumber = (value) => {
      const sanitizedValue = value.number !== void 0 && isNumber(value.number) ? { number: value.number } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.sanitizeSingleNumber = sanitizeSingleNumber;
    var sanitizeNumericRange = (value) => {
      const sanitizedValue = value.start !== void 0 && value.end !== void 0 && isNumber(value.start) && isNumber(value.end) ? { start: value.start, end: value.end } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.sanitizeNumericRange = sanitizeNumericRange;
    exports.NumericSanitizersMapper = {
      [types_1.OperationEnum.Equal]: exports.sanitizeSingleNumber,
      [types_1.OperationEnum.GreaterThan]: exports.sanitizeSingleNumber,
      [types_1.OperationEnum.GreaterThanEqual]: exports.sanitizeSingleNumber,
      [types_1.OperationEnum.LesserThan]: exports.sanitizeSingleNumber,
      [types_1.OperationEnum.LesserThanEqual]: exports.sanitizeSingleNumber,
      [types_1.OperationEnum.BetweenNumeric]: exports.sanitizeNumericRange
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/types.js
var require_types4 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/index.js
var require_numeric = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/numeric/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumericOperationsMapper = void 0;
    var types_1 = require_types2();
    var operations_1 = require_operations2();
    exports.NumericOperationsMapper = {
      [types_1.OperationEnum.Equal]: (value) => (0, operations_1.useEqualsOperation)(value),
      [types_1.OperationEnum.GreaterThan]: (value) => (0, operations_1.useGreaterThanOperation)(value),
      [types_1.OperationEnum.GreaterThanEqual]: (value) => (0, operations_1.useGreaterThanEqualOperation)(value),
      [types_1.OperationEnum.LesserThan]: (value) => (0, operations_1.useLesserThanOperation)(value),
      [types_1.OperationEnum.LesserThanEqual]: (value) => (0, operations_1.useLesserThanEqualOperation)(value),
      [types_1.OperationEnum.BetweenNumeric]: (value) => (0, operations_1.useBetweenNumericOperation)(value)
    };
    __exportStar(require_operations2(), exports);
    __exportStar(require_sanitizers(), exports);
    __exportStar(require_types4(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/operations.js
var require_operations3 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/operations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useDateBetweenOperation = exports.useDateOnOrBeforeOperation = exports.useDateOnOrAfterOperation = exports.useDateOnOperation = void 0;
    function useDateOnOperation(payload) {
      return (attribute) => ({ isValid: attribute.getTime() === payload.date.getTime() });
    }
    exports.useDateOnOperation = useDateOnOperation;
    function useDateOnOrAfterOperation(payload) {
      return (attribute) => ({ isValid: attribute.getTime() >= payload.date.getTime() });
    }
    exports.useDateOnOrAfterOperation = useDateOnOrAfterOperation;
    function useDateOnOrBeforeOperation(payload) {
      return (attribute) => ({ isValid: attribute.getTime() <= payload.date.getTime() });
    }
    exports.useDateOnOrBeforeOperation = useDateOnOrBeforeOperation;
    function useDateBetweenOperation(payload) {
      return (attribute) => ({
        isValid: attribute.getTime() >= payload.start.getTime() && attribute.getTime() <= payload.end.getTime()
      });
    }
    exports.useDateBetweenOperation = useDateBetweenOperation;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/types.js
var require_types5 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/index.js
var require_date = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateOperationsMapper = void 0;
    var types_1 = require_types2();
    var operations_1 = require_operations3();
    __exportStar(require_operations3(), exports);
    __exportStar(require_types5(), exports);
    exports.DateOperationsMapper = {
      [types_1.OperationEnum.On]: (value) => (0, operations_1.useDateOnOperation)(value),
      [types_1.OperationEnum.OnOrAfter]: (value) => (0, operations_1.useDateOnOrAfterOperation)(value),
      [types_1.OperationEnum.OnOrBefore]: (value) => (0, operations_1.useDateOnOrBeforeOperation)(value),
      [types_1.OperationEnum.BetweenDate]: (value) => (0, operations_1.useDateBetweenOperation)(value)
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/boolean/operations.js
var require_operations4 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/boolean/operations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useIsOperation = void 0;
    function useIsOperation(payload) {
      return (attribute) => ({ isValid: attribute === payload.boolean });
    }
    exports.useIsOperation = useIsOperation;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/boolean/sanitizers.js
var require_sanitizers2 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/boolean/sanitizers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanSanitizersMapper = exports.singleBooleanSanitizer = void 0;
    var types_1 = require_types2();
    var isBoolean2 = (value) => typeof value === "boolean";
    var singleBooleanSanitizer = (value) => {
      const sanitizedValue = value.boolean !== void 0 && isBoolean2(value.boolean) ? { boolean: value.boolean } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.singleBooleanSanitizer = singleBooleanSanitizer;
    exports.BooleanSanitizersMapper = {
      [types_1.OperationEnum.Is]: exports.singleBooleanSanitizer
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/boolean/index.js
var require_boolean = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/boolean/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanOperationsMapper = void 0;
    var types_1 = require_types2();
    var operations_1 = require_operations4();
    __exportStar(require_operations4(), exports);
    __exportStar(require_sanitizers2(), exports);
    exports.BooleanOperationsMapper = {
      [types_1.OperationEnum.Is]: (value) => (0, operations_1.useIsOperation)(value)
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/components/operation.resolver.js
var require_operation_resolver = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/components/operation.resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useOperation = void 0;
    var string_1 = require_string();
    var numeric_1 = require_numeric();
    var date_1 = require_date();
    var boolean_1 = require_boolean();
    var operationEnrichersMapper = {
      ...string_1.StringOperationsMapper,
      ...numeric_1.NumericOperationsMapper,
      ...date_1.DateOperationsMapper,
      ...boolean_1.BooleanOperationsMapper
    };
    function useOperation(operation, value) {
      const operationContextEnricher = operationEnrichersMapper[operation];
      return operationContextEnricher ? operationContextEnricher(value) : void 0;
    }
    exports.useOperation = useOperation;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/sanitizers.js
var require_sanitizers3 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/string/sanitizers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringSanitizersMapper = exports.sanitizeListString = exports.sanitizeSingleString = void 0;
    var types_1 = require_types2();
    var isString = (value) => typeof value === "string";
    var sanitizeSingleString = (value) => {
      const sanitizedValue = value.string !== void 0 && isString(value.string) ? { string: value.string } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.sanitizeSingleString = sanitizeSingleString;
    var sanitizeListString = (value) => {
      const sanitizedValue = value.list !== void 0 && value.list.every((str) => isString(str)) ? { list: value.list } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.sanitizeListString = sanitizeListString;
    exports.StringSanitizersMapper = {
      [types_1.OperationEnum.Matches]: exports.sanitizeSingleString,
      [types_1.OperationEnum.Contains]: exports.sanitizeListString,
      [types_1.OperationEnum.StartsWith]: exports.sanitizeListString,
      [types_1.OperationEnum.EndsWith]: exports.sanitizeListString,
      [types_1.OperationEnum.InList]: exports.sanitizeListString
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/sanitizers.js
var require_sanitizers4 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/date/sanitizers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DateSanitizersMapper = exports.sanitizeDateRange = exports.sanitizeSingleDate = exports.isValidDate = exports.sanitizeDateValue = void 0;
    var types_1 = require_types2();
    var sanitizeDateValue = (value) => {
      return new Date(value);
    };
    exports.sanitizeDateValue = sanitizeDateValue;
    var isValidDate = (value) => value instanceof Date && !isNaN(value);
    exports.isValidDate = isValidDate;
    var sanitizeSingleDate = (value) => {
      const sanitizedDateValue = value.date ? (0, exports.sanitizeDateValue)(value.date) : void 0;
      const sanitizedValue = sanitizedDateValue && (0, exports.isValidDate)(sanitizedDateValue) ? { date: sanitizedDateValue } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.sanitizeSingleDate = sanitizeSingleDate;
    var sanitizeDateRange = (value) => {
      const sanitizedStartValue = value.start ? (0, exports.sanitizeDateValue)(value.start) : void 0;
      const sanitizedEndValue = value.end ? (0, exports.sanitizeDateValue)(value.end) : void 0;
      const sanitizedValue = sanitizedStartValue && sanitizedEndValue && (0, exports.isValidDate)(sanitizedStartValue) && (0, exports.isValidDate)(sanitizedEndValue) ? { start: sanitizedStartValue, end: sanitizedEndValue } : void 0;
      return {
        isSanitized: !!sanitizedValue,
        sanitizedValue
      };
    };
    exports.sanitizeDateRange = sanitizeDateRange;
    exports.DateSanitizersMapper = {
      [types_1.OperationEnum.On]: exports.sanitizeSingleDate,
      [types_1.OperationEnum.OnOrAfter]: exports.sanitizeSingleDate,
      [types_1.OperationEnum.OnOrBefore]: exports.sanitizeSingleDate,
      [types_1.OperationEnum.BetweenDate]: exports.sanitizeDateRange
    };
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/operations/components/sanitizers.resolver.js
var require_sanitizers_resolver = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/operations/components/sanitizers.resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSanitizer = void 0;
    var boolean_1 = require_boolean();
    var sanitizers_1 = require_sanitizers3();
    var sanitizers_2 = require_sanitizers4();
    var numeric_1 = require_numeric();
    var SanitizersMapper = {
      ...sanitizers_1.StringSanitizersMapper,
      ...numeric_1.NumericSanitizersMapper,
      ...sanitizers_2.DateSanitizersMapper,
      ...boolean_1.BooleanSanitizersMapper
    };
    function useSanitizer(operation) {
      return SanitizersMapper[operation];
    }
    exports.useSanitizer = useSanitizer;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/conditions/condition.evaluator.js
var require_condition_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/conditions/condition.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createConditionEvaluator = void 0;
    var operation_resolver_1 = require_operation_resolver();
    var sanitizers_resolver_1 = require_sanitizers_resolver();
    function failingConditionEvaluator() {
      return () => false;
    }
    function createConditionEvaluator(payload) {
      const sanitizer = (0, sanitizers_resolver_1.useSanitizer)(payload.condition.op);
      if (!sanitizer) {
        return failingConditionEvaluator();
      }
      const { isSanitized, sanitizedValue } = sanitizer(payload.condition.value);
      if (!isSanitized || sanitizedValue === void 0) {
        return failingConditionEvaluator();
      }
      const operation = (0, operation_resolver_1.useOperation)(payload.condition.op, sanitizedValue);
      return (attributes) => {
        const attributeKey = payload.condition.attribute;
        const value = attributes[attributeKey];
        if (value === void 0 || !operation) {
          return false;
        }
        const { isValid: result } = operation(value);
        return payload.condition.negate ? !result : result;
      };
    }
    exports.createConditionEvaluator = createConditionEvaluator;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/conditions/types.js
var require_types6 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/conditions/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/conditions/index.js
var require_conditions = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/conditions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_condition_evaluator(), exports);
    __exportStar(require_types6(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/rules/rule.evaluator.js
var require_rule_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/rules/rule.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createRuleEvaluator = void 0;
    var types_1 = require_types();
    var conditions_1 = require_conditions();
    function createRuleEvaluator(payload) {
      return (attributes) => {
        const isRuleTreatable = payload.rule.conditions.every((condition) => {
          const evaluator = (0, conditions_1.createConditionEvaluator)({ condition });
          return evaluator(attributes);
        });
        return isRuleTreatable ? types_1.RuleEvaluationResultEnum.Treatable : types_1.RuleEvaluationResultEnum.Insufficient;
      };
    }
    exports.createRuleEvaluator = createRuleEvaluator;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/rules/index.js
var require_rules = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/rules/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_types(), exports);
    __exportStar(require_rule_evaluator(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/feature-flags/feature-flag.evaluator.js
var require_feature_flag_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/feature-flags/feature-flag.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateFeatureFlag = void 0;
    var rules_1 = require_rules();
    function evaluateFeatureFlag(featureFlag, attributes) {
      if (!featureFlag.on) {
        return { treatment: featureFlag.offTreatment };
      }
      const treatableRule = findTreatableRule(featureFlag, attributes);
      if (treatableRule) {
        return { treatment: treatableRule.treatment };
      }
      return { treatment: featureFlag.defaultTreatment };
    }
    exports.evaluateFeatureFlag = evaluateFeatureFlag;
    function findTreatableRule(featureFlag, attributes) {
      var _a;
      return (_a = featureFlag.rules) === null || _a === void 0 ? void 0 : _a.find((rule) => {
        const evaluator = (0, rules_1.createRuleEvaluator)({ rule });
        const result = evaluator(attributes);
        return result === rules_1.RuleEvaluationResultEnum.Treatable;
      });
    }
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/feature-flags/index.js
var require_feature_flags = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/feature-flags/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_feature_flag_evaluator(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/plans/plan.evaluator.js
var require_plan_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/plans/plan.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluatePlan = void 0;
    var rules_1 = require_rules();
    function evaluatePlan(plan, attributes) {
      const treatableRule = findTreatableRule(plan, attributes);
      if (treatableRule) {
        return { treatment: treatableRule.treatment };
      }
      return { treatment: plan.defaultTreatment };
    }
    exports.evaluatePlan = evaluatePlan;
    function findTreatableRule(plan, attributes) {
      var _a;
      return (_a = plan.rules) === null || _a === void 0 ? void 0 : _a.find((rule) => {
        const evaluator = (0, rules_1.createRuleEvaluator)({ rule });
        const result = evaluator(attributes);
        return result === rules_1.RuleEvaluationResultEnum.Treatable;
      });
    }
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/plans/index.js
var require_plans = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/plans/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_plan_evaluator(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/types.js
var require_types7 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NO_EXPIRATION_TIME = exports.NotEntitledJustification = void 0;
    var NotEntitledJustification2;
    (function(NotEntitledJustification3) {
      NotEntitledJustification3["MISSING_FEATURE"] = "MISSING_FEATURE";
      NotEntitledJustification3["MISSING_PERMISSION"] = "MISSING_PERMISSION";
      NotEntitledJustification3["BUNDLE_EXPIRED"] = "BUNDLE_EXPIRED";
    })(NotEntitledJustification2 = exports.NotEntitledJustification || (exports.NotEntitledJustification = {}));
    exports.NO_EXPIRATION_TIME = -1;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/permissions.utils.js
var require_permissions_utils = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/permissions.utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPermissionCheckRegex = exports.checkPermission = void 0;
    function checkPermission(permissions, requiredPermission) {
      return Object.keys(permissions).some((permissionKey) => createPermissionCheckRegex(permissionKey).test(requiredPermission));
    }
    exports.checkPermission = checkPermission;
    function createPermissionCheckRegex(permissionKey) {
      return new RegExp("^" + permissionKey.replace(/\./g, "\\.").replace(/\*/g, ".*") + "$", "gs");
    }
    exports.createPermissionCheckRegex = createPermissionCheckRegex;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/flatten.utils.js
var require_flatten_utils = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/flatten.utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.flatten = void 0;
    function flatten(target, opts) {
      opts = opts || {};
      const delimiter = (opts === null || opts === void 0 ? void 0 : opts.delimiter) || ".";
      const maxDepth = opts === null || opts === void 0 ? void 0 : opts.maxDepth;
      const transformKey = (opts === null || opts === void 0 ? void 0 : opts.transformKey) || keyIdentity;
      const output = {};
      function step(object3, prev, currentDepth) {
        currentDepth = currentDepth || 1;
        Object.keys(object3).forEach(function(key) {
          const value = object3[key];
          const isarray = (opts === null || opts === void 0 ? void 0 : opts.safe) && Array.isArray(value);
          const type = Object.prototype.toString.call(value);
          const isbuffer = isBuffer(value);
          const isobject = type === "[object Object]" || type === "[object Array]";
          const newKey = prev ? prev + delimiter + transformKey(key) : transformKey(key);
          if (!isarray && !isbuffer && isobject && Object.keys(value).length && (!(opts === null || opts === void 0 ? void 0 : opts.maxDepth) || maxDepth && currentDepth < maxDepth)) {
            return step(value, newKey, currentDepth + 1);
          }
          output[newKey] = value;
        });
      }
      step(target);
      return output;
    }
    exports.flatten = flatten;
    function isBuffer(obj) {
      return obj && obj.constructor && typeof obj.constructor.isBuffer === "function" && obj.constructor.isBuffer(obj);
    }
    function keyIdentity(key) {
      return key;
    }
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/attributes.utils.js
var require_attributes_utils = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/attributes.utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.modifyObjectKeysWithPrefix = exports.defaultFronteggAttributesMapper = exports.prepareAttributes = void 0;
    var flatten_utils_1 = require_flatten_utils();
    function prepareAttributes(attributes = {}, customFronteggAttributesMapper) {
      const { custom = {}, jwt = {} } = attributes;
      const flatJwtAttributes = (0, flatten_utils_1.flatten)(jwt);
      const fronteggAttributes = customFronteggAttributesMapper ? customFronteggAttributesMapper(jwt) : defaultFronteggAttributesMapper(jwt);
      const fronteggAttributesPrefix = "frontegg.";
      const jwtAttributesPrefix = "jwt.";
      return {
        ...custom,
        ...modifyObjectKeysWithPrefix(fronteggAttributes, fronteggAttributesPrefix),
        ...modifyObjectKeysWithPrefix(flatJwtAttributes, jwtAttributesPrefix)
      };
    }
    exports.prepareAttributes = prepareAttributes;
    function defaultFronteggAttributesMapper(jwt) {
      return {
        email: jwt.email,
        emailVerified: jwt.email_verified,
        tenantId: jwt.tenantId,
        userId: jwt.id
      };
    }
    exports.defaultFronteggAttributesMapper = defaultFronteggAttributesMapper;
    function modifyObjectKeysWithPrefix(object3, prefix2) {
      return Object.keys(object3).reduce((modifiedObject, currentKey) => {
        modifiedObject[`${prefix2}${currentKey}`] = object3[currentKey];
        return modifiedObject;
      }, {});
    }
    exports.modifyObjectKeysWithPrefix = modifyObjectKeysWithPrefix;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/entitlement-results.utils.js
var require_entitlement_results_utils = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/entitlement-results.utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shouldContinue = exports.getResult = void 0;
    var types_1 = require_types7();
    function getResult(entitlementResults) {
      let hasExpired = false;
      for (const entitlementResult of entitlementResults) {
        if (entitlementResult.isEntitled) {
          return entitlementResult;
        }
        if (entitlementResult.justification === types_1.NotEntitledJustification.BUNDLE_EXPIRED) {
          hasExpired = true;
        }
      }
      return {
        isEntitled: false,
        justification: hasExpired ? types_1.NotEntitledJustification.BUNDLE_EXPIRED : types_1.NotEntitledJustification.MISSING_FEATURE
      };
    }
    exports.getResult = getResult;
    function shouldContinue(entitlementResults) {
      return entitlementResults.every(({ isEntitled }) => !isEntitled);
    }
    exports.shouldContinue = shouldContinue;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/index.js
var require_utils = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/utils/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_permissions_utils(), exports);
    __exportStar(require_attributes_utils(), exports);
    __exportStar(require_entitlement_results_utils(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/direct-entitlement.evaluator.js
var require_direct_entitlement_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/direct-entitlement.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.directEntitlementEvalutor = void 0;
    var types_1 = require_types7();
    function directEntitlementEvalutor(featureKey, userEntitlementsContext, attributes = {}) {
      const feature = userEntitlementsContext.features[featureKey];
      let hasExpired = false;
      if (feature && feature.expireTime !== null) {
        hasExpired = feature.expireTime !== types_1.NO_EXPIRATION_TIME && feature.expireTime < Date.now();
        if (!hasExpired) {
          return { isEntitled: true };
        }
      }
      return {
        isEntitled: false,
        justification: hasExpired ? types_1.NotEntitledJustification.BUNDLE_EXPIRED : types_1.NotEntitledJustification.MISSING_FEATURE
      };
    }
    exports.directEntitlementEvalutor = directEntitlementEvalutor;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/feature-flag.evaluator.js
var require_feature_flag_evaluator2 = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/feature-flag.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.featureFlagEvaluator = void 0;
    var types_1 = require_types7();
    var feature_flags_1 = require_feature_flags();
    var attributes_utils_1 = require_attributes_utils();
    var rules_1 = require_rules();
    function featureFlagEvaluator(featureKey, userEntitlementsContext, attributes = {}) {
      const feature = userEntitlementsContext.features[featureKey];
      if (feature && feature.featureFlag) {
        const preparedAttributes = (0, attributes_utils_1.prepareAttributes)(attributes);
        const { treatment } = (0, feature_flags_1.evaluateFeatureFlag)(feature.featureFlag, preparedAttributes);
        if (treatment === rules_1.TreatmentEnum.True) {
          return { isEntitled: true };
        }
      }
      return {
        isEntitled: false,
        justification: types_1.NotEntitledJustification.MISSING_FEATURE
      };
    }
    exports.featureFlagEvaluator = featureFlagEvaluator;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/plan-targeting-rules.evaluator.js
var require_plan_targeting_rules_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/plan-targeting-rules.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.planTargetingRulesEvalutor = void 0;
    var types_1 = require_types7();
    var attributes_utils_1 = require_attributes_utils();
    var rules_1 = require_rules();
    var plans_1 = require_plans();
    function planTargetingRulesEvalutor(featureKey, userEntitlementsContext, attributes = {}) {
      const feature = userEntitlementsContext.features[featureKey];
      if (feature && feature.planIds && feature.planIds.length > 0) {
        const preparedAttributes = (0, attributes_utils_1.prepareAttributes)(attributes);
        const plans = userEntitlementsContext.plans;
        for (const planId of feature.planIds) {
          const plan = plans[planId];
          if (plan) {
            const { treatment } = (0, plans_1.evaluatePlan)(plan, preparedAttributes);
            if (treatment === rules_1.TreatmentEnum.True) {
              return { isEntitled: true };
            }
          }
        }
      }
      return {
        isEntitled: false,
        justification: types_1.NotEntitledJustification.MISSING_FEATURE
      };
    }
    exports.planTargetingRulesEvalutor = planTargetingRulesEvalutor;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/index.js
var require_evaluators = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/evaluators/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIsEntitledEvaluators = void 0;
    var direct_entitlement_evaluator_1 = require_direct_entitlement_evaluator();
    var feature_flag_evaluator_1 = require_feature_flag_evaluator2();
    var plan_targeting_rules_evaluator_1 = require_plan_targeting_rules_evaluator();
    function getIsEntitledEvaluators() {
      return [direct_entitlement_evaluator_1.directEntitlementEvalutor, feature_flag_evaluator_1.featureFlagEvaluator, plan_targeting_rules_evaluator_1.planTargetingRulesEvalutor];
    }
    exports.getIsEntitledEvaluators = getIsEntitledEvaluators;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/is-entitled-to-feature.evaluator.js
var require_is_entitled_to_feature_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/is-entitled-to-feature.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateIsEntitledToFeature = void 0;
    var types_1 = require_types7();
    var utils_1 = require_utils();
    var evaluators_1 = require_evaluators();
    function evaluateIsEntitledToFeature2(featureKey, userEntitlementsContext, attributes = {}) {
      if (!userEntitlementsContext) {
        return { isEntitled: false, justification: types_1.NotEntitledJustification.MISSING_FEATURE };
      }
      const entitlementResults = [];
      for (const evaluator of (0, evaluators_1.getIsEntitledEvaluators)()) {
        entitlementResults.push(evaluator(featureKey, userEntitlementsContext, attributes));
        if (!(0, utils_1.shouldContinue)(entitlementResults)) {
          break;
        }
      }
      return (0, utils_1.getResult)(entitlementResults);
    }
    exports.evaluateIsEntitledToFeature = evaluateIsEntitledToFeature2;
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/index.js
var require_is_entitled_to_feature = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-feature/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_is_entitled_to_feature_evaluator(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-permission/is-entitled-to-permission.evaluator.js
var require_is_entitled_to_permission_evaluator = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-permission/is-entitled-to-permission.evaluator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.evaluateIsEntitledToPermissions = void 0;
    var is_entitled_to_feature_evaluator_1 = require_is_entitled_to_feature_evaluator();
    var types_1 = require_types7();
    var utils_1 = require_utils();
    var permissions_utils_1 = require_permissions_utils();
    function evaluateIsEntitledToPermissions2(permissionKey, userEntitlementsContext, attributes) {
      if (!userEntitlementsContext) {
        return { isEntitled: false, justification: types_1.NotEntitledJustification.MISSING_PERMISSION };
      }
      const hasPermission = (0, permissions_utils_1.checkPermission)(userEntitlementsContext.permissions, permissionKey);
      if (!hasPermission) {
        return { isEntitled: false, justification: types_1.NotEntitledJustification.MISSING_PERMISSION };
      }
      const linkedFeatures = getLinkedFeatures(permissionKey, userEntitlementsContext);
      if (!linkedFeatures.length) {
        return { isEntitled: true };
      }
      const entitlementResults = [];
      for (const featureKey of linkedFeatures) {
        entitlementResults.push((0, is_entitled_to_feature_evaluator_1.evaluateIsEntitledToFeature)(featureKey, userEntitlementsContext, attributes));
        if (!(0, utils_1.shouldContinue)(entitlementResults)) {
          break;
        }
      }
      return (0, utils_1.getResult)(entitlementResults);
    }
    exports.evaluateIsEntitledToPermissions = evaluateIsEntitledToPermissions2;
    function getLinkedFeatures(permissionKey, userEntitlementsContext) {
      return Object.keys(userEntitlementsContext.features).filter((featureKey) => userEntitlementsContext.features[featureKey].linkedPermissions.includes(permissionKey));
    }
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-permission/index.js
var require_is_entitled_to_permission = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/is-entitled-to-permission/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_is_entitled_to_permission_evaluator(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/index.js
var require_user_entitlements = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/user-entitlements/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      var desc = Object.getOwnPropertyDescriptor(m2, k2);
      if (!desc || ("get" in desc ? !m2.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m2[k2];
        } };
      }
      Object.defineProperty(o2, k22, desc);
    } : function(o2, m2, k2, k22) {
      if (k22 === void 0)
        k22 = k2;
      o2[k22] = m2[k2];
    });
    var __exportStar = exports && exports.__exportStar || function(m2, exports2) {
      for (var p2 in m2)
        if (p2 !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p2))
          __createBinding(exports2, m2, p2);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_is_entitled_to_feature(), exports);
    __exportStar(require_is_entitled_to_permission(), exports);
    __exportStar(require_types7(), exports);
    __exportStar(require_utils(), exports);
  }
});

// node_modules/@frontegg/entitlements-javascript-commons/dist/index.js
var require_dist = __commonJS({
  "node_modules/@frontegg/entitlements-javascript-commons/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NotEntitledJustification = exports.createPermissionCheckRegex = exports.checkPermission = exports.prepareAttributes = exports.evaluateIsEntitledToPermissions = exports.evaluateIsEntitledToFeature = exports.OperationEnum = exports.TreatmentEnum = exports.evaluatePlan = exports.evaluateFeatureFlag = void 0;
    var feature_flags_1 = require_feature_flags();
    Object.defineProperty(exports, "evaluateFeatureFlag", { enumerable: true, get: function() {
      return feature_flags_1.evaluateFeatureFlag;
    } });
    var plans_1 = require_plans();
    Object.defineProperty(exports, "evaluatePlan", { enumerable: true, get: function() {
      return plans_1.evaluatePlan;
    } });
    var rules_1 = require_rules();
    Object.defineProperty(exports, "TreatmentEnum", { enumerable: true, get: function() {
      return rules_1.TreatmentEnum;
    } });
    var types_1 = require_types2();
    Object.defineProperty(exports, "OperationEnum", { enumerable: true, get: function() {
      return types_1.OperationEnum;
    } });
    var user_entitlements_1 = require_user_entitlements();
    Object.defineProperty(exports, "evaluateIsEntitledToFeature", { enumerable: true, get: function() {
      return user_entitlements_1.evaluateIsEntitledToFeature;
    } });
    Object.defineProperty(exports, "evaluateIsEntitledToPermissions", { enumerable: true, get: function() {
      return user_entitlements_1.evaluateIsEntitledToPermissions;
    } });
    Object.defineProperty(exports, "prepareAttributes", { enumerable: true, get: function() {
      return user_entitlements_1.prepareAttributes;
    } });
    Object.defineProperty(exports, "checkPermission", { enumerable: true, get: function() {
      return user_entitlements_1.checkPermission;
    } });
    Object.defineProperty(exports, "createPermissionCheckRegex", { enumerable: true, get: function() {
      return user_entitlements_1.createPermissionCheckRegex;
    } });
    Object.defineProperty(exports, "NotEntitledJustification", { enumerable: true, get: function() {
      return user_entitlements_1.NotEntitledJustification;
    } });
  }
});

// node_modules/@frontegg/redux-store/auth/Entitlements/utils.js
var import_entitlements_javascript_commons, ENTITLEMENTS_NOT_ENABLED_EXCEPTION_TEXT, guardEntitlementsUsage, getEntitlementsHelperV1, getPermissionEntitlements, getFeatureEntitlements, getEntitlements;
var init_utils7 = __esm({
  "node_modules/@frontegg/redux-store/auth/Entitlements/utils.js"() {
    init_rest_api();
    import_entitlements_javascript_commons = __toESM(require_dist());
    ENTITLEMENTS_NOT_ENABLED_EXCEPTION_TEXT = "You must first enable entitlements via Frontegg options to use this function";
    guardEntitlementsUsage = () => {
      if (ContextHolder.shouldLoadEntitlements())
        return;
      throw new Error(ENTITLEMENTS_NOT_ENABLED_EXCEPTION_TEXT);
    };
    getEntitlementsHelperV1 = (keyEntitlements, missingKeyEnum) => {
      if (!keyEntitlements) {
        return {
          isEntitled: false,
          justification: missingKeyEnum
        };
      }
      if (keyEntitlements.isEntitled) {
        return {
          isEntitled: true
        };
      }
      return {
        isEntitled: false,
        justification: keyEntitlements.justification
      };
    };
    getPermissionEntitlements = (entitlements, key, attributes, isV2) => {
      var _permissions;
      guardEntitlementsUsage();
      if (isV2) {
        return (0, import_entitlements_javascript_commons.evaluateIsEntitledToPermissions)(key, entitlements, attributes);
      }
      return getEntitlementsHelperV1(entitlements == null ? void 0 : (_permissions = entitlements.permissions) == null ? void 0 : _permissions[key], NotEntitledJustification.MISSING_PERMISSION);
    };
    getFeatureEntitlements = (entitlements, key, attributes, isV2) => {
      var _features;
      guardEntitlementsUsage();
      if (isV2) {
        return (0, import_entitlements_javascript_commons.evaluateIsEntitledToFeature)(key, entitlements, attributes);
      }
      return getEntitlementsHelperV1(entitlements == null ? void 0 : (_features = entitlements.features) == null ? void 0 : _features[key], NotEntitledJustification.MISSING_FEATURE);
    };
    getEntitlements = (entitlements, options, attributes, isV2) => {
      if ("permissionKey" in options) {
        return getPermissionEntitlements(entitlements, options.permissionKey, attributes, isV2);
      }
      return getFeatureEntitlements(entitlements, options.featureKey, attributes, isV2);
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Entitlements/index.js
var init_Entitlements = __esm({
  "node_modules/@frontegg/redux-store/auth/Entitlements/index.js"() {
    init_saga6();
    init_utils7();
  }
});

// node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js
function deferred() {
  var def = {};
  def.promise = new Promise(function(resolve, reject) {
    def.resolve = resolve;
    def.reject = reject;
  });
  return def;
}
var redux_saga_deferred_esm_default;
var init_redux_saga_deferred_esm = __esm({
  "node_modules/@redux-saga/deferred/dist/redux-saga-deferred.esm.js"() {
    redux_saga_deferred_esm_default = deferred;
  }
});

// node_modules/@redux-saga/core/dist/redux-saga-core.esm.js
function exec(task3) {
  try {
    suspend();
    task3();
  } finally {
    release();
  }
}
function asap(task3) {
  queue.push(task3);
  if (!semaphore) {
    suspend();
    flush2();
  }
}
function immediately(task3) {
  try {
    suspend();
    return task3();
  } finally {
    flush2();
  }
}
function suspend() {
  semaphore++;
}
function release() {
  semaphore--;
}
function flush2() {
  release();
  var task3;
  while (!semaphore && (task3 = queue.shift()) !== void 0) {
    exec(task3);
  }
}
function matcher(pattern3) {
  var matcherCreator = pattern3 === "*" ? wildcard : string(pattern3) ? string3 : array(pattern3) ? array2 : stringableFunc(pattern3) ? string3 : func(pattern3) ? predicate : symbol(pattern3) ? symbol3 : null;
  if (matcherCreator === null) {
    throw new Error("invalid pattern: " + pattern3);
  }
  return matcherCreator(pattern3);
}
function channel3(buffer$1) {
  if (buffer$1 === void 0) {
    buffer$1 = expanding();
  }
  var closed = false;
  var takers = [];
  if (true) {
    check(buffer$1, buffer, INVALID_BUFFER);
  }
  function checkForbiddenStates() {
    if (closed && takers.length) {
      throw internalErr(CLOSED_CHANNEL_WITH_TAKERS);
    }
    if (takers.length && !buffer$1.isEmpty()) {
      throw internalErr("Cannot have pending takers with non empty buffer");
    }
  }
  function put2(input) {
    if (true) {
      checkForbiddenStates();
      check(input, notUndef, UNDEFINED_INPUT_ERROR);
    }
    if (closed) {
      return;
    }
    if (takers.length === 0) {
      return buffer$1.put(input);
    }
    var cb = takers.shift();
    cb(input);
  }
  function take2(cb) {
    if (true) {
      checkForbiddenStates();
      check(cb, func, "channel.take's callback must be a function");
    }
    if (closed && buffer$1.isEmpty()) {
      cb(END);
    } else if (!buffer$1.isEmpty()) {
      cb(buffer$1.take());
    } else {
      takers.push(cb);
      cb.cancel = function() {
        remove(takers, cb);
      };
    }
  }
  function flush3(cb) {
    if (true) {
      checkForbiddenStates();
      check(cb, func, "channel.flush' callback must be a function");
    }
    if (closed && buffer$1.isEmpty()) {
      cb(END);
      return;
    }
    cb(buffer$1.flush());
  }
  function close() {
    if (true) {
      checkForbiddenStates();
    }
    if (closed) {
      return;
    }
    closed = true;
    var arr = takers;
    takers = [];
    for (var i2 = 0, len = arr.length; i2 < len; i2++) {
      var taker = arr[i2];
      taker(END);
    }
  }
  return {
    take: take2,
    put: put2,
    flush: flush3,
    close
  };
}
function multicastChannel() {
  var _ref;
  var closed = false;
  var currentTakers = [];
  var nextTakers = currentTakers;
  function checkForbiddenStates() {
    if (closed && nextTakers.length) {
      throw internalErr(CLOSED_CHANNEL_WITH_TAKERS);
    }
  }
  var ensureCanMutateNextTakers = function ensureCanMutateNextTakers2() {
    if (nextTakers !== currentTakers) {
      return;
    }
    nextTakers = currentTakers.slice();
  };
  var close = function close2() {
    if (true) {
      checkForbiddenStates();
    }
    closed = true;
    var takers = currentTakers = nextTakers;
    nextTakers = [];
    takers.forEach(function(taker) {
      taker(END);
    });
  };
  return _ref = {}, _ref[MULTICAST] = true, _ref.put = function put2(input) {
    if (true) {
      checkForbiddenStates();
      check(input, notUndef, UNDEFINED_INPUT_ERROR);
    }
    if (closed) {
      return;
    }
    if (isEnd(input)) {
      close();
      return;
    }
    var takers = currentTakers = nextTakers;
    for (var i2 = 0, len = takers.length; i2 < len; i2++) {
      var taker = takers[i2];
      if (taker[MATCH](input)) {
        taker.cancel();
        taker(input);
      }
    }
  }, _ref.take = function take2(cb, matcher2) {
    if (matcher2 === void 0) {
      matcher2 = wildcard;
    }
    if (true) {
      checkForbiddenStates();
    }
    if (closed) {
      cb(END);
      return;
    }
    cb[MATCH] = matcher2;
    ensureCanMutateNextTakers();
    nextTakers.push(cb);
    cb.cancel = once(function() {
      ensureCanMutateNextTakers();
      remove(nextTakers, cb);
    });
  }, _ref.close = close, _ref;
}
function stdChannel() {
  var chan = multicastChannel();
  var put2 = chan.put;
  chan.put = function(input) {
    if (input[SAGA_ACTION]) {
      put2(input);
      return;
    }
    asap(function() {
      put2(input);
    });
  };
  return chan;
}
function resolvePromise(promise3, cb) {
  var cancelPromise = promise3[CANCEL];
  if (func(cancelPromise)) {
    cb.cancel = cancelPromise;
  }
  promise3.then(cb, function(error) {
    cb(error, true);
  });
}
function getIteratorMetaInfo(iterator3, fn2) {
  if (iterator3.isSagaIterator) {
    return {
      name: iterator3.meta.name
    };
  }
  return getMetaInfo(fn2);
}
function createTaskIterator(_ref) {
  var context = _ref.context, fn2 = _ref.fn, args = _ref.args;
  try {
    var result = fn2.apply(context, args);
    if (iterator(result)) {
      return result;
    }
    var resolved = false;
    var next = function next2(arg) {
      if (!resolved) {
        resolved = true;
        return {
          value: result,
          done: !promise(result)
        };
      } else {
        return {
          value: arg,
          done: true
        };
      }
    };
    return makeIterator(next);
  } catch (err) {
    return makeIterator(function() {
      throw err;
    });
  }
}
function runPutEffect(env, _ref2, cb) {
  var channel4 = _ref2.channel, action = _ref2.action, resolve = _ref2.resolve;
  asap(function() {
    var result;
    try {
      result = (channel4 ? channel4.put : env.dispatch)(action);
    } catch (error) {
      cb(error, true);
      return;
    }
    if (resolve && promise(result)) {
      resolvePromise(result, cb);
    } else {
      cb(result);
    }
  });
}
function runTakeEffect(env, _ref3, cb) {
  var _ref3$channel = _ref3.channel, channel4 = _ref3$channel === void 0 ? env.channel : _ref3$channel, pattern3 = _ref3.pattern, maybe = _ref3.maybe;
  var takeCb = function takeCb2(input) {
    if (input instanceof Error) {
      cb(input, true);
      return;
    }
    if (isEnd(input) && !maybe) {
      cb(TERMINATE);
      return;
    }
    cb(input);
  };
  try {
    channel4.take(takeCb, notUndef(pattern3) ? matcher(pattern3) : null);
  } catch (err) {
    cb(err, true);
    return;
  }
  cb.cancel = takeCb.cancel;
}
function runCallEffect(env, _ref4, cb, _ref5) {
  var context = _ref4.context, fn2 = _ref4.fn, args = _ref4.args;
  var task3 = _ref5.task;
  try {
    var result = fn2.apply(context, args);
    if (promise(result)) {
      resolvePromise(result, cb);
      return;
    }
    if (iterator(result)) {
      proc(
        env,
        result,
        task3.context,
        current,
        getMetaInfo(fn2),
        /* isRoot */
        false,
        cb
      );
      return;
    }
    cb(result);
  } catch (error) {
    cb(error, true);
  }
}
function runCPSEffect(env, _ref6, cb) {
  var context = _ref6.context, fn2 = _ref6.fn, args = _ref6.args;
  try {
    var cpsCb = function cpsCb2(err, res) {
      if (undef(err)) {
        cb(res);
      } else {
        cb(err, true);
      }
    };
    fn2.apply(context, args.concat(cpsCb));
    if (cpsCb.cancel) {
      cb.cancel = cpsCb.cancel;
    }
  } catch (error) {
    cb(error, true);
  }
}
function runForkEffect(env, _ref7, cb, _ref8) {
  var context = _ref7.context, fn2 = _ref7.fn, args = _ref7.args, detached = _ref7.detached;
  var parent = _ref8.task;
  var taskIterator = createTaskIterator({
    context,
    fn: fn2,
    args
  });
  var meta = getIteratorMetaInfo(taskIterator, fn2);
  immediately(function() {
    var child = proc(env, taskIterator, parent.context, current, meta, detached, void 0);
    if (detached) {
      cb(child);
    } else {
      if (child.isRunning()) {
        parent.queue.addTask(child);
        cb(child);
      } else if (child.isAborted()) {
        parent.queue.abort(child.error());
      } else {
        cb(child);
      }
    }
  });
}
function runJoinEffect(env, taskOrTasks, cb, _ref9) {
  var task3 = _ref9.task;
  var joinSingleTask = function joinSingleTask2(taskToJoin, cb2) {
    if (taskToJoin.isRunning()) {
      var joiner = {
        task: task3,
        cb: cb2
      };
      cb2.cancel = function() {
        if (taskToJoin.isRunning())
          remove(taskToJoin.joiners, joiner);
      };
      taskToJoin.joiners.push(joiner);
    } else {
      if (taskToJoin.isAborted()) {
        cb2(taskToJoin.error(), true);
      } else {
        cb2(taskToJoin.result());
      }
    }
  };
  if (array(taskOrTasks)) {
    if (taskOrTasks.length === 0) {
      cb([]);
      return;
    }
    var childCallbacks = createAllStyleChildCallbacks(taskOrTasks, cb);
    taskOrTasks.forEach(function(t2, i2) {
      joinSingleTask(t2, childCallbacks[i2]);
    });
  } else {
    joinSingleTask(taskOrTasks, cb);
  }
}
function cancelSingleTask(taskToCancel) {
  if (taskToCancel.isRunning()) {
    taskToCancel.cancel();
  }
}
function runCancelEffect(env, taskOrTasks, cb, _ref10) {
  var task3 = _ref10.task;
  if (taskOrTasks === SELF_CANCELLATION) {
    cancelSingleTask(task3);
  } else if (array(taskOrTasks)) {
    taskOrTasks.forEach(cancelSingleTask);
  } else {
    cancelSingleTask(taskOrTasks);
  }
  cb();
}
function runAllEffect(env, effects, cb, _ref11) {
  var digestEffect = _ref11.digestEffect;
  var effectId = current;
  var keys = Object.keys(effects);
  if (keys.length === 0) {
    cb(array(effects) ? [] : {});
    return;
  }
  var childCallbacks = createAllStyleChildCallbacks(effects, cb);
  keys.forEach(function(key) {
    digestEffect(effects[key], effectId, childCallbacks[key], key);
  });
}
function runRaceEffect(env, effects, cb, _ref12) {
  var digestEffect = _ref12.digestEffect;
  var effectId = current;
  var keys = Object.keys(effects);
  var response = array(effects) ? createEmptyArray(keys.length) : {};
  var childCbs = {};
  var completed2 = false;
  keys.forEach(function(key) {
    var chCbAtKey = function chCbAtKey2(res, isErr) {
      if (completed2) {
        return;
      }
      if (isErr || shouldComplete(res)) {
        cb.cancel();
        cb(res, isErr);
      } else {
        cb.cancel();
        completed2 = true;
        response[key] = res;
        cb(response);
      }
    };
    chCbAtKey.cancel = noop;
    childCbs[key] = chCbAtKey;
  });
  cb.cancel = function() {
    if (!completed2) {
      completed2 = true;
      keys.forEach(function(key) {
        return childCbs[key].cancel();
      });
    }
  };
  keys.forEach(function(key) {
    if (completed2) {
      return;
    }
    digestEffect(effects[key], effectId, childCbs[key], key);
  });
}
function runSelectEffect(env, _ref13, cb) {
  var selector = _ref13.selector, args = _ref13.args;
  try {
    var state = selector.apply(void 0, [env.getState()].concat(args));
    cb(state);
  } catch (error) {
    cb(error, true);
  }
}
function runChannelEffect(env, _ref14, cb) {
  var pattern3 = _ref14.pattern, buffer3 = _ref14.buffer;
  var chan = channel3(buffer3);
  var match2 = matcher(pattern3);
  var taker = function taker2(action) {
    if (!isEnd(action)) {
      env.channel.take(taker2, match2);
    }
    chan.put(action);
  };
  var close = chan.close;
  chan.close = function() {
    taker.cancel();
    close();
  };
  env.channel.take(taker, match2);
  cb(chan);
}
function runCancelledEffect(env, data, cb, _ref15) {
  var task3 = _ref15.task;
  cb(task3.isCancelled());
}
function runFlushEffect(env, channel4, cb) {
  channel4.flush(cb);
}
function runGetContextEffect(env, prop, cb, _ref16) {
  var task3 = _ref16.task;
  cb(task3.context[prop]);
}
function runSetContextEffect(env, props, cb, _ref17) {
  var task3 = _ref17.task;
  assignWithSymbols(task3.context, props);
  cb();
}
function forkQueue(mainTask, onAbort, cont) {
  var tasks = [];
  var result;
  var completed2 = false;
  addTask(mainTask);
  var getTasks = function getTasks2() {
    return tasks;
  };
  function abort(err) {
    onAbort();
    cancelAll();
    cont(err, true);
  }
  function addTask(task3) {
    tasks.push(task3);
    task3.cont = function(res, isErr) {
      if (completed2) {
        return;
      }
      remove(tasks, task3);
      task3.cont = noop;
      if (isErr) {
        abort(res);
      } else {
        if (task3 === mainTask) {
          result = res;
        }
        if (!tasks.length) {
          completed2 = true;
          cont(result);
        }
      }
    };
  }
  function cancelAll() {
    if (completed2) {
      return;
    }
    completed2 = true;
    tasks.forEach(function(t2) {
      t2.cont = noop;
      t2.cancel();
    });
    tasks = [];
  }
  return {
    addTask,
    cancelAll,
    abort,
    getTasks
  };
}
function formatLocation(fileName, lineNumber) {
  return fileName + "?" + lineNumber;
}
function effectLocationAsString(effect3) {
  var location = getLocation(effect3);
  if (location) {
    var code = location.code, fileName = location.fileName, lineNumber = location.lineNumber;
    var source = code + "  " + formatLocation(fileName, lineNumber);
    return source;
  }
  return "";
}
function sagaLocationAsString(sagaMeta) {
  var name10 = sagaMeta.name, location = sagaMeta.location;
  if (location) {
    return name10 + "  " + formatLocation(location.fileName, location.lineNumber);
  }
  return name10;
}
function cancelledTasksAsString(sagaStack2) {
  var cancelledTasks = flatMap(function(i2) {
    return i2.cancelledTasks;
  }, sagaStack2);
  if (!cancelledTasks.length) {
    return "";
  }
  return ["Tasks cancelled due to error:"].concat(cancelledTasks).join("\n");
}
function newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont) {
  var _task;
  if (cont === void 0) {
    cont = noop;
  }
  var status = RUNNING;
  var taskResult;
  var taskError;
  var deferredEnd = null;
  var cancelledDueToErrorTasks = [];
  var context = Object.create(parentContext);
  var queue2 = forkQueue(mainTask, function onAbort() {
    cancelledDueToErrorTasks.push.apply(cancelledDueToErrorTasks, queue2.getTasks().map(function(t2) {
      return t2.meta.name;
    }));
  }, end);
  function cancel2() {
    if (status === RUNNING) {
      status = CANCELLED2;
      queue2.cancelAll();
      end(TASK_CANCEL, false);
    }
  }
  function end(result, isErr) {
    if (!isErr) {
      if (result === TASK_CANCEL) {
        status = CANCELLED2;
      } else if (status !== CANCELLED2) {
        status = DONE;
      }
      taskResult = result;
      deferredEnd && deferredEnd.resolve(result);
    } else {
      status = ABORTED;
      addSagaFrame({
        meta,
        cancelledTasks: cancelledDueToErrorTasks
      });
      if (task3.isRoot) {
        var sagaStack2 = toString();
        clear();
        env.onError(result, {
          sagaStack: sagaStack2
        });
      }
      taskError = result;
      deferredEnd && deferredEnd.reject(result);
    }
    task3.cont(result, isErr);
    task3.joiners.forEach(function(joiner) {
      joiner.cb(result, isErr);
    });
    task3.joiners = null;
  }
  function setContext2(props) {
    if (true) {
      check(props, object, createSetContextWarning("task", props));
    }
    assignWithSymbols(context, props);
  }
  function toPromise() {
    if (deferredEnd) {
      return deferredEnd.promise;
    }
    deferredEnd = redux_saga_deferred_esm_default();
    if (status === ABORTED) {
      deferredEnd.reject(taskError);
    } else if (status !== RUNNING) {
      deferredEnd.resolve(taskResult);
    }
    return deferredEnd.promise;
  }
  var task3 = (_task = {}, _task[TASK] = true, _task.id = parentEffectId, _task.meta = meta, _task.isRoot = isRoot, _task.context = context, _task.joiners = [], _task.queue = queue2, _task.cancel = cancel2, _task.cont = cont, _task.end = end, _task.setContext = setContext2, _task.toPromise = toPromise, _task.isRunning = function isRunning() {
    return status === RUNNING;
  }, _task.isCancelled = function isCancelled() {
    return status === CANCELLED2 || status === RUNNING && mainTask.status === CANCELLED2;
  }, _task.isAborted = function isAborted() {
    return status === ABORTED;
  }, _task.result = function result() {
    return taskResult;
  }, _task.error = function error() {
    return taskError;
  }, _task);
  return task3;
}
function proc(env, iterator$1, parentContext, parentEffectId, meta, isRoot, cont) {
  if (iterator$1[asyncIteratorSymbol]) {
    throw new Error("redux-saga doesn't support async generators, please use only regular ones");
  }
  var finalRunEffect = env.finalizeRunEffect(runEffect);
  next.cancel = noop;
  var mainTask = {
    meta,
    cancel: cancelMain,
    status: RUNNING
  };
  var task3 = newTask(env, mainTask, parentContext, parentEffectId, meta, isRoot, cont);
  var executingContext = {
    task: task3,
    digestEffect
  };
  function cancelMain() {
    if (mainTask.status === RUNNING) {
      mainTask.status = CANCELLED2;
      next(TASK_CANCEL);
    }
  }
  if (cont) {
    cont.cancel = task3.cancel;
  }
  next();
  return task3;
  function next(arg, isErr) {
    try {
      var result;
      if (isErr) {
        result = iterator$1.throw(arg);
        clear();
      } else if (shouldCancel(arg)) {
        mainTask.status = CANCELLED2;
        next.cancel();
        result = func(iterator$1.return) ? iterator$1.return(TASK_CANCEL) : {
          done: true,
          value: TASK_CANCEL
        };
      } else if (shouldTerminate(arg)) {
        result = func(iterator$1.return) ? iterator$1.return() : {
          done: true
        };
      } else {
        result = iterator$1.next(arg);
      }
      if (!result.done) {
        digestEffect(result.value, parentEffectId, next);
      } else {
        if (mainTask.status !== CANCELLED2) {
          mainTask.status = DONE;
        }
        mainTask.cont(result.value);
      }
    } catch (error) {
      if (mainTask.status === CANCELLED2) {
        throw error;
      }
      mainTask.status = ABORTED;
      mainTask.cont(error, true);
    }
  }
  function runEffect(effect3, effectId, currCb) {
    if (promise(effect3)) {
      resolvePromise(effect3, currCb);
    } else if (iterator(effect3)) {
      proc(
        env,
        effect3,
        task3.context,
        effectId,
        meta,
        /* isRoot */
        false,
        currCb
      );
    } else if (effect3 && effect3[IO]) {
      var effectRunner = effectRunnerMap[effect3.type];
      effectRunner(env, effect3.payload, currCb, executingContext);
    } else {
      currCb(effect3);
    }
  }
  function digestEffect(effect3, parentEffectId2, cb, label) {
    if (label === void 0) {
      label = "";
    }
    var effectId = nextSagaId();
    env.sagaMonitor && env.sagaMonitor.effectTriggered({
      effectId,
      parentEffectId: parentEffectId2,
      label,
      effect: effect3
    });
    var effectSettled;
    function currCb(res, isErr) {
      if (effectSettled) {
        return;
      }
      effectSettled = true;
      cb.cancel = noop;
      if (env.sagaMonitor) {
        if (isErr) {
          env.sagaMonitor.effectRejected(effectId, res);
        } else {
          env.sagaMonitor.effectResolved(effectId, res);
        }
      }
      if (isErr) {
        setCrashedEffect(effect3);
      }
      cb(res, isErr);
    }
    currCb.cancel = noop;
    cb.cancel = function() {
      if (effectSettled) {
        return;
      }
      effectSettled = true;
      currCb.cancel();
      currCb.cancel = noop;
      env.sagaMonitor && env.sagaMonitor.effectCancelled(effectId);
    };
    finalRunEffect(effect3, effectId, currCb);
  }
}
function runSaga(_ref, saga) {
  var _ref$channel = _ref.channel, channel4 = _ref$channel === void 0 ? stdChannel() : _ref$channel, dispatch = _ref.dispatch, getState = _ref.getState, _ref$context = _ref.context, context = _ref$context === void 0 ? {} : _ref$context, sagaMonitor = _ref.sagaMonitor, effectMiddlewares = _ref.effectMiddlewares, _ref$onError = _ref.onError, onError = _ref$onError === void 0 ? logError : _ref$onError;
  if (true) {
    check(saga, func, NON_GENERATOR_ERR);
  }
  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }
  var iterator$1 = saga.apply(void 0, args);
  if (true) {
    check(iterator$1, iterator, NON_GENERATOR_ERR);
  }
  var effectId = nextSagaId();
  if (sagaMonitor) {
    sagaMonitor.rootSagaStarted = sagaMonitor.rootSagaStarted || noop;
    sagaMonitor.effectTriggered = sagaMonitor.effectTriggered || noop;
    sagaMonitor.effectResolved = sagaMonitor.effectResolved || noop;
    sagaMonitor.effectRejected = sagaMonitor.effectRejected || noop;
    sagaMonitor.effectCancelled = sagaMonitor.effectCancelled || noop;
    sagaMonitor.actionDispatched = sagaMonitor.actionDispatched || noop;
    sagaMonitor.rootSagaStarted({
      effectId,
      saga,
      args
    });
  }
  if (true) {
    if (notUndef(dispatch)) {
      check(dispatch, func, "dispatch must be a function");
    }
    if (notUndef(getState)) {
      check(getState, func, "getState must be a function");
    }
    if (notUndef(effectMiddlewares)) {
      var MIDDLEWARE_TYPE_ERROR = "effectMiddlewares must be an array of functions";
      check(effectMiddlewares, array, MIDDLEWARE_TYPE_ERROR);
      effectMiddlewares.forEach(function(effectMiddleware) {
        return check(effectMiddleware, func, MIDDLEWARE_TYPE_ERROR);
      });
    }
    check(onError, func, "onError passed to the redux-saga is not a function!");
  }
  var finalizeRunEffect;
  if (effectMiddlewares) {
    var middleware = compose2.apply(void 0, effectMiddlewares);
    finalizeRunEffect = function finalizeRunEffect2(runEffect) {
      return function(effect3, effectId2, currCb) {
        var plainRunEffect = function plainRunEffect2(eff) {
          return runEffect(eff, effectId2, currCb);
        };
        return middleware(plainRunEffect)(effect3);
      };
    };
  } else {
    finalizeRunEffect = identity;
  }
  var env = {
    channel: channel4,
    dispatch: wrapSagaDispatch(dispatch),
    getState,
    sagaMonitor,
    onError,
    finalizeRunEffect
  };
  return immediately(function() {
    var task3 = proc(
      env,
      iterator$1,
      context,
      effectId,
      getMetaInfo(saga),
      /* isRoot */
      true,
      void 0
    );
    if (sagaMonitor) {
      sagaMonitor.effectResolved(effectId, task3);
    }
    return task3;
  });
}
function sagaMiddlewareFactory(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$context = _ref.context, context = _ref$context === void 0 ? {} : _ref$context, _ref$channel = _ref.channel, channel4 = _ref$channel === void 0 ? stdChannel() : _ref$channel, sagaMonitor = _ref.sagaMonitor, options = _objectWithoutPropertiesLoose(_ref, ["context", "channel", "sagaMonitor"]);
  var boundRunSaga;
  if (true) {
    check(channel4, channel, "options.channel passed to the Saga middleware is not a channel");
  }
  function sagaMiddleware(_ref2) {
    var getState = _ref2.getState, dispatch = _ref2.dispatch;
    boundRunSaga = runSaga.bind(null, _extends({}, options, {
      context,
      channel: channel4,
      dispatch,
      getState,
      sagaMonitor
    }));
    return function(next) {
      return function(action) {
        if (sagaMonitor && sagaMonitor.actionDispatched) {
          sagaMonitor.actionDispatched(action);
        }
        var result = next(action);
        channel4.put(action);
        return result;
      };
    };
  }
  sagaMiddleware.run = function() {
    if (!boundRunSaga) {
      throw new Error("Before running a Saga, you must mount the Saga middleware on the Store using applyMiddleware");
    }
    return boundRunSaga.apply(void 0, arguments);
  };
  sagaMiddleware.setContext = function(props) {
    if (true) {
      check(props, object, createSetContextWarning("sagaMiddleware", props));
    }
    assignWithSymbols(context, props);
  };
  return sagaMiddleware;
}
var queue, semaphore, array2, predicate, string3, symbol3, wildcard, END, isEnd, CLOSED_CHANNEL_WITH_TAKERS, INVALID_BUFFER, UNDEFINED_INPUT_ERROR, RUNNING, CANCELLED2, ABORTED, DONE, current, nextSagaId, _effectRunnerMap, effectRunnerMap, crashedEffect, sagaStack, addSagaFrame, clear, setCrashedEffect, toString, RUN_SAGA_SIGNATURE, NON_GENERATOR_ERR, redux_saga_core_esm_default;
var init_redux_saga_core_esm = __esm({
  "node_modules/@redux-saga/core/dist/redux-saga-core.esm.js"() {
    init_redux_saga_symbols_esm();
    init_redux_saga_symbols_esm();
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_is_esm();
    init_io_22ea0cf9();
    init_io_22ea0cf9();
    init_redux_saga_deferred_esm();
    init_redux_saga_delay_p_esm();
    queue = [];
    semaphore = 0;
    array2 = function array3(patterns) {
      return function(input) {
        return patterns.some(function(p2) {
          return matcher(p2)(input);
        });
      };
    };
    predicate = function predicate2(_predicate) {
      return function(input) {
        return _predicate(input);
      };
    };
    string3 = function string4(pattern3) {
      return function(input) {
        return input.type === String(pattern3);
      };
    };
    symbol3 = function symbol4(pattern3) {
      return function(input) {
        return input.type === pattern3;
      };
    };
    wildcard = function wildcard2() {
      return kTrue;
    };
    END = {
      type: CHANNEL_END_TYPE
    };
    isEnd = function isEnd2(a2) {
      return a2 && a2.type === CHANNEL_END_TYPE;
    };
    CLOSED_CHANNEL_WITH_TAKERS = "Cannot have a closed channel with pending takers";
    INVALID_BUFFER = "invalid buffer passed to channel factory function";
    UNDEFINED_INPUT_ERROR = "Saga or channel was provided with an undefined action\nHints:\n  - check that your Action Creator returns a non-undefined value\n  - if the Saga was started using runSaga, check that your subscribe source provides the action to its listeners";
    RUNNING = 0;
    CANCELLED2 = 1;
    ABORTED = 2;
    DONE = 3;
    current = 0;
    nextSagaId = function() {
      return ++current;
    };
    effectRunnerMap = (_effectRunnerMap = {}, _effectRunnerMap[TAKE] = runTakeEffect, _effectRunnerMap[PUT] = runPutEffect, _effectRunnerMap[ALL] = runAllEffect, _effectRunnerMap[RACE] = runRaceEffect, _effectRunnerMap[CALL] = runCallEffect, _effectRunnerMap[CPS] = runCPSEffect, _effectRunnerMap[FORK] = runForkEffect, _effectRunnerMap[JOIN] = runJoinEffect, _effectRunnerMap[CANCEL2] = runCancelEffect, _effectRunnerMap[SELECT] = runSelectEffect, _effectRunnerMap[ACTION_CHANNEL] = runChannelEffect, _effectRunnerMap[CANCELLED] = runCancelledEffect, _effectRunnerMap[FLUSH] = runFlushEffect, _effectRunnerMap[GET_CONTEXT] = runGetContextEffect, _effectRunnerMap[SET_CONTEXT] = runSetContextEffect, _effectRunnerMap);
    crashedEffect = null;
    sagaStack = [];
    addSagaFrame = function addSagaFrame2(frame) {
      frame.crashedEffect = crashedEffect;
      sagaStack.push(frame);
    };
    clear = function clear2() {
      crashedEffect = null;
      sagaStack.length = 0;
    };
    setCrashedEffect = function setCrashedEffect2(effect3) {
      crashedEffect = effect3;
    };
    toString = function toString2() {
      var firstSaga = sagaStack[0], otherSagas = sagaStack.slice(1);
      var crashedEffectLocation = firstSaga.crashedEffect ? effectLocationAsString(firstSaga.crashedEffect) : null;
      var errorMessage = "The above error occurred in task " + sagaLocationAsString(firstSaga.meta) + (crashedEffectLocation ? " \n when executing effect " + crashedEffectLocation : "");
      return [errorMessage].concat(otherSagas.map(function(s2) {
        return "    created by " + sagaLocationAsString(s2.meta);
      }), [cancelledTasksAsString(sagaStack)]).join("\n");
    };
    RUN_SAGA_SIGNATURE = "runSaga(options, saga, ...args)";
    NON_GENERATOR_ERR = RUN_SAGA_SIGNATURE + ": saga argument must be a Generator function!";
    redux_saga_core_esm_default = sagaMiddlewareFactory;
  }
});

// node_modules/redux-saga/dist/redux-saga-core-npm-proxy.esm.js
var redux_saga_core_npm_proxy_esm_default;
var init_redux_saga_core_npm_proxy_esm = __esm({
  "node_modules/redux-saga/dist/redux-saga-core-npm-proxy.esm.js"() {
    init_redux_saga_core_esm();
    init_redux_saga_core_esm();
    redux_saga_core_npm_proxy_esm_default = redux_saga_core_esm_default;
  }
});

// node_modules/@frontegg/redux-store/toolkit/redux-saga-tools.js
var init_redux_saga_tools = __esm({
  "node_modules/@frontegg/redux-store/toolkit/redux-saga-tools.js"() {
    init_redux_saga_core_npm_proxy_esm();
    init_redux_saga_effects_npm_proxy_esm();
  }
});

// node_modules/@frontegg/redux-store/audits/utils.js
var typeReducerForKey2;
var init_utils8 = __esm({
  "node_modules/@frontegg/redux-store/audits/utils.js"() {
    init_extends();
    typeReducerForKey2 = (key) => ({
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, {
        payload
      }) => {
        return _extends({}, state, {
          [key]: _extends({}, state[key], payload)
        });
      }
    });
  }
});

// node_modules/@frontegg/redux-store/audits/AuditLogsState/index.js
var auditLogsState, reducers32, actions33;
var init_AuditLogsState = __esm({
  "node_modules/@frontegg/redux-store/audits/AuditLogsState/index.js"() {
    init_extends();
    init_utils8();
    init_redux_toolkit_esm();
    init_constants3();
    auditLogsState = {
      loading: true,
      pageOffset: 0,
      pageSize: 20,
      logs: [],
      sort: [],
      filter: [],
      totalPages: 0,
      isDownloadingCsv: false
    };
    reducers32 = {
      setAuditLogsState: typeReducerForKey2("auditLogsState"),
      resetAuditLogsState: (state) => _extends({}, state, {
        auditLogsState
      })
    };
    actions33 = {
      exportAuditsCsv: createAction(`${auditsStoreName}/exportAuditsCsv`),
      loadAuditLogs: createAction(`${auditsStoreName}/loadAuditLogs`, (payload) => ({
        payload
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/audits/AuditsMetadataState/index.js
var auditsMetadataState, reducers33, actions34;
var init_AuditsMetadataState = __esm({
  "node_modules/@frontegg/redux-store/audits/AuditsMetadataState/index.js"() {
    init_extends();
    init_utils8();
    init_redux_toolkit_esm();
    init_constants3();
    auditsMetadataState = {
      loading: true
    };
    reducers33 = {
      setAuditsMetadataState: typeReducerForKey2("auditsMetadataState"),
      resetAuditsMetadataState: (state) => _extends({}, state, {
        auditsMetadataState
      })
    };
    actions34 = {
      loadAuditsMetadata: createAction(`${auditsStoreName}/loadAuditsMetadata`)
    };
  }
});

// node_modules/@frontegg/redux-store/audits/initialState.js
var initialState3;
var init_initialState2 = __esm({
  "node_modules/@frontegg/redux-store/audits/initialState.js"() {
    init_AuditLogsState();
    init_AuditsMetadataState();
    initialState3 = {
      auditLogsState,
      auditsMetadataState
    };
  }
});

// node_modules/@frontegg/redux-store/audits/reducer.js
var reducer3, sliceActions3, actions35;
var init_reducer3 = __esm({
  "node_modules/@frontegg/redux-store/audits/reducer.js"() {
    init_extends();
    init_constants3();
    init_initialState2();
    init_redux_toolkit_esm();
    init_AuditLogsState();
    init_AuditsMetadataState();
    ({
      reducer: reducer3,
      actions: sliceActions3
    } = createSlice({
      name: auditsStoreName,
      initialState: initialState3,
      reducers: _extends({
        resetState: (state) => _extends({}, state, initialState3),
        setState: (state, {
          payload
        }) => _extends({}, state, payload)
      }, reducers32, reducers33)
    }));
    actions35 = _extends({}, sliceActions3, actions33, actions34);
  }
});

// node_modules/@frontegg/redux-store/audits/dummy.js
var sortMethodBasedOnOrder, filterAuditsByQuery, filterOutTimeFilterForDummyMode, auditsLogsFilterAndSort, randomAction, auditLogsDataDemo, auditLogsMetadataDemo;
var init_dummy2 = __esm({
  "node_modules/@frontegg/redux-store/audits/dummy.js"() {
    init_extends();
    sortMethodBasedOnOrder = (sortBy, desc) => (a2, b2) => {
      if (a2[sortBy] > b2[sortBy]) {
        return desc ? -1 : 1;
      }
      if (b2[sortBy] > a2[sortBy]) {
        return desc ? 1 : -1;
      }
      return 0;
    };
    filterAuditsByQuery = (filterOptions) => (log) => filterOptions.filter(filterOutTimeFilterForDummyMode).every((filterItem) => log[filterItem.id].includes(filterItem.value));
    filterOutTimeFilterForDummyMode = (filterItem) => filterItem.id !== "createdAt";
    auditsLogsFilterAndSort = (filterOptions, sortOptions) => {
      const {
        data
      } = auditLogsDataDemo;
      let dataByQuery = data.filter(filterAuditsByQuery(filterOptions));
      if (sortOptions.length) {
        const {
          id,
          desc = false
        } = sortOptions[0];
        dataByQuery = dataByQuery.sort(sortMethodBasedOnOrder(id, desc));
      }
      return {
        data: dataByQuery,
        total: dataByQuery.length
      };
    };
    randomAction = () => {
      const random = Math.floor(Math.random() * 6);
      switch (random) {
        case 0:
          return {
            action: "Updated profile",
            description: "User updated profile details",
            severity: "Info"
          };
        case 1:
          return {
            action: "User logged in",
            severity: "Info",
            description: "User logged in to the product"
          };
        case 2:
          return {
            action: "User failed to login",
            severity: "High",
            description: "User failed to login with password"
          };
        case 3:
          return {
            action: "Added user",
            severity: "Info",
            description: "Added user david+535@frontegg.com to tenant"
          };
        case 4:
          return {
            action: "Assigned roles",
            severity: "Info",
            description: "Assigned 0 roles for user"
          };
        case 5:
          return {
            action: "Removed user david+108@frontegg.com from account",
            severity: "Info",
            description: "Removed access from the account for user david+108@frontegg.com"
          };
      }
    };
    auditLogsDataDemo = {
      total: 20,
      data: Array.from(Array(5).keys()).map((i2) => _extends({
        ip: "198.143.51.1",
        user: "Demo User Name",
        email: "demo-user@frontegg.com"
      }, randomAction(), {
        json: {
          key1: "value1",
          key2: "value2",
          key3: "value3",
          key4: "value4"
        },
        tenantId: "my-tenant-id",
        vendorId: "my-vendor-id",
        userAgent: "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.114 Safari/537.36",
        createdAt: `2022-04-07 10:${50 - i2}:40.201`
      }))
    };
    auditLogsMetadataDemo = {
      properties: [{
        showInTable: true,
        name: "createdAt",
        displayName: "Time",
        type: "Timestamp",
        sortable: true,
        filterable: true,
        showInMoreInfo: "Always",
        chosen: false,
        selected: false,
        isPredefined: false
      }, {
        showInTable: true,
        name: "email",
        displayName: "User",
        type: "Email",
        filterable: true,
        sortable: true,
        isPredefined: true,
        chosen: false,
        selected: false
      }, {
        showInTable: true,
        name: "action",
        displayName: "Action",
        type: "AlphaNumeric",
        sortable: true,
        filterable: true,
        showInMoreInfo: "Always",
        chosen: false,
        selected: false,
        isPredefined: true
      }, {
        showInTable: true,
        name: "description",
        type: "AlphaNumeric",
        sortable: false,
        filterable: false,
        displayName: "Description",
        isPredefined: true,
        chosen: false,
        selected: false
      }, {
        showInTable: true,
        name: "ip",
        displayName: "IP Address",
        type: "IpAddress",
        sortable: true,
        filterable: true,
        showInMoreInfo: "Always",
        chosen: false,
        selected: false,
        isPredefined: true
      }, {
        showInTable: false,
        name: "severity",
        displayName: "Severity",
        type: "Severity",
        sortable: true,
        filterable: true,
        showInMoreInfo: "Always",
        chosen: false,
        selected: false,
        isPredefined: true
      }, {
        showInTable: false,
        name: "userAgent",
        displayName: "User Agent",
        type: "AlphaNumeric",
        filterable: true,
        sortable: true,
        isPredefined: true,
        chosen: false,
        selected: false
      }, {
        showInTable: false,
        name: "json",
        type: "Json",
        sortable: true,
        filterable: true,
        displayName: "Json Data",
        showInMoreInfo: "Always",
        isPredefined: false
      }]
    };
  }
});

// node_modules/@frontegg/redux-store/audits/AuditLogsState/saga.js
function* exportAuditsCsv() {
  const state = yield select2();
  const {
    columns
  } = yield selectMetadata();
  try {
    const filter = state.filter;
    const sort = state.sort;
    const sortParams = sort.reduce((p2, n2) => _extends({}, p2, {
      sortBy: n2.id,
      sortDirection: n2.desc ? "desc" : "asc"
    }), {});
    const filterParams = filter.reduce((p2, n2) => _extends({}, p2, {
      [n2.id]: n2.value
    }), {});
    yield put(actions35.setAuditLogsState({
      isDownloadingCsv: true
    }));
    const outputFileName = `audits.csv`;
    yield api.audits.exportAudits(_extends({
      endpoint: "csv/v2",
      headerProps: columns,
      offset: 0,
      outputFileName
    }, sortParams, filterParams));
  } catch (e2) {
    console.error("failed to export audits - ", e2);
  }
  yield put(actions35.setAuditLogsState({
    isDownloadingCsv: false
  }));
}
function* loadAuditLogs({
  payload
}) {
  yield put(actions35.setAuditLogsState({
    loading: !(payload != null && payload.silentLoading),
    error: null
  }));
  const state = yield select2();
  const {
    columns
  } = yield selectMetadata();
  try {
    var _payload$pageSize, _payload$pageOffset, _payload$filter, _payload$sort, _payload$callback;
    const pageSize = (_payload$pageSize = payload.pageSize) != null ? _payload$pageSize : state.pageSize;
    const pageOffset = (_payload$pageOffset = payload.pageOffset) != null ? _payload$pageOffset : state.pageOffset;
    const filter = (_payload$filter = payload.filter) != null ? _payload$filter : state.filter;
    const sort = (_payload$sort = payload.sort) != null ? _payload$sort : state.sort;
    yield put(actions35.setAuditLogsState({
      pageSize,
      pageOffset,
      filter,
      sort
    }));
    const sortParams = sort.reduce((p2, n2) => _extends({}, p2, {
      sortBy: n2.id,
      sortDirection: n2.desc ? "desc" : "asc"
    }), {});
    const filterParams = filter.reduce((p2, n2) => _extends({}, p2, {
      [n2.id]: n2.value
    }), {});
    if (!columns) {
      yield put(actions35.loadAuditsMetadata());
    }
    const {
      data,
      total
    } = yield call(api.audits.getAudits, _extends({
      offset: pageOffset,
      count: pageSize
    }, sortParams, filterParams));
    yield put(actions35.setAuditLogsState({
      loading: false,
      logs: data != null ? data : [],
      totalPages: +Math.ceil(total / pageSize)
    }));
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions35.setAuditLogsState({
      loading: false,
      error: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e2);
  }
}
function* auditLogsSagas() {
  yield takeEvery$1(actions35.exportAuditsCsv, exportAuditsCsv);
  yield takeEvery$1(actions35.loadAuditLogs, loadAuditLogs);
}
function* loadAuditLogsMock({
  payload
}) {
  yield put(actions35.setAuditLogsState({
    loading: !(payload != null && payload.silentLoading),
    error: null
  }));
  const state = yield select2();
  const {
    columns
  } = yield selectMetadata();
  try {
    var _payload$pageSize2, _payload$pageOffset2, _payload$filter2, _payload$sort2, _payload$callback3;
    const pageSize = (_payload$pageSize2 = payload.pageSize) != null ? _payload$pageSize2 : state.pageSize;
    const pageOffset = (_payload$pageOffset2 = payload.pageOffset) != null ? _payload$pageOffset2 : state.pageOffset;
    const filter = (_payload$filter2 = payload.filter) != null ? _payload$filter2 : state.filter;
    const sort = (_payload$sort2 = payload.sort) != null ? _payload$sort2 : state.sort;
    yield put(actions35.setAuditLogsState({
      pageSize,
      pageOffset,
      filter,
      sort
    }));
    if (!columns) {
      yield put(actions35.loadAuditsMetadata());
    }
    const {
      data,
      total
    } = auditsLogsFilterAndSort(filter, sort);
    yield put(actions35.setAuditLogsState({
      loading: false,
      logs: data != null ? data : [],
      totalPages: +Math.ceil(total / pageSize)
    }));
    payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  } catch (e2) {
    var _payload$callback4;
    yield put(actions35.setAuditLogsState({
      loading: false,
      error: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, null, e2);
  }
}
function* auditLogsSagasMock() {
  yield takeEvery$1(actions35.loadAuditLogs, loadAuditLogsMock);
}
var select2, selectMetadata;
var init_saga7 = __esm({
  "node_modules/@frontegg/redux-store/audits/AuditLogsState/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer3();
    init_constants3();
    init_dummy2();
    init_utils5();
    select2 = () => select((_2) => _2[auditsStoreName].auditLogsState);
    selectMetadata = () => select((_2) => _2[auditsStoreName].auditsMetadataState);
  }
});

// node_modules/@frontegg/redux-store/audits/AuditsMetadataState/saga.js
function* loadAuditsMetadata() {
  yield put(actions35.setAuditsMetadataState({
    loading: true,
    error: null
  }));
  try {
    const {
      properties
    } = yield call(api.metadata.getAuditsMetadata);
    yield put(actions35.setAuditsMetadataState({
      columns: properties,
      loading: false
    }));
  } catch (e2) {
    yield put(actions35.setAuditsMetadataState({
      error: e2,
      loading: false
    }));
  }
}
function* auditsMetadataSagas() {
  yield takeEvery$1(actions35.loadAuditsMetadata, loadAuditsMetadata);
}
function* loadAuditsMetadataMock() {
  yield put(actions35.setAuditsMetadataState({
    loading: true,
    error: null
  }));
  try {
    const {
      properties
    } = auditLogsMetadataDemo;
    yield put(actions35.setAuditsMetadataState({
      columns: properties,
      loading: false
    }));
  } catch (e2) {
    yield put(actions35.setAuditsMetadataState({
      error: e2,
      loading: false
    }));
  }
}
function* auditsMetadataSagasMock() {
  yield takeEvery$1(actions35.loadAuditsMetadata, loadAuditsMetadataMock);
}
var init_saga8 = __esm({
  "node_modules/@frontegg/redux-store/audits/AuditsMetadataState/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer3();
    init_dummy2();
  }
});

// node_modules/@frontegg/redux-store/audits/saga.js
function* sagas2() {
  yield all([call(auditLogsSagas), call(auditsMetadataSagas)]);
}
function* mockSagas() {
  yield all([call(auditLogsSagasMock), call(auditsMetadataSagasMock)]);
}
var init_saga9 = __esm({
  "node_modules/@frontegg/redux-store/audits/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_saga7();
    init_saga8();
  }
});

// node_modules/@frontegg/redux-store/audits/interfaces.js
var init_interfaces36 = __esm({
  "node_modules/@frontegg/redux-store/audits/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/audits/AuditLogsState/interfaces.js
var init_interfaces37 = __esm({
  "node_modules/@frontegg/redux-store/audits/AuditLogsState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/audits/AuditsMetadataState/interfaces.js
var init_interfaces38 = __esm({
  "node_modules/@frontegg/redux-store/audits/AuditsMetadataState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/audits/index.js
var audits_default;
var init_audits2 = __esm({
  "node_modules/@frontegg/redux-store/audits/index.js"() {
    init_reducer3();
    init_saga9();
    init_constants3();
    init_initialState2();
    init_interfaces36();
    init_interfaces37();
    init_AuditLogsState();
    init_interfaces38();
    init_AuditsMetadataState();
    audits_default = {
      sagas: sagas2,
      mockSagas,
      storeName: auditsStoreName,
      initialState: initialState3,
      reducer: reducer3,
      actions: actions35
    };
  }
});

// node_modules/@frontegg/redux-store/audits/backward-compatibility/interfaces.js
var init_interfaces39 = __esm({
  "node_modules/@frontegg/redux-store/audits/backward-compatibility/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/audits/backward-compatibility/initialState.js
var initialState4;
var init_initialState3 = __esm({
  "node_modules/@frontegg/redux-store/audits/backward-compatibility/initialState.js"() {
    initialState4 = {
      total: 0,
      offset: 0,
      filter: "",
      sortBy: "createdAt",
      context: null,
      filters: [],
      rowsData: [],
      lastUpdated: /* @__PURE__ */ new Date(),
      isLoading: true,
      isFetchMore: false,
      totalToday: 0,
      currentPage: 0,
      headerProps: [],
      sortDirection: "desc",
      severeThisWeek: 0,
      predefinedFilters: [],
      isDownloadingCsv: false,
      virtualScroll: false
    };
  }
});

// node_modules/@frontegg/redux-store/audits/backward-compatibility/reducer.js
var defaultItemsPerPage, storeName, lifeCycleActions, reducer4, actions36;
var init_reducer4 = __esm({
  "node_modules/@frontegg/redux-store/audits/backward-compatibility/reducer.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_initialState3();
    defaultItemsPerPage = 20;
    ({
      name: storeName,
      actions: lifeCycleActions,
      reducer: reducer4
    } = createSlice({
      name: "audits",
      initialState: initialState4,
      reducers: {
        setContext: (state, {
          payload
        }) => {
          state.context = payload;
        },
        startLoading: (state) => {
          state.isLoading = true;
        },
        setVirtualScroll: (state, {
          payload
        }) => {
          state.virtualScroll = payload;
        },
        startRefresh: (state) => {
          state.isLoading = true;
        },
        startFetching: (state) => {
          state.isFetchMore = true;
        },
        finishLoading: (state) => {
          state.isLoading = false;
        },
        startDownloadingCsv: (state) => {
          state.isDownloadingCsv = true;
        },
        stopDownloadingCsv: (state) => {
          state.isDownloadingCsv = false;
        },
        loadStatsSuccess: (state, {
          payload
        }) => {
          state.error = void 0;
          state.totalToday = payload.totalToday;
          state.severeThisWeek = payload.severeThisWeek;
        },
        loadItemFailedAction: (state, {
          payload
        }) => {
          state.error = _extends({}, state.error, {
            [payload.name]: payload.error
          });
        },
        loadMetadataSuccess: (state, {
          payload
        }) => {
          state.error = {};
          state.headerProps = payload.properties;
          state.themeAudits = payload.theme ? payload.theme.styles : {};
        },
        loadAuditsSuccess: (state, {
          payload
        }) => {
          state.error = {};
          state.rowsData = payload.rowsData;
          state.lastUpdated = /* @__PURE__ */ new Date();
          state.total = payload.total;
        },
        fetchMoreSuccess: (state, {
          payload
        }) => {
          state.error = {};
          state.offset = payload.offset;
          state.currentPage = payload.currentPage;
          state.isFetchMore = false;
        },
        setFilterData: (state, {
          payload
        }) => {
          state.filters = payload;
          state.currentPage = 0;
          state.offset = 0;
          state.isLoading = true;
        },
        textSearch: (state, {
          payload
        }) => {
          state.filter = payload;
          state.currentPage = 0;
          state.offset = 0;
          state.isLoading = true;
        },
        onPageChange: (state, {
          payload
        }) => {
          state.currentPage = payload - 1;
          state.offset = state.currentPage * defaultItemsPerPage;
          state.isLoading = true;
        },
        setDataSorting: (state, {
          payload
        }) => {
          state.sortBy = payload.sortBy;
          state.currentPage = 0;
          state.sortDirection = payload.sortDirection === "asc" ? "desc" : "asc";
          state.offset = 0;
          state.isLoading = true;
        },
        setPredefinedFilters: (state, {
          payload
        }) => {
          state.predefinedFilters = payload;
          state.filters = Object.keys(payload).map((key) => ({
            key,
            value: payload[key]
          }));
        }
      }
    }));
    actions36 = _extends({}, lifeCycleActions, {
      initData: createAction(`${storeName}/initData`),
      loadAudits: createAction(`${storeName}/loadAudits`),
      removeFilter: createAction(`${storeName}/removeFilter`),
      filterData: createAction(`${storeName}/filterData`),
      exportCSV: createAction(`${storeName}/exportCSV`),
      deleteAudits: createAction(`${storeName}/deleteAudits`)
    });
  }
});

// node_modules/@frontegg/redux-store/audits/backward-compatibility/saga.js
function* loadStats2() {
  const {
    sortBy,
    sortDirection
  } = yield select3();
  try {
    const stats = yield call(api.audits.getAuditsStats, {
      sortBy,
      sortDirection,
      count: defaultItemsPerPage
    });
    yield put(actions36.loadStatsSuccess(stats));
  } catch (e2) {
    const errorMessage = {
      name: "stats",
      error: e2
    };
    console.error("failed to load stats - ", e2);
    yield put(actions36.loadItemFailedAction(errorMessage));
  }
}
function* loadMetadata() {
  try {
    const result = yield call(api.metadata.getAuditsMetadata);
    yield put(actions36.loadMetadataSuccess(result));
  } catch (e2) {
    const errorMessage = {
      name: "metadata",
      error: e2
    };
    console.error("failed to load metadata - ", e2);
    yield put(actions36.loadItemFailedAction(errorMessage));
  }
}
function* loadAuditsFunction({
  payload
}) {
  const {
    filters,
    sortBy,
    sortDirection,
    filter,
    offset,
    virtualScroll
  } = yield select3();
  const {
    appendMode = virtualScroll,
    onlyOneLoad = true,
    offset: incomeOffset
  } = payload || {};
  const {
    rowsData
  } = appendMode ? yield select3() : {
    rowsData: []
  };
  try {
    const f2o = filterToObject(filters);
    const {
      data,
      total
    } = yield call(api.audits.getAudits, _extends({}, virtualScroll && {
      paginationMode: "virtual"
    }, {
      sortDirection,
      sortBy,
      filter
    }, f2o, {
      // TODO: refactor once api become V2 with query field for virtual scroll
      offset: virtualScroll ? rowsData.length + incomeOffset || rowsData.length + offset : incomeOffset || offset,
      count: defaultItemsPerPage
    }));
    yield put(actions36.loadAuditsSuccess({
      rowsData: [...rowsData, ...data],
      total
    }));
    if (onlyOneLoad) {
      yield put(actions36.finishLoading());
    }
  } catch (e2) {
    const errorMessage = {
      name: "audits",
      error: e2
    };
    console.error("failed to load audits - ", e2);
    yield put(actions36.loadItemFailedAction(errorMessage));
  }
}
function* initDataFunction() {
  yield put(actions36.startLoading());
  yield all([loadStats2(), loadMetadata(), loadAuditsFunction({
    payload: {
      onlyOneLoad: false
    },
    type: ""
  })]);
  yield put(actions36.finishLoading());
}
function* removeFilterFunction({
  payload
}) {
  const {
    filters: allFilters
  } = yield select3();
  const removedFilterIndex = allFilters.findIndex((item) => item.key === payload.key);
  if (removedFilterIndex < 0) {
    return;
  }
  const newFilters = [...allFilters.slice(0, removedFilterIndex), ...allFilters.slice(removedFilterIndex + 1)];
  yield put(actions36.setFilterData(newFilters));
}
function* filterDataFunction({
  payload
}) {
  const {
    filters: allFilters
  } = yield select3();
  let filterIndex = allFilters.findIndex((item) => item.key === payload.key);
  if (filterIndex < 0) {
    filterIndex = allFilters.length;
  }
  const newFilters = [...allFilters.slice(0, filterIndex), payload, ...allFilters.slice(filterIndex + 1)];
  yield put(actions36.setFilterData(newFilters));
}
function* exportCsvFunction() {
  const {
    filters,
    sortBy,
    sortDirection,
    filter,
    headerProps
  } = yield select3();
  const f2o = filterToObject(filters);
  yield put(actions36.startDownloadingCsv());
  const outputFileName = `audits.csv`;
  try {
    yield api.audits.exportAudits(_extends({
      endpoint: "csv/v2",
      headerProps,
      sortDirection,
      sortBy,
      filter
    }, f2o, {
      offset: 0,
      outputFileName
    }));
  } catch (e2) {
    console.error("failed to export audits - ", e2);
  } finally {
    yield put(actions36.stopDownloadingCsv());
  }
}
function* sagas3() {
  yield takeLatest$1(actions36.initData, initDataFunction);
  yield takeLatest$1(actions36.removeFilter, removeFilterFunction);
  yield takeLatest$1(actions36.filterData, filterDataFunction);
  yield takeLatest$1([actions36.loadAudits, actions36.textSearch, actions36.onPageChange], loadAuditsFunction);
  yield takeLatest$1([actions36.setFilterData, actions36.setDataSorting, actions36.startRefresh], () => loadAuditsFunction({
    payload: {
      appendMode: false
    },
    type: ""
  }));
  yield takeLatest$1(actions36.exportCSV, exportCsvFunction);
}
var select3, filterToObject;
var init_saga10 = __esm({
  "node_modules/@frontegg/redux-store/audits/backward-compatibility/saga.js"() {
    init_extends();
    init_rest_api();
    init_reducer4();
    init_redux_saga_effects_npm_proxy_esm();
    select3 = () => select((_2) => _2[storeName]);
    filterToObject = (arr) => arr.reduce((res, curr) => {
      res[curr.key] = curr.value;
      return res;
    }, {});
  }
});

// node_modules/@frontegg/redux-store/audits/backward-compatibility/index.js
var init_backward_compatibility = __esm({
  "node_modules/@frontegg/redux-store/audits/backward-compatibility/index.js"() {
    init_interfaces39();
    init_reducer4();
    init_saga10();
    init_initialState3();
  }
});

// node_modules/@frontegg/redux-store/connectivity/ConnectivityState/index.js
var initialState5, reducers34, actions37;
var init_ConnectivityState = __esm({
  "node_modules/@frontegg/redux-store/connectivity/ConnectivityState/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_constants3();
    initialState5 = {
      isLoading: false,
      isSaving: false,
      list: [],
      processIds: [],
      slackChannels: {
        isLoading: false
      }
    };
    reducers34 = {
      initData: () => _extends({}, initialState5),
      // Deprecated: use initData instead;
      // cleanData: () => ({ ...initialState }),
      setConnectivityState: (state, {
        payload
      }) => _extends({}, state, payload),
      cleanWebhookTestData: (state) => _extends({}, state, {
        testResult: void 0
      }),
      cleanWebhookLogsData: (state) => _extends({}, state, {
        webhookLogs: void 0
      }),
      cleanWebhookTestMessage: (state) => {
        var _state$testResult;
        return _extends({}, state, {
          testResult: {
            status: (_state$testResult = state.testResult) == null ? void 0 : _state$testResult.status,
            message: void 0
          }
        });
      },
      cleanError: (state) => _extends({}, state, {
        error: void 0
      }),
      cleanSlackData: (state) => _extends({}, state, {
        slackChannels: {
          isLoading: false
        }
      }),
      postWebhookRetryAction: {
        prepare: (logId) => ({
          payload: logId
        }),
        reducer: (state, {
          payload
        }) => _extends({}, state, {
          retryResult: _extends({}, state.retryResult, {
            [payload]: {
              isProcess: true,
              success: false
            }
          })
        })
      },
      postWebhookRetryResult: {
        prepare: (payload) => ({
          payload
        }),
        reducer: (state, {
          payload
        }) => _extends({}, state, {
          retryResult: _extends({}, state.retryResult, payload)
        })
      }
    };
    actions37 = {
      loadSlackActions: createAction(`${connectivityStoreName}/loadSlackActions`),
      loadDataAction: createAction(`${connectivityStoreName}/loadDataAction`, (payload) => ({
        payload
      })),
      postDataAction: createAction(`${connectivityStoreName}/postDataAction`, (payload) => ({
        payload
      })),
      postCodeAction: createAction(`${connectivityStoreName}/postCodeAction`, (payload) => ({
        payload
      })),
      loadScope: createAction(`${connectivityStoreName}/loadScope`),
      deleteWebhookConfigAction: createAction(`${connectivityStoreName}/deleteWebhookConfigAction`, (payload) => ({
        payload
      })),
      postWebhookTestAction: createAction(`${connectivityStoreName}/postWebhookTestAction`, (payload) => ({
        payload
      })),
      loadWebhookLogsAction: createAction(`${connectivityStoreName}/loadWebhookLogsAction`, (id, offset = 0, limit = 10) => ({
        payload: {
          id,
          offset,
          limit
        }
      }))
    };
  }
});

// node_modules/@frontegg/redux-store/connectivity/reducer.js
var initialState6, reducer5, sliceActions4, actions38;
var init_reducer5 = __esm({
  "node_modules/@frontegg/redux-store/connectivity/reducer.js"() {
    init_extends();
    init_constants3();
    init_redux_toolkit_esm();
    init_ConnectivityState();
    initialState6 = {
      isLoading: false,
      isSaving: false,
      list: [],
      processIds: [],
      slackChannels: {
        isLoading: false
      }
    };
    ({
      reducer: reducer5,
      actions: sliceActions4
    } = createSlice({
      name: connectivityStoreName,
      initialState: initialState6,
      reducers: _extends({}, reducers34)
    }));
    actions38 = _extends({}, sliceActions4, actions37);
  }
});

// node_modules/@frontegg/redux-store/connectivity/consts.js
var type2ApiGet, type2ApiPost, channels, channels2Platform;
var init_consts3 = __esm({
  "node_modules/@frontegg/redux-store/connectivity/consts.js"() {
    init_rest_api();
    type2ApiGet = {
      slack: api.connectivity.getSlackConfiguration,
      email: api.connectivity.getEmailConfiguration,
      sms: api.connectivity.getSMSConfiguration,
      webhook: api.connectivity.getWebhooksConfigurations,
      categories: api.connectivity.getCategories,
      channelMap: api.connectivity.getChannelMaps
    };
    type2ApiPost = {
      slack: api.connectivity.postSlackConfiguration,
      email: api.connectivity.postEmailConfiguration,
      sms: api.connectivity.postSMSConfiguration,
      webhook: api.connectivity.postWebhooksConfiguration
    };
    channels = ["email", "slack", "sms", "webhook"];
    channels2Platform = {
      sms: {
        title: "connectivity.sms",
        events: (data) => (data == null ? void 0 : data.length) || 0,
        isActive: (data) => {
          var _some;
          return (_some = data == null ? void 0 : data.some(({
            enabled
          }) => enabled)) != null ? _some : false;
        },
        image: "sms"
      },
      email: {
        title: "common.email",
        events: (data) => (data == null ? void 0 : data.length) || 0,
        isActive: (data) => {
          var _some2;
          return (_some2 = data == null ? void 0 : data.some(({
            enabled
          }) => enabled)) != null ? _some2 : false;
        },
        image: "email"
      },
      slack: {
        title: "connectivity.slack",
        events: (data) => {
          var _slackSubscriptions;
          return (data == null ? void 0 : (_slackSubscriptions = data.slackSubscriptions) == null ? void 0 : _slackSubscriptions.length) || 0;
        },
        isActive: (data) => {
          var _slackSubscriptions$s;
          return (_slackSubscriptions$s = !!(data != null && data.slackSubscriptions.some(({
            isActive
          }) => isActive))) != null ? _slackSubscriptions$s : false;
        },
        image: "slack"
      },
      webhook: {
        title: "connectivity.webhook",
        events: (data) => (data == null ? void 0 : data.length) || 0,
        isActive: (data) => {
          var _some3;
          return (_some3 = data == null ? void 0 : data.some(({
            isActive
          }) => isActive)) != null ? _some3 : false;
        },
        image: "webhook"
      }
    };
  }
});

// node_modules/@frontegg/redux-store/connectivity/saga.js
function* loadPlatformData(ch) {
  return yield call(loadFunction, {
    payload: {
      api: ch
    },
    type: ""
  });
}
function* loadDataFunction({
  payload = channels
}) {
  yield put(actions38.setConnectivityState({
    isLoading: true
  }));
  try {
    const values = yield all([
      // @ts-ignore
      ...payload.map(loadPlatformData),
      // @ts-ignore
      yield loadFunction({
        payload: {
          api: "categories"
        },
        type: ""
      }),
      // @ts-ignore
      yield function* () {
        const res = yield all(payload.map(function* (ch) {
          return yield loadFunction({
            payload: {
              api: "channelMap",
              params: ch
            },
            type: ""
          });
        }));
        return res.reduce((acc, curr, idx) => _extends({}, acc, {
          [`${payload[idx]}`]: curr
        }), {});
      }()
    ]);
    const webhooks = yield loadFunction({
      payload: {
        api: "webhook"
      },
      type: ""
    });
    const data = values.reduce((acc, curr, idx) => payload[idx] ? values[values.length - 1][payload[idx]].length ? _extends({}, acc, {
      [`${payload[idx]}`]: curr,
      list: [...acc.list, {
        id: idx,
        key: payload[idx],
        events: channels2Platform[payload[idx]].events(curr),
        active: channels2Platform[payload[idx]].isActive(curr),
        platform: channels2Platform[payload[idx]].title,
        image: channels2Platform[payload[idx]].image
      }]
    }) : acc : _extends({}, acc, {
      [`${addApi[idx - payload.length]}`]: curr
    }), {
      list: [],
      webhook: webhooks
    });
    yield put(actions38.setConnectivityState(_extends({}, data, {
      error: void 0,
      isSaving: false,
      isLoading: false
    })));
  } catch (e2) {
    yield put(actions38.setConnectivityState({
      isLoading: false
    }));
  }
}
function* loadFunction({
  payload: {
    api: api2,
    params
  }
}) {
  try {
    return yield call(type2ApiGet[api2], params);
  } catch (e2) {
    return void 0;
  }
}
function* loadSlackFunction() {
  try {
    yield put(actions38.setConnectivityState({
      slackChannels: {
        isLoading: true
      }
    }));
    const data = yield call(api.connectivity.getSlackChannels);
    yield put(actions38.setConnectivityState({
      error: void 0,
      slackChannels: {
        isLoading: false,
        data
      }
    }));
  } catch (e2) {
    yield put(actions38.setConnectivityState({
      error: void 0,
      slackChannels: {
        isLoading: false
      }
    }));
  }
}
function* checkNewStatus(platform, data) {
  const {
    connectivity: {
      list
    }
  } = yield select();
  const currPlatform = list.find(({
    key
  }) => key === platform);
  if (!currPlatform)
    return;
  const newActive = channels2Platform[platform].isActive(data);
  if (newActive === currPlatform.active)
    return;
  yield put(actions38.setConnectivityState({
    list: list.map((elm) => elm.key === platform ? _extends({}, elm, {
      active: newActive
    }) : elm)
  }));
}
function* postDataFunction({
  payload: {
    platform,
    data,
    callback
  }
}) {
  const {
    processIds
  } = yield select((state) => state.connectivity);
  try {
    yield put(actions38.setConnectivityState({
      isSaving: true,
      //@ts-ignore
      processIds: platform === "webhook" ? [data._id, ...processIds] : processIds
    }));
    if (platform === "slack") {
      yield postSlackData({
        payload: data,
        type: ""
      });
    } else if (["sms", "email"].includes(platform)) {
      yield postEmailSMSData({
        payload: data,
        type: platform
      });
    } else {
      yield call(type2ApiPost[platform], data);
    }
    if (!["sms", "email"].includes(platform)) {
      const newData = yield loadFunction({
        payload: {
          api: platform
        },
        type: ""
      });
      if (platform === "webhook") {
        newData.id = data._id;
      }
      yield put(actions38.setConnectivityState({
        error: void 0,
        isSaving: false,
        [`${platform}`]: newData,
        processIds: newData.id ? processIds.filter((el) => el !== newData.id) : processIds
      }));
      yield checkNewStatus(platform, newData);
      callback == null ? void 0 : callback(true);
    }
  } catch (e2) {
    yield put(actions38.setConnectivityState({
      error: errorHandler(e2, e2.toString()),
      isSaving: false,
      isLoading: false
    }));
  }
}
function* postSlackData({
  payload
}) {
  const {
    connectivity: {
      slack
    }
  } = yield select();
  if (!slack) {
    return;
  }
  const {
    slackSubscriptions: stateSlackSubscriptions
  } = slack;
  const {
    slackSubscriptions
  } = payload;
  yield all([
    ...slackSubscriptions.reduce((acc, curr) => {
      var _curr$slackEvents$0$c, _curr$slackEvents$0$c2;
      if (!curr.id && curr.slackEvents && (_curr$slackEvents$0$c = curr.slackEvents[0].channelIds) != null && _curr$slackEvents$0$c.length) {
        return [...acc, curr];
      }
      const el = stateSlackSubscriptions == null ? void 0 : stateSlackSubscriptions.find((_ref) => {
        let {
          id
        } = _ref, props = _objectWithoutPropertiesLoose(_ref, _excluded14);
        return id === curr.id && JSON.stringify(_extends({
          id
        }, props)) !== JSON.stringify(curr);
      });
      if (el && curr.slackEvents && (_curr$slackEvents$0$c2 = curr.slackEvents[0].channelIds) != null && _curr$slackEvents$0$c2.length) {
        return [...acc, curr];
      }
      return acc;
    }, []).map(function* (el) {
      return yield call(type2ApiPost.slack, el);
    }),
    ...slackSubscriptions.reduce((acc, curr) => {
      if (curr.id && !curr.slackEvents[0].channelIds.length) {
        return [...acc, curr];
      }
      return acc;
    }, []).map(function* (el) {
      return yield call(api.connectivity.deleteSlackConfiguration, el);
    })
    // clean the old data
    // ...stateSlackSubscriptions
    //   // @ts-ignore
    //   .reduce((acc, curr) => {
    //     const el = slackSubscriptions.find(({ id }) => id === curr.id);
    //     if (!el) {
    //       return [...acc, curr];
    //     }
    //     return acc;
    //   }, [])
    //   // @ts-ignore
    //   .map(function* (el) {
    //     return yield call(api.connectivity.deleteSlackConfiguration, el as Required<ISlackSubscription>);
    //   }),
  ]);
}
function* postEmailSMSData({
  payload,
  type
}) {
  const {
    connectivity
  } = yield select();
  const {
    processIds
  } = yield select((state) => state.connectivity);
  const stateData = connectivity[type];
  if (!stateData)
    return;
  let actionsResult = [];
  try {
    actionsResult = yield all([
      // create new
      ...payload.reduce((acc, curr) => {
        const state = stateData.find(({
          eventKey
        }) => eventKey === curr.eventKey);
        if (!state && curr.subscriptions[0].recipients.filter((el) => el).length) {
          return [...acc, curr];
        }
        return acc;
      }, []).map(function* (data) {
        return yield call(type === "email" ? api.connectivity.postEmailConfiguration : api.connectivity.postSMSConfiguration, data);
      }),
      // update exists
      ...payload.reduce((acc, curr) => {
        const state = stateData.find(({
          eventKey
        }) => eventKey === curr.eventKey);
        if (state && JSON.stringify(state) !== JSON.stringify(curr)) {
          return [...acc, curr];
        }
        return acc;
      }, []).map(function* (data) {
        const {
          subscriptions,
          eventKey
        } = data;
        const _subscriptions$ = subscriptions[0], {
          id = "",
          enabled
        } = _subscriptions$, body = _objectWithoutPropertiesLoose(_subscriptions$, _excluded27);
        return yield all([
          // @ts-ignore
          yield call(type === "email" ? api.connectivity.patchEmailConfiguration : api.connectivity.patchSMSConfiguration, {
            eventKey,
            enabled
          }),
          // @ts-ignore
          yield call(type === "email" ? api.connectivity.putEmailSubscriptions : api.connectivity.putSMSSubscriptions, id, eventKey, _extends({}, body, {
            enabled
          }))
        ]);
      }),
      // delete record with empty recipients
      ...payload.reduce((acc, curr) => {
        const state = stateData.find(({
          eventKey
        }) => eventKey === curr.eventKey);
        if (state && state.subscriptions[0].recipients.length && !curr.subscriptions[0].recipients.filter((el) => !!el).length) {
          return [...acc, curr];
        }
        return acc;
      }, []).map(function* ({
        eventKey,
        subscriptions
      }) {
        return call(type === "email" ? api.connectivity.deleteEmailSubscriptions : api.connectivity.deleteSMSSubscriptions, eventKey, subscriptions[0].id || "");
      })
    ]);
  } catch {
  }
  if (actionsResult.length) {
    const newData = yield loadFunction({
      payload: {
        api: type
      },
      type: ""
    });
    yield put(actions38.setConnectivityState({
      error: void 0,
      isSaving: false,
      [`${type}`]: newData,
      processIds: newData.id ? processIds.filter((el) => el !== newData.id) : processIds
    }));
    yield checkNewStatus(type, newData);
  } else {
    yield put(actions38.setConnectivityState({
      error: void 0,
      isSaving: false,
      [`${type}`]: stateData,
      processIds
    }));
  }
}
function* postCodeFunction({
  payload
}) {
  try {
    yield api.connectivity.postSlackCode(payload);
  } catch {
  }
  yield put(actions38.setConnectivityState({
    error: void 0,
    isSaving: false
  }));
}
function* loadSlackPermissions() {
  const {
    slackChannels
  } = yield select((state) => state.connectivity);
  try {
    yield put(actions38.setConnectivityState({
      slackChannels: _extends({}, slackChannels, {
        isLoadingScope: true
      })
    }));
    const {
      clientId
    } = yield call(api.connectivity.getSlackScope);
    yield put(actions38.setConnectivityState({
      slackChannels: {
        error: void 0,
        clientId,
        isLoadingScope: false,
        isLoading: false
      }
    }));
  } catch {
    yield put(actions38.setConnectivityState({
      slackChannels: {
        error: void 0,
        isLoadingScope: false,
        isLoading: false
      }
    }));
  }
}
function* deleteWebhookConfigFunction({
  payload
}) {
  const {
    callback,
    webhookId
  } = payload;
  const {
    processIds
  } = yield select((state) => state.connectivity);
  try {
    yield put(actions38.setConnectivityState({
      isSaving: true
    }));
    yield call(api.connectivity.deleteWebhooksConfiguration, webhookId);
  } catch (e2) {
    callback == null ? void 0 : callback(null, errorHandler(e2));
  }
  const newData = yield loadFunction({
    payload: {
      api: "webhook"
    },
    type: ""
  });
  if (newData) {
    yield put(actions38.setConnectivityState({
      error: void 0,
      isSaving: false,
      webhook: newData,
      processIds: newData.id ? processIds.filter((el) => el !== newData.id) : processIds
    }));
  }
  callback == null ? void 0 : callback(true);
}
function* postWebhookTestFunction({
  payload
}) {
  try {
    yield put(actions38.setConnectivityState({
      isTesting: true
    }));
    const {
      statusCode,
      body
    } = yield call(api.connectivity.postWebhookTest, payload);
    if ([201, 200].includes(statusCode)) {
      const message = JSON.stringify(body, null, 2);
      yield put(actions38.setConnectivityState({
        isTesting: false,
        testResult: {
          status: "success",
          message
        }
      }));
    } else {
      yield put(actions38.setConnectivityState({
        isTesting: false,
        testResult: {
          status: "failed"
        }
      }));
    }
  } catch (e2) {
    yield put(actions38.setConnectivityState({
      isTesting: false,
      testResult: {
        status: "failed",
        message: e2.toString()
      }
    }));
  }
}
function* postWebhookRetryFunction({
  payload
}) {
  try {
    const {
      statusCode
    } = yield call(api.connectivity.postWebhookRetry, payload);
    yield put(actions38.postWebhookRetryResult({
      [payload]: {
        isProcess: false,
        success: statusCode === 202
      }
    }));
  } catch (e2) {
    yield put(actions38.postWebhookRetryResult({
      [payload]: {
        isProcess: false,
        success: false
      }
    }));
  }
}
function* loadWebhookLogsFunction({
  payload: {
    id,
    limit,
    offset
  }
}) {
  const {
    webhookLogs
  } = yield select((state) => state.connectivity);
  try {
    yield put(actions38.setConnectivityState({
      webhookLogs: _extends({}, webhookLogs, {
        isLoading: true
      })
    }));
    const data = yield call(api.connectivity.getWebhookLog, id, offset, limit);
    yield put(actions38.setConnectivityState({
      error: void 0,
      webhookLogs: _extends({
        isLoading: false
      }, data)
    }));
  } catch (e2) {
    yield put(actions38.setConnectivityState({
      error: void 0,
      webhookLogs: {
        isLoading: false
      }
    }));
  }
}
function* sagas4() {
  yield takeEvery$1(actions38.loadDataAction, loadDataFunction);
  yield takeLatest$1(actions38.loadSlackActions, loadSlackFunction);
  yield takeEvery$1(actions38.postDataAction, postDataFunction);
  yield takeEvery$1(actions38.postCodeAction, postCodeFunction);
  yield takeEvery$1(actions38.loadScope, loadSlackPermissions);
  yield takeEvery$1(actions38.deleteWebhookConfigAction, deleteWebhookConfigFunction);
  yield takeEvery$1(actions38.postWebhookTestAction, postWebhookTestFunction);
  yield takeEvery$1(actions38.postWebhookRetryAction, postWebhookRetryFunction);
  yield takeLatest$1(actions38.loadWebhookLogsAction, loadWebhookLogsFunction);
}
var _excluded14, _excluded27, addApi;
var init_saga11 = __esm({
  "node_modules/@frontegg/redux-store/connectivity/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_reducer5();
    init_consts3();
    init_rest_api();
    init_utils5();
    _excluded14 = ["id"];
    _excluded27 = ["id", "enabled"];
    addApi = ["categories", "channelMap"];
  }
});

// node_modules/@frontegg/redux-store/connectivity/interfaces.js
var init_interfaces40 = __esm({
  "node_modules/@frontegg/redux-store/connectivity/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/connectivity/index.js
var connectivity_default;
var init_connectivity2 = __esm({
  "node_modules/@frontegg/redux-store/connectivity/index.js"() {
    init_reducer5();
    init_saga11();
    init_constants3();
    init_interfaces40();
    connectivity_default = {
      sagas: sagas4,
      storeName: connectivityStoreName,
      initialState: initialState6,
      reducer: reducer5,
      actions: actions38
    };
  }
});

// node_modules/@frontegg/redux-store/subscriptions/utils.js
function createModuleCaseReducers() {
  return {
    setLoading: {
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, action) => _extends({}, state, {
        loading: action.payload
      }, action.payload ? {
        error: null
      } : {})
    },
    setError: {
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, action) => _extends({}, state, {
        error: action.payload,
        loading: false,
        fetching: false
      })
    },
    setState: {
      prepare: (payload) => ({
        payload
      }),
      reducer: (state, action) => _extends({}, state, action.payload)
    }
  };
}
function createKeyCaseReducer(key, setState) {
  return {
    prepare: (payload) => ({
      payload
    }),
    reducer: (state, action) => _extends({}, state, {
      [key]: setState(state[key], action)
    })
  };
}
function createKeyCaseLoadingReducer(key) {
  return createKeyCaseReducer(key, (state, action) => _extends({}, state, {
    loading: action.payload
  }));
}
function createKeyCaseErrorReducer(key) {
  return createKeyCaseReducer(key, (state, action) => _extends({}, state, {
    error: action.payload,
    loading: false
  }));
}
var init_utils9 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/utils.js"() {
    init_extends();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Plans/index.js
var plansInitialState, sliceActions5, reducer6, name, actions39;
var init_Plans = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Plans/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_constants3();
    init_utils9();
    plansInitialState = {
      loading: false,
      error: null,
      fetching: true,
      plans: []
    };
    ({
      actions: sliceActions5,
      reducer: reducer6,
      name
    } = createSlice({
      name: `${subscriptionsStoreName}/plans`,
      initialState: plansInitialState,
      reducers: _extends({}, createModuleCaseReducers())
    }));
    actions39 = _extends({
      loadPlans: createAction(`${name}/loadPlans`)
    }, sliceActions5);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Config/index.js
var configInitialState, reducers35, configActions, reducer7, name2, actions40;
var init_Config = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Config/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_constants3();
    init_utils9();
    configInitialState = {
      loading: false,
      error: null,
      fetching: true,
      config: null
    };
    reducers35 = _extends({}, createModuleCaseReducers());
    ({
      actions: configActions,
      reducer: reducer7,
      name: name2
    } = createSlice({
      name: `${subscriptionsStoreName}/config`,
      initialState: configInitialState,
      reducers: reducers35
    }));
    actions40 = _extends({
      loadPaymentConfiguration: createAction(`${name2}/loadPaymentConfiguration`)
    }, configActions);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/index.js
var initialSubscriptionState, reducers36, reducer8, overviewActions, name3, actions41;
var init_Subscription = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_constants3();
    init_utils9();
    initialSubscriptionState = {
      loading: false,
      error: null,
      fetching: true,
      cancellation: {
        loading: false,
        error: null
      },
      renewal: {
        loading: false,
        error: null
      }
    };
    reducers36 = _extends({}, createModuleCaseReducers(), {
      setCancellationLoading: createKeyCaseLoadingReducer("cancellation"),
      setCancellationError: createKeyCaseErrorReducer("cancellation"),
      setRenewalLoading: createKeyCaseLoadingReducer("renewal"),
      setRenewalError: createKeyCaseErrorReducer("renewal")
    });
    ({
      reducer: reducer8,
      actions: overviewActions,
      name: name3
    } = createSlice({
      name: `${subscriptionsStoreName}/billing/subscription`,
      initialState: initialSubscriptionState,
      reducers: reducers36
    }));
    actions41 = _extends({
      load: createAction(`${name3}/loadSubscription`),
      cancelSubscription: createAction(`${name3}/cancelSubscription`),
      renewSubscription: createAction(`${name3}/renewSubscription`)
    }, overviewActions);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Information/index.js
var initialBillingInformationState, reducers37, reducer9, overviewActions2, name4, actions42;
var init_Information = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Information/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_utils9();
    init_constants3();
    init_Subscription();
    initialBillingInformationState = {
      loading: false,
      error: null,
      fetching: true
    };
    reducers37 = _extends({}, createModuleCaseReducers());
    ({
      reducer: reducer9,
      actions: overviewActions2,
      name: name4
    } = createSlice({
      name: `${subscriptionsStoreName}/billing/information`,
      initialState: initialBillingInformationState,
      reducers: reducers37
    }));
    actions42 = _extends({
      loadBillingInformation: createAction(`${name4}/loadBillingInformation`),
      cancelSubscription: actions41.cancelSubscription,
      renewSubscription: actions41.renewSubscription
    }, overviewActions2);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/index.js
var initialPaymentMethodState, reducers38, reducer10, paymentActions, name5, actions43;
var init_PaymentMethod = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/index.js"() {
    init_extends();
    init_utils9();
    init_constants3();
    init_redux_toolkit_esm();
    initialPaymentMethodState = {
      loading: false,
      error: null,
      fetching: true
    };
    reducers38 = _extends({}, createModuleCaseReducers(), {
      setState: {
        prepare: (payload) => ({
          payload
        }),
        reducer: (state, action) => _extends({}, state, action.payload)
      }
    });
    ({
      reducer: reducer10,
      actions: paymentActions,
      name: name5
    } = createSlice({
      name: `${subscriptionsStoreName}/billing/payment`,
      initialState: initialPaymentMethodState,
      reducers: reducers38
    }));
    actions43 = _extends({
      loadPaymentMethod: createAction(`${name5}/loadPaymentMethod`),
      submitPaymentMethod: createAction(`${name5}/submitPaymentMethod`),
      submitPaymentMethodError: createAction(`${name5}/submitPaymentMethodError`),
      submitPaymentMethodSuccess: createAction(`${name5}/submitPaymentMethodSuccess`),
      updatePaymentMethodBillingDetails: createAction(`${name5}/updateBillingDetails`, (payload) => ({
        payload
      }))
    }, paymentActions);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Invoices/index.js
var initialInvoicesState, reducers39, reducer11, sliceActions6, name6, actions44;
var init_Invoices = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Invoices/index.js"() {
    init_extends();
    init_utils9();
    init_redux_toolkit_esm();
    init_constants3();
    initialInvoicesState = {
      loading: false,
      error: null,
      fetching: true,
      invoices: [],
      invoiceDownload: {
        loading: false,
        error: null
      }
    };
    reducers39 = _extends({}, createModuleCaseReducers(), {
      setInvoiceDownloadState: {
        prepare: (payload) => ({
          payload
        }),
        reducer: (state, action) => _extends({}, state, {
          invoiceDownload: _extends({}, state.invoiceDownload, action.payload)
        })
      }
    });
    ({
      reducer: reducer11,
      actions: sliceActions6,
      name: name6
    } = createSlice({
      name: `${subscriptionsStoreName}/billing/invoices`,
      initialState: initialInvoicesState,
      reducers: reducers39
    }));
    actions44 = _extends({
      loadInvoices: createAction(`${name6}/loadInvoices`),
      downloadInvoice: createAction(`${name6}/downloadInvoice`, (payload) => ({
        payload
      }))
    }, sliceActions6);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/index.js
var billingInitialState, billingActions, billingReducer;
var init_Billing = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/index.js"() {
    init_redux_toolkit_esm();
    init_Information();
    init_PaymentMethod();
    init_Invoices();
    init_Subscription();
    billingInitialState = {
      information: initialBillingInformationState,
      invoices: initialInvoicesState,
      paymentMethod: initialPaymentMethodState,
      subscription: initialSubscriptionState
    };
    billingActions = {
      invoices: actions44,
      information: actions42,
      paymentMethod: actions43,
      subscription: actions41
    };
    billingReducer = combineReducers({
      invoices: reducer11,
      information: reducer9,
      paymentMethod: reducer10,
      subscription: reducer8
    });
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Checkout/index.js
var checkoutInitialState, reducers40, checkoutActions, reducer12, name7, actions45;
var init_Checkout = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Checkout/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_utils9();
    init_constants3();
    checkoutInitialState = {
      fetching: true,
      loading: false,
      error: null,
      confirmed: false
    };
    reducers40 = _extends({}, createModuleCaseReducers());
    ({
      actions: checkoutActions,
      reducer: reducer12,
      name: name7
    } = createSlice({
      name: `${subscriptionsStoreName}/checkout`,
      initialState: checkoutInitialState,
      reducers: reducers40
    }));
    actions45 = _extends({
      loadCheckout: createAction(`${name7}/loadCheckout`),
      resetCheckout: createAction(`${name7}/resetCheckout`),
      submitCheckout: createAction(`${name7}/submitCheckout`),
      confirmCheckout: createAction(`${name7}/confirmCheckout`, (payload) => ({
        payload
      })),
      errorCheckout: createAction(`${name7}/errorCheckout`, (payload) => ({
        payload
      }))
    }, checkoutActions);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Stripe/index.js
var initialSubscriptionStripeState, reducers41, reducer13, reducerActions, name8, actions46;
var init_Stripe = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Stripe/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_utils9();
    init_constants3();
    initialSubscriptionStripeState = {
      loading: false,
      error: null,
      cardSetupIntentSecret: null
    };
    reducers41 = _extends({}, createModuleCaseReducers());
    ({
      reducer: reducer13,
      actions: reducerActions,
      name: name8
    } = createSlice({
      name: `${subscriptionsStoreName}/stripe`,
      initialState: initialSubscriptionStripeState,
      reducers: reducers41
    }));
    actions46 = _extends({
      loadCustomer: createAction(`${name8}/loadCustomer`),
      createCardSetupIntentSecret: createAction(`${name8}/createCardSetupIntentSecret`)
    }, reducerActions);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/VendorPublicConfig/index.js
var vendorPublicConfigInitialState, sliceActions7, reducer14, name9, actions47;
var init_VendorPublicConfig = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/VendorPublicConfig/index.js"() {
    init_extends();
    init_redux_toolkit_esm();
    init_constants3();
    init_utils9();
    vendorPublicConfigInitialState = {
      loading: false,
      fetching: true,
      vendorPublicConfig: null
    };
    ({
      actions: sliceActions7,
      reducer: reducer14,
      name: name9
    } = createSlice({
      name: `${subscriptionsStoreName}/vendorPublicConfig`,
      initialState: vendorPublicConfigInitialState,
      reducers: _extends({}, createModuleCaseReducers())
    }));
    actions47 = _extends({
      loadVendorPublicConfiguration: createAction(`${name9}/loadVendorPublicConfiguration`)
    }, sliceActions7);
  }
});

// node_modules/@frontegg/redux-store/subscriptions/reducer.js
var initialState7, actions48, reducer15;
var init_reducer6 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/reducer.js"() {
    init_redux_toolkit_esm();
    init_constants3();
    init_Plans();
    init_Config();
    init_Billing();
    init_Checkout();
    init_Stripe();
    init_VendorPublicConfig();
    initialState7 = {
      config: configInitialState,
      plans: plansInitialState,
      checkout: checkoutInitialState,
      billing: billingInitialState,
      stripe: initialSubscriptionStripeState,
      vendorPublicConfig: vendorPublicConfigInitialState
    };
    actions48 = {
      config: actions40,
      billing: billingActions,
      plans: actions39,
      checkout: actions45,
      stripe: actions46,
      vendorPublicConfig: actions47
    };
    reducer15 = combineReducers({
      config: reducer7,
      billing: billingReducer,
      plans: reducer6,
      checkout: reducer12,
      stripe: reducer13,
      vendorPublicConfig: reducer14
    });
  }
});

// node_modules/@frontegg/redux-store/subscriptions/general.interfaces.js
var PaymentProvider, SubscriptionStatus, SubscriptionCancellationPolicy;
var init_general_interfaces = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/general.interfaces.js"() {
    (function(PaymentProvider2) {
      PaymentProvider2["STRIPE"] = "Stripe";
    })(PaymentProvider || (PaymentProvider = {}));
    (function(SubscriptionStatus2) {
      SubscriptionStatus2["ACTIVE"] = "ACTIVE";
      SubscriptionStatus2["CANCELED"] = "CANCELED";
      SubscriptionStatus2["INCOMPLETE"] = "INCOMPLETE";
      SubscriptionStatus2["EXPIRED"] = "EXPIRED";
      SubscriptionStatus2["TRIALING"] = "TRIALING";
    })(SubscriptionStatus || (SubscriptionStatus = {}));
    (function(SubscriptionCancellationPolicy2) {
      SubscriptionCancellationPolicy2["AT_PERIOD_END"] = "atPeriodEnd";
    })(SubscriptionCancellationPolicy || (SubscriptionCancellationPolicy = {}));
  }
});

// node_modules/@frontegg/redux-store/subscriptions/mapper.js
function toSubscriptionCancellation({
  policy
}) {
  return {
    policy: toSubscriptionCancellationPolicy(policy)
  };
}
function toSubscriptionCancellationPolicy(policy) {
  return SubscriptionCancellationPolicy.AT_PERIOD_END;
}
function toSubscriptionStatus(status) {
  switch (status) {
    case ISubscriptionStatus.ACTIVE:
      return SubscriptionStatus.ACTIVE;
    case ISubscriptionStatus.INCOMPLETE:
      return SubscriptionStatus.INCOMPLETE;
    case ISubscriptionStatus.CANCELED:
      return SubscriptionStatus.CANCELED;
    case ISubscriptionStatus.EXPIRED:
      return SubscriptionStatus.EXPIRED;
    case ISubscriptionStatus.TRIALING:
      return SubscriptionStatus.TRIALING;
    default:
      return SubscriptionStatus.EXPIRED;
  }
}
var init_mapper = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/mapper.js"() {
    init_rest_api();
    init_general_interfaces();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/dummy.js
var subscriptionResponseMock, planResponseMock, invoicesMock, paymentMethodsMock, vendorPublicConfigurationResponseMock;
var init_dummy3 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/dummy.js"() {
    init_rest_api();
    subscriptionResponseMock = {
      id: "sub_1JbhYVEwsu4qiqnnfMhYAdY6",
      externalId: "sub_1JbhYVEwsu4qiqnnfMhYAdY6",
      startDate: "2021-09-20T08:08:51.000Z",
      status: ISubscriptionStatus.ACTIVE,
      externallyManaged: false,
      cancellation: null,
      currentPeriodStart: "2021-09-20T08:08:51.000Z",
      currentPeriodEnd: "2021-10-20T08:08:51.000Z",
      plan: {
        // TODO: fix dummy data
        slug: "test"
      }
      // items: [
      //   {
      //     id: 'si_KGE0p5himocPXH',
      //     externalId: 'prod_J60fUEvI7qV1eL',
      //     planId: 'prod_J60fUEvI7qV1eL',
      //     price: {
      //       id: 'price_1IToe8Ewsu4qiqnndAV76J69',
      //       externalId: 'price_1IToe8Ewsu4qiqnndAV76J69',
      //       currency: 'usd',
      //       amount: 10000,
      //     },
      //   },
      // ],
    };
    planResponseMock = [{
      id: "prod_J60fUEvI7qV1eL",
      externalId: "prod_J60fUEvI7qV1eL",
      name: "Premium",
      description: "",
      price: {
        id: "price_1IToe8Ewsu4qiqnndAV76J69",
        externalId: "price_1IToe8Ewsu4qiqnndAV76J69",
        currency: "usd",
        amount: 1e4
      },
      slug: "premium"
    }, {
      id: "prod_J60duauCpXfcur",
      externalId: "prod_J60duauCpXfcur",
      name: "Free",
      description: "Totally free plan. Nothing to pay.",
      price: {
        id: "price_1ITocfEwsu4qiqnnnBHDx9fQ",
        externalId: "price_1ITocfEwsu4qiqnnnBHDx9fQ",
        currency: "usd",
        amount: 0
      },
      slug: "free"
    }];
    invoicesMock = [{
      id: "in_1JbhYWEwsu4qiqnnrUh6hsHa",
      externalId: "in_1JbhYWEwsu4qiqnnrUh6hsHa",
      subscriptionId: "sub_1JbhYVEwsu4qiqnnfMhYAdY6",
      paymentDate: "2021-09-20T08:08:51.000Z",
      totalAmount: 1e4,
      currency: "usd",
      paid: true,
      receiptNumber: ""
    }, {
      id: "in_1JbhYWEwsu4qiqnnrUh6hsHa",
      externalId: "in_1JbhYWEwsu4qiqnnrUh6hsHa",
      subscriptionId: "sub_1JbhYVEwsu4qiqnnfMhYAdY6",
      paymentDate: "2021-08-20T08:08:51.000Z",
      totalAmount: 1e4,
      currency: "usd",
      paid: true,
      receiptNumber: ""
    }];
    paymentMethodsMock = [{
      id: "id",
      externalId: "externalId",
      type: PaymentMethodType.CARD,
      isDefault: true,
      last4: "4242",
      expMonth: 11,
      expYear: 25,
      brand: "visa",
      billingDetails: {
        name: "Dummy",
        email: "dummy@email.com"
      }
    }];
    vendorPublicConfigurationResponseMock = {
      allowPlanDowngrade: true,
      allowPlanCancellation: true
    };
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/loadSubscription.saga.js
function* loadSubscription() {
  yield put(actions41.setLoading(true));
  try {
    const [subscription] = yield call(api.subscriptions.getManagedSubscriptions);
    yield put(actions41.setState({
      subscription,
      fetching: false,
      loading: false,
      error: null
    }));
  } catch (e2) {
    yield put(actions41.setError(e2));
  }
}
var init_loadSubscription_saga = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/loadSubscription.saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_Subscription();
    init_rest_api();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Information/saga.js
function* subscriptionBillingInformationSagas() {
  yield takeEvery$1(actions42.loadBillingInformation, loadBillingInformation);
}
function* loadBillingInformation() {
  yield loadBillingInformationAction(false);
}
function* loadBillingInformationAction(forceActive) {
  const paymentProvider = yield select((state) => {
    var _state$subscriptions$;
    return (_state$subscriptions$ = state.subscriptions.config.config) == null ? void 0 : _state$subscriptions$.paymentProvider;
  });
  const tenantId = yield select((state) => {
    var _state$auth, _state$auth$user;
    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;
  });
  if (!paymentProvider || !tenantId) {
    yield put(actions42.setError(!paymentProvider ? "Internal feature failure" : "Not authorized"));
    return;
  }
  yield loadSummaries(tenantId, forceActive);
}
function* loadSummaries(tenantId, forceActive) {
  yield put(actions42.setLoading(true));
  try {
    var _planResponse$price, _planResponse$price2;
    const summary = yield call(api.subscriptions.getSubscriptionSummaries, tenantId);
    const {
      currentPlanId,
      externallyManaged
    } = summary;
    let subscriptionResponse = null;
    let planResponse;
    if (!externallyManaged) {
      [, planResponse] = yield all([call(loadSubscription), call(api.subscriptions.getSubscriptionPlan, currentPlanId)]);
      subscriptionResponse = yield select((state) => state.subscriptions.billing.subscription.subscription || null);
    } else {
      planResponse = yield call(api.subscriptions.getSubscriptionPlan, currentPlanId);
    }
    yield put(actions42.setState(_extends({
      loading: false,
      fetching: false,
      summary
    }, subscriptionResponse ? {
      subscription: {
        id: subscriptionResponse.id,
        externalId: subscriptionResponse.externalId,
        startDate: subscriptionResponse.startDate,
        currentPeriodStart: subscriptionResponse.currentPeriodStart,
        currentPeriodEnd: subscriptionResponse.currentPeriodEnd,
        status: forceActive ? SubscriptionStatus.ACTIVE : toSubscriptionStatus(subscriptionResponse.status),
        cancellation: subscriptionResponse.cancellation && toSubscriptionCancellation(subscriptionResponse.cancellation),
        trialEnd: subscriptionResponse.trialEnd ? subscriptionResponse.trialEnd : null
      }
    } : {}, planResponse ? {
      plan: {
        id: planResponse.id,
        name: planResponse.name,
        description: planResponse.description,
        price: ((_planResponse$price = planResponse.price) == null ? void 0 : _planResponse$price.amount) || 0,
        currency: ((_planResponse$price2 = planResponse.price) == null ? void 0 : _planResponse$price2.currency) || "usd",
        recurringInterval: "month",
        slug: planResponse.slug
      }
    } : {})));
  } catch (e2) {
    yield put(actions42.setError(errorHandler(e2)));
  }
}
function* loadBillingInformationMock() {
  yield loadSummariesMock();
}
function* loadSummariesMock() {
  var _planResponseMock$0$p, _planResponseMock$0$p2;
  yield put(actions42.setLoading(true));
  yield delay2(500);
  yield put(actions42.setState({
    loading: false,
    fetching: false,
    summary: {
      subscriptionId: subscriptionResponseMock.id,
      paymentMethodId: "mockPaymentMethodId",
      tenantConfigurationId: "mockTenantConfigurationId",
      providerType: ProviderType.Stripe,
      externallyManaged: false,
      currentPlanId: planResponseMock[0].id,
      defaultPlanId: planResponseMock[0].id
    },
    plan: _extends({}, planResponseMock[0], {
      price: (_planResponseMock$0$p = planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p.amount,
      currency: (_planResponseMock$0$p2 = planResponseMock[0].price) == null ? void 0 : _planResponseMock$0$p2.currency,
      recurringInterval: "month"
    })
  }));
}
function* subscriptionBillingInformationSagasMock() {
  yield takeEvery$1(actions42.loadBillingInformation, loadBillingInformationMock);
}
var init_saga12 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Information/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_Information();
    init_general_interfaces();
    init_mapper();
    init_dummy3();
    init_utils5();
    init_loadSubscription_saga();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/saga.js
function* subscriptionsPaymentMethodSagas() {
  yield takeEvery$1(actions43.loadPaymentMethod, loadPaymentMethod);
  yield takeEvery$1(actions43.submitPaymentMethod, submitPaymentMethod);
  yield takeEvery$1(actions43.submitPaymentMethodError, submitPaymentMethodError);
  yield takeEvery$1(actions43.submitPaymentMethodSuccess, submitPaymentMethodSuccess);
  yield takeEvery$1(actions43.updatePaymentMethodBillingDetails, updateBillingDetails);
}
function* loadPaymentMethod() {
  yield put(actions43.setLoading(true));
  try {
    const paymentMethods = yield call(api.subscriptions.getPaymentMethods);
    const paymentMethod = paymentMethods[0];
    yield put(actions43.setState({
      paymentMethod,
      loading: false,
      fetching: false
    }));
  } catch (e2) {
    yield put(actions43.setError(errorHandler(e2)));
  }
}
function* updateBillingDetails({
  payload
}) {
  yield put(actions43.setLoading(true));
  const {
    id,
    email,
    address,
    callback
  } = payload;
  try {
    yield call(api.subscriptions.updatePaymentMethodBillingDetails, id, _extends({
      email
    }, address));
    yield call(loadPaymentMethod);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions43.setError(errorHandler(e2)));
    callback == null ? void 0 : callback(false);
  }
  yield put(actions43.setLoading(false));
}
function* submitPaymentMethod() {
  yield put(actions43.setLoading(true));
}
function* submitPaymentMethodError({
  payload: error
}) {
  yield put(actions43.setError(error));
}
function* submitPaymentMethodSuccess() {
  yield put(actions43.loadPaymentMethod());
}
function* loadPaymentMethodMock() {
  yield put(actions43.setLoading(true));
  yield delay2(500);
  const paymentMethod = paymentMethodsMock[0];
  yield put(actions43.setState({
    paymentMethod,
    loading: false,
    fetching: false
  }));
}
function* subscriptionsPaymentMethodSagasMock() {
  yield takeEvery$1(actions43.loadPaymentMethod, loadPaymentMethodMock);
}
var init_saga13 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_PaymentMethod();
    init_rest_api();
    init_dummy3();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Invoices/saga.js
function* subscriptionInvoicesSagas() {
  yield takeEvery$1(actions44.loadInvoices, loadInvoices);
  yield takeEvery$1(actions44.downloadInvoice, downloadInvoice);
}
function* loadInvoices() {
  yield put(actions44.setLoading(true));
  try {
    const responseInvoices = yield call(api.subscriptions.getSubscriptionInvoices);
    const invoices = responseInvoices.map((invoice) => ({
      id: invoice.id,
      externalId: invoice.externalId,
      subscriptionId: invoice.subscriptionId,
      paymentDate: new Date(Date.parse(invoice.paymentDate)),
      totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2),
      currency: invoice.currency || "usd",
      paid: invoice.paid || false,
      receiptNumber: invoice.receiptNumber
    }));
    yield put(actions44.setState({
      loading: false,
      fetching: false,
      invoices
    }));
  } catch (e2) {
    yield put(actions44.setError(errorHandler(e2)));
  }
}
function* downloadInvoice({
  payload
}) {
  yield put(actions44.setInvoiceDownloadState({
    loading: true,
    error: null
  }));
  try {
    yield call(api.subscriptions.getSubscriptionInvoicePdf, payload.invoiceId, payload.filename);
    yield put(actions44.setInvoiceDownloadState({
      loading: false,
      error: null
    }));
  } catch (e2) {
    yield put(actions44.setInvoiceDownloadState({
      loading: false,
      error: errorHandler(e2, null)
    }));
  }
}
function* loadInvoicesMock() {
  yield put(actions44.setLoading(true));
  yield delay2(500);
  const selectPlanTitle = "Premium";
  yield put(actions44.setState({
    loading: false,
    fetching: false,
    invoices: invoicesMock.map((invoice) => _extends({}, invoice, {
      selectedPlan: selectPlanTitle,
      paymentDate: new Date(Date.parse(invoice.paymentDate)),
      totalAmount: +((invoice.totalAmount || 0) / 100).toFixed(2)
    }))
  }));
  yield put(actions44.setLoading(false));
}
function* subscriptionInvoicesSagasMock() {
  yield takeEvery$1(actions44.loadInvoices, loadInvoicesMock);
}
var init_saga14 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Invoices/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_Invoices();
    init_rest_api();
    init_dummy3();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/saga.js
function* subscriptionSagas() {
  yield takeEvery$1(actions41.load, loadSubscriptionTenant);
  yield takeEvery$1(actions41.cancelSubscription, cancelSubscription2);
  yield takeEvery$1(actions41.renewSubscription, renewSubscription2);
}
function* loadSubscriptionTenant() {
  const tenantId = yield select((state) => {
    var _state$auth, _state$auth$user;
    return (_state$auth = state.auth) == null ? void 0 : (_state$auth$user = _state$auth.user) == null ? void 0 : _state$auth$user.tenantId;
  });
  yield loadSummaries(tenantId);
}
function* cancelSubscription2() {
  const {
    subscription
  } = yield select((state) => state.subscriptions.billing.subscription);
  if (!subscription) {
    yield put(actions41.setCancellationError("Subscription not found."));
    return;
  }
  if (subscription != null && subscription.externallyManaged) {
    yield put(actions41.setCancellationError("Billing is externally managed."));
    return;
  }
  const {
    id: subscriptionId,
    cancellation,
    status
  } = subscription || {};
  const isCancellable = !cancellation && status === ISubscriptionStatus.ACTIVE;
  if (isCancellable) {
    try {
      yield put(actions41.setCancellationLoading(true));
      yield call(api.subscriptions.cancelManagedSubscription, subscriptionId);
      yield loadSubscription();
      yield put(actions41.setCancellationLoading(false));
    } catch (e2) {
      yield put(actions41.setCancellationError(errorHandler(e2)));
    }
  }
}
function* renewSubscription2() {
  const {
    subscription
  } = yield select((state) => state.subscriptions.billing.subscription);
  if (!subscription) {
    yield put(actions41.setCancellationError("Subscription not found."));
    return;
  }
  if (subscription != null && subscription.externallyManaged) {
    yield put(actions41.setCancellationError("Billing is externally managed"));
    return;
  }
  const {
    id: subscriptionId,
    cancellation
  } = subscription || {};
  const renewable = (cancellation == null ? void 0 : cancellation.policy) === ISubscriptionCancellationPolicy.AT_PERIOD_END;
  if (renewable) {
    try {
      yield put(actions41.setRenewalLoading(true));
      yield call(api.subscriptions.renewManagedSubscription, subscriptionId);
      yield loadSubscription();
      yield put(actions41.setRenewalLoading(false));
    } catch (e2) {
      yield put(actions41.setCancellationError(errorHandler(e2)));
    }
  }
}
function* loadMock() {
  yield put(actions41.setLoading(true));
  yield delay2(500);
  yield put(actions41.setState({
    subscription: subscriptionResponseMock,
    fetching: false,
    loading: false,
    error: null
  }));
}
function* subscriptionSagasMock() {
  yield takeEvery$1(actions41.load, loadMock);
}
var init_saga15 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_Subscription();
    init_rest_api();
    init_dummy3();
    init_saga12();
    init_utils5();
    init_loadSubscription_saga();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/saga.js
function* billingSagas() {
  yield all([call(subscriptionBillingInformationSagas), call(subscriptionsPaymentMethodSagas), call(subscriptionInvoicesSagas), call(subscriptionSagas)]);
}
function* billingSagasMock() {
  yield all([call(subscriptionBillingInformationSagasMock), call(subscriptionsPaymentMethodSagasMock), call(subscriptionInvoicesSagasMock), call(subscriptionSagasMock)]);
}
var init_saga16 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_saga12();
    init_saga13();
    init_saga14();
    init_saga15();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Checkout/saga.js
function* checkoutSagas() {
  yield takeEvery$1(actions45.loadCheckout, loadCheckout);
  yield takeEvery$1(actions45.resetCheckout, resetCheckout);
  yield takeEvery$1(actions45.submitCheckout, submitCheckout);
  yield takeEvery$1(actions45.confirmCheckout, confirmPlan);
  yield takeEvery$1(actions45.errorCheckout, errorCheckout);
}
function* loadCheckout() {
  yield put(actions45.setState({
    fetching: false,
    loading: false,
    error: null,
    confirmed: false
  }));
}
function* resetCheckout() {
  yield put(actions45.setState({
    loading: false,
    error: null,
    confirmed: false
  }));
}
function* submitCheckout() {
  yield put(actions45.setState({
    loading: true,
    error: null
  }));
}
function* confirmPlan({
  payload: {
    paymentMethodId,
    planId
  }
}) {
  const subscription = yield select((state) => state.subscriptions.billing.subscription.subscription);
  const summary = yield select((state) => state.subscriptions.billing.information.summary);
  const isTrialing = (subscription == null ? void 0 : subscription.status) === ISubscriptionStatus.TRIALING;
  const hasPaymentMethod = !!(summary != null && summary.paymentMethodId);
  if (!subscription) {
    yield put(actions45.setState({
      loading: false,
      error: "Subscription not found"
    }));
    return;
  }
  yield put(actions45.setState({
    loading: true,
    error: null
  }));
  if (isTrialing && hasPaymentMethod) {
    yield confirmCheckout();
    yield put(actions41.setState({
      subscription: _extends({}, subscription, {
        status: ISubscriptionStatus.ACTIVE
      })
    }));
    return;
  }
  try {
    yield call(api.subscriptions.updateManagedSubscription, subscription.id, {
      paymentMethodId,
      planId
    });
    yield all([loadBillingInformation(), loadPaymentMethod(), loadInvoices()]);
    yield confirmCheckout();
  } catch (e2) {
    yield put(actions45.setState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* confirmCheckout() {
  yield put(actions45.setState({
    loading: false,
    error: null,
    confirmed: true
  }));
}
function* errorCheckout({
  payload
}) {
  yield put(actions45.setState({
    loading: false,
    error: payload
  }));
}
function* checkoutSagasMock() {
  yield takeEvery$1(actions45.resetCheckout, resetCheckout);
}
var init_saga17 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Checkout/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_Checkout();
    init_rest_api();
    init_Subscription();
    init_saga12();
    init_saga13();
    init_saga14();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Plans/saga.js
function* plansSagas() {
  yield takeEvery$1(actions39.loadPlans, loadPlans);
}
function* loadPlans() {
  yield put(actions39.setLoading(true));
  try {
    const products = yield call(api.subscriptions.getSubscriptionPlans);
    const plans = products.map((item) => {
      var _item$price, _item$price2;
      return {
        id: item.id,
        name: item.name,
        description: item.description,
        price: ((_item$price = item.price) == null ? void 0 : _item$price.amount) || 0,
        currency: ((_item$price2 = item.price) == null ? void 0 : _item$price2.currency) || "usd",
        recurringInterval: "month",
        slug: item.slug
      };
    });
    yield put(actions39.setState({
      fetching: false,
      loading: false,
      plans
    }));
  } catch (e2) {
    yield put(actions39.setError(errorHandler(e2)));
  }
}
function* loadPlansMock() {
  yield put(actions39.setLoading(true));
  yield delay2(500);
  yield put(actions39.setState({
    fetching: false,
    loading: false,
    plans: planResponseMock.map((item) => {
      var _item$price3, _item$price4;
      return _extends({}, item, {
        price: ((_item$price3 = item.price) == null ? void 0 : _item$price3.amount) || 0,
        currency: ((_item$price4 = item.price) == null ? void 0 : _item$price4.currency) || "usd",
        recurringInterval: "month"
      });
    })
  }));
}
function* plansSagasMock() {
  yield takeEvery$1(actions39.loadPlans, loadPlansMock);
}
var init_saga18 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Plans/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_Plans();
    init_rest_api();
    init_dummy3();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Checkout/interfaces.js
var init_interfaces41 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Checkout/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Information/interfaces.js
var init_interfaces42 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Information/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/interfaces.js
var PaymentMethodType2;
var init_interfaces43 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/PaymentMethod/interfaces.js"() {
    (function(PaymentMethodType3) {
      PaymentMethodType3["UNKNWON"] = "unknown";
      PaymentMethodType3["CARD"] = "card";
    })(PaymentMethodType2 || (PaymentMethodType2 = {}));
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Invoices/interfaces.js
var init_interfaces44 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Invoices/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/interfaces.js
var init_interfaces45 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/Subscription/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Billing/interfaces.js
var init_interfaces46 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Billing/interfaces.js"() {
    init_interfaces42();
    init_interfaces43();
    init_interfaces44();
    init_interfaces45();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Plans/interfaces.js
var init_interfaces47 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Plans/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Config/interfaces.js
var init_interfaces48 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Config/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Stripe/interfaces.js
var init_interfaces49 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Stripe/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/VendorPublicConfig/interfaces.js
var init_interfaces50 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/VendorPublicConfig/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/subscriptions/interfaces.js
var init_interfaces51 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/interfaces.js"() {
    init_general_interfaces();
    init_interfaces41();
    init_interfaces46();
    init_interfaces47();
    init_interfaces48();
    init_interfaces49();
    init_interfaces50();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Config/saga.js
function* configSagas() {
  yield takeEvery$1(actions40.loadPaymentConfiguration, loadPaymentConfiguration);
}
function* loadPaymentConfiguration() {
  yield put(actions40.setLoading(true));
  try {
    const response = yield call(api.subscriptions.getPaymentProviders) || [];
    const stripePaymentProvider = response.find((paymentProvider) => paymentProvider.status === "1" && paymentProvider.providerType === ProviderType.Stripe);
    if (stripePaymentProvider) {
      yield loadStripePaymentConfiguration();
    } else {
      yield put(actions40.setError("Payment provider not configured"));
    }
  } catch (e2) {
    yield put(actions40.setError(errorHandler(e2)));
  }
}
function* loadStripePaymentConfiguration() {
  yield put(actions40.setLoading(true));
  try {
    const response = yield call(api.subscriptions.getStripePaymentProviderConfiguration);
    yield put(actions40.setState({
      loading: false,
      fetching: false,
      config: {
        paymentProvider: PaymentProvider.STRIPE,
        apiKey: response.publishableKey
      }
    }));
  } catch (e2) {
    yield put(actions40.setError(errorHandler(e2)));
  }
}
function* loadPaymentConfigurationMock() {
  yield put(actions40.setLoading(true));
  yield delay2(500);
  yield put(actions40.setState({
    loading: false,
    fetching: false,
    config: {
      paymentProvider: PaymentProvider.STRIPE,
      apiKey: ""
    }
  }));
}
function* configSagasMock() {
  yield takeEvery$1(actions40.loadPaymentConfiguration, loadPaymentConfigurationMock);
}
var init_saga19 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Config/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_Config();
    init_rest_api();
    init_interfaces51();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/Stripe/saga.js
function* subscriptionStripeSagas() {
  yield takeEvery$1(actions46.createCardSetupIntentSecret, createCardSetupIntentSecret);
}
function* createCardSetupIntentSecret({
  payload
}) {
  yield put(actions46.setState({
    loading: true,
    error: null,
    cardSetupIntentSecret: null
  }));
  try {
    const request = {};
    if (payload) {
      request.paymentMethodId = payload;
    }
    const {
      setupIntentSecret
    } = yield call(api.subscriptions.createStripePaymentMethodSetupIntentSecret, request);
    yield put(actions46.setState({
      cardSetupIntentSecret: setupIntentSecret,
      loading: false
    }));
  } catch (e2) {
    yield put(actions46.setError(errorHandler(e2)));
  }
}
var init_saga20 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/Stripe/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_Stripe();
    init_rest_api();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/VendorPublicConfig/saga.js
function* vendorPublicConfigSagas() {
  yield takeEvery$1(actions47.loadVendorPublicConfiguration, loadVendorPublicConfiguration);
}
function* loadVendorPublicConfiguration() {
  yield put(actions47.setLoading(true));
  try {
    const vendorPublicConfig = yield call(api.subscriptions.getVendorPublicConfigurations);
    yield put(actions47.setState({
      fetching: false,
      loading: false,
      vendorPublicConfig
    }));
  } catch (e2) {
    yield put(actions47.setError(errorHandler(e2)));
  }
}
function* loadVendorPublicConfigurationMock() {
  yield put(actions47.setLoading(true));
  yield delay2(500);
  yield put(actions47.setState({
    fetching: false,
    loading: false,
    vendorPublicConfig: vendorPublicConfigurationResponseMock
  }));
}
function* vendorPublicConfigSagasMock() {
  yield takeEvery$1(actions47.loadVendorPublicConfiguration, loadVendorPublicConfigurationMock);
}
var init_saga21 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/VendorPublicConfig/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_VendorPublicConfig();
    init_rest_api();
    init_dummy3();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/saga.js
function* sagas5() {
  yield all([call(billingSagas), call(checkoutSagas), call(plansSagas), call(configSagas), call(subscriptionStripeSagas), call(vendorPublicConfigSagas)]);
}
function* mockSagas2() {
  yield all([call(billingSagasMock), call(checkoutSagasMock), call(plansSagasMock), call(configSagasMock), call(vendorPublicConfigSagasMock)]);
}
var init_saga22 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_saga16();
    init_saga17();
    init_saga18();
    init_saga19();
    init_saga20();
    init_saga21();
  }
});

// node_modules/@frontegg/redux-store/subscriptions/index.js
var subscriptions_default;
var init_subscriptions3 = __esm({
  "node_modules/@frontegg/redux-store/subscriptions/index.js"() {
    init_constants3();
    init_reducer6();
    init_saga22();
    init_interfaces51();
    subscriptions_default = {
      sagas: sagas5,
      mockSagas: mockSagas2,
      reducer: reducer15,
      actions: actions48,
      initialState: initialState7,
      storeName: subscriptionsStoreName
    };
  }
});

// node_modules/@frontegg/redux-store/vendor/interfaces.js
var init_interfaces52 = __esm({
  "node_modules/@frontegg/redux-store/vendor/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/vendor/index.js
var vendor_default;
var init_vendor2 = __esm({
  "node_modules/@frontegg/redux-store/vendor/index.js"() {
    init_reducer2();
    init_saga5();
    init_constants3();
    init_interfaces52();
    vendor_default = {
      sagas,
      storeName: vendorStoreName,
      initialState: initialState2,
      reducer: reducer2,
      actions: actions32
    };
  }
});

// node_modules/@frontegg/redux-store/toolkit/redux.js
var init_redux2 = __esm({
  "node_modules/@frontegg/redux-store/toolkit/redux.js"() {
    init_redux_toolkit_esm();
  }
});

// node_modules/@frontegg/redux-store/toolkit/FronteggNativeModule.js
var FronteggNativeModule, FronteggNativeModule_default;
var init_FronteggNativeModule = __esm({
  "node_modules/@frontegg/redux-store/toolkit/FronteggNativeModule.js"() {
    FronteggNativeModule = class {
      constructor() {
        this.loginWithSSO = (email) => {
          if (this.isWebkitAvailable()) {
            var _window$webkit, _window$webkit$messag, _window$webkit$messag2;
            (_window$webkit = window.webkit) == null ? void 0 : (_window$webkit$messag = _window$webkit.messageHandlers) == null ? void 0 : (_window$webkit$messag2 = _window$webkit$messag.FronteggNativeBridge) == null ? void 0 : _window$webkit$messag2.postMessage(JSON.stringify({
              action: "loginWithSSO",
              payload: email
            }));
          } else if (this.isJsInterfaceAvailable()) {
            var _window$FronteggNativ;
            (_window$FronteggNativ = window.FronteggNativeBridge) == null ? void 0 : _window$FronteggNativ.loginWithSSO(email);
          } else {
            throw new Error("FronteggNativeBridge is not available");
          }
        };
        this.loginWithSocialLogin = (url) => {
          if (this.isWebkitAvailable()) {
            var _window$webkit2, _window$webkit2$messa, _window$webkit2$messa2;
            (_window$webkit2 = window.webkit) == null ? void 0 : (_window$webkit2$messa = _window$webkit2.messageHandlers) == null ? void 0 : (_window$webkit2$messa2 = _window$webkit2$messa.FronteggNativeBridge) == null ? void 0 : _window$webkit2$messa2.postMessage(JSON.stringify({
              action: "loginWithSocialLogin",
              payload: url
            }));
          } else if (this.isJsInterfaceAvailable()) {
            var _window$FronteggNativ2;
            (_window$FronteggNativ2 = window.FronteggNativeBridge) == null ? void 0 : _window$FronteggNativ2.loginWithSocialLogin(url);
          } else {
            throw new Error("FronteggNativeBridge is not available");
          }
        };
        this.promptSocialLoginConsent = () => {
          var _window$FronteggNativ3, _window$FronteggNativ4;
          return (_window$FronteggNativ3 = (_window$FronteggNativ4 = window.FronteggNativeBridgeFunctions) == null ? void 0 : _window$FronteggNativ4["shouldPromptSocialLoginConsent"]) != null ? _window$FronteggNativ3 : false;
        };
      }
      isWebkitAvailable() {
        var _window$webkit3, _window$webkit3$messa;
        return ((_window$webkit3 = window.webkit) == null ? void 0 : (_window$webkit3$messa = _window$webkit3.messageHandlers) == null ? void 0 : _window$webkit3$messa.FronteggNativeBridge) != null;
      }
      isJsInterfaceAvailable() {
        return window.FronteggNativeBridge != null;
      }
      isAvailable(method) {
        if (this.isWebkitAvailable() || this.isJsInterfaceAvailable()) {
          var _window$FronteggNativ5, _window$FronteggNativ6;
          return (_window$FronteggNativ5 = (_window$FronteggNativ6 = window.FronteggNativeBridgeFunctions) == null ? void 0 : _window$FronteggNativ6[method]) != null ? _window$FronteggNativ5 : false;
        }
        return false;
      }
    };
    FronteggNativeModule_default = new FronteggNativeModule();
  }
});

// node_modules/@frontegg/redux-store/toolkit/index.js
var initialState8, rootReducer, createFronteggStore;
var init_toolkit = __esm({
  "node_modules/@frontegg/redux-store/toolkit/index.js"() {
    init_extends();
    init_auth2();
    init_redux_toolkit_esm();
    init_redux_saga_tools();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_auth2();
    init_audits2();
    init_backward_compatibility();
    init_connectivity2();
    init_subscriptions3();
    init_vendor2();
    init_redux2();
    init_FronteggNativeModule();
    init_redux_saga_tools();
    init_redux_toolkit_esm();
    initialState8 = {
      context: void 0,
      urlStrategy: "path",
      previewMode: false,
      appName: "default"
    };
    ({
      reducer: rootReducer
    } = createSlice({
      name: "root",
      initialState: initialState8,
      reducers: {
        setContext: {
          prepare: (context) => ({
            payload: context
          }),
          reducer: (state, {
            payload
          }) => {
            ContextHolder.setContext(payload);
            return _extends({}, state, {
              context: payload
            });
          }
        }
      }
    }));
    createFronteggStore = (rootInitialState, storeHolder, previewMode = false, authInitialState, overrideInitialState, builderMode = false, urlStrategy = "path") => {
      const isSSR = typeof window === "undefined";
      let holder = storeHolder;
      if (isSSR && storeHolder == null) {
        throw Error("createFronteggStore(initState, storeHolder) failed, storeHolder must not be null in Server-Side rendering");
      }
      if (!holder) {
        holder = window;
      }
      if (!holder.store) {
        var _overrideInitialState, _authInitialState$rou, _overrideInitialState2, _overrideInitialState3, _overrideInitialState4, _overrideInitialState5, _overrideInitialState6, _overrideInitialState7, _overrideInitialState8, _overrideInitialState9;
        if (!previewMode && !builderMode) {
          ContextHolder.setContext(rootInitialState.context);
        }
        const sagaMiddleware = redux_saga_core_npm_proxy_esm_default();
        const middleware = [...getDefaultMiddleware({
          thunk: false,
          immutableCheck: false,
          serializableCheck: false
        }), sagaMiddleware];
        holder.store = configureStore({
          middleware,
          preloadedState: {
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            root: _extends({}, rootInitialState, {
              previewMode,
              urlStrategy
            }),
            [auth_default.storeName]: _extends({}, auth_default.initialState, authInitialState, (_overrideInitialState = overrideInitialState == null ? void 0 : overrideInitialState.auth) != null ? _overrideInitialState : {}, {
              routes: _extends({}, auth_default.initialState.routes, (_authInitialState$rou = authInitialState == null ? void 0 : authInitialState.routes) != null ? _authInitialState$rou : {}, (_overrideInitialState2 = overrideInitialState == null ? void 0 : (_overrideInitialState3 = overrideInitialState.auth) == null ? void 0 : _overrideInitialState3.routes) != null ? _overrideInitialState2 : {})
            }),
            [audits_default.storeName]: _extends({}, audits_default.initialState, (_overrideInitialState4 = overrideInitialState == null ? void 0 : overrideInitialState.auditLogs) != null ? _overrideInitialState4 : {}, {
              auditLogsState: _extends({}, audits_default.initialState.auditLogsState, (_overrideInitialState5 = overrideInitialState == null ? void 0 : (_overrideInitialState6 = overrideInitialState.auditLogs) == null ? void 0 : _overrideInitialState6.auditLogsState) != null ? _overrideInitialState5 : {}),
              auditsMetadataState: _extends({}, audits_default.initialState.auditsMetadataState, (_overrideInitialState7 = overrideInitialState == null ? void 0 : (_overrideInitialState8 = overrideInitialState.auditLogs) == null ? void 0 : _overrideInitialState8.auditsMetadataState) != null ? _overrideInitialState7 : {})
            }),
            [storeName]: _extends({}, initialState4, (_overrideInitialState9 = overrideInitialState == null ? void 0 : overrideInitialState.audits) != null ? _overrideInitialState9 : {}),
            [connectivity_default.storeName]: connectivity_default.initialState,
            [subscriptions_default.storeName]: subscriptions_default.initialState,
            [vendor_default.storeName]: vendor_default.initialState
          },
          reducer: combineReducers({
            root: rootReducer,
            [auth_default.storeName]: auth_default.reducer,
            [audits_default.storeName]: audits_default.reducer,
            [storeName]: reducer4,
            [connectivity_default.storeName]: connectivity_default.reducer,
            [subscriptions_default.storeName]: subscriptions_default.reducer,
            [vendor_default.storeName]: vendor_default.reducer
          })
        });
        const rootSaga = function* () {
          yield all([call(auth_default.sagas), call(audits_default.sagas), call(sagas3), call(connectivity_default.sagas), call(subscriptions_default.sagas), call(vendor_default.sagas)]);
        };
        const rootMockSaga = function* () {
          yield all([call(auth_default.mockSagas), call(audits_default.mockSagas), call(subscriptions_default.mockSagas)]);
        };
        if (previewMode) {
          holder.store.destroy = sagaMiddleware.run(rootMockSaga).cancel;
          holder.store.dispatch(actions30.requestAuthorize(true));
        } else {
          holder.store.destroy = sagaMiddleware.run(rootSaga).cancel;
        }
        holder.store.subscribeStateChanged = (callback) => {
          let lastStoreState = holder.store.getState();
          return holder.store.subscribe(() => {
            const updatedState = holder.store.getState();
            if (lastStoreState != updatedState) {
              lastStoreState = updatedState;
              callback(updatedState);
            }
          });
        };
      }
      return holder.store;
    };
  }
});

// node_modules/@frontegg/redux-store/auth/PasskeysState/helpers.js
var getPasskeysVendorPolicy;
var init_helpers2 = __esm({
  "node_modules/@frontegg/redux-store/auth/PasskeysState/helpers.js"() {
    init_rest_api();
    getPasskeysVendorPolicy = (policy) => {
      var _policy$secondaryAuth;
      return !!(policy != null && (_policy$secondaryAuth = policy.secondaryAuthStrategies) != null && _policy$secondaryAuth.some(({
        isActive,
        strategy
      }) => isActive && strategy === SecondaryAuthStrategy.Passkeys));
    };
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/saga.utils.js
function* shouldShowPromptPasskeys() {
  const {
    publicAuthStrategyPolicy
  } = yield select((state) => state.auth.securityPolicyState);
  const {
    policy
  } = publicAuthStrategyPolicy;
  const isPasskeysEnabledByVendor = getPasskeysVendorPolicy(policy);
  const isLoggedInWithPasskeys = localStorage.getItem("preferred-login-method") === "Passkeys";
  const isMarkedDontShowAgainPrompt = localStorage.getItem("dont-show-again-prompt-passkeys") === "true";
  const [showPasskeys] = yield call(getFeatureFlags, ["show-passkeys-new"]);
  if (!showPasskeys || !isPasskeysEnabledByVendor || isLoggedInWithPasskeys || isMarkedDontShowAgainPrompt) {
    return false;
  } else {
    const {
      devices
    } = yield call(api.auth.getWebAuthnDevices);
    yield put(actions30.setPasskeysState({
      devices: devices != null ? devices : []
    }));
    const numOfDevices = !(devices != null && devices.length) ? 0 : devices.length;
    return numOfDevices === 0;
  }
}
function* afterAuthenticationStateUpdate({
  user,
  tenants = [],
  activeTenant
}, additionalUpdate = {}) {
  const {
    tenantsState: currentTenantsState
  } = yield select((state) => state.auth);
  yield put(actions30.setState(_extends({
    user,
    tenantsState: _extends({}, currentTenantsState, {
      tenants,
      activeTenant,
      loading: false
    })
  }, additionalUpdate)));
}
var init_saga_utils = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/saga.utils.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_helpers2();
    init_helpers();
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/afterAuthNavigation.saga.js
function cleanUrlIfSameOrigin(url) {
  var _window, _window2;
  if (!url.startsWith((_window = window) == null ? void 0 : _window.location.origin)) {
    return url;
  }
  return url.replace((_window2 = window) == null ? void 0 : _window2.location.origin, "");
}
function* getUrlForAfterAuthNavigation(customLoginAuthenticatedUrl) {
  const {
    routes,
    includeQueryParam,
    enforceRedirectToSameSite = false,
    allowedRedirectOrigins = []
  } = yield select((state) => state.auth);
  if (customLoginAuthenticatedUrl) {
    return getPathAndSearchParamsFromUrl(customLoginAuthenticatedUrl);
  }
  const {
    authenticatedUrl,
    loginUrl,
    logoutUrl,
    socialLoginCallbackUrl,
    activateUrl
  } = routes;
  let finalUrl = window.localStorage.getItem(FRONTEGG_AFTER_AUTH_REDIRECT_URL);
  if (!finalUrl || [loginUrl, logoutUrl, socialLoginCallbackUrl, activateUrl].includes(finalUrl)) {
    finalUrl = authenticatedUrl;
  }
  const redirectUrl = getRedirectUrl({
    authenticatedUrl: finalUrl,
    includeQueryParam,
    enforceRedirectToSameSite,
    allowedRedirectOrigins
  });
  return cleanUrlIfSameOrigin(redirectUrl);
}
function* afterAuthNavigationUtil(resetStateAction, {
  customLoginAuthenticatedUrl,
  forceStepUpUrl,
  shouldStepUpDuringLogin
} = {}) {
  const onRedirectTo = ContextHolder.onRedirectTo;
  let redirectUrl = void 0;
  if (forceStepUpUrl) {
    redirectUrl = forceStepUpUrl;
  } else {
    var _window3;
    if (shouldStepUpDuringLogin) {
      const localStorageRedirectUrl = window.localStorage.getItem(FRONTEGG_AFTER_AUTH_REDIRECT_URL);
      if (localStorageRedirectUrl && !isAbsoluteUrl(localStorageRedirectUrl)) {
        redirectUrl = localStorageRedirectUrl;
      }
    }
    if (!redirectUrl) {
      redirectUrl = yield call(getUrlForAfterAuthNavigation, customLoginAuthenticatedUrl);
    }
    (_window3 = window) == null ? void 0 : _window3.localStorage.removeItem(FRONTEGG_AFTER_AUTH_REDIRECT_URL);
  }
  yield delay2(200);
  put(resetStateAction());
  onRedirectTo(redirectUrl, {
    refresh: redirectUrl.startsWith("http")
  });
}
function* afterAuthNavigation() {
  var _window4;
  const {
    routes: {
      customLoginAuthenticatedUrl,
      stepUpUrl
    }
  } = yield select((state) => state.auth);
  const shouldStepUp = (_window4 = window) == null ? void 0 : _window4.localStorage.getItem(SHOULD_STEP_UP_KEY);
  const user = yield select(({
    auth
  }) => auth.user);
  if (shouldStepUp) {
    var _window5;
    (_window5 = window) == null ? void 0 : _window5.localStorage.removeItem(SHOULD_STEP_UP_KEY);
  }
  if (stepUpUrl && shouldStepUp && !isSteppedUp(user)) {
    yield call(afterAuthNavigationUtil, actions30.resetLoginState, {
      forceStepUpUrl: stepUpUrl
    });
    return;
  }
  let customLoginURL = customLoginAuthenticatedUrl;
  if (!customLoginAuthenticatedUrl) {
    yield call(loadCustomLoginRoutes);
    customLoginURL = yield select((state) => {
      var _state$auth$routes;
      return (_state$auth$routes = state.auth.routes) == null ? void 0 : _state$auth$routes.customLoginAuthenticatedUrl;
    });
  }
  yield call(afterAuthNavigationUtil, actions30.resetLoginState, {
    customLoginAuthenticatedUrl: customLoginURL,
    shouldStepUpDuringLogin: !!shouldStepUp
  });
}
function* afterStepUpAuthNavigation() {
  yield call(afterAuthNavigationUtil, actions30.resetStepUpState);
}
var init_afterAuthNavigation_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/afterAuthNavigation.saga.js"() {
    init_rest_api();
    init_redux_saga_effects_npm_proxy_esm();
    init_saga();
    init_reducer();
    init_utils3();
    init_constants3();
    init_StepUpState();
    init_consts2();
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/handleVerifyMFAResponse.saga.js
function* postHandleVerifyMFAResponseForStepUp() {
  yield call(afterStepUpAuthNavigation);
}
function* postHandleVerifyMFAResponseForLogin(isAuthenticated) {
  const {
    loginState: loginState2
  } = yield select((state) => state.auth);
  const {
    step: mfaStep
  } = yield select((state) => state.auth.mfaState);
  const [securityCenterLoginFlows] = yield call(getFeatureFlags, ["security-center-show-login-flows"]);
  if (loginState2.flow === LoginFlow.Login) {
    if (securityCenterLoginFlows && loginState2.isBreachedPassword && !isAuthenticated) {
      yield put(actions30.setLoginState({
        step: LoginStep.breachedPassword,
        loading: false
      }));
    } else {
      const shouldShowPrompt = yield call(shouldShowPromptPasskeys);
      if (mfaStep === MFAStep.smsVerifyCode && shouldShowPrompt) {
        yield put(actions30.setLoginState({
          step: LoginStep.promptPasskeys,
          loading: false
        }));
      } else {
        yield afterAuthNavigation();
      }
    }
  }
}
function* handleVerifyMFAResponse({
  user,
  tenants,
  activeTenant
}, isStepUp = false) {
  yield put(actions30.setUser(user));
  yield put(actions30.setTenantsState({
    tenants,
    activeTenant,
    loading: false
  }));
  if (user.id) {
    localStorage.setItem("userId", user.id);
  }
  const isAuthenticated = !!user.accessToken;
  yield put(actions30.setState({
    isAuthenticated
  }));
  if (isStepUp) {
    yield call(postHandleVerifyMFAResponseForStepUp);
    return;
  }
  yield call(postHandleVerifyMFAResponseForLogin, isAuthenticated);
}
var init_handleVerifyMFAResponse_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/handleVerifyMFAResponse.saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_interfaces26();
    init_reducer();
    init_interfaces25();
    init_saga_utils();
    init_afterAuthNavigation_saga();
    init_helpers();
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithSMS.saga.js
function* preVerifyMFASMS(_ref, setLoadingAction) {
  let {
    callback,
    deviceId
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref, _excluded15);
  yield put(setLoadingAction({
    loading: false,
    error: void 0
  }));
  try {
    const data = yield call(api.auth.preVerifyMFASMSForLogin, deviceId, payload);
    yield put(actions30.setMfaState({
      otcToken: data.otcToken,
      step: MFAStep.smsVerifyCode,
      phoneNumber: data.phoneNumber
    }));
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(setLoadingAction({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* verifyMFASMS(_ref2, setLoadingAction, isStepUp = false) {
  let {
    callback,
    deviceId
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2, _excluded28);
  yield put(setLoadingAction({
    loading: true
  }));
  try {
    const data = yield call(api.auth.verifyMFASMSForLoginV2, deviceId, payload);
    yield handleVerifyMFAResponse(data, isStepUp);
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(setLoadingAction({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* preVerifyMFASMSForLogin2({
  payload
}) {
  yield preVerifyMFASMS(payload, actions30.setLoginState);
}
function* verifyMFASMSForLogin2({
  payload
}) {
  yield verifyMFASMS(payload, actions30.setLoginState, false);
}
var _excluded15, _excluded28;
var init_mfaWithSMS_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithSMS.saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_utils5();
    init_interfaces26();
    init_reducer();
    init_handleVerifyMFAResponse_saga();
    _excluded15 = ["callback", "deviceId"];
    _excluded28 = ["callback", "deviceId"];
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithAuthenticator.saga.js
function* buildPostAuthStateUpdate(tenants, isAuthenticated, isStepUp) {
  const {
    loginState: loginState2
  } = yield select((state) => state.auth);
  let additionalUpdate = {};
  if (!isStepUp) {
    const step = loginState2.flow === LoginFlow.Login ? LoginStep.success : loginState2.step;
    additionalUpdate = {
      loginState: {
        flow: loginState2.flow,
        quickLoginToRegister: loginState2.quickLoginToRegister,
        loading: false,
        step,
        error: void 0,
        tenants
      }
    };
  }
  return _extends({}, additionalUpdate, {
    isAuthenticated
  });
}
function* postLoginMfaAuthenticator(isAuthenticated, callback) {
  const {
    loginState: loginState2
  } = yield select((state) => state.auth);
  if (loginState2.flow !== LoginFlow.Login)
    return;
  const [securityCenterLoginFlows] = yield call(getFeatureFlags, ["security-center-show-login-flows"]);
  if (securityCenterLoginFlows && loginState2.isBreachedPassword && !isAuthenticated) {
    yield put(actions30.setLoginState({
      step: LoginStep.breachedPassword,
      loading: false
    }));
  } else {
    const shouldShowPrompt = yield call(shouldShowPromptPasskeys);
    if (shouldShowPrompt) {
      yield put(actions30.setLoginState({
        step: LoginStep.promptPasskeys,
        loading: false
      }));
    } else {
      yield afterAuthNavigation();
    }
  }
  callback == null ? void 0 : callback(true);
}
function* postStepUpMfaAuthenticator(callback) {
  yield afterStepUpAuthNavigation();
  callback == null ? void 0 : callback(true);
}
function* mfaWithAuthenticator(_ref, setLoadingAction, isStepUp) {
  let {
    callback
  } = _ref, loginWithMfaPayload = _objectWithoutPropertiesLoose(_ref, _excluded16);
  yield put(setLoadingAction({
    loading: true,
    error: void 0
  }));
  try {
    const {
      user,
      tenants = [],
      activeTenant
    } = yield call(api.auth.loginWithMfaV2, loginWithMfaPayload);
    const isAuthenticated = !!user.accessToken;
    const additionalUpdate = yield call(buildPostAuthStateUpdate, tenants, isAuthenticated, isStepUp);
    yield call(afterAuthenticationStateUpdate, {
      user,
      tenants,
      activeTenant
    }, additionalUpdate);
    if (user.id) {
      localStorage.setItem("userId", user.id);
    }
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    if (isStepUp) {
      yield call(postStepUpMfaAuthenticator, callback);
      return;
    }
    yield call(postLoginMfaAuthenticator, isAuthenticated, callback);
  } catch (e2) {
    yield put(setLoadingAction({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* loginWithMfa2({
  payload
}) {
  yield mfaWithAuthenticator(payload, actions30.setLoginState, false);
}
var _excluded16;
var init_mfaWithAuthenticator_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithAuthenticator.saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces25();
    init_saga_utils();
    init_afterAuthNavigation_saga();
    init_helpers();
    init_utils5();
    _excluded16 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithEmailCode.saga.js
function* preVerifyMFAEmailCode2(_ref, setLoadingAction) {
  let {
    callback
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref, _excluded17);
  yield put(setLoadingAction({
    loading: true,
    error: void 0
  }));
  try {
    const data = yield call(api.auth.preVerifyMFAEmailCode, payload);
    yield put(actions30.setMfaState({
      otcToken: data.otcToken,
      step: MFAStep.emailVerifyCode
    }));
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(setLoadingAction({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* verifyMFAEmailCode2(_ref2, setLoadingAction) {
  let {
    callback
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2, _excluded29);
  yield put(setLoadingAction({
    loading: true
  }));
  try {
    const data = yield call(api.auth.verifyMFAEmailCodeV2, payload);
    yield handleVerifyMFAResponse(data);
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(setLoadingAction({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* preVerifyMFAEmailCodeForLogin({
  payload
}) {
  yield preVerifyMFAEmailCode2(payload, actions30.setLoginState);
}
function* verifyMFAEmailCodeForLogin({
  payload
}) {
  yield verifyMFAEmailCode2(payload, actions30.setLoginState);
}
var _excluded17, _excluded29;
var init_mfaWithEmailCode_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithEmailCode.saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_utils5();
    init_interfaces26();
    init_reducer();
    init_handleVerifyMFAResponse_saga();
    _excluded17 = ["callback"];
    _excluded29 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithWebAuthn.saga.js
function* preVerifyMFAWebAuthn(_ref, setLoadingAction) {
  let {
    callback,
    deviceId
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref, _excluded18);
  yield put(setLoadingAction({
    loading: true
  }));
  try {
    var _data$options$allowCr;
    const data = yield call(api.auth.preVerifyMFAWebAuthnForLogin, deviceId, payload);
    const options = _extends({}, data.options, {
      challenge: base64urlDecode(data.options.challenge),
      allowCredentials: (_data$options$allowCr = data.options.allowCredentials) == null ? void 0 : _data$options$allowCr.map((credentials) => _extends({}, credentials, {
        id: base64urlDecode(credentials.id)
      }))
    });
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback({
      options,
      webauthnToken: data.webauthnToken
    });
  } catch (e2) {
    yield put(setLoadingAction({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* verifyMFAWebAuthn(_ref2, setLoadingAction, isStepUp) {
  let {
    callback,
    deviceId
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2, _excluded210);
  yield put(setLoadingAction({
    loading: true
  }));
  try {
    const publicKey = publicKeyCredentialToJSON(payload.publicKey);
    const data = yield call(api.auth.verifyMFAWebAuthnForLoginV2, deviceId, _extends({}, payload, {
      options: publicKey
    }));
    yield handleVerifyMFAResponse(data, isStepUp);
    yield put(setLoadingAction({
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(setLoadingAction({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* preVerifyMFAWebAuthnForLogin2({
  payload
}) {
  yield preVerifyMFAWebAuthn(payload, actions30.setLoginState);
}
function* verifyMFAWebAuthnForLogin2({
  payload
}) {
  yield verifyMFAWebAuthn(payload, actions30.setLoginState, false);
}
var _excluded18, _excluded210;
var init_mfaWithWebAuthn_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/mfaWithWebAuthn.saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_utils5();
    init_reducer();
    init_utils();
    init_handleVerifyMFAResponse_saga();
    _excluded18 = ["callback", "deviceId"];
    _excluded210 = ["callback", "deviceId"];
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/sagas/index.js
var init_sagas = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/sagas/index.js"() {
    init_afterAuthNavigation_saga();
    init_handleVerifyMFAResponse_saga();
    init_mfaWithSMS_saga();
    init_mfaRequiredState_saga();
    init_mfaWithAuthenticator_saga();
    init_mfaWithEmailCode_saga();
    init_mfaWithWebAuthn_saga();
  }
});

// node_modules/@frontegg/redux-store/auth/LoginState/saga.js
function* handleUnnecessaryEntitlementsUpdate(updatedUser) {
  const oldEntitlements = yield select((state) => {
    var _state$auth$user;
    return (_state$auth$user = state.auth.user) == null ? void 0 : _state$auth$user.entitlements;
  });
  if (isEntitlementsDeeplyEqual(oldEntitlements, updatedUser == null ? void 0 : updatedUser.entitlements)) {
    return _extends({}, updatedUser, {
      entitlements: oldEntitlements
    });
  }
  return updatedUser;
}
function* refreshMetadata() {
  let ssoACS;
  try {
    var _metadata$configurati;
    const metadata = yield call(api.metadata.getSamlMetadata);
    ssoACS = metadata == null ? void 0 : (_metadata$configurati = metadata.configuration) == null ? void 0 : _metadata$configurati.acsUrl;
  } catch (e2) {
    console.error(e2);
  }
  yield put(actions30.setState({
    ssoACS
  }));
}
function* loadSSOPublicConfigurationFunction() {
  try {
    const {
      isActive
    } = yield call(api.auth.getSSOPublicConfiguration);
    yield put(actions30.setState({
      isSSOAuth: isActive
    }));
  } catch (e2) {
    console.error(e2);
  }
}
function* shouldNevigateToRegisterQuickLogin(user) {
  var _ref;
  const {
    routes,
    loginState: loginState2
  } = yield select((state) => state.auth);
  const quickLoginToRegister = (_ref = localStorage.getItem("register-quick-login")) != null ? _ref : loginState2.quickLoginToRegister;
  return quickLoginToRegister && localStorage.getItem(`${user.id}-${quickLoginToRegister}`) !== "true" && !window.location.pathname.endsWith(routes.logoutUrl);
}
function* refreshToken2() {
  const {
    hostedLoginBox
  } = yield select((state) => state.auth);
  if (hostedLoginBox) {
    yield call(refreshTokenHosted);
  } else {
    yield call(refreshTokenEmbedded);
  }
}
function* refreshTokenForSocialLogins() {
  const {
    hostedLoginBox
  } = yield select((state) => state.auth);
  if (hostedLoginBox) {
    yield call(refreshTokenHostedSocialLogins);
  } else {
    yield call(refreshTokenEmbeddedSocialLogins);
  }
}
function* refreshTokenHosted() {
  const {
    user
  } = yield select((state) => state.auth);
  if (!(user != null && user.refreshToken)) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setState({
      user: null,
      isAuthenticated: false
    }));
    return;
  }
  try {
    const body = {
      grant_type: "refresh_token",
      refresh_token: user == null ? void 0 : user.refreshToken
    };
    const response = yield call(api.auth.exchangeOAuthTokensV2, body);
    const updatedUser = yield call(handleUnnecessaryEntitlementsUpdate, response.user);
    yield call(afterAuthenticationStateUpdate, _extends({}, response, {
      user: updatedUser
    }), {
      isAuthenticated: true
    });
  } catch (e2) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setState({
      user: null,
      isAuthenticated: false
    }));
  }
}
function* refreshTokenHostedSocialLogins() {
  const {
    user: currentUser
  } = yield select((state) => state.auth);
  if (!(currentUser != null && currentUser.refreshToken)) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setState({
      user: null,
      isAuthenticated: false
    }));
    return;
  }
  try {
    const body = {
      grant_type: "refresh_token",
      refresh_token: currentUser == null ? void 0 : currentUser.refreshToken
    };
    const response = yield call(api.auth.exchangeOAuthTokensV2, body);
    const updatedUser = yield call(handleUnnecessaryEntitlementsUpdate, response.user);
    yield call(afterAuthenticationStateUpdate, _extends({}, response, {
      user: updatedUser
    }), {
      isAuthenticated: true
    });
  } catch (e2) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setState({
      user: null,
      isAuthenticated: false
    }));
  }
}
function* refreshTokenEmbedded() {
  try {
    const onRedirectTo = ContextHolder.onRedirectTo;
    const {
      routes,
      loginState: loginState2
    } = yield select((state) => state.auth);
    const {
      user,
      tenants = [],
      activeTenant
    } = yield call(api.auth.refreshTokenV3);
    if (isMfaRequired(user)) {
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      var _ref2;
      if (user.id) {
        localStorage.setItem("userId", user.id);
      }
      const quickLoginToRegister = (_ref2 = localStorage.getItem("register-quick-login")) != null ? _ref2 : loginState2.quickLoginToRegister;
      const shouldNavigateToRegisterQuickLogin = yield shouldNevigateToRegisterQuickLogin(user);
      const updatedUser = yield call(handleUnnecessaryEntitlementsUpdate, user);
      yield call(afterAuthenticationStateUpdate, {
        user: updatedUser,
        tenants,
        activeTenant
      }, {
        loginState: _extends({}, loginState2, {
          quickLoginToRegister,
          flow: shouldNavigateToRegisterQuickLogin ? LoginFlow.RegisterQuickLogin : LoginFlow.Login
        }),
        isAuthenticated: true
      });
      yield handleRedirectRefreshToken(shouldNavigateToRegisterQuickLogin);
    }
  } catch (e2) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setState({
      user: void 0,
      isAuthenticated: false
    }));
  }
}
function* refreshTokenEmbeddedSocialLogins() {
  try {
    const onRedirectTo = ContextHolder.onRedirectTo;
    const {
      routes,
      loginState: loginState2
    } = yield select((state) => state.auth);
    const {
      user,
      tenants = [],
      activeTenant
    } = yield call(api.auth.refreshTokenV3);
    if (isMfaRequired(user)) {
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      const updatedUser = yield call(handleUnnecessaryEntitlementsUpdate, user);
      const shouldShowPrompt = yield call(shouldShowPromptPasskeys);
      if (shouldShowPrompt) {
        yield put(actions30.setLoginState({
          step: LoginStep.promptPasskeys,
          loading: false
        }));
        yield call(afterAuthenticationStateUpdate, {
          user: updatedUser,
          tenants,
          activeTenant
        }, {
          isLoading: false
        });
        onRedirectTo(routes.loginUrl, {
          preserveQueryParams: true
        });
      } else {
        var _ref3;
        if (user.id) {
          localStorage.setItem("userId", user.id);
        }
        const quickLoginToRegister = (_ref3 = localStorage.getItem("register-quick-login")) != null ? _ref3 : loginState2.quickLoginToRegister;
        const shouldNavigateToRegisterQuickLogin = yield shouldNevigateToRegisterQuickLogin(user);
        yield call(afterAuthenticationStateUpdate, {
          user: updatedUser,
          tenants,
          activeTenant
        }, {
          loginState: _extends({}, loginState2, {
            quickLoginToRegister,
            flow: shouldNavigateToRegisterQuickLogin ? LoginFlow.RegisterQuickLogin : LoginFlow.Login
          }),
          isAuthenticated: true
        });
        yield handleRedirectRefreshToken(shouldNavigateToRegisterQuickLogin);
      }
    }
  } catch (e2) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    yield put(actions30.setState({
      user: void 0,
      isAuthenticated: false
    }));
  }
}
function* handleRedirectRefreshToken(shouldNavigateToRegisterQuickLogin) {
  var _window;
  const url = new URL((_window = window) == null ? void 0 : _window.location.href);
  const onRedirectTo = ContextHolder.onRedirectTo;
  const {
    routes,
    loginState: loginState2
  } = yield select((state) => state.auth);
  const invitationToken = url.searchParams.get("invitationToken");
  const redirectRoutes = [routes.socialLoginCallbackUrl, routes.oidcRedirectUrl, routes.samlCallbackUrl];
  if (!invitationToken) {
    redirectRoutes.push(routes.loginUrl, routes.signUpUrl);
  }
  if (shouldNavigateToRegisterQuickLogin) {
    onRedirectTo(routes.loginUrl);
  } else if (redirectRoutes.some((url2) => url2 && window.location.pathname.endsWith(url2))) {
    if (loginState2.isNewUser && routes.signUpSuccessUrl && routes.socialLoginCallbackUrl === window.location.pathname) {
      onRedirectTo(routes.signUpSuccessUrl, {
        refresh: routes.signUpSuccessUrl.startsWith("http")
      });
    } else {
      yield afterAuthNavigation();
    }
  }
}
function* getUserIP({
  payload: {
    callback
  }
}) {
  try {
    const {
      ip
    } = yield call(api.metadata.getCurrentUserIpMetadata);
    yield put(actions30.setState({
      userIp: ip
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    callback == null ? void 0 : callback(false);
  }
}
function* requestAuthorize({
  payload: firstTime
}) {
  const calls = [];
  const callsAfterRefresh = [];
  calls.push(call(refreshToken2));
  if (firstTime) {
    yield put(actions30.setState({
      isLoading: true
    }));
    yield put(actions30.loadSocialLoginsConfigurationV2());
    calls.push(call(loadAllowSignUps));
    calls.push(call(loadPublicAuthStrategiesPolicy));
    calls.push(call(loadSSOPublicConfigurationFunction));
    calls.push(call(loadVendorPublicInfo));
    calls.push(call(refreshMetadata));
    callsAfterRefresh.push(call(loadCustomLoginRoutes));
  }
  yield all(calls);
  if (callsAfterRefresh.length > 0) {
    yield all(callsAfterRefresh);
  }
  yield put(actions30.setState({
    isLoading: false
  }));
}
function* isMFARequiredSSR({
  accessToken,
  user
}) {
  if (!accessToken) {
    yield put(actions30.setState({
      user: void 0,
      isAuthenticated: false
    }));
    return;
  }
  const onRedirectTo = ContextHolder.onRedirectTo;
  const {
    routes
  } = yield select((state) => state.auth);
  if (isMfaRequired(user)) {
    const mfaRequiredState = yield getMfaRequiredState(user);
    yield put(actions30.setState(mfaRequiredState));
    onRedirectTo(routes.loginUrl, {
      preserveQueryParams: true
    });
  }
}
function* requestAuthorizeSSR({
  payload
}) {
  const calls = [];
  yield put(actions30.loadSocialLoginsConfigurationV2());
  calls.push(call(loadAllowSignUps));
  calls.push(call(loadSSOPublicConfigurationFunction));
  calls.push(call(loadVendorPublicInfo));
  calls.push(call(refreshMetadata));
  calls.push(call(isMFARequiredSSR, payload));
  calls.push(call(loadCustomLoginRoutes));
  yield all(calls);
}
function* requestHostedLoginSilentAuthorize() {
  const response = yield call(api.auth.silentOAuthRefreshTokenV2);
  if (response != null && response.user) {
    yield call(afterAuthenticationStateUpdate, response, {
      isAuthenticated: true,
      isLoading: false
    });
  } else {
    throw new Error(`couldn't refresh user token with oauth service`);
  }
}
function* refreshOrRequestHostedLoginAuthorize({
  payload: additionalParams
}) {
  var _localStorage;
  (_localStorage = localStorage) == null ? void 0 : _localStorage.removeItem(SHOULD_STEP_UP_KEY);
  const {
    disableSilentRefresh
  } = yield select((state) => ({
    disableSilentRefresh: state.auth.disableSilentRefresh
  }));
  if ((additionalParams == null ? void 0 : additionalParams.prompt) === "login") {
    yield requestHostedLoginAuthorize(additionalParams);
    return;
  }
  try {
    if (disableSilentRefresh) {
      throw new Error("silent refresh is disabled");
    }
    yield requestHostedLoginSilentAuthorize();
  } catch (e2) {
    yield requestHostedLoginAuthorize(additionalParams);
  }
}
function* refreshOrRequestHostedLoginAuthorizeV2({
  payload: {
    additionalParams,
    shouldRedirectToLogin,
    firstTime,
    loginDirectAction
  }
}) {
  var _localStorage2, _additionalParams;
  (_localStorage2 = localStorage) == null ? void 0 : _localStorage2.removeItem(SHOULD_STEP_UP_KEY);
  if (firstTime) {
    const {
      urlStrategy
    } = yield select((state) => ({
      urlStrategy: state.root.urlStrategy
    }));
    const activeUri = getUri(urlStrategy);
    yield put(actions30.setState({
      isLoading: true
    }));
    if (isOauthCallbackRoute(activeUri)) {
      return;
    }
  }
  const {
    disableSilentRefresh
  } = yield select((state) => ({
    disableSilentRefresh: state.auth.disableSilentRefresh
  }));
  if (loginDirectAction) {
    additionalParams = additionalParams || {};
    additionalParams["login_direct_action"] = btoa(JSON.stringify(loginDirectAction));
  }
  if (((_additionalParams = additionalParams) == null ? void 0 : _additionalParams.prompt) === "login") {
    yield requestHostedLoginAuthorize(additionalParams);
    return;
  }
  try {
    if (disableSilentRefresh) {
      throw new Error("silent refresh is disabled");
    }
    yield requestHostedLoginSilentAuthorize();
  } catch (e2) {
    if (!shouldRedirectToLogin) {
      yield put(actions30.setState({
        isLoading: false
      }));
      return;
    }
    yield requestHostedLoginAuthorize(additionalParams);
  }
}
function* requestHostedLoginAuthorize(additionalParams) {
  const {
    routes,
    context,
    onRedirectTo,
    urlStrategy
  } = yield select((state) => ({
    routes: state.auth.routes,
    onRedirectTo: state.auth.onRedirectTo,
    context: state.root.context,
    urlStrategy: state.root.urlStrategy
  }));
  const activeUri = getUri(urlStrategy);
  if (activeUri === routes.hostedLoginRedirectUrl) {
    console.debug("Calling loginWithRedirect while in hostedLoginCallback route");
    return;
  }
  yield put(actions30.setState({
    isLoading: true
  }));
  const nonce = createRandomString();
  const code_verifier = createRandomString();
  const code_challenge = yield call(generateCodeChallenge, code_verifier);
  localStorage.setItem(HOSTED_LOGIN_VERIFIER_KEY, code_verifier);
  let redirectUrl = `${window.location.origin}${urlStrategy === "path" ? "" : "#"}${routes.hostedLoginRedirectUrl}`;
  yield call(loadCustomLoginRoutes);
  const customLoginSearchParam = yield select((state) => {
    var _state$auth$customLog;
    return (_state$auth$customLog = state.auth.customLoginState) == null ? void 0 : _state$auth$customLog.customLoginSearchParams;
  });
  if (customLoginSearchParam) {
    if (redirectUrl.endsWith("/")) {
      redirectUrl = redirectUrl.slice(0, -1);
    }
    redirectUrl += customLoginSearchParam;
  }
  const baseUrl = fetch_exports.getBaseUrl(context, "/oauth/authorize");
  const oauthUrl = `${baseUrl}/oauth/authorize`;
  const params = _extends({
    response_type: "code",
    client_id: context.clientId || "INVALID-CLIENT-ID",
    scope: "openid email profile",
    redirect_uri: redirectUrl,
    code_challenge,
    code_challenge_method: "S256",
    nonce
  }, additionalParams);
  if (!(additionalParams != null && additionalParams.organization)) {
    const customLoginAlias = yield call(getCustomLoginAlias);
    if (customLoginAlias) {
      params["organization"] = customLoginAlias;
    }
  }
  const tenantId = getSearchParam(TENANT_ID_PARAM_KEY);
  if (tenantId) {
    params["tenantId"] = tenantId;
  }
  const searchParams = new URLSearchParams(params);
  const url = `${oauthUrl}?${searchParams.toString()}`;
  onRedirectTo(url, {
    refresh: true
  });
}
function* handleHostedLoginCallback({
  payload
}) {
  const code_verifier = localStorage.getItem(HOSTED_LOGIN_VERIFIER_KEY) || "INVALID-CODE-VERIFIER";
  const {
    routes,
    urlStrategy
  } = yield select((state) => ({
    routes: state.auth.routes,
    urlStrategy: state.root.urlStrategy
  }));
  let redirectUrl = `${window.location.origin}${urlStrategy === "path" ? "" : "#"}${routes.hostedLoginRedirectUrl}`;
  yield call(loadCustomLoginRoutes);
  const customLoginSearchParam = yield select((state) => {
    var _state$auth$customLog2;
    return (_state$auth$customLog2 = state.auth.customLoginState) == null ? void 0 : _state$auth$customLog2.customLoginSearchParams;
  });
  if (customLoginSearchParam) {
    if (redirectUrl.endsWith("/")) {
      redirectUrl = redirectUrl.slice(0, -1);
    }
    redirectUrl += customLoginSearchParam;
  }
  const body = {
    code: payload.code,
    redirect_uri: redirectUrl,
    code_verifier,
    grant_type: "authorization_code"
  };
  try {
    const response = yield call(api.auth.exchangeOAuthTokensV2, body);
    yield call(afterAuthenticationStateUpdate, response, {
      isAuthenticated: true,
      isLoading: false
    });
  } catch (e2) {
    yield put(actions30.setState({
      isLoading: false
    }));
    console.error("Failed to exchangeOAuthTokens", e2);
  } finally {
    const user = yield select(({
      auth
    }) => auth.user);
    const isStepUpFlow = window.localStorage.getItem(SHOULD_STEP_UP_KEY);
    window.localStorage.removeItem(SHOULD_STEP_UP_KEY);
    if (isStepUpFlow && isSteppedUp(user)) {
      yield afterStepUpAuthNavigation();
    } else {
      yield afterAuthNavigation();
    }
  }
}
function* changePhoneNumberWithVerification2(_ref4) {
  let {
    payload: {
      callback
    }
  } = _ref4, payload = _objectWithoutPropertiesLoose(_ref4.payload, _excluded19);
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    const changePhoneRes = yield call(api.auth.changePhoneNumberWithVerification, payload);
    yield put(actions30.setLoginState({
      phoneNumber: payload.phoneNumber,
      loading: false,
      changePhoneId: changePhoneRes.changePhoneId,
      step: LoginStep.loginWithQuickSmsOtc,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* verifyChangePhoneNumber2(_ref5) {
  let {
    payload: {
      callback
    }
  } = _ref5, payload = _objectWithoutPropertiesLoose(_ref5.payload, _excluded211);
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    yield call(api.auth.verifyChangePhoneNumber, payload);
    yield put(actions30.setLoginState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* quickSmsPasswordlessPreLogin(_ref6) {
  let {
    payload: {
      callback
    }
  } = _ref6, payload = _objectWithoutPropertiesLoose(_ref6.payload, _excluded35);
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    const preloginRes = yield call(api.auth.passwordlessPreLogin, _extends({}, payload, {
      type: AuthStrategyEnum.SmsCode
    }));
    yield put(actions30.setLoginState({
      step: LoginStep.loginWithQuickSmsOtc,
      loading: false,
      phoneNumber: preloginRes == null ? void 0 : preloginRes.phoneNumber,
      error: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2),
      loading: false
    }));
    callback == null ? void 0 : callback(e2);
  }
}
function* passwordlessPreLogin2(_ref7) {
  let {
    payload: {
      callback
    }
  } = _ref7, payload = _objectWithoutPropertiesLoose(_ref7.payload, _excluded43);
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    let email;
    if (isEmailPayload(payload)) {
      email = payload.email;
    }
    const preloginRes = yield call(api.auth.passwordlessPreLogin, payload);
    const step = authStrategyLoginStepMap[payload.type];
    yield put(actions30.setLoginState({
      step,
      loading: false,
      phoneNumber: preloginRes == null ? void 0 : preloginRes.phoneNumber,
      email,
      error: void 0
    }));
    callback == null ? void 0 : callback();
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2),
      loading: false
    }));
    callback == null ? void 0 : callback();
  }
}
function* passwordlessPostLogin2(_ref8) {
  let {
    payload: {
      callback,
      events
    }
  } = _ref8, payload = _objectWithoutPropertiesLoose(_ref8.payload, _excluded53);
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    const {
      user,
      tenants = [],
      activeTenant
    } = yield call(api.auth.passwordlessPostLoginV2, payload);
    const onRedirectTo = ContextHolder.onRedirectTo;
    const {
      routes
    } = yield select((state) => state.auth);
    if (isMfaRequired(user)) {
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      const {
        loginState: loginState2
      } = yield select((state) => state.auth);
      if (user.emailVerified) {
        var _events$userVerified;
        const userVerifiedPayload = {
          email: user.email,
          origin: UserVeirifedOriginTypes.PASSWORDLESS,
          id: user.id,
          tenantId: user.tenantId,
          createdAt: /* @__PURE__ */ new Date(),
          name: user.name
        };
        events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, userVerifiedPayload);
        reportGTMEvent(GTMEventAction.USER_VERIFIED, userVerifiedPayload);
      }
      if (user.id) {
        localStorage.setItem("userId", user.id);
      }
      yield call(afterAuthenticationStateUpdate, {
        user,
        tenants,
        activeTenant
      });
      yield put(actions30.setLoginState({
        error: void 0
      }));
      yield put(actions30.setState({
        isLoading: false
      }));
      if (loginState2.flow === LoginFlow.Login) {
        const shouldShowPrompt = yield call(shouldShowPromptPasskeys);
        if (shouldShowPrompt) {
          yield put(actions30.setLoginState({
            step: LoginStep.promptPasskeys,
            loading: false
          }));
          onRedirectTo(routes.loginUrl, {
            preserveQueryParams: true
          });
        } else {
          yield put(actions30.setState({
            isAuthenticated: true
          }));
          yield afterAuthNavigation();
        }
      } else {
        onRedirectTo(routes.loginUrl, {
          preserveQueryParams: true
        });
      }
      localStorage.removeItem("register-quick-login");
      callback == null ? void 0 : callback(true);
    }
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2, "Failed to authenticate")
    }));
  } finally {
    yield put(actions30.setLoginState({
      loading: false
    }));
  }
}
function* verifyInviteToken2({
  payload
}) {
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    const {
      name: inviteTokenTenantName
    } = yield call(api.auth.verifyInviteToken, payload);
    yield put(actions30.setLoginState({
      inviteTokenTenantName
    }));
  } catch (e2) {
    yield put(actions30.setLoginState({
      inviteTokenError: errorHandler(e2, `We couldn't verify your invitation`)
    }));
  } finally {
    yield put(actions30.setLoginState({
      loading: false
    }));
  }
}
function* preLogin2({
  payload: {
    email,
    recaptchaToken,
    invitationToken,
    callback
  }
}) {
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const onRedirectTo = yield select(({
      auth: {
        onRedirectTo: onRedirectTo2
      }
    }) => onRedirectTo2);
    const tenantId = getSearchParam(TENANT_ID_PARAM_KEY);
    const {
      address,
      idpType
    } = yield call(api.auth.preLoginV2, {
      email,
      tenantId
    });
    if (address) {
      let ssoRedirectUrl = address;
      if (idpType === SamlVendors.Oidc && !ssoRedirectUrl.includes("redirect_uri")) {
        const {
          routes: {
            oidcRedirectUrl
          }
        } = yield select(({
          auth: {
            routes
          }
        }) => ({
          routes
        }));
        ssoRedirectUrl += `&redirect_uri=${window.location.origin}${oidcRedirectUrl}`;
      }
      if (FronteggNativeModule_default.isAvailable("loginWithSSO")) {
        FronteggNativeModule_default.loginWithSSO(email);
        yield put(actions30.setLoginState({
          loading: false
        }));
        callback == null ? void 0 : callback();
      } else {
        yield put(actions30.setLoginState({
          step: LoginStep.redirectToSSO,
          loading: false,
          ssoRedirectUrl
        }));
        setTimeout(() => {
          onRedirectTo(ssoRedirectUrl, {
            refresh: true
          });
        }, 2e3);
      }
    } else {
      yield ssoPreloginFailed({
        email,
        recaptchaToken,
        callback,
        invitationToken
      });
    }
  } catch (e2) {
    yield ssoPreloginFailed({
      email,
      recaptchaToken,
      callback,
      invitationToken
    });
  }
}
function* ssoPreloginFailed(_ref9) {
  let {
    callback
  } = _ref9, body = _objectWithoutPropertiesLoose(_ref9, _excluded63);
  const publicPolicy = yield select(({
    auth: {
      securityPolicyState: {
        publicPolicy: {
          policy: publicPolicy2
        }
      }
    }
  }) => publicPolicy2);
  if (!(publicPolicy != null && publicPolicy.authStrategy)) {
    yield put(actions30.setLoginState({
      step: LoginStep.loginWithPassword,
      loading: false
    }));
    callback == null ? void 0 : callback();
    return;
  }
  if ((publicPolicy == null ? void 0 : publicPolicy.authStrategy) === AuthStrategyEnum.EmailAndPassword) {
    yield put(actions30.setLoginState({
      step: LoginStep.loginWithPassword,
      loading: false
    }));
    callback == null ? void 0 : callback();
  } else if ([AuthStrategyEnum.MagicLink, AuthStrategyEnum.Code, AuthStrategyEnum.SmsCode].includes(publicPolicy == null ? void 0 : publicPolicy.authStrategy)) {
    yield put(actions30.passwordlessPreLogin(_extends({}, body, {
      type: publicPolicy == null ? void 0 : publicPolicy.authStrategy,
      callback
    })));
  } else {
    yield put(actions30.setLoginState({
      step: LoginStep.loginWithPassword,
      loading: false
    }));
    callback == null ? void 0 : callback();
  }
}
function* webAuthnCreateNewDeviceSession2({
  payload: {
    callback
  }
}) {
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    const {
      options
    } = yield call(api.auth.webAuthnCreateNewDeviceSession);
    options.user.id = base64urlDecode(options.user.id);
    options.challenge = base64urlDecode(options.challenge);
    options.excludeCredentials = [];
    callback == null ? void 0 : callback(options);
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  } finally {
    yield put(actions30.setLoginState({
      loading: false
    }));
  }
}
function* webAuthnVerifyNewDeviceSession(_ref10) {
  let {
    payload: {
      callback
    }
  } = _ref10, body = _objectWithoutPropertiesLoose(_ref10.payload, _excluded72);
  try {
    yield put(actions30.setLoginState({
      loading: true
    }));
    const publicKey = publicKeyCredentialToJSON(body.publicKey);
    const deviceType = (publicKey == null ? void 0 : publicKey.authenticatorAttachment) === "platform" ? WebAuthnDeviceType.Platform : WebAuthnDeviceType.CrossPlatform;
    yield call(api.auth.verifyNewDeviceSession, {
      id: publicKey.id,
      response: publicKey.response,
      deviceType
    });
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  } finally {
    yield put(actions30.setLoginState({
      loading: false
    }));
  }
}
function* webAuthnPrelogin(_ref11) {
  let {
    payload: {
      callback
    }
  } = _ref11, body = _objectWithoutPropertiesLoose(_ref11.payload, _excluded82);
  try {
    var _options$allowCredent;
    yield put(actions30.setPasskeysState({
      loading: true
    }));
    yield put(actions30.setLoginState({
      loading: true
    }));
    const {
      options
    } = yield call(api.auth.webAuthnPreLogin, body);
    options.challenge = base64urlDecode(options.challenge);
    options.allowCredentials = (_options$allowCredent = options.allowCredentials) == null ? void 0 : _options$allowCredent.map((credentials) => _extends({}, credentials, {
      id: base64urlDecode(credentials.id)
    }));
    yield put(actions30.setLoginState({
      error: void 0
    }));
    callback == null ? void 0 : callback(options);
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  } finally {
    yield put(actions30.setPasskeysState({
      loading: false
    }));
    yield put(actions30.setLoginState({
      loading: false
    }));
  }
}
function* webAuthnPostLogin2(_ref12) {
  let {
    payload: {
      callback
    }
  } = _ref12, body = _objectWithoutPropertiesLoose(_ref12.payload, _excluded92);
  try {
    var _publicKey$response$u;
    yield put(actions30.setPasskeysState({
      loading: true
    }));
    yield put(actions30.setLoginState({
      loading: true
    }));
    const publicKey = publicKeyCredentialToJSON(body.publicKey);
    const _yield$call = yield call(api.auth.webAuthnPostLoginV2, _extends({}, publicKey, {
      response: _extends({}, publicKey.response, {
        userHandle: (_publicKey$response$u = publicKey.response.userHandle) != null ? _publicKey$response$u : void 0
      }),
      recaptchaToken: body.recaptchaToken,
      invitationToken: body.invitationToken
    })), {
      user
    } = _yield$call, rest = _objectWithoutPropertiesLoose(_yield$call, _excluded102);
    if (isMfaRequired(user)) {
      const onRedirectTo = ContextHolder.onRedirectTo;
      const {
        routes
      } = yield select((state) => state.auth);
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      if (user.id) {
        localStorage.setItem("userId", user.id);
      }
      yield call(afterAuthenticationStateUpdate, _extends({
        user
      }, rest), {
        isAuthenticated: true
      });
      yield put(actions30.setLoginState({
        error: void 0
      }));
      yield afterAuthNavigation();
      callback == null ? void 0 : callback(true);
    }
  } catch (e2) {
    yield put(actions30.setLoginState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  } finally {
    yield put(actions30.setPasskeysState({
      loading: false
    }));
    yield put(actions30.setLoginState({
      loading: false
    }));
  }
}
function* postLogin2({
  payload
}) {
  const {
    onRedirectTo,
    routes
  } = yield select(({
    auth: {
      onRedirectTo: onRedirectTo2,
      routes: routes2
    }
  }) => ({
    onRedirectTo: onRedirectTo2,
    routes: routes2
  }));
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const user = yield call(api.auth.postLogin, payload);
    yield put(actions30.setState({
      user: !!user.accessToken ? user : void 0,
      isAuthenticated: !!user.accessToken
    }));
    yield afterAuthNavigation();
  } catch (e2) {
    setTimeout(() => {
      onRedirectTo(routes.authenticatedUrl);
    }, 1e3);
    yield put(actions30.setLoginState({
      step: LoginStep.loginWithSSOFailed,
      loading: false
    }));
  }
}
function* login2({
  payload: {
    email,
    password,
    recaptchaToken,
    invitationToken,
    callback
  }
}) {
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const {
      user,
      tenants = [],
      activeTenant
    } = yield call(api.auth.loginv2, {
      email,
      password,
      recaptchaToken,
      invitationToken
    });
    const onRedirectTo = ContextHolder.onRedirectTo;
    const {
      routes
    } = yield select((state) => state.auth);
    if (isMfaRequired(user)) {
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      const {
        loginState: loginState2
      } = yield select((state) => state.auth);
      const isAuthenticated = !!user.accessToken;
      if (user.id) {
        localStorage.setItem("userId", user.id);
      }
      yield call(afterAuthenticationStateUpdate, {
        user,
        tenants,
        activeTenant
      }, {
        loginState: {
          flow: loginState2.flow,
          quickLoginToRegister: loginState2.quickLoginToRegister,
          email,
          loading: false,
          error: void 0,
          mfaToken: user.mfaToken,
          step: loginState2.flow === LoginFlow.Login ? LoginStep.success : loginState2.step,
          tenants,
          tenantsLoading: true,
          isBreachedPassword: user.isBreachedPassword
        },
        isAuthenticated
      });
      const [securityCenterLoginFlows] = yield call(getFeatureFlags, ["security-center-show-login-flows"]);
      if (loginState2.flow === LoginFlow.Login) {
        if (securityCenterLoginFlows && user.isBreachedPassword && !isAuthenticated) {
          yield put(actions30.setLoginState({
            step: LoginStep.breachedPassword,
            loading: false
          }));
        } else {
          if (isAuthenticated) {
            const shouldShowPrompt = yield call(shouldShowPromptPasskeys);
            if (shouldShowPrompt) {
              yield put(actions30.setLoginState({
                step: LoginStep.promptPasskeys,
                loading: false
              }));
              onRedirectTo(routes.loginUrl, {
                preserveQueryParams: true
              });
            } else {
              yield afterAuthNavigation();
            }
          }
        }
      }
    }
    localStorage.removeItem("register-quick-login");
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    ContextHolder.setAccessToken(null);
    ContextHolder.setUser(null);
    callback == null ? void 0 : callback(false, e2);
    yield put(actions30.setLoginState({
      email,
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* recoverMfa({
  payload
}) {
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    var _payload$callback;
    yield call(api.auth.recoverMfaToken, payload);
    yield put(actions30.setLoginState({
      loading: false,
      error: void 0,
      step: LoginStep.preLogin
    }));
    yield put(actions30.setState({
      user: void 0,
      isAuthenticated: false
    }));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setLoginState({
      error: errorHandler(e2),
      loading: false
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, false, e2);
  }
}
function* logout2({
  payload
}) {
  const {
    hostedLoginBox
  } = yield select((state) => state.auth);
  yield put(actions30.setState({
    isLoading: true
  }));
  try {
    if (hostedLoginBox) {
      yield call(api.auth.OAuthLogout);
    } else {
      yield call(api.auth.logout);
    }
  } catch {
  }
  yield put(actions30.resetState());
  yield put(actions30.requestAuthorize(true));
  payload == null ? void 0 : payload();
}
function* silentLogout({
  payload
}) {
  var _payload$callbackTime;
  try {
    yield call(api.auth.logout);
  } catch {
  }
  setTimeout(() => {
    var _payload$callback3;
    return payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  }, (_payload$callbackTime = payload == null ? void 0 : payload.callbackTimeout) != null ? _payload$callbackTime : 500);
}
function* handleEnrollMFAResponse({
  user,
  tenants,
  activeTenant
}) {
  const mfaState2 = {
    step: MFAStep.recoveryCode,
    loading: false,
    error: void 0,
    saving: false
  };
  if (user != null && user.recoveryCode) {
    mfaState2.recoveryCode = user.recoveryCode;
  }
  yield put(actions30.setMfaState(mfaState2));
  yield put(actions30.setUser(user));
  yield put(actions30.setTenantsState({
    tenants,
    activeTenant,
    loading: false
  }));
  if (user.id) {
    localStorage.setItem("userId", user.id);
  }
}
function* preEnrollMFASMSForLogin2(_ref13) {
  let {
    payload: {
      callback
    }
  } = _ref13, payload = _objectWithoutPropertiesLoose(_ref13.payload, _excluded112);
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const data = yield call(api.auth.preEnrollMFASMSForLogin, payload);
    yield put(actions30.setMfaState({
      otcToken: data.otcToken,
      step: MFAStep.smsVerifyCode,
      phoneNumber: data.phoneNumber
    }));
    yield put(actions30.setLoginState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* enrollMFASMSForLogin2(_ref14) {
  let {
    payload: {
      callback
    }
  } = _ref14, payload = _objectWithoutPropertiesLoose(_ref14.payload, _excluded122);
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const data = yield call(api.auth.enrollMFASMSForLoginV2, payload);
    yield handleEnrollMFAResponse(data);
    yield put(actions30.setLoginState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* preEnrollMFAWebAuthnForLogin2(_ref15) {
  let {
    payload: {
      callback
    }
  } = _ref15, payload = _objectWithoutPropertiesLoose(_ref15.payload, _excluded132);
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    var _data$options$exclude;
    const data = yield call(api.auth.preEnrollMFAWebAuthnForLogin, payload);
    const options = _extends({}, data.options, {
      challenge: base64urlDecode(data.options.challenge),
      user: _extends({}, data.options.user, {
        id: base64urlDecode(data.options.user.id)
      }),
      excludeCredentials: (_data$options$exclude = data.options.excludeCredentials) == null ? void 0 : _data$options$exclude.map((credentials) => _extends({}, credentials, {
        id: base64urlDecode(credentials.id)
      }))
    });
    yield put(actions30.setLoginState({
      loading: false
    }));
    callback == null ? void 0 : callback({
      options,
      webauthnToken: data.webauthnToken
    });
  } catch (e2) {
    yield put(actions30.setLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* enrollMFAWebAuthnForLogin2(_ref16) {
  let {
    payload: {
      callback
    }
  } = _ref16, payload = _objectWithoutPropertiesLoose(_ref16.payload, _excluded142);
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const publicKey = publicKeyCredentialToJSON(payload.publicKey);
    const data = yield call(api.auth.enrollMFAWebAuthnForLoginV2, _extends({}, payload, {
      options: publicKey
    }));
    yield handleEnrollMFAResponse(data);
    yield put(actions30.setLoginState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* enrollMFAAuthenticatorAppForLogin2(_ref17) {
  let {
    payload: {
      callback
    }
  } = _ref17, payload = _objectWithoutPropertiesLoose(_ref17.payload, _excluded152);
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    const data = yield call(api.auth.enrollMFAAuthenticatorAppForLoginV2, payload);
    yield handleEnrollMFAResponse(data);
    yield put(actions30.setLoginState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null);
  }
}
function* resetBreachedPassword({
  payload
}) {
  yield put(actions30.setLoginState({
    loading: true
  }));
  try {
    yield call(api.auth.forgotPassword, payload);
    yield put(actions30.setLoginState({
      loading: false,
      error: void 0,
      step: LoginStep.breachedPasswordSuccess
    }));
    yield put(actions30.setState({
      isAuthenticated: false
    }));
  } catch (e2) {
    yield put(actions30.setLoginState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* loginSagas() {
  yield takeLeading$1(actions30.requestAuthorize, requestAuthorize);
  yield takeLeading$1(actions30.requestAuthorizeSSR, requestAuthorizeSSR);
  yield takeLeading$1(actions30.requestHostedLoginAuthorize, refreshOrRequestHostedLoginAuthorize);
  yield takeLeading$1(actions30.requestHostedLoginAuthorizeV2, refreshOrRequestHostedLoginAuthorizeV2);
  yield takeLeading$1(actions30.handleHostedLoginCallback, handleHostedLoginCallback);
  yield takeLeading$1(actions30.preLogin, preLogin2);
  yield takeLeading$1(actions30.postLogin, postLogin2);
  yield takeLeading$1(actions30.login, login2);
  yield takeLeading$1(actions30.logout, logout2);
  yield takeLeading$1(actions30.silentLogout, silentLogout);
  yield takeLeading$1(actions30.loginWithMfa, loginWithMfa2);
  yield takeLeading$1(actions30.recoverMfa, recoverMfa);
  yield takeLeading$1(actions30.quickSmsPasswordlessPreLogin, quickSmsPasswordlessPreLogin);
  yield takeLeading$1(actions30.changePhoneNumberWithVerification, changePhoneNumberWithVerification2);
  yield takeLeading$1(actions30.verifyChangePhoneNumber, verifyChangePhoneNumber2);
  yield takeLeading$1(actions30.passwordlessPreLogin, passwordlessPreLogin2);
  yield takeLeading$1(actions30.passwordlessPostLogin, passwordlessPostLogin2);
  yield takeLeading$1(actions30.verifyInviteToken, verifyInviteToken2);
  yield takeLeading$1(actions30.webAuthnPrelogin, webAuthnPrelogin);
  yield takeLeading$1(actions30.webAuthnPostLogin, webAuthnPostLogin2);
  yield takeLeading$1(actions30.webAuthnCreateNewDeviceSession, webAuthnCreateNewDeviceSession2);
  yield takeLeading$1(actions30.webAuthnVerifyNewDeviceSession, webAuthnVerifyNewDeviceSession);
  yield takeLeading$1(actions30.afterAuthNavigation, afterAuthNavigation);
  yield takeLeading$1(actions30.getUserIP, getUserIP);
  yield takeLeading$1(actions30.preEnrollMFASMSForLogin, preEnrollMFASMSForLogin2);
  yield takeLeading$1(actions30.enrollMFASMSForLogin, enrollMFASMSForLogin2);
  yield takeLeading$1(actions30.preEnrollMFAWebAuthnForLogin, preEnrollMFAWebAuthnForLogin2);
  yield takeLeading$1(actions30.enrollMFAWebAuthnForLogin, enrollMFAWebAuthnForLogin2);
  yield takeLeading$1(actions30.enrollMFAAuthenticatorAppForLogin, enrollMFAAuthenticatorAppForLogin2);
  yield takeLeading$1(actions30.preVerifyMFASMSForLogin, preVerifyMFASMSForLogin2);
  yield takeLeading$1(actions30.verifyMFASMSForLogin, verifyMFASMSForLogin2);
  yield takeLeading$1(actions30.preVerifyMFAWebAuthnForLogin, preVerifyMFAWebAuthnForLogin2);
  yield takeLeading$1(actions30.verifyMFAWebAuthnForLogin, verifyMFAWebAuthnForLogin2);
  yield takeLeading$1(actions30.preVerifyMFAEmailCode, preVerifyMFAEmailCodeForLogin);
  yield takeLeading$1(actions30.verifyMFAEmailCode, verifyMFAEmailCodeForLogin);
  yield takeLeading$1(actions30.resetBreachedPassword, resetBreachedPassword);
}
function* requestAuthorizeMock({
  payload: firstTime
}) {
  if (firstTime) {
    yield put(actions30.setState({
      isLoading: true
    }));
  }
  const user = userDemo;
  yield put(actions30.loadTenants());
  yield put(actions30.setState({
    user,
    isAuthenticated: true,
    isLoading: false
  }));
}
function* getUserIPMock({
  payload: {
    callback
  }
}) {
  try {
    const {
      ip
    } = dummyIps[0];
    yield put(actions30.setState({
      userIp: ip
    }));
    callback == null ? void 0 : callback(true, ip);
  } catch (e2) {
    callback == null ? void 0 : callback(false, e2);
  }
}
function* loginSagasMock() {
  yield takeLeading$1(actions30.requestAuthorize, requestAuthorizeMock);
  yield takeLeading$1(actions30.afterAuthNavigation, afterAuthNavigation);
  yield takeLeading$1(actions30.getUserIP, getUserIPMock);
}
var _excluded19, _excluded211, _excluded35, _excluded43, _excluded53, _excluded63, _excluded72, _excluded82, _excluded92, _excluded102, _excluded112, _excluded122, _excluded132, _excluded142, _excluded152, getUri;
var init_saga23 = __esm({
  "node_modules/@frontegg/redux-store/auth/LoginState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_constants3();
    init_interfaces35();
    init_interfaces25();
    init_mfaRequiredState_saga();
    init_saga4();
    init_interfaces26();
    init_dummy();
    init_interfaces33();
    init_saga5();
    init_helpers();
    init_utils();
    init_saga3();
    init_utils3();
    init_utils5();
    init_consts();
    init_Entitlements();
    init_saga();
    init_toolkit();
    init_saga_utils();
    init_utils4();
    init_sagas();
    init_consts2();
    init_afterAuthNavigation_saga();
    init_mfaWithAuthenticator_saga();
    _excluded19 = ["callback"];
    _excluded211 = ["callback"];
    _excluded35 = ["callback"];
    _excluded43 = ["callback"];
    _excluded53 = ["callback", "events"];
    _excluded63 = ["callback"];
    _excluded72 = ["callback"];
    _excluded82 = ["callback"];
    _excluded92 = ["callback"];
    _excluded102 = ["user"];
    _excluded112 = ["callback"];
    _excluded122 = ["callback"];
    _excluded132 = ["callback"];
    _excluded142 = ["callback"];
    _excluded152 = ["callback"];
    getUri = (urlStrategy) => {
      if (urlStrategy === "path") {
        var _window2;
        return ((_window2 = window) != null ? _window2 : document).location.pathname;
      } else {
        var _window3;
        const uri = (((_window3 = window) != null ? _window3 : document).location.hash || "#").substring(1);
        if (uri.indexOf("?") !== -1) {
          return uri.substring(0, uri.indexOf("?"));
        } else {
          return uri;
        }
      }
    };
  }
});

// node_modules/@frontegg/redux-store/auth/SSOState/saga.js
function* loadSSOConfigurations() {
  try {
    var _samlMetadata$configu, _samlMetadata$configu2;
    yield put(actions30.setSSOState({
      loading: true
    }));
    const samlConfiguration = yield call(api.auth.getSamlConfiguration);
    const oidcConfiguration = yield call(api.auth.getOidcConfiguration);
    const samlMetadata = yield call(api.metadata.getSamlMetadata);
    samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu.acsUrl;
    samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu2 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu2.spEntityId;
    samlConfiguration.isSamlActive = samlMetadata == null ? void 0 : samlMetadata.isActive;
    yield put(actions30.setSSOState({
      samlConfiguration,
      oidcConfiguration,
      loading: false,
      firstLoad: false
    }));
  } catch (e2) {
    yield put(actions30.setSSOState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* saveSSOConfigurationsFile({
  payload: configFile
}) {
  const oldSamlConfiguration = yield select((state) => state.auth.ssoState.samlConfiguration);
  const loaderKey = "saving";
  yield put(actions30.setSSOState({
    error: void 0,
    [loaderKey]: true
  }));
  try {
    const metadata = yield readFileAsText(configFile[0]);
    const newSamlConfiguration = yield call(api.auth.updateSamlVendorMetadata, {
      metadata
    });
    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;
    yield put(actions30.setSSOState({
      samlConfiguration: newSamlConfiguration,
      error: void 0,
      [loaderKey]: false
    }));
  } catch (e2) {
    yield put(actions30.setSSOState({
      samlConfiguration: oldSamlConfiguration,
      error: errorHandler(e2),
      [loaderKey]: false
    }));
  }
}
function* saveSSOConfigurationsFileWithCallback({
  payload
}) {
  const {
    configFile,
    callback
  } = payload;
  const oldSamlConfiguration = yield select((state) => state.auth.ssoState.samlConfiguration);
  const loaderKey = "saving";
  yield put(actions30.setSSOState({
    error: void 0,
    [loaderKey]: true
  }));
  try {
    const metadata = yield readFileAsText(configFile);
    const newSamlConfiguration = yield call(api.auth.updateSamlVendorMetadata, {
      metadata
    });
    newSamlConfiguration.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;
    yield put(actions30.setSSOState({
      samlConfiguration: newSamlConfiguration,
      error: void 0,
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSSOState({
      samlConfiguration: oldSamlConfiguration,
      error: errorHandler(e2),
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* saveSSOConfigurations({
  payload
}) {
  const {
    callback,
    samlVendor
  } = payload, newSamlConfiguration = _objectWithoutPropertiesLoose(payload, _excluded20);
  const oldSamlConfiguration = yield select((state) => state.auth.ssoState.samlConfiguration);
  const samlConfiguration = _extends({}, oldSamlConfiguration, newSamlConfiguration);
  let loaderKey = "saving";
  if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {
    loaderKey = "loading";
  }
  try {
    const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);
    if (firstTimeConfigure) {
      yield put(actions30.setSSOState({
        samlConfiguration: _extends({}, oldSamlConfiguration, samlConfiguration)
      }));
      return;
    } else {
      yield put(actions30.setSSOState({
        error: void 0,
        [loaderKey]: true
      }));
    }
    if (payload.type === SamlVendors.Saml) {
      var _samlMetadata$configu3, _samlMetadata$configu4;
      const samlMetadata = yield call(api.metadata.getSamlMetadata);
      samlConfiguration.acsUrl = samlMetadata == null ? void 0 : (_samlMetadata$configu3 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu3.acsUrl;
      samlConfiguration.spEntityId = samlMetadata == null ? void 0 : (_samlMetadata$configu4 = samlMetadata.configuration) == null ? void 0 : _samlMetadata$configu4.spEntityId;
    }
    const updateSamlConfiguration2 = omitProps(samlConfiguration, ["validated", "generatedVerification", "createdAt", "updatedAt"]);
    if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration2 == null ? void 0 : updateSamlConfiguration2.domain)) {
      updateSamlConfiguration2.ssoEndpoint = "";
      updateSamlConfiguration2.publicCertificate = "";
      updateSamlConfiguration2.signRequest = false;
    }
    updateSamlConfiguration2.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();
    const newSamlConfiguration2 = yield call(api.auth.updateSamlConfiguration, updateSamlConfiguration2);
    newSamlConfiguration2.isSamlActive = oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.isSamlActive;
    yield put(actions30.setSSOState({
      samlConfiguration: newSamlConfiguration2,
      error: void 0,
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSSOState({
      samlConfiguration: oldSamlConfiguration,
      error: errorHandler(e2),
      [loaderKey]: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* validateSSODomain2({
  payload: {
    callback
  } = {}
}) {
  const samlConfiguration = yield select((state) => state.auth.ssoState.samlConfiguration);
  try {
    yield put(actions30.setSSOState({
      error: void 0,
      saving: true
    }));
    yield call(api.auth.validateSamlDomain);
    yield put(actions30.setSSOState({
      samlConfiguration: _extends({}, samlConfiguration, {
        validated: true
      }),
      error: void 0,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSSOState({
      samlConfiguration: _extends({}, samlConfiguration, {
        validated: false
      }),
      error: errorHandler(e2),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* getAuthorizationRoles() {
  try {
    const data = yield call(api.auth.getSamlRoles);
    const groupsData = yield call(api.auth.getSamlRolesGroups);
    yield put(actions30.setSSOState({
      authorizationRoles: data.roleIds,
      rolesGroups: groupsData,
      error: void 0
    }));
  } catch (e2) {
    yield put(actions30.setSSOState({
      error: errorHandler(e2)
    }));
  }
}
function* updateRolesGroups(groups) {
  try {
    yield all(groups.map((group) => call(api.auth.updateSamlGroup, {
      id: group.id,
      roleIds: group.roleIds,
      group: group.group
    })));
  } catch (e2) {
    yield put(actions30.setSSOState({
      error: errorHandler(e2)
    }));
  }
}
function* updateAuthorizationRoles({
  payload: {
    callback,
    authorizationRoles,
    groups
  }
}) {
  try {
    yield put(actions30.setSSOState({
      error: void 0,
      saving: true
    }));
    yield call(api.auth.updateSamlRoles, {
      roleIds: authorizationRoles
    });
    if (groups) {
      yield updateRolesGroups(groups);
    }
    yield getAuthorizationRoles();
    yield put(actions30.setSSOState({
      error: void 0,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSSOState({
      error: errorHandler(e2),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* deleteSamlGroupFunction({
  payload: {
    callback,
    id
  }
}) {
  try {
    yield put(actions30.setSSOState({
      error: void 0,
      saving: true
    }));
    yield call(api.auth.deleteSamlGroup, {
      id
    });
    yield getAuthorizationRoles();
    yield put(actions30.setSSOState({
      error: void 0,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSSOState({
      error: errorHandler(e2),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* createSamlGroupFunction({
  payload: {
    group,
    roleIds,
    callback
  }
}) {
  try {
    yield put(actions30.setSSOState({
      error: void 0,
      saving: true
    }));
    yield call(api.auth.createSamlGroup, {
      group,
      roleIds
    });
    yield getAuthorizationRoles();
    yield put(actions30.setSSOState({
      error: void 0,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSSOState({
      error: errorHandler(e2),
      saving: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* oidcPostloginFunction({
  payload
}) {
  const data = {
    code: payload.code,
    redirectUri: payload.redirectUri,
    RelayState: payload.state
  };
  try {
    yield put(actions30.setSSOState({
      loading: true
    }));
    yield call(api.auth.oidcPostLoginV2, data);
    yield call(refreshToken2);
    yield put(actions30.setSSOState({
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSSOState({
      loading: false,
      error: errorHandler(e2, "Failed to authenticate"),
      firstLoad: false
    }));
  }
}
function* ssoSagas() {
  yield takeEvery$1(actions30.loadSSOConfigurations, loadSSOConfigurations);
  yield takeEvery$1(actions30.saveSSOConfigurations, saveSSOConfigurations);
  yield takeEvery$1(actions30.saveSSOConfigurationsFile, saveSSOConfigurationsFile);
  yield takeEvery$1(actions30.saveSSOConfigurationsFileWithCallback, saveSSOConfigurationsFileWithCallback);
  yield takeEvery$1(actions30.validateSSODomain, validateSSODomain2);
  yield takeEvery$1(actions30.loadSSOAuthorizationRoles, getAuthorizationRoles);
  yield takeEvery$1(actions30.updateSSOAuthorizationRoles, updateAuthorizationRoles);
  yield takeEvery$1(actions30.deleteSamlGroup, deleteSamlGroupFunction);
  yield takeEvery$1(actions30.createSamlGroup, createSamlGroupFunction);
  yield takeEvery$1(actions30.oidcPostlogin, oidcPostloginFunction);
}
function* loadSSOConfigurationsMock() {
  yield put(actions30.setSSOState({
    loading: true
  }));
  yield delay();
  yield put(actions30.setSSOState({
    samlConfiguration: samlConfigurationDemo,
    loading: false,
    firstLoad: false
  }));
}
function* saveSSOConfigurationsFileMock({
  payload: configFile
}) {
  const loaderKey = "saving";
  yield put(actions30.setSSOState({
    error: void 0,
    [loaderKey]: true
  }));
  const oldSamlConfiguration = yield select((state) => state.auth.ssoState.samlConfiguration);
  const newSamlConfiguration = _extends({}, oldSamlConfiguration, {
    enabled: true
  }, configFile[0]);
  yield put(actions30.setSSOState({
    samlConfiguration: newSamlConfiguration,
    error: void 0,
    [loaderKey]: false
  }));
}
function* saveSSOConfigurationsMock({
  payload
}) {
  var _samlMetadataDemo$con, _samlMetadataDemo$con2;
  const {
    callback,
    samlVendor
  } = payload, newSamlConfiguration = _objectWithoutPropertiesLoose(payload, _excluded212);
  const oldSamlConfiguration = ssoStateDemo.samlConfiguration;
  const samlConfiguration = _extends({}, oldSamlConfiguration, newSamlConfiguration);
  let loaderKey = "saving";
  if ((samlConfiguration == null ? void 0 : samlConfiguration.enabled) !== oldSamlConfiguration.enabled) {
    loaderKey = "loading";
  }
  const firstTimeConfigure = !(samlConfiguration != null && samlConfiguration.domain);
  if (firstTimeConfigure) {
    yield put(actions30.setSSOState({
      samlConfiguration: _extends({}, oldSamlConfiguration, samlConfiguration)
    }));
    return;
  } else {
    yield put(actions30.setSSOState({
      error: void 0,
      [loaderKey]: true
    }));
  }
  yield delay();
  samlConfiguration.acsUrl = samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con = samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con.acsUrl;
  samlConfiguration.spEntityId = samlMetadataDemo == null ? void 0 : (_samlMetadataDemo$con2 = samlMetadataDemo.configuration) == null ? void 0 : _samlMetadataDemo$con2.spEntityId;
  const updateSamlConfiguration2 = omitProps(samlConfiguration, ["validated", "generatedVerification", "createdAt", "updatedAt"]);
  if ((oldSamlConfiguration == null ? void 0 : oldSamlConfiguration.domain) !== (updateSamlConfiguration2 == null ? void 0 : updateSamlConfiguration2.domain)) {
    updateSamlConfiguration2.ssoEndpoint = "";
    updateSamlConfiguration2.publicCertificate = "";
    updateSamlConfiguration2.signRequest = false;
  }
  updateSamlConfiguration2.type = samlVendor == null ? void 0 : samlVendor.toLowerCase();
  yield delay();
  yield put(actions30.setSSOState({
    samlConfiguration: updateSamlConfiguration2,
    error: void 0,
    [loaderKey]: false
  }));
  callback == null ? void 0 : callback(true);
}
function* validateSSODomainMock({
  payload: {
    callback
  } = {}
}) {
  const samlConfiguration = ssoStateDemo.samlConfiguration;
  yield put(actions30.setSSOState({
    error: void 0,
    saving: true
  }));
  yield delay();
  yield put(actions30.setSSOState({
    samlConfiguration: _extends({}, samlConfiguration, {
      validated: true
    }),
    error: void 0,
    saving: false
  }));
  callback == null ? void 0 : callback(true);
}
function* getAuthorizationRolesMock() {
  yield delay();
  const data = {
    roleIds: ["1", "2", "3"]
  };
  yield put(actions30.setSSOState({
    authorizationRoles: data.roleIds,
    error: void 0
  }));
}
function* updateAuthorizationRolesMock({
  payload: {
    callback,
    authorizationRoles
  }
}) {
  yield put(actions30.setSSOState({
    error: void 0,
    saving: true
  }));
  yield delay();
  yield put(actions30.setSSOState({
    authorizationRoles,
    error: void 0,
    saving: false
  }));
  callback == null ? void 0 : callback(true);
}
function* ssoSagasMock() {
  yield takeEvery$1(actions30.loadSSOConfigurations, loadSSOConfigurationsMock);
  yield takeEvery$1(actions30.saveSSOConfigurations, saveSSOConfigurationsMock);
  yield takeEvery$1(actions30.saveSSOConfigurationsFile, saveSSOConfigurationsFileMock);
  yield takeEvery$1(actions30.validateSSODomain, validateSSODomainMock);
  yield takeEvery$1(actions30.loadSSOAuthorizationRoles, getAuthorizationRolesMock);
  yield takeEvery$1(actions30.updateSSOAuthorizationRoles, updateAuthorizationRolesMock);
}
var _excluded20, _excluded212;
var init_saga24 = __esm({
  "node_modules/@frontegg/redux-store/auth/SSOState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces33();
    init_helpers();
    init_utils();
    init_dummy();
    init_saga23();
    init_utils5();
    _excluded20 = ["callback", "samlVendor"];
    _excluded212 = ["callback", "samlVendor"];
  }
});

// node_modules/@frontegg/redux-store/auth/SSOState/saga.v2.js
function* loadOidc() {
  try {
    const oidcConfiguration = yield call(api.auth.getOidcConfiguration);
    return oidcConfiguration;
  } catch (e2) {
    return null;
  }
}
function* loadSaml() {
  try {
    const samlMetadata = yield call(api.metadata.getSamlMetadata);
    return samlMetadata;
  } catch (e2) {
    return null;
  }
}
function* loadSSOConfigurationsV2() {
  try {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.LOAD_SSO_CONFIGURATIONS,
      value: true
    }));
    const [oidcConfiguration, samlMetadata] = yield all([call(loadOidc), call(loadSaml)]);
    const ssoConfigurations = yield call(api.auth.getSSOConfigurations);
    yield put(actions30.setSSOState({
      ssoConfigurations,
      oidcConfiguration,
      samlMetadata
    }));
  } catch (e2) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.LOAD_SSO_CONFIGURATIONS,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.LOAD_SSO_CONFIGURATIONS,
      value: false
    }));
  }
}
function* saveSSOConfigurationV2({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.SAVE_SSO_CONFIGURATION,
    value: true
  }));
  const {
    callback
  } = payload, ssoConfiguration = _objectWithoutPropertiesLoose(payload, _excluded21);
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    var _ssoConfiguration$ena;
    const newSsoConfiguration = yield call(api.auth.createSSOConfiguration, _extends({}, ssoConfiguration, {
      enabled: (_ssoConfiguration$ena = ssoConfiguration.enabled) != null ? _ssoConfiguration$ena : false
    }));
    yield put(actions30.setSSOState({
      ssoConfigurations: [...ssoConfigurations, newSsoConfiguration]
    }));
    callback == null ? void 0 : callback(newSsoConfiguration);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.SAVE_SSO_CONFIGURATION,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_CONFIGURATION,
      value: false
    }));
  }
}
function* saveSSOConfigurationByMetadata({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA,
    value: true
  }));
  const {
    configFile,
    callback
  } = payload;
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    const metadata = yield readFileAsText(configFile);
    const newSsoConfiguration = yield call(api.auth.createSSOConfigurationByMetadata, {
      metadata
    });
    yield put(actions30.setSSOState({
      ssoConfigurations: [...ssoConfigurations, newSsoConfiguration]
    }));
    callback == null ? void 0 : callback(newSsoConfiguration);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA,
      value: false
    }));
  }
}
function* updateSSOConfiguration2({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.UPDATE_SSO_CONFIGURATION,
    value: true
  }));
  const {
    callback,
    ssoConfigId
  } = payload, ssoConfiguration = _objectWithoutPropertiesLoose(payload, _excluded213);
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    const newSsoConfiguration = yield call(api.auth.updateSSOConfiguration, ssoConfigId, ssoConfiguration);
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => ssoConfig.id === ssoConfigId ? newSsoConfiguration : ssoConfig);
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(newSsoConfiguration);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.UPDATE_SSO_CONFIGURATION,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.UPDATE_SSO_CONFIGURATION,
      value: false
    }));
  }
}
function* updateSSOConfigurationByMetadata2({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.UPDATE_SSO_CONFIGURATION_BY_METADATA,
    value: true
  }));
  const {
    callback,
    ssoConfigId,
    configFile
  } = payload;
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    const metadata = yield readFileAsText(configFile);
    const newSsoConfiguration = yield call(api.auth.updateSSOConfigurationByMetadata, ssoConfigId, {
      metadata
    });
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => ssoConfig.id === ssoConfigId ? newSsoConfiguration : ssoConfig);
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(newSsoConfiguration);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.UPDATE_SSO_CONFIGURATION,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.UPDATE_SSO_CONFIGURATION,
      value: false
    }));
  }
}
function* deleteSSOConfiguration2({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.DELETE_SSO_CONFIGURATION,
    value: true
  }));
  const {
    ssoConfigId,
    callback
  } = payload;
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    yield call(api.auth.deleteSSOConfiguration, ssoConfigId);
    yield put(actions30.setSSOState({
      ssoConfigurations: ssoConfigurations.filter(({
        id
      }) => id !== ssoConfigId)
    }));
    callback == null ? void 0 : callback(true);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.DELETE_SSO_CONFIGURATION,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.DELETE_SSO_CONFIGURATION,
      value: false
    }));
  }
}
function* saveSSODomain({
  payload
}) {
  const {
    callback,
    ssoConfigId
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded36);
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.SAVE_SSO_DOMAIN,
    value: true
  }));
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    const domain = yield call(api.auth.createSSODomain, ssoConfigId, body);
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
      if (ssoConfig.id === ssoConfigId) {
        return _extends({}, ssoConfig, {
          domains: [...ssoConfig.domains, domain]
        });
      }
      return ssoConfig;
    });
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(domain);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.SAVE_SSO_DOMAIN,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_DOMAIN,
      value: false
    }));
  }
}
function* deleteSSODomain2({
  payload
}) {
  const {
    ssoConfigId,
    domainId,
    callback
  } = payload;
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.DELETE_SSO_DOMAIN,
    value: true
  }));
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    yield call(api.auth.deleteSSODomain, ssoConfigId, domainId);
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
      if (ssoConfig.id === ssoConfigId) {
        return _extends({}, ssoConfig, {
          domains: ssoConfig.domains.filter(({
            id
          }) => id !== domainId)
        });
      }
      return ssoConfig;
    });
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(true);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.DELETE_SSO_DOMAIN,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.DELETE_SSO_DOMAIN,
      value: false
    }));
  }
}
function* validateSSODomainV2({
  payload
}) {
  const {
    callback,
    domainId,
    ssoConfigId
  } = payload;
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.VALIDATE_SSO_DOMAIN,
    value: true
  }));
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    yield call(api.auth.validateSSODomain, ssoConfigId, domainId);
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
      if (ssoConfig.id === ssoConfigId) {
        return _extends({}, ssoConfig, {
          domains: ssoConfig.domains.map((ssoDomain) => ssoDomain.id === domainId ? _extends({}, ssoDomain, {
            validated: true
          }) : ssoDomain)
        });
      }
      return ssoConfig;
    });
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(true);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.VALIDATE_SSO_DOMAIN,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.VALIDATE_SSO_DOMAIN,
      value: false
    }));
  }
}
function* setSSODefaultRoles2({
  payload: {
    callback,
    ssoConfigId,
    roleIds
  }
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.UPDATE_SSO_DEFAULT_ROLES,
    value: true
  }));
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    yield call(api.auth.setSSODefaultRoles, ssoConfigId, {
      roleIds
    });
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
      if (ssoConfig.id === ssoConfigId) {
        return _extends({}, ssoConfig, {
          roleIds
        });
      }
      return ssoConfig;
    });
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(true);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.UPDATE_SSO_DEFAULT_ROLES,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.UPDATE_SSO_DEFAULT_ROLES,
      value: false
    }));
  }
}
function* setSSOGroups({
  payload: {
    groupsToAdd,
    groupsToDelete,
    ssoConfigId,
    callback
  }
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.SAVE_SSO_GROUPS,
    value: true
  }));
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    yield all(groupsToDelete.map((groupId) => call(api.auth.deleteSSOGroup, ssoConfigId, groupId)));
    yield all(groupsToAdd.map((group) => call(api.auth.createSSOGroup, ssoConfigId, group)));
    const groups = yield call(api.auth.getSSOGroups, ssoConfigId);
    const newSsoConfigurations = ssoConfigurations.map((ssoConfig) => {
      if (ssoConfig.id === ssoConfigId) {
        return _extends({}, ssoConfig, {
          groups
        });
      }
      return ssoConfig;
    });
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(true);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.SAVE_SSO_GROUPS,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_GROUPS,
      value: false
    }));
  }
}
function* updateSSOGroups({
  payload: {
    ssoConfigId,
    changedGroups,
    callback
  }
}) {
  try {
    yield all(changedGroups.map((group) => call(api.auth.updateSSOGroup, ssoConfigId, group)));
    callback == null ? void 0 : callback(true);
  } catch (error) {
    yield put(actions30.setSSOError({
      key: SSOStateKeys.SAVE_SSO_GROUPS,
      value: errorHandler(error)
    }));
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_GROUPS,
      value: false
    }));
  }
}
function* saveSSOConfigurationByUrl({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA,
    value: true
  }));
  const {
    metadataUrl,
    configMetadata,
    ssoConfigId,
    callback
  } = payload;
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    const body = {
      url: metadataUrl,
      configMetadata
    };
    let newSsoConfiguration;
    let newSsoConfigurations;
    if (ssoConfigId) {
      newSsoConfiguration = yield call(api.auth.updateSSOConfigurationByMetadataUrl, ssoConfigId, body);
      newSsoConfigurations = ssoConfigurations.map((ssoConfig) => ssoConfig.id === ssoConfigId ? newSsoConfiguration : ssoConfig);
    } else {
      newSsoConfiguration = yield call(api.auth.createSSOConfigurationByMetadataUrl, body);
      newSsoConfigurations = [newSsoConfiguration, ...ssoConfigurations];
    }
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(newSsoConfiguration);
  } catch (error) {
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA,
      value: false
    }));
  }
}
function* saveSSOConfigurationByData({
  payload
}) {
  yield put(actions30.setSSOLoader({
    key: SSOStateKeys.SAVE_SSO_CONFIGURATION,
    value: true
  }));
  const {
    callback,
    ssoConfigId
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded44);
  const ssoConfigurations = yield select((state) => state.auth.ssoState.ssoConfigurations);
  try {
    let newSsoConfiguration;
    let newSsoConfigurations;
    if (ssoConfigId) {
      newSsoConfiguration = yield call(api.auth.updateSSOConfiguration, ssoConfigId, body);
      newSsoConfigurations = ssoConfigurations.map((ssoConfig) => ssoConfig.id === ssoConfigId ? newSsoConfiguration : ssoConfig);
    } else {
      newSsoConfiguration = yield call(api.auth.createSSOConfiguration, body);
      newSsoConfigurations = [newSsoConfiguration, ...ssoConfigurations];
    }
    yield put(actions30.setSSOState({
      ssoConfigurations: newSsoConfigurations
    }));
    callback == null ? void 0 : callback(newSsoConfiguration);
  } catch (error) {
    callback == null ? void 0 : callback(null, error);
  } finally {
    yield put(actions30.setSSOLoader({
      key: SSOStateKeys.SAVE_SSO_CONFIGURATION_BY_METADATA,
      value: false
    }));
  }
}
function* ssoSagas2() {
  yield takeEvery$1(actions30.loadSSOConfigurationsV2, loadSSOConfigurationsV2);
  yield takeEvery$1(actions30.saveSSOConfigurationV2, saveSSOConfigurationV2);
  yield takeEvery$1(actions30.saveSSODomain, saveSSODomain);
  yield takeEvery$1(actions30.deleteSSODomain, deleteSSODomain2);
  yield takeEvery$1(actions30.validateSSODomainV2, validateSSODomainV2);
  yield takeEvery$1(actions30.updateSSOConfiguration, updateSSOConfiguration2);
  yield takeEvery$1(actions30.deleteSSOConfiguration, deleteSSOConfiguration2);
  yield takeEvery$1(actions30.setSSOGroups, setSSOGroups);
  yield takeEvery$1(actions30.updateSSOGroups, updateSSOGroups);
  yield takeEvery$1(actions30.setSSODefaultRoles, setSSODefaultRoles2);
  yield takeEvery$1(actions30.saveSSOConfigurationByMetadata, saveSSOConfigurationByMetadata);
  yield takeEvery$1(actions30.updateSSOConfigurationByMetadata, updateSSOConfigurationByMetadata2);
  yield takeEvery$1(actions30.saveSSOConfigurationByUrl, saveSSOConfigurationByUrl);
  yield takeEvery$1(actions30.saveSSOConfigurationByData, saveSSOConfigurationByData);
}
var _excluded21, _excluded213, _excluded36, _excluded44;
var init_saga_v2 = __esm({
  "node_modules/@frontegg/redux-store/auth/SSOState/saga.v2.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces33();
    init_helpers();
    init_utils5();
    _excluded21 = ["callback"];
    _excluded213 = ["callback", "ssoConfigId"];
    _excluded36 = ["callback", "ssoConfigId"];
    _excluded44 = ["callback", "ssoConfigId"];
  }
});

// node_modules/@frontegg/redux-store/auth/Helpers/base64ToFormData.js
function b64toBlob(base64, contentType) {
  const sliceSize = 512;
  const byteCharacters = atob(base64);
  const byteArrays = [];
  for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    const slice = byteCharacters.slice(offset, offset + sliceSize);
    const byteNumbers = new Array(slice.length);
    for (let i2 = 0; i2 < slice.length; i2++) {
      byteNumbers[i2] = slice.charCodeAt(i2);
    }
    byteArrays.push(new Uint8Array(byteNumbers));
  }
  return new Blob(byteArrays, {
    type: contentType
  });
}
function base64ToFormData(base64, key = "file") {
  const matchResult = base64.match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
  if (matchResult == null) {
    return null;
  }
  const contentType = `image/${matchResult[1]}`;
  const data = matchResult[2];
  const blob = b64toBlob(data, contentType);
  const formDataToUpload = new FormData();
  formDataToUpload.append(key, new File([blob], key, {
    type: contentType
  }));
  return formDataToUpload;
}
var init_base64ToFormData = __esm({
  "node_modules/@frontegg/redux-store/auth/Helpers/base64ToFormData.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/ProfileState/saga.js
function* loadProfile() {
  yield put(actions30.setProfileState({
    loading: true
  }));
  try {
    const profile = yield retry$1(3, 2e3, api.teams.getProfile);
    const currentUser = yield select((state) => state.auth.user);
    actions30.setUser(_extends({}, currentUser, profile));
    yield put(actions30.setProfileState({
      profile,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setProfileState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* saveProfile(_ref) {
  let {
    payload: {
      callback,
      profilePictureUrl
    }
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref.payload, _excluded30);
  yield put(actions30.setProfileState({
    saving: true,
    error: null,
    loading: true
  }));
  try {
    const oldProfileData = yield select((state) => state.auth.profileState.profile);
    let newProfilePictureUrl = oldProfileData.profilePictureUrl;
    if (profilePictureUrl !== oldProfileData.profilePictureUrl && profilePictureUrl) {
      const matchResult = (profilePictureUrl || "").match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
      if (matchResult) {
        const profileImage = base64ToFormData(profilePictureUrl, "image");
        if (profileImage) {
          newProfilePictureUrl = yield call(api.teams.updateProfileImage, profileImage);
          const imageTimeStamp = Date.now().toString();
          const urlTemplate = new URL(newProfilePictureUrl);
          urlTemplate.searchParams.set("t", imageTimeStamp);
          newProfilePictureUrl = urlTemplate.href;
        }
      }
    }
    const newProfileData = _extends({}, oldProfileData, payload, {
      profilePictureUrl: newProfilePictureUrl
    });
    const profile = yield call(api.users.updateUserProfileV2, newProfileData);
    const currentUser = yield select((state) => state.auth.user);
    yield put(actions30.setUser(_extends({}, currentUser, profile)));
    yield put(actions30.setProfileState({
      profile,
      saving: false,
      loading: false
    }));
    callback == null ? void 0 : callback(newProfileData);
  } catch (e2) {
    yield put(actions30.setProfileState({
      saving: false,
      error: errorHandler(e2),
      loading: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* changePassword2({
  payload
}) {
  yield put(actions30.setProfileState({
    loading: true
  }));
  try {
    var _payload$callback;
    yield call(api.teams.changePassword, payload);
    yield put(actions30.setProfileState({
      loading: false,
      error: void 0
    }));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setProfileState({
      loading: false,
      error: errorHandler(e2)
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e2);
  }
}
function* profileSagas() {
  yield takeLeading$1(actions30.loadProfile, loadProfile);
  yield takeEvery$1(actions30.saveProfile, saveProfile);
  yield takeEvery$1(actions30.changePassword, changePassword2);
}
function* loadProfileMock() {
  yield put(actions30.setProfileState({
    loading: true
  }));
  yield delay();
  yield put(actions30.setUser(_extends({}, userDemo, userProfileDemo)));
  yield put(actions30.setProfileState({
    loading: false,
    profile: userProfileDemo
  }));
}
function* saveProfileMock(_ref2) {
  let {
    payload: {
      callback,
      profilePictureUrl
    }
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2.payload, _excluded214);
  yield put(actions30.setProfileState({
    saving: true,
    error: null
  }));
  const oldProfileData = profileStateDemo;
  let newProfilePictureUrl = oldProfileData.profile.profilePictureUrl;
  if (profilePictureUrl !== oldProfileData.profile.profilePictureUrl && profilePictureUrl) {
    const matchResult = (profilePictureUrl || "").match(/^data:image\/([A-Za-z-+\/]+);base64,(.+)$/);
    if (matchResult) {
      newProfilePictureUrl = profilePictureUrl;
    }
  }
  const newProfileData = _extends({}, oldProfileData.profile, payload, {
    profilePictureUrl: newProfilePictureUrl
  });
  const currentUser = userDemo;
  yield delay();
  yield put(actions30.setUser(_extends({}, currentUser, newProfileData)));
  yield put(actions30.setProfileState({
    loading: false,
    error: null,
    saving: false,
    profile: newProfileData
  }));
  callback == null ? void 0 : callback(newProfileData);
}
function* changePasswordMock({
  payload
}) {
  var _payload$callback3;
  yield put(actions30.setProfileState({
    loading: true
  }));
  yield delay();
  yield put(actions30.setProfileState({
    loading: false,
    error: void 0
  }));
  (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
}
function* profileSagasMock() {
  yield takeLeading$1(actions30.loadProfile, loadProfileMock);
  yield takeEvery$1(actions30.saveProfile, saveProfileMock);
  yield takeEvery$1(actions30.changePassword, changePasswordMock);
}
var _excluded30, _excluded214;
var init_saga25 = __esm({
  "node_modules/@frontegg/redux-store/auth/ProfileState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_dummy();
    init_utils();
    init_base64ToFormData();
    init_utils5();
    _excluded30 = ["callback", "profilePictureUrl"];
    _excluded214 = ["callback", "profilePictureUrl"];
  }
});

// node_modules/@frontegg/redux-store/auth/MfaState/saga.js
function* getMfaStateAfterEnroll(res) {
  const {
    step
  } = yield select((state) => state.auth.mfaState);
  const mfaState2 = {
    step: res.recoveryCode ? MFAStep.recoveryCode : step,
    loading: false,
    saving: false,
    error: void 0,
    recoveryCode: res == null ? void 0 : res.recoveryCode
  };
  return mfaState2;
}
function* enrollMfa2() {
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    const {
      qrCode
    } = yield call(api.auth.enrollMfa);
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      qrCode
    }));
  } catch (e2) {
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
  }
}
function* verifyMfa2(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref.payload, _excluded31);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    const user = yield select((state) => state.auth.user);
    const data = yield call(api.auth.verifyMfa, payload);
    const mfaDevices = yield call(api.auth.getMFADevices);
    const mfaState2 = yield getMfaStateAfterEnroll(data);
    yield put(actions30.setMfaState(_extends({}, mfaState2, {
      mfaDevices
    })));
    yield put(actions30.setUser(_extends({}, user, {
      mfaEnrolled: true
    })));
    callback == null ? void 0 : callback(mfaState2.recoveryCode);
  } catch (e2) {
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* verifyMfaAfterForce(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2.payload, _excluded215);
  yield put(actions30.setMfaState({
    loading: true
  }));
  try {
    const _yield$call = yield call(api.auth.loginWithMfaV2, payload), {
      user
    } = _yield$call, rest = _objectWithoutPropertiesLoose(_yield$call, _excluded37);
    const mfaState2 = {
      step: MFAStep.recoveryCode,
      loading: false,
      saving: false,
      error: void 0
    };
    if (user != null && user.recoveryCode) {
      mfaState2.recoveryCode = user.recoveryCode;
    }
    yield put(actions30.setMfaState(mfaState2));
    yield afterAuthenticationStateUpdate(_extends({
      user
    }, rest));
    callback == null ? void 0 : callback(mfaState2.recoveryCode);
  } catch (e2) {
    yield put(actions30.setMfaState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* disableMfa2({
  payload
}) {
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _payload$callback;
    yield call(api.auth.disableMfa, payload);
    const mfaDevices = yield call(api.auth.getMFADevices);
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      mfaDevices
    }));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, false, e2);
  }
}
function* preEnrollMfaWebAuthn({
  payload
}) {
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _data$options$exclude, _payload$callback3;
    const data = yield call(api.auth.preEnrollMFAWebAuthn);
    const options = _extends({}, data.options, {
      challenge: base64urlDecode(data.options.challenge),
      user: _extends({}, data.options.user, {
        id: base64urlDecode(data.options.user.id)
      }),
      excludeCredentials: (_data$options$exclude = data.options.excludeCredentials) == null ? void 0 : _data$options$exclude.map((credentials) => _extends({}, credentials, {
        id: base64urlDecode(credentials.id)
      }))
    });
    yield put(actions30.setMfaState({
      saving: false
    }));
    (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, {
      options,
      webauthnToken: data.webauthnToken
    });
  } catch (e2) {
    var _payload$callback4;
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, null, e2);
  }
}
function* enrollMfaWebAuthn(_ref3) {
  let {
    payload: {
      callback
    }
  } = _ref3, payload = _objectWithoutPropertiesLoose(_ref3.payload, _excluded45);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    const publicKey = publicKeyCredentialToJSON(payload.publicKey);
    const data = yield call(api.auth.enrollMFAWebAuthn, _extends({}, payload, {
      options: publicKey
    }));
    const mfaDevices = yield call(api.auth.getMFADevices);
    const mfaState2 = yield getMfaStateAfterEnroll(data);
    yield put(actions30.setMfaState(_extends({}, mfaState2, {
      mfaDevices
    })));
    callback == null ? void 0 : callback(mfaState2.recoveryCode);
  } catch (e2) {
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* preDisableMfaWebAuthn(_ref4) {
  let {
    payload: {
      deviceId,
      callback
    }
  } = _ref4, payload = _objectWithoutPropertiesLoose(_ref4.payload, _excluded54);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _data$options$allowCr;
    const data = yield call(api.auth.preDisableMFAWebAuthn, deviceId);
    const options = _extends({}, data.options, {
      challenge: base64urlDecode(data.options.challenge),
      allowCredentials: (_data$options$allowCr = data.options.allowCredentials) == null ? void 0 : _data$options$allowCr.map((credentials) => _extends({}, credentials, {
        id: base64urlDecode(credentials.id)
      }))
    });
    yield put(actions30.setMfaState({
      saving: false
    }));
    callback == null ? void 0 : callback({
      options,
      webauthnToken: data.webauthnToken
    });
  } catch (e2) {
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* disableMfaWebAuthn(_ref5) {
  let {
    payload: {
      deviceId,
      callback
    }
  } = _ref5, payload = _objectWithoutPropertiesLoose(_ref5.payload, _excluded64);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    const publicKey = publicKeyCredentialToJSON(payload.publicKey);
    yield call(api.auth.disableMFAWebAuthn, deviceId, _extends({}, payload, {
      options: publicKey
    }));
    const mfaDevices = yield call(api.auth.getMFADevices);
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      mfaDevices
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* preEnrollMfaSms({
  payload
}) {
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _payload$callback5;
    const res = yield call(api.auth.preEnrollMFASMS, payload);
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      otcToken: res.otcToken,
      phoneNumber: res.phoneNumber
    }));
    (_payload$callback5 = payload.callback) == null ? void 0 : _payload$callback5.call(payload, true);
  } catch (e2) {
    var _payload$callback6;
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    (_payload$callback6 = payload.callback) == null ? void 0 : _payload$callback6.call(payload, false, e2);
  }
}
function* enrollMfaSms(_ref6) {
  let {
    payload: {
      callback
    }
  } = _ref6, payload = _objectWithoutPropertiesLoose(_ref6.payload, _excluded73);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    const data = yield call(api.auth.enrollMFASMS, payload);
    const mfaDevices = yield call(api.auth.getMFADevices);
    const mfaState2 = yield getMfaStateAfterEnroll(data);
    yield put(actions30.setMfaState(_extends({}, mfaState2, {
      mfaDevices
    })));
    callback == null ? void 0 : callback(mfaState2.recoveryCode);
  } catch (e2) {
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* preDisableMfaSms(_ref7) {
  let {
    payload: {
      deviceId
    }
  } = _ref7, payload = _objectWithoutPropertiesLoose(_ref7.payload, _excluded83);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _payload$callback7;
    const res = yield call(api.auth.preDisableMFASMS, deviceId);
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      otcToken: res.otcToken,
      phoneNumber: res.phoneNumber
    }));
    (_payload$callback7 = payload.callback) == null ? void 0 : _payload$callback7.call(payload, true);
  } catch (e2) {
    var _payload$callback8;
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    (_payload$callback8 = payload.callback) == null ? void 0 : _payload$callback8.call(payload, false, e2);
  }
}
function* disableMfaSms(_ref8) {
  let {
    payload: {
      deviceId
    }
  } = _ref8, payload = _objectWithoutPropertiesLoose(_ref8.payload, _excluded93);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _payload$callback9;
    yield call(api.auth.disableMFASMS, deviceId, payload);
    const mfaDevices = yield call(api.auth.getMFADevices);
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      mfaDevices
    }));
    (_payload$callback9 = payload.callback) == null ? void 0 : _payload$callback9.call(payload, true);
  } catch (e2) {
    var _payload$callback10;
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    (_payload$callback10 = payload.callback) == null ? void 0 : _payload$callback10.call(payload, false, e2);
  }
}
function* getMFADevices2() {
  yield put(actions30.setMfaState({
    loading: true
  }));
  try {
    const user = yield select((state) => state.auth.user);
    const mfaDevices = yield call(api.auth.getMFADevices);
    yield put(actions30.setMfaState({
      loading: false,
      error: void 0,
      mfaDevices
    }));
  } catch (e2) {
    yield put(actions30.setMfaState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* getMFAStrategies() {
  yield put(actions30.setMfaState({
    loading: true
  }));
  try {
    const res = yield call(api.auth.getMFAStrategiesConfig);
    const mfaStrategies = res.strategies.filter(({
      isActive
    }) => isActive).map(({
      strategy
    }) => strategy);
    yield put(actions30.setMfaState({
      loading: false,
      error: void 0,
      mfaStrategies
    }));
  } catch (e2) {
    yield put(actions30.setMfaState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* mfaSagas() {
  yield takeEvery$1(actions30.enrollMfa, enrollMfa2);
  yield takeEvery$1(actions30.getMFADevices, getMFADevices2);
  yield takeEvery$1(actions30.getMFAStrategies, getMFAStrategies);
  yield takeEvery$1(actions30.verifyMfa, verifyMfa2);
  yield takeEvery$1(actions30.disableMfa, disableMfa2);
  yield takeEvery$1(actions30.verifyMfaAfterForce, verifyMfaAfterForce);
  yield takeEvery$1(actions30.preDisableMfaSms, preDisableMfaSms);
  yield takeEvery$1(actions30.disableMfaSms, disableMfaSms);
  yield takeEvery$1(actions30.preEnrollMfaSms, preEnrollMfaSms);
  yield takeEvery$1(actions30.enrollMfaSms, enrollMfaSms);
  yield takeEvery$1(actions30.preEnrollMfaWebAuthn, preEnrollMfaWebAuthn);
  yield takeEvery$1(actions30.enrollMfaWebAuthn, enrollMfaWebAuthn);
  yield takeEvery$1(actions30.preDisableMfaWebAuthn, preDisableMfaWebAuthn);
  yield takeEvery$1(actions30.disableMfaWebAuthn, disableMfaWebAuthn);
}
function* enrollMfaMock() {
  yield put(actions30.setMfaState({
    saving: true
  }));
  const qrCode = "test";
  yield put(actions30.setMfaState({
    saving: false,
    error: void 0,
    qrCode
  }));
}
function* verifyMfaMock({
  payload: {
    callback
  }
}) {
  const {
    mfaDevices = {
      webauthn: [],
      phones: [],
      authenticators: [],
      emails: []
    }
  } = yield select((state) => state.auth.mfaState);
  yield put(actions30.setMfaState({
    saving: true
  }));
  yield delay();
  const data = {
    token: "token",
    recoveryCode: "recoveryCode"
  };
  const mfaState2 = {
    step: MFAStep.recoveryCode,
    loading: false,
    error: void 0,
    saving: false,
    mfaDevices: _extends({}, mfaDevices, {
      authenticators: [{
        id: "authenticator-id"
      }]
    })
  };
  if (data != null && data.recoveryCode) {
    mfaState2.recoveryCode = data.recoveryCode;
  }
  yield put(actions30.setMfaState(mfaState2));
  yield put(actions30.setUser(_extends({}, userDemo, {
    mfaEnrolled: true
  })));
  callback == null ? void 0 : callback(mfaState2.recoveryCode);
}
function* verifyMfaAfterForceMock(_ref9) {
  let {
    payload: {
      callback
    }
  } = _ref9, payload = _objectWithoutPropertiesLoose(_ref9.payload, _excluded103);
  yield put(actions30.setMfaState({
    loading: true
  }));
  yield delay();
  const data = _extends({}, payload, {
    recoveryCode: "recoveryCode"
  });
  const mfaState2 = {
    step: MFAStep.recoveryCode,
    loading: false,
    error: void 0,
    saving: false
  };
  if (data != null && data.recoveryCode) {
    mfaState2.recoveryCode = data.recoveryCode;
  }
  yield put(actions30.setMfaState(mfaState2));
  yield delay();
  yield put(actions30.setUser(_extends({}, userDemo, {
    mfaEnrolled: true
  })));
  callback == null ? void 0 : callback(mfaState2.recoveryCode);
}
function* disableMfaMock({
  payload
}) {
  var _payload$callback11;
  const {
    mfaDevices = {
      webauthn: [],
      phones: [],
      authenticators: [],
      emails: []
    }
  } = yield select((state) => state.auth.mfaState);
  yield put(actions30.setMfaState({
    saving: true
  }));
  yield delay();
  yield put(actions30.setMfaState({
    saving: false,
    error: void 0,
    mfaDevices: _extends({}, mfaDevices, {
      authenticators: []
    })
  }));
  yield put(actions30.setUser(_extends({}, userDemo)));
  (_payload$callback11 = payload.callback) == null ? void 0 : _payload$callback11.call(payload, true);
}
function* preDisableMfaSmsMock(_ref10) {
  let {} = _ref10, payload = _objectWithoutPropertiesLoose(_ref10.payload, _excluded113);
  yield put(actions30.setMfaState({
    saving: true
  }));
  try {
    var _payload$callback12;
    yield put(actions30.setMfaState({
      saving: false,
      error: void 0,
      otcToken: "otc-token",
      phoneNumber: "+972504589346"
    }));
    (_payload$callback12 = payload.callback) == null ? void 0 : _payload$callback12.call(payload, true);
  } catch (e2) {
    var _payload$callback13;
    yield put(actions30.setMfaState({
      saving: false,
      error: errorHandler(e2)
    }));
    (_payload$callback13 = payload.callback) == null ? void 0 : _payload$callback13.call(payload, false, e2);
  }
}
function* disableMfaSmsMock({
  payload
}) {
  var _payload$callback14;
  const {
    mfaDevices = {
      webauthn: [],
      phones: [],
      authenticators: [],
      emails: []
    }
  } = yield select((state) => state.auth.mfaState);
  yield put(actions30.setMfaState({
    saving: true
  }));
  yield delay();
  yield put(actions30.setMfaState({
    loading: false,
    error: void 0,
    mfaDevices: _extends({}, mfaDevices, {
      phones: []
    })
  }));
  yield put(actions30.setUser(_extends({}, userDemo)));
  (_payload$callback14 = payload.callback) == null ? void 0 : _payload$callback14.call(payload, true);
}
function* preEnrollMfaSmsMock({
  payload
}) {
  var _payload$callback15;
  yield put(actions30.setMfaState({
    saving: true
  }));
  yield delay();
  yield put(actions30.setMfaState({
    saving: false,
    error: void 0,
    otcToken: "otc-token",
    phoneNumber: "+972504589346"
  }));
  (_payload$callback15 = payload.callback) == null ? void 0 : _payload$callback15.call(payload, true);
}
function* enrollMfaSmsMock(_ref11) {
  let {
    payload: {
      callback
    }
  } = _ref11, payload = _objectWithoutPropertiesLoose(_ref11.payload, _excluded123);
  const {
    mfaDevices = {
      webauthn: [],
      phones: [],
      authenticators: [],
      emails: []
    }
  } = yield select((state) => state.auth.mfaState);
  yield put(actions30.setMfaState({
    saving: true
  }));
  yield delay();
  const data = {
    token: "token",
    recoveryCode: "recoveryCode"
  };
  const mfaState2 = {
    step: MFAStep.recoveryCode,
    loading: false,
    error: void 0,
    saving: false,
    mfaDevices: _extends({}, mfaDevices, {
      phones: [{
        id: "phone-id",
        phoneNumber: "+972504589346"
      }]
    })
  };
  if (data != null && data.recoveryCode) {
    mfaState2.recoveryCode = data.recoveryCode;
  }
  yield put(actions30.setMfaState(mfaState2));
  yield put(actions30.setUser(_extends({}, userDemo, {
    mfaEnrolled: true
  })));
  callback == null ? void 0 : callback(mfaState2.recoveryCode);
}
function* mfaSagasMock() {
  yield takeEvery$1(actions30.enrollMfa, enrollMfaMock);
  yield takeEvery$1(actions30.verifyMfa, verifyMfaMock);
  yield takeEvery$1(actions30.disableMfa, disableMfaMock);
  yield takeEvery$1(actions30.verifyMfaAfterForce, verifyMfaAfterForceMock);
  yield takeEvery$1(actions30.preDisableMfaSms, preDisableMfaSmsMock);
  yield takeEvery$1(actions30.disableMfaSms, disableMfaSmsMock);
  yield takeEvery$1(actions30.preEnrollMfaSms, preEnrollMfaSmsMock);
  yield takeEvery$1(actions30.enrollMfaSms, enrollMfaSmsMock);
}
var _excluded31, _excluded215, _excluded37, _excluded45, _excluded54, _excluded64, _excluded73, _excluded83, _excluded93, _excluded103, _excluded113, _excluded123;
var init_saga26 = __esm({
  "node_modules/@frontegg/redux-store/auth/MfaState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces26();
    init_utils();
    init_dummy();
    init_utils5();
    init_saga_utils();
    _excluded31 = ["callback"];
    _excluded215 = ["callback"];
    _excluded37 = ["user"];
    _excluded45 = ["callback"];
    _excluded54 = ["deviceId", "callback"];
    _excluded64 = ["deviceId", "callback"];
    _excluded73 = ["callback"];
    _excluded83 = ["deviceId"];
    _excluded93 = ["deviceId"];
    _excluded103 = ["callback"];
    _excluded113 = ["deviceId"];
    _excluded123 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/ForgotPasswordState/saga.js
function* forgotPassword2({
  payload
}) {
  yield put(actions30.setForgotPasswordState({
    loading: true
  }));
  try {
    var _payload$callback;
    yield call(api.auth.forgotPassword, payload);
    yield put(actions30.setForgotPasswordState({
      loading: false,
      error: void 0,
      step: ForgotPasswordStep.success
    }));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setForgotPasswordState({
      loading: false,
      error: errorHandler(e2, "Unknown error occurred")
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, false, e2);
  }
}
function* resetPassword2(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, body = _objectWithoutPropertiesLoose(_ref.payload, _excluded38);
  yield put(actions30.setForgotPasswordState({
    loading: true
  }));
  try {
    yield call(api.auth.resetPassword, body);
    yield put(actions30.setForgotPasswordState({
      loading: false,
      error: void 0,
      step: ForgotPasswordStep.success
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setForgotPasswordState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* loadPasswordConfig2({
  payload
}) {
  yield put(actions30.setForgotPasswordState({
    loading: true
  }));
  try {
    const passwordConfig = yield call(api.auth.loadPasswordConfig, payload);
    yield put(actions30.setForgotPasswordState({
      loading: false,
      passwordConfig
    }));
  } catch (e2) {
    yield put(actions30.setForgotPasswordState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* forgotPasswordSagas() {
  yield takeLeading$1(actions30.forgotPassword, forgotPassword2);
  yield takeLeading$1(actions30.resetPassword, resetPassword2);
  yield takeLeading$1(actions30.loadPasswordConfig, loadPasswordConfig2);
}
var _excluded38;
var init_saga27 = __esm({
  "node_modules/@frontegg/redux-store/auth/ForgotPasswordState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces29();
    init_utils5();
    _excluded38 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/TeamState/interfaces.js
var TeamStateKeys;
var init_interfaces53 = __esm({
  "node_modules/@frontegg/redux-store/auth/TeamState/interfaces.js"() {
    (function(TeamStateKeys2) {
      TeamStateKeys2["USERS"] = "USERS";
      TeamStateKeys2["STATS"] = "STATS";
      TeamStateKeys2["UPDATE_USER"] = "UPDATE_USER";
      TeamStateKeys2["DELETE_USER"] = "DELETE_USER";
      TeamStateKeys2["RESEND_ACTIVATE_LINK"] = "RESEND_ACTIVATE_LINK";
      TeamStateKeys2["RESEND_INVITATION_LINK"] = "RESEND_INVITATION_LINK";
      TeamStateKeys2["ROLES_AND_PERMISSIONS"] = "ROLES_AND_PERMISSIONS";
      TeamStateKeys2["CREATE_TOKEN_LINK"] = "CREATE_TOKEN_LINK";
      TeamStateKeys2["GET_TOKEN_LINK"] = "GET_TOKEN_LINK";
      TeamStateKeys2["UPDATE_TOKEN_LINK"] = "UPDATE_TOKEN_LINK";
      TeamStateKeys2["DELETE_TOKEN_LINK"] = "DELETE_TOKEN_LINK";
      TeamStateKeys2["CONFIG_TOKEN_LINK"] = "CONFIG_TOKEN_LINK";
      TeamStateKeys2["CONFIG_TEMPORARY_USERS"] = "CONFIG_TEMPORARY_USERS";
      TeamStateKeys2["UPDATE_USER_EXPIRATION_TIME"] = "UPDATE_USER_EXPIRATION_TIME";
    })(TeamStateKeys || (TeamStateKeys = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/ActivateState/saga.js
function* preActivateAccount({
  payload: {
    userId,
    token
  }
}) {
  yield put(actions30.setActivateState({
    loading: true,
    step: ActivateAccountStep.activating
  }));
  try {
    const {
      isAuthenticated
    } = yield select((state) => state.auth);
    if (isAuthenticated) {
      yield put(actions30.silentLogout());
    }
    const strategy = yield call(api.auth.getActivateAccountStrategy, {
      userId,
      token
    });
    yield put(actions30.setActivateStrategyState({
      strategy,
      loading: false,
      error: void 0
    }));
    if (strategy.shouldSetPassword) {
      yield put(actions30.setActivateState({
        loading: false,
        step: ActivateAccountStep.activatingForm
      }));
    }
  } catch (e2) {
    yield put(actions30.setActivateState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* activateAccount2(_ref) {
  let {
    payload: {
      callback,
      events
    }
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref.payload, _excluded39);
  yield put(actions30.setActivateState({
    loading: true
  }));
  try {
    const onRedirectTo = ContextHolder.onRedirectTo;
    const {
      routes
    } = yield select((state) => state.auth);
    const _yield$call = yield call(api.auth.activateAccountV2, payload), {
      user
    } = _yield$call, rest = _objectWithoutPropertiesLoose(_yield$call, _excluded216);
    if (user.redirectLocation) {
      window.location.href = user.redirectLocation;
      return;
    }
    if (isMfaRequired(user)) {
      yield put(actions30.setActivateState({
        step: ActivateAccountStep.success
      }));
      const mfaRequiredState = yield getMfaRequiredState(user);
      yield put(actions30.setState(mfaRequiredState));
      yield delay2(1e3);
      onRedirectTo(routes.loginUrl, {
        preserveQueryParams: true
      });
    } else {
      var _events$userVerified;
      yield put(actions30.setActivateState({
        step: ActivateAccountStep.success
      }));
      const userVerifiedPayload = {
        email: user.email,
        origin: UserVeirifedOriginTypes.ACTIVATION_LINK,
        id: user.id,
        tenantId: user.tenantId,
        name: user.name,
        createdAt: /* @__PURE__ */ new Date()
      };
      events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, userVerifiedPayload);
      reportGTMEvent(GTMEventAction.USER_VERIFIED, userVerifiedPayload);
      yield call(afterAuthenticationStateUpdate, _extends({
        user
      }, rest), {
        isAuthenticated: true
      });
      yield delay2(1e3);
      yield afterAuthNavigation();
      yield put(actions30.resetActivateState());
    }
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setActivateState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* getActivateAccountStrategy2({
  payload
}) {
  const {
    callback
  } = payload, params = _objectWithoutPropertiesLoose(payload, _excluded310);
  yield put(actions30.setActivateStrategyState({
    loading: true
  }));
  try {
    const strategy = yield call(api.auth.getActivateAccountStrategy, params);
    yield put(actions30.setActivateStrategyState({
      strategy,
      loading: false,
      error: void 0
    }));
    callback == null ? void 0 : callback(strategy);
  } catch (e2) {
    yield put(actions30.setActivateStrategyState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* resendActivationEmailFunction({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded46);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: body.email
  }));
  yield put(actions30.setActivateState({
    loading: true
  }));
  try {
    yield call(api.auth.resendActivationEmail, body);
    yield put(actions30.setActivateState({
      loading: false,
      error: void 0,
      resentEmail: true
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setActivateState({
      loading: false,
      error: errorHandler(e2)
    }));
    yield put(actions30.setTeamError({
      key: TeamStateKeys.RESEND_ACTIVATE_LINK,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: false
  }));
}
function* activateSagas() {
  yield takeLeading$1(actions30.activateAccount, activateAccount2);
  yield takeLeading$1(actions30.preActivateAccount, preActivateAccount);
  yield takeLeading$1(actions30.getActivateAccountStrategy, getActivateAccountStrategy2);
  yield takeLeading$1(actions30.resendActivationEmail, resendActivationEmailFunction);
}
var _excluded39, _excluded216, _excluded310, _excluded46;
var init_saga28 = __esm({
  "node_modules/@frontegg/redux-store/auth/ActivateState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_saga23();
    init_interfaces35();
    init_interfaces27();
    init_interfaces53();
    init_utils5();
    init_utils3();
    init_saga_utils();
    init_mfaRequiredState_saga();
    _excluded39 = ["callback", "events"];
    _excluded216 = ["user"];
    _excluded310 = ["callback"];
    _excluded46 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/AcceptInvitationState/saga.js
function* acceptInvitation2({
  payload
}) {
  if (!payload.token || !payload.userId) {
    yield put(actions30.setAcceptInvitationState({
      error: void 0,
      step: AcceptInvitationStep.invalid
    }));
    return;
  }
  try {
    yield put(actions30.setAcceptInvitationState({
      error: void 0,
      step: AcceptInvitationStep.pending
    }));
    yield call(api.auth.acceptInvitation, payload);
    yield put(actions30.setState({
      isAuthenticated: false,
      user: null,
      acceptInvitationState: {
        error: void 0,
        step: AcceptInvitationStep.success
      }
    }));
  } catch (e2) {
    yield put(actions30.setAcceptInvitationState({
      step: AcceptInvitationStep.failed,
      error: errorHandler(e2)
    }));
  }
}
function* acceptInvitationSagas() {
  yield takeLeading$1(actions30.acceptInvitation, acceptInvitation2);
}
var init_saga29 = __esm({
  "node_modules/@frontegg/redux-store/auth/AcceptInvitationState/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_reducer();
    init_rest_api();
    init_interfaces28();
    init_utils5();
  }
});

// node_modules/uuid/dist/esm-browser/rng.js
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}
var getRandomValues, rnds8;
var init_rng = __esm({
  "node_modules/uuid/dist/esm-browser/rng.js"() {
    rnds8 = new Uint8Array(16);
  }
});

// node_modules/uuid/dist/esm-browser/regex.js
var regex_default;
var init_regex = __esm({
  "node_modules/uuid/dist/esm-browser/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

// node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "node_modules/uuid/dist/esm-browser/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

// node_modules/uuid/dist/esm-browser/stringify.js
function stringify2(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, i2, stringify_default;
var init_stringify = __esm({
  "node_modules/uuid/dist/esm-browser/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (i2 = 0; i2 < 256; ++i2) {
      byteToHex.push((i2 + 256).toString(16).substr(1));
    }
    stringify_default = stringify2;
  }
});

// node_modules/uuid/dist/esm-browser/v1.js
var init_v1 = __esm({
  "node_modules/uuid/dist/esm-browser/v1.js"() {
    init_rng();
    init_stringify();
  }
});

// node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v2;
  var arr = new Uint8Array(16);
  arr[0] = (v2 = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v2 >>> 16 & 255;
  arr[2] = v2 >>> 8 & 255;
  arr[3] = v2 & 255;
  arr[4] = (v2 = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v2 & 255;
  arr[6] = (v2 = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v2 & 255;
  arr[8] = (v2 = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v2 & 255;
  arr[10] = (v2 = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v2 / 4294967296 & 255;
  arr[12] = v2 >>> 24 & 255;
  arr[13] = v2 >>> 16 & 255;
  arr[14] = v2 >>> 8 & 255;
  arr[15] = v2 & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "node_modules/uuid/dist/esm-browser/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

// node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i2 = 0; i2 < str.length; ++i2) {
    bytes.push(str.charCodeAt(i2));
  }
  return bytes;
}
function v35_default(name10, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i2 = 0; i2 < 16; ++i2) {
        buf[offset + i2] = bytes[i2];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name10;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "node_modules/uuid/dist/esm-browser/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

// node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i2 = 0; i2 < msg.length; ++i2) {
      bytes[i2] = msg.charCodeAt(i2);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i2 = 0; i2 < length32; i2 += 8) {
    var x2 = input[i2 >> 5] >>> i2 % 32 & 255;
    var hex = parseInt(hexTab.charAt(x2 >>> 4 & 15) + hexTab.charAt(x2 & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x2, len) {
  x2[len >> 5] |= 128 << len % 32;
  x2[getOutputLength(len) - 1] = len;
  var a2 = 1732584193;
  var b2 = -271733879;
  var c2 = -1732584194;
  var d2 = 271733878;
  for (var i2 = 0; i2 < x2.length; i2 += 16) {
    var olda = a2;
    var oldb = b2;
    var oldc = c2;
    var oldd = d2;
    a2 = md5ff(a2, b2, c2, d2, x2[i2], 7, -680876936);
    d2 = md5ff(d2, a2, b2, c2, x2[i2 + 1], 12, -389564586);
    c2 = md5ff(c2, d2, a2, b2, x2[i2 + 2], 17, 606105819);
    b2 = md5ff(b2, c2, d2, a2, x2[i2 + 3], 22, -1044525330);
    a2 = md5ff(a2, b2, c2, d2, x2[i2 + 4], 7, -176418897);
    d2 = md5ff(d2, a2, b2, c2, x2[i2 + 5], 12, 1200080426);
    c2 = md5ff(c2, d2, a2, b2, x2[i2 + 6], 17, -1473231341);
    b2 = md5ff(b2, c2, d2, a2, x2[i2 + 7], 22, -45705983);
    a2 = md5ff(a2, b2, c2, d2, x2[i2 + 8], 7, 1770035416);
    d2 = md5ff(d2, a2, b2, c2, x2[i2 + 9], 12, -1958414417);
    c2 = md5ff(c2, d2, a2, b2, x2[i2 + 10], 17, -42063);
    b2 = md5ff(b2, c2, d2, a2, x2[i2 + 11], 22, -1990404162);
    a2 = md5ff(a2, b2, c2, d2, x2[i2 + 12], 7, 1804603682);
    d2 = md5ff(d2, a2, b2, c2, x2[i2 + 13], 12, -40341101);
    c2 = md5ff(c2, d2, a2, b2, x2[i2 + 14], 17, -1502002290);
    b2 = md5ff(b2, c2, d2, a2, x2[i2 + 15], 22, 1236535329);
    a2 = md5gg(a2, b2, c2, d2, x2[i2 + 1], 5, -165796510);
    d2 = md5gg(d2, a2, b2, c2, x2[i2 + 6], 9, -1069501632);
    c2 = md5gg(c2, d2, a2, b2, x2[i2 + 11], 14, 643717713);
    b2 = md5gg(b2, c2, d2, a2, x2[i2], 20, -373897302);
    a2 = md5gg(a2, b2, c2, d2, x2[i2 + 5], 5, -701558691);
    d2 = md5gg(d2, a2, b2, c2, x2[i2 + 10], 9, 38016083);
    c2 = md5gg(c2, d2, a2, b2, x2[i2 + 15], 14, -660478335);
    b2 = md5gg(b2, c2, d2, a2, x2[i2 + 4], 20, -405537848);
    a2 = md5gg(a2, b2, c2, d2, x2[i2 + 9], 5, 568446438);
    d2 = md5gg(d2, a2, b2, c2, x2[i2 + 14], 9, -1019803690);
    c2 = md5gg(c2, d2, a2, b2, x2[i2 + 3], 14, -187363961);
    b2 = md5gg(b2, c2, d2, a2, x2[i2 + 8], 20, 1163531501);
    a2 = md5gg(a2, b2, c2, d2, x2[i2 + 13], 5, -1444681467);
    d2 = md5gg(d2, a2, b2, c2, x2[i2 + 2], 9, -51403784);
    c2 = md5gg(c2, d2, a2, b2, x2[i2 + 7], 14, 1735328473);
    b2 = md5gg(b2, c2, d2, a2, x2[i2 + 12], 20, -1926607734);
    a2 = md5hh(a2, b2, c2, d2, x2[i2 + 5], 4, -378558);
    d2 = md5hh(d2, a2, b2, c2, x2[i2 + 8], 11, -2022574463);
    c2 = md5hh(c2, d2, a2, b2, x2[i2 + 11], 16, 1839030562);
    b2 = md5hh(b2, c2, d2, a2, x2[i2 + 14], 23, -35309556);
    a2 = md5hh(a2, b2, c2, d2, x2[i2 + 1], 4, -1530992060);
    d2 = md5hh(d2, a2, b2, c2, x2[i2 + 4], 11, 1272893353);
    c2 = md5hh(c2, d2, a2, b2, x2[i2 + 7], 16, -155497632);
    b2 = md5hh(b2, c2, d2, a2, x2[i2 + 10], 23, -1094730640);
    a2 = md5hh(a2, b2, c2, d2, x2[i2 + 13], 4, 681279174);
    d2 = md5hh(d2, a2, b2, c2, x2[i2], 11, -358537222);
    c2 = md5hh(c2, d2, a2, b2, x2[i2 + 3], 16, -722521979);
    b2 = md5hh(b2, c2, d2, a2, x2[i2 + 6], 23, 76029189);
    a2 = md5hh(a2, b2, c2, d2, x2[i2 + 9], 4, -640364487);
    d2 = md5hh(d2, a2, b2, c2, x2[i2 + 12], 11, -421815835);
    c2 = md5hh(c2, d2, a2, b2, x2[i2 + 15], 16, 530742520);
    b2 = md5hh(b2, c2, d2, a2, x2[i2 + 2], 23, -995338651);
    a2 = md5ii(a2, b2, c2, d2, x2[i2], 6, -198630844);
    d2 = md5ii(d2, a2, b2, c2, x2[i2 + 7], 10, 1126891415);
    c2 = md5ii(c2, d2, a2, b2, x2[i2 + 14], 15, -1416354905);
    b2 = md5ii(b2, c2, d2, a2, x2[i2 + 5], 21, -57434055);
    a2 = md5ii(a2, b2, c2, d2, x2[i2 + 12], 6, 1700485571);
    d2 = md5ii(d2, a2, b2, c2, x2[i2 + 3], 10, -1894986606);
    c2 = md5ii(c2, d2, a2, b2, x2[i2 + 10], 15, -1051523);
    b2 = md5ii(b2, c2, d2, a2, x2[i2 + 1], 21, -2054922799);
    a2 = md5ii(a2, b2, c2, d2, x2[i2 + 8], 6, 1873313359);
    d2 = md5ii(d2, a2, b2, c2, x2[i2 + 15], 10, -30611744);
    c2 = md5ii(c2, d2, a2, b2, x2[i2 + 6], 15, -1560198380);
    b2 = md5ii(b2, c2, d2, a2, x2[i2 + 13], 21, 1309151649);
    a2 = md5ii(a2, b2, c2, d2, x2[i2 + 4], 6, -145523070);
    d2 = md5ii(d2, a2, b2, c2, x2[i2 + 11], 10, -1120210379);
    c2 = md5ii(c2, d2, a2, b2, x2[i2 + 2], 15, 718787259);
    b2 = md5ii(b2, c2, d2, a2, x2[i2 + 9], 21, -343485551);
    a2 = safeAdd(a2, olda);
    b2 = safeAdd(b2, oldb);
    c2 = safeAdd(c2, oldc);
    d2 = safeAdd(d2, oldd);
  }
  return [a2, b2, c2, d2];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i2 = 0; i2 < length8; i2 += 8) {
    output[i2 >> 5] |= (input[i2 / 8] & 255) << i2 % 32;
  }
  return output;
}
function safeAdd(x2, y2) {
  var lsw = (x2 & 65535) + (y2 & 65535);
  var msw = (x2 >> 16) + (y2 >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q2, a2, b2, x2, s2, t2) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a2, q2), safeAdd(x2, t2)), s2), b2);
}
function md5ff(a2, b2, c2, d2, x2, s2, t2) {
  return md5cmn(b2 & c2 | ~b2 & d2, a2, b2, x2, s2, t2);
}
function md5gg(a2, b2, c2, d2, x2, s2, t2) {
  return md5cmn(b2 & d2 | c2 & ~d2, a2, b2, x2, s2, t2);
}
function md5hh(a2, b2, c2, d2, x2, s2, t2) {
  return md5cmn(b2 ^ c2 ^ d2, a2, b2, x2, s2, t2);
}
function md5ii(a2, b2, c2, d2, x2, s2, t2) {
  return md5cmn(c2 ^ (b2 | ~d2), a2, b2, x2, s2, t2);
}
var md5_default;
var init_md5 = __esm({
  "node_modules/uuid/dist/esm-browser/md5.js"() {
    md5_default = md5;
  }
});

// node_modules/uuid/dist/esm-browser/v3.js
var v3;
var init_v3 = __esm({
  "node_modules/uuid/dist/esm-browser/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
  }
});

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i2 = 0; i2 < 16; ++i2) {
      buf[offset + i2] = rnds[i2];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "node_modules/uuid/dist/esm-browser/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

// node_modules/uuid/dist/esm-browser/sha1.js
function f2(s2, x2, y2, z2) {
  switch (s2) {
    case 0:
      return x2 & y2 ^ ~x2 & z2;
    case 1:
      return x2 ^ y2 ^ z2;
    case 2:
      return x2 & y2 ^ x2 & z2 ^ y2 & z2;
    case 3:
      return x2 ^ y2 ^ z2;
  }
}
function ROTL(x2, n2) {
  return x2 << n2 | x2 >>> 32 - n2;
}
function sha1(bytes) {
  var K2 = [1518500249, 1859775393, 2400959708, 3395469782];
  var H2 = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i2 = 0; i2 < msg.length; ++i2) {
      bytes.push(msg.charCodeAt(i2));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l2 = bytes.length / 4 + 2;
  var N2 = Math.ceil(l2 / 16);
  var M2 = new Array(N2);
  for (var _i = 0; _i < N2; ++_i) {
    var arr = new Uint32Array(16);
    for (var j2 = 0; j2 < 16; ++j2) {
      arr[j2] = bytes[_i * 64 + j2 * 4] << 24 | bytes[_i * 64 + j2 * 4 + 1] << 16 | bytes[_i * 64 + j2 * 4 + 2] << 8 | bytes[_i * 64 + j2 * 4 + 3];
    }
    M2[_i] = arr;
  }
  M2[N2 - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M2[N2 - 1][14] = Math.floor(M2[N2 - 1][14]);
  M2[N2 - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N2; ++_i2) {
    var W2 = new Uint32Array(80);
    for (var t2 = 0; t2 < 16; ++t2) {
      W2[t2] = M2[_i2][t2];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W2[_t] = ROTL(W2[_t - 3] ^ W2[_t - 8] ^ W2[_t - 14] ^ W2[_t - 16], 1);
    }
    var a2 = H2[0];
    var b2 = H2[1];
    var c2 = H2[2];
    var d2 = H2[3];
    var e2 = H2[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s2 = Math.floor(_t2 / 20);
      var T = ROTL(a2, 5) + f2(s2, b2, c2, d2) + e2 + K2[s2] + W2[_t2] >>> 0;
      e2 = d2;
      d2 = c2;
      c2 = ROTL(b2, 30) >>> 0;
      b2 = a2;
      a2 = T;
    }
    H2[0] = H2[0] + a2 >>> 0;
    H2[1] = H2[1] + b2 >>> 0;
    H2[2] = H2[2] + c2 >>> 0;
    H2[3] = H2[3] + d2 >>> 0;
    H2[4] = H2[4] + e2 >>> 0;
  }
  return [H2[0] >> 24 & 255, H2[0] >> 16 & 255, H2[0] >> 8 & 255, H2[0] & 255, H2[1] >> 24 & 255, H2[1] >> 16 & 255, H2[1] >> 8 & 255, H2[1] & 255, H2[2] >> 24 & 255, H2[2] >> 16 & 255, H2[2] >> 8 & 255, H2[2] & 255, H2[3] >> 24 & 255, H2[3] >> 16 & 255, H2[3] >> 8 & 255, H2[3] & 255, H2[4] >> 24 & 255, H2[4] >> 16 & 255, H2[4] >> 8 & 255, H2[4] & 255];
}
var sha1_default;
var init_sha1 = __esm({
  "node_modules/uuid/dist/esm-browser/sha1.js"() {
    sha1_default = sha1;
  }
});

// node_modules/uuid/dist/esm-browser/v5.js
var v5;
var init_v5 = __esm({
  "node_modules/uuid/dist/esm-browser/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
  }
});

// node_modules/uuid/dist/esm-browser/nil.js
var init_nil = __esm({
  "node_modules/uuid/dist/esm-browser/nil.js"() {
  }
});

// node_modules/uuid/dist/esm-browser/version.js
var init_version = __esm({
  "node_modules/uuid/dist/esm-browser/version.js"() {
    init_validate();
  }
});

// node_modules/uuid/dist/esm-browser/index.js
var init_esm_browser = __esm({
  "node_modules/uuid/dist/esm-browser/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

// node_modules/@frontegg/redux-store/auth/GroupsState/interfaces.js
var GroupsStateKeys, GroupRelations2;
var init_interfaces54 = __esm({
  "node_modules/@frontegg/redux-store/auth/GroupsState/interfaces.js"() {
    (function(GroupsStateKeys2) {
      GroupsStateKeys2["CREATE_GROUP"] = "CREATE_GROUP";
      GroupsStateKeys2["GET_GROUP"] = "GET_GROUP";
      GroupsStateKeys2["GET_GROUPS"] = "GET_GROUPS";
      GroupsStateKeys2["DELETE_GROUP"] = "DELETE_GROUP";
      GroupsStateKeys2["UPDATE_GROUP"] = "UPDATE_GROUP";
      GroupsStateKeys2["ADD_USERS_TO_GROUP"] = "ADD_USERS_TO_GROUP";
      GroupsStateKeys2["DELETE_USERS_FROM_GROUP"] = "DELETE_USERS_FROM_GROUP";
      GroupsStateKeys2["ADD_ROLES_TO_GROUP"] = "ADD_ROLES_TO_GROUP";
      GroupsStateKeys2["DELETE_ROLES_FROM_GROUP"] = "DELETE_ROLES_FROM_GROUP";
      GroupsStateKeys2["GET_GROUP_CONFIGURATION"] = "GET_GROUP_CONFIGURATION";
      GroupsStateKeys2["UPDATE_GROUP_CONFIGURATION"] = "UPDATE_GROUP_CONFIGURATION";
      GroupsStateKeys2["GET_TEAM_USERS"] = "GET_TEAM_USERS";
    })(GroupsStateKeys || (GroupsStateKeys = {}));
    (function(GroupRelations3) {
      GroupRelations3["roles"] = "roles";
      GroupRelations3["users"] = "users";
      GroupRelations3["rolesAndUsers"] = "rolesAndUsers";
    })(GroupRelations2 || (GroupRelations2 = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/TeamState/saga.js
function* getGroupsForUsers() {
  try {
    const {
      groups
    } = yield call(api.groups.getGroups, {
      _groupsRelations: GroupRelations2.roles
    });
    return groups;
  } catch (e2) {
    return [];
  }
}
function* loadUsersV2({
  payload
}) {
  var _payload$pageSize, _payload$pageOffset, _payload$filter, _payload$sort, _payload$shouldShowSu;
  const {
    silentLoading,
    callback
  } = payload;
  const teamState2 = yield selectTeamState();
  const pageSize = (_payload$pageSize = payload.pageSize) != null ? _payload$pageSize : teamState2.pageSize;
  const pageOffset = (_payload$pageOffset = payload.pageOffset) != null ? _payload$pageOffset : teamState2.pageOffset;
  const filter = (_payload$filter = payload.filter) != null ? _payload$filter : teamState2.filterV2;
  const sort = (_payload$sort = payload.sort) != null ? _payload$sort : teamState2.sortV2;
  const shouldIncludeSubTenants = (_payload$shouldShowSu = payload == null ? void 0 : payload.shouldShowSubTenantUsersIfReseller) != null ? _payload$shouldShowSu : teamState2 == null ? void 0 : teamState2.shouldShowSubTenantUsersIfReseller;
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: !silentLoading
  }));
  yield put(actions30.setTeamState({
    pageSize,
    pageOffset,
    filterV2: filter,
    sortV2: sort
  }));
  try {
    const [{
      items: users,
      _metadata: {
        totalPages,
        totalItems
      }
    }, {
      items: roles
    }, {
      items: permissions
    }, groups] = yield all([call(api.users.getUsersV2, _extends({}, (filter == null ? void 0 : filter.length) && {
      _filter: filter
    }, sort && {
      _sortBy: sort
    }, payload.order && {
      _order: payload.order
    }, {
      _offset: pageOffset,
      _limit: pageSize,
      _includeSubTenants: shouldIncludeSubTenants
    })), call(api.teams.loadAvailableRoles), call(api.teams.loadAvailablePermissions), call(getGroupsForUsers)]);
    const usersWithGroups = users.map((user) => {
      var _user$groups;
      const userGroupsFullData = user == null ? void 0 : (_user$groups = user.groups) == null ? void 0 : _user$groups.map((group) => groups.filter((g2) => g2.id === group.id)).flat();
      return _extends({}, user, {
        groups: userGroupsFullData
      });
    });
    yield put(actions30.setTeamState({
      users: usersWithGroups.map((user) => _extends({}, user, {
        roleIds: user.roles.map((role) => role.id)
      })),
      totalPages,
      totalItems,
      roles,
      permissions
    }));
    callback == null ? void 0 : callback(users);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.USERS,
      value: errorHandler(e2)
    }));
    yield put(actions30.setTeamState({
      totalPages: 0,
      users: []
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: false
  }));
}
function* loadUsers2({
  payload
}) {
  var _payload$pageSize2, _payload$pageOffset2, _payload$filter2, _payload$sort2;
  const {
    silentLoading,
    callback
  } = payload;
  const teamState2 = yield selectTeamState();
  const pageSize = (_payload$pageSize2 = payload.pageSize) != null ? _payload$pageSize2 : teamState2.pageSize;
  const pageOffset = (_payload$pageOffset2 = payload.pageOffset) != null ? _payload$pageOffset2 : teamState2.pageOffset;
  const filter = (_payload$filter2 = payload.filter) != null ? _payload$filter2 : teamState2.filter;
  const sort = (_payload$sort2 = payload.sort) != null ? _payload$sort2 : teamState2.sort;
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: !silentLoading
  }));
  yield put(actions30.setTeamState({
    pageSize,
    pageOffset,
    filter,
    sort
  }));
  try {
    const [{
      items: users,
      totalPages,
      totalItems
    }, {
      items: roles
    }, {
      items: permissions
    }] = yield all([call(api.teams.loadUsers, {
      pageSize,
      pageOffset,
      filter,
      sort
    }), call(api.teams.loadAvailableRoles), call(api.teams.loadAvailablePermissions)]);
    yield put(actions30.setTeamState({
      users,
      totalPages,
      totalItems,
      roles,
      permissions
    }));
    callback == null ? void 0 : callback(users);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.USERS,
      value: e2.message
    }));
    yield put(actions30.setTeamState({
      totalPages: 0,
      users: []
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: false
  }));
}
function* loadAllSubTenantsUsers({
  payload
}) {
  var _payload$_limit, _payload$_offset, _payload$_filter, _payload$_sortBy, _payload$_order;
  const {
    silentLoading,
    callback
  } = payload;
  const teamState2 = yield selectTeamState();
  const _limit = (_payload$_limit = payload._limit) != null ? _payload$_limit : teamState2.allUsersQueryParams._limit;
  const _offset = (_payload$_offset = payload._offset) != null ? _payload$_offset : teamState2.allUsersQueryParams._offset;
  const _filter = (_payload$_filter = payload._filter) != null ? _payload$_filter : teamState2.allUsersQueryParams._filter;
  const _sortBy = (_payload$_sortBy = payload._sortBy) != null ? _payload$_sortBy : teamState2.allUsersQueryParams._sortBy;
  const _order = (_payload$_order = payload._order) != null ? _payload$_order : teamState2.allUsersQueryParams._order;
  const allUsersQueryParams = {
    _limit: _limit || 20,
    _offset: _offset || 0,
    _filter: _filter || "",
    _sortBy: _sortBy || "name",
    _order: _order || "DESC"
  };
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: !silentLoading
  }));
  yield put(actions30.setTeamState({
    allUsersQueryParams
  }));
  try {
    const [{
      items: users,
      _metadata: {
        totalPages,
        totalItems
      }
    }, {
      items: roles
    }, {
      items: permissions
    }] = yield all([call(api.subTenants.loadAllUsers, _extends({}, allUsersQueryParams)), call(api.teams.loadAvailableRoles), call(api.teams.loadAvailablePermissions)]);
    yield put(actions30.setTeamState({
      allUsers: users,
      totalPages,
      totalItems,
      roles,
      permissions
    }));
    callback == null ? void 0 : callback(users);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.USERS,
      value: errorHandler(e2)
    }));
    yield put(actions30.setTeamState({
      totalPages: 0,
      users: []
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: false
  }));
}
function* loadRoles({
  payload
}) {
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.ROLES_AND_PERMISSIONS,
    value: true
  }));
  try {
    var _payload$callback;
    const [{
      items: roles
    }, {
      items: permissions
    }] = yield all([call(api.teams.loadAvailableRoles), call(api.teams.loadAvailablePermissions)]);
    yield put(actions30.setTeamState({
      roles,
      permissions
    }));
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, {
      roles,
      permissions
    });
  } catch (e2) {
    var _payload$callback2;
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e2);
    yield put(actions30.setTeamError({
      key: TeamStateKeys.ROLES_AND_PERMISSIONS,
      value: errorHandler(e2)
    }));
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.ROLES_AND_PERMISSIONS,
    value: true
  }));
}
function* addUser2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded40);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  try {
    var _roles$map;
    const res = yield call(api.teams.addUser, body);
    const {
      roles
    } = res, userWithoutRoleIds = _objectWithoutPropertiesLoose(res, _excluded217);
    const roleIds = (_roles$map = roles == null ? void 0 : roles.map((role) => role.id)) != null ? _roles$map : [];
    const newUser = _extends({}, userWithoutRoleIds, {
      roleIds
    });
    callback == null ? void 0 : callback(newUser);
    yield put(actions30.setTeamState({
      users: [newUser, ...teamState2.users],
      addUserDialogState: {
        open: false,
        loading: false
      }
    }));
  } catch (e2) {
    yield put(actions30.setTeamState({
      addUserDialogState: _extends({}, teamState2.addUserDialogState, {
        loading: false,
        error: errorHandler(e2)
      })
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* addUsersBulk({
  payload
}) {
  const {
    callback
  } = payload;
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  const allowedEmails = [];
  const unallowedEmails = [];
  const bodies = payload.emails.map((email) => _extends({
    email,
    roleIds: payload.roleIds
  }, payload.expirationInSeconds && {
    expirationInSeconds: payload.expirationInSeconds
  }));
  yield put(actions30.setTeamState({
    addUserDialogState: {
      open: true,
      loading: true
    }
  }));
  for (let i2 = 0; i2 < bodies.length; i2++) {
    const body = bodies.at(i2);
    try {
      yield call(api.teams.addUser, body);
      allowedEmails.push(body.email);
    } catch (e2) {
      unallowedEmails.push(body.email);
    }
  }
  const queryObject = {
    pageOffset: 0,
    pageSize: 10,
    filter: "",
    silentLoading: payload.emails.length > 0
  };
  yield put(actions30.loadUsersV2(queryObject));
  yield put(actions30.setTeamState({
    addUserDialogState: {
      loading: false
    }
  }));
  callback == null ? void 0 : callback({
    unallowedEmails,
    allowedEmails
  });
}
function* addUserToSubTenants({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded311);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  try {
    yield call(api.subTenants.addUserToTenantAndSubTenants, body);
    const {
      items: users,
      _metadata: {
        totalPages,
        totalItems
      }
    } = yield call(api.subTenants.loadAllUsers, {
      _limit: 20,
      _offset: 0,
      _filter: "",
      _sortBy: "name",
      _order: "DESC"
    });
    yield put(actions30.setTeamState({
      allUsers: users,
      totalPages,
      totalItems,
      addUserDialogState: {
        open: false,
        loading: false
      }
    }));
    callback == null ? void 0 : callback(null);
  } catch (e2) {
    yield put(actions30.setTeamState({
      addUserDialogState: _extends({}, teamState2.addUserDialogState, {
        loading: false,
        error: errorHandler(e2)
      })
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* updateUser2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded47);
  const {
    id: userId
  } = body;
  const teamState2 = yield selectTeamState();
  const oldUserData = teamState2.users.find((user) => user.id === body.id);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER,
    value: userId || ""
  }));
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    }),
    users: teamState2.users.map((user) => {
      if (user.id === body.id) {
        return _extends({}, user, body);
      }
      return user;
    })
  }));
  try {
    var _body$roleIds;
    if (oldUserData.roleIds.length > 0 && ((_body$roleIds = body.roleIds) == null ? void 0 : _body$roleIds.length) === 0) {
      body.roleIds = [""];
    }
    const {
      item: newUser
    } = yield call(api.teams.updateUser, body);
    callback == null ? void 0 : callback(newUser);
    yield put(actions30.setTeamState({
      users: teamState2.users.map((user) => {
        return user.id === newUser.id ? _extends({}, user, newUser, {
          groups: user.groups,
          createdAt: user.createdAt,
          customData: user.customData,
          lastLogin: user.lastLogin
        }) : user;
      })
    }));
    yield put(actions30.setTeamLoader({
      key: TeamStateKeys.UPDATE_USER,
      value: false
    }));
  } catch (e2) {
    yield put(actions30.setTeamState({
      addUserDialogState: _extends({}, teamState2.addUserDialogState, {
        loading: false,
        error: errorHandler(e2)
      }),
      users: teamState2.users.map((user) => user.id === body.id ? _extends({}, user, oldUserData) : user)
    }));
    yield put(actions30.setTeamLoader({
      key: TeamStateKeys.UPDATE_USER,
      value: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* deleteUser2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded55);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    deleteUserDialogState: _extends({}, teamState2.deleteUserDialogState, {
      loading: true
    })
  }));
  try {
    yield call(api.teams.deleteUser, body);
    callback == null ? void 0 : callback(true);
    yield put(actions30.setTeamState({
      users: teamState2.users.filter((user) => user.id !== body.userId),
      deleteUserDialogState: {
        open: false,
        loading: false
      }
    }));
  } catch (e2) {
    yield put(actions30.setTeamState({
      deleteUserDialogState: _extends({}, teamState2.deleteUserDialogState, {
        loading: false,
        error: errorHandler(e2)
      })
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* setUserRolesForSubTenants2({
  payload
}) {
  const {
    callback,
    userId
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded65);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  try {
    yield call(api.subTenants.setUserRolesForSubTenants, userId, body);
    const updatedUser = teamState2.allUsers.find((user) => user.id === userId);
    let newTenants = [];
    if (updatedUser) {
      newTenants = updatedUser.tenants.map((tenant) => {
        var _body$subTenantsRoles;
        return _extends({}, tenant, {
          roles: ((_body$subTenantsRoles = body.subTenantsRoles.find((roleUpdate) => roleUpdate.tenantId === tenant.tenantId)) == null ? void 0 : _body$subTenantsRoles.roleIds.map((roleId) => {
            const role = teamState2.roles.find(({
              id
            }) => roleId === id);
            return role;
          }).filter((role) => role)) || tenant.roles
        });
      });
    }
    yield put(actions30.setTeamState({
      allUsers: [...teamState2.allUsers.filter((user) => user.id !== userId), ...updatedUser ? [_extends({}, updatedUser, {
        tenants: newTenants
      })] : []],
      addUserDialogState: {
        open: false,
        loading: false
      }
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamState({
      addUserDialogState: _extends({}, teamState2.addUserDialogState, {
        loading: false,
        error: errorHandler(e2)
      })
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* deleteUserFromSubTenants({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded74);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    deleteUserDialogState: _extends({}, teamState2.deleteUserDialogState, {
      loading: true
    })
  }));
  try {
    yield call(api.subTenants.removeUserFromTenantAndSubTenants, body);
    callback == null ? void 0 : callback(true);
    yield put(actions30.setTeamState({
      allUsers: teamState2.allUsers.filter((user) => user.id !== body.userId && user.tenants.length === body.subTenants.length),
      deleteUserDialogState: {
        open: false,
        loading: false
      }
    }));
  } catch (e2) {
    yield put(actions30.setTeamState({
      deleteUserDialogState: _extends({}, teamState2.deleteUserDialogState, {
        loading: false,
        error: errorHandler(e2)
      })
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* resendActivationLink2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded84);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: body.userId
  }));
  try {
    yield call(api.teams.resendActivationLink, body);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.RESEND_ACTIVATE_LINK,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: false
  }));
}
function* resendInvitationLink2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded94);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: body.email
  }));
  try {
    yield call(api.teams.resendInvitationLink, body);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.RESEND_INVITATION_LINK,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: false
  }));
}
function* resendInvitationEmail2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded104);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: body.email
  }));
  try {
    yield call(api.auth.resendInvitationEmail, body);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.RESEND_INVITATION_LINK,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: false
  }));
}
function* resendInvitationLinkToAllSubTenants({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded114);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: body.email
  }));
  try {
    yield call(api.teams.resendInvitationLinkToAllTenants, body);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.RESEND_INVITATION_LINK,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: false
  }));
}
function* getInvitationLinkConfig() {
  yield put(actions30.setTeamError({
    key: TeamStateKeys.CONFIG_TOKEN_LINK,
    value: false
  }));
  try {
    const invitationLinkConfig = yield call(api.teams.getInviteLinkConfiguration);
    yield put(actions30.setTeamState({
      inviteTokenState: _extends({}, invitationLinkConfig)
    }));
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.CONFIG_TOKEN_LINK,
      value: errorHandler(e2)
    }));
  }
}
function* getTemporaryUsersConfig() {
  yield put(actions30.setTeamError({
    key: TeamStateKeys.CONFIG_TEMPORARY_USERS,
    value: false
  }));
  try {
    const temporaryUsersConfig = yield call(api.teams.getTemporaryUserConfiguration);
    yield put(actions30.setTeamState({
      temporaryUsersConfig
    }));
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.CONFIG_TEMPORARY_USERS,
      value: errorHandler(e2)
    }));
  }
}
function* updateUserExpirationTime2({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded124);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
    value: true
  }));
  try {
    const res = yield call(api.teams.updateUserExpirationTime, body);
    yield put(actions30.setTeamState({
      users: teamState2.users.map((user) => {
        return user.id === body.userId ? _extends({}, user, {
          temporaryExpirationDate: new Date(res.temporaryExpirationDate)
        }) : user;
      })
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setTeamLoader({
      key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
      value: false
    }));
  }
}
function* setUserAsPermanent({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded133);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
    value: true
  }));
  try {
    yield call(api.teams.setPermanentUser, body.userId);
    yield put(actions30.setTeamState({
      users: teamState2.users.map((user) => {
        return user.id === body.userId ? _extends({}, user, {
          temporaryExpirationDate: void 0
        }) : user;
      })
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setTeamLoader({
      key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
      value: false
    }));
  }
}
function* getInvitationLink() {
  yield put(actions30.setTeamError({
    key: TeamStateKeys.GET_TOKEN_LINK,
    value: false
  }));
  try {
    yield call(getInvitationLinkConfig);
    const data = yield call(api.teams.getInviteUserLink);
    const {
      inviteTokenState
    } = yield selectTeamState();
    yield put(actions30.setTeamState({
      inviteTokenState: _extends({}, inviteTokenState, data)
    }));
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.GET_TOKEN_LINK,
      value: errorHandler(e2)
    }));
  }
}
function* createInvitationLink({
  payload: {
    callback
  }
}) {
  yield put(actions30.setTeamError({
    key: TeamStateKeys.CREATE_TOKEN_LINK,
    value: false
  }));
  const {
    inviteTokenState
  } = yield selectTeamState();
  try {
    const data = yield call(api.teams.createInviteUserLink, {
      expiresInMinutes: 43200
    });
    yield put(actions30.setTeamState({
      inviteTokenState: _extends({}, inviteTokenState, data)
    }));
    callback == null ? void 0 : callback(data.token);
  } catch (e2) {
    callback == null ? void 0 : callback(null, e2);
    yield put(actions30.setTeamError({
      key: TeamStateKeys.CREATE_TOKEN_LINK,
      value: errorHandler(e2)
    }));
  }
}
function* updateInvitationLink({
  payload: {
    callback,
    expiresInMinutes,
    shouldSendEmail
  }
}) {
  const {
    inviteTokenState
  } = yield selectTeamState();
  yield put(actions30.setTeamError({
    key: TeamStateKeys.UPDATE_TOKEN_LINK,
    value: false
  }));
  try {
    const data = yield call(api.teams.updateInviteUserLink, {
      expiresInMinutes,
      shouldSendEmail
    });
    yield put(actions30.setTeamState({
      inviteTokenState: _extends({}, inviteTokenState, data)
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    callback == null ? void 0 : callback(null, e2);
    yield put(actions30.setTeamError({
      key: TeamStateKeys.UPDATE_TOKEN_LINK,
      value: errorHandler(e2)
    }));
  }
}
function* deleteInvitationLink({
  payload
}) {
  const {
    callback
  } = payload != null ? payload : {};
  yield put(actions30.setTeamError({
    key: TeamStateKeys.DELETE_TOKEN_LINK,
    value: false
  }));
  try {
    yield call(api.teams.deleteInviteUserLink);
    yield put(actions30.setTeamState({
      inviteTokenState: void 0
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setTeamError({
      key: TeamStateKeys.DELETE_TOKEN_LINK,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* openAddUserDialog({
  payload
}) {
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({
      open: true,
      loading: false,
      error: false
    }, payload)
  }));
}
function* closeAddUserDialog({
  payload
}) {
  const teamState2 = yield selectTeamState();
  const {
    addUserDialogState: {
      onClose
    }
  } = teamState2;
  onClose == null ? void 0 : onClose(payload);
  yield put(actions30.setTeamState({
    addUserDialogState: {
      loading: false,
      error: false,
      open: false
    }
  }));
}
function* openDeleteUserDialog({
  payload
}) {
  yield put(actions30.setTeamState({
    deleteUserDialogState: _extends({
      open: true,
      loading: false,
      error: false
    }, payload)
  }));
}
function* closeDeleteUserDialog({
  payload
}) {
  const teamState2 = yield selectTeamState();
  const {
    deleteUserDialogState: {
      onClose
    }
  } = teamState2;
  onClose == null ? void 0 : onClose(payload);
  yield put(actions30.setTeamState({
    deleteUserDialogState: {
      loading: false,
      error: false,
      open: false
    }
  }));
}
function* teamSagas() {
  yield takeLatest$1(actions30.loadUsers, loadUsers2);
  yield takeLatest$1(actions30.loadUsersV2, loadUsersV2);
  yield takeLatest$1(actions30.loadAllSubTenantsUsers, loadAllSubTenantsUsers);
  yield takeLatest$1(actions30.loadRoles, loadRoles);
  yield takeEvery$1(actions30.addUser, addUser2);
  yield takeEvery$1(actions30.addUsersBulk, addUsersBulk);
  yield takeEvery$1(actions30.addUserToSubTenants, addUserToSubTenants);
  yield takeEvery$1(actions30.updateUser, updateUser2);
  yield takeEvery$1(actions30.setUserRolesForSubTenants, setUserRolesForSubTenants2);
  yield takeEvery$1(actions30.deleteUser, deleteUser2);
  yield takeEvery$1(actions30.deleteUserFromSubTenants, deleteUserFromSubTenants);
  yield takeEvery$1(actions30.resendActivationLink, resendActivationLink2);
  yield takeEvery$1(actions30.resendInvitationLink, resendInvitationLink2);
  yield takeEvery$1(actions30.resendInvitationEmail, resendInvitationEmail2);
  yield takeEvery$1(actions30.resendInvitationLinkToAllSubTenants, resendInvitationLinkToAllSubTenants);
  yield takeEvery$1(actions30.getTemporaryUsersConfig, getTemporaryUsersConfig);
  yield takeEvery$1(actions30.updateUserExpirationTime, updateUserExpirationTime2);
  yield takeEvery$1(actions30.setUserAsPermanent, setUserAsPermanent);
  yield takeEvery$1(actions30.getInvitationLink, getInvitationLink);
  yield takeEvery$1(actions30.createInvitationLink, createInvitationLink);
  yield takeEvery$1(actions30.updateInvitationLink, updateInvitationLink);
  yield takeEvery$1(actions30.deleteInvitationLink, deleteInvitationLink);
  yield takeEvery$1(actions30.openAddUserDialog, openAddUserDialog);
  yield takeEvery$1(actions30.closeAddUserDialog, closeAddUserDialog);
  yield takeEvery$1(actions30.openDeleteUserDialog, openDeleteUserDialog);
  yield takeEvery$1(actions30.closeDeleteUserDialog, closeDeleteUserDialog);
}
function* loadUsersMock({
  payload
}) {
  var _payload$pageSize3, _payload$pageOffset3, _payload$filter3, _payload$sort3;
  const {
    silentLoading,
    callback
  } = payload;
  const teamState2 = yield selectTeamState();
  const pageSize = (_payload$pageSize3 = payload.pageSize) != null ? _payload$pageSize3 : teamState2.pageSize;
  const pageOffset = (_payload$pageOffset3 = payload.pageOffset) != null ? _payload$pageOffset3 : teamState2.pageOffset;
  const filter = (_payload$filter3 = payload.filter) != null ? _payload$filter3 : teamState2.filterV2;
  const sort = (_payload$sort3 = payload.sort) != null ? _payload$sort3 : teamState2.sortV2;
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: !silentLoading
  }));
  yield put(actions30.setTeamState({
    pageSize,
    pageOffset,
    filterV2: filter,
    sortV2: sort
  }));
  const totalPages = 2;
  const totalItems = 10;
  yield delay();
  yield put(actions30.setTeamState({
    users: usersDemo,
    totalPages,
    totalItems,
    roles: rolesDemo,
    permissions: permissionsDemo
  }));
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: false
  }));
  callback == null ? void 0 : callback(usersDemo);
}
function* loadAllSubTenantsUsersMock({
  payload
}) {
  var _payload$_limit2, _payload$_offset2, _payload$_filter2, _payload$_sortBy2, _payload$_order2;
  const {
    silentLoading,
    callback
  } = payload;
  const teamState2 = yield selectTeamState();
  const _limit = (_payload$_limit2 = payload._limit) != null ? _payload$_limit2 : teamState2.allUsersQueryParams._limit;
  const _offset = (_payload$_offset2 = payload._offset) != null ? _payload$_offset2 : teamState2.allUsersQueryParams._offset;
  const _filter = (_payload$_filter2 = payload._filter) != null ? _payload$_filter2 : teamState2.allUsersQueryParams._filter;
  const _sortBy = (_payload$_sortBy2 = payload._sortBy) != null ? _payload$_sortBy2 : teamState2.allUsersQueryParams._sortBy;
  const _order = (_payload$_order2 = payload._order) != null ? _payload$_order2 : teamState2.allUsersQueryParams._order;
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: !silentLoading
  }));
  yield put(actions30.setTeamState({
    allUsersQueryParams: {
      _limit,
      _offset,
      _filter,
      _sortBy,
      _order
    }
  }));
  const totalPages = 2;
  const totalItems = 10;
  yield delay();
  yield put(actions30.setTeamState({
    allUsers: allUsersDemo,
    totalPages,
    totalItems,
    roles: rolesDemo,
    permissions: permissionsDemo
  }));
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.USERS,
    value: false
  }));
  callback == null ? void 0 : callback(allUsersDemo);
}
function* loadRolesMock({
  payload
}) {
  var _payload$callback3;
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.ROLES_AND_PERMISSIONS,
    value: true
  }));
  yield delay();
  yield put(actions30.setTeamState({
    roles: rolesDemo,
    permissions: permissionsDemo
  }));
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.ROLES_AND_PERMISSIONS,
    value: true
  }));
  payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, {
    roles: rolesDemo,
    permissions: permissionsDemo
  });
}
function* addUserMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded143);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  yield delay();
  const date = /* @__PURE__ */ new Date();
  const newUser = _extends({}, userTeamDemo, {
    groups: []
  }, body, {
    id: `${v4_default()}`,
    temporaryExpirationDate: body.expirationInSeconds ? new Date(date.setSeconds(date.getSeconds() + body.expirationInSeconds)) : void 0
  });
  callback == null ? void 0 : callback(newUser);
  yield put(actions30.setTeamState({
    users: [newUser, ...teamState2.users],
    addUserDialogState: {
      open: false,
      loading: false
    }
  }));
}
function* addUserToSubTenantsMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded153);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  yield delay();
  const newUser = _extends({}, userTeamDemo, body, {
    id: `${v4_default()}`
  });
  yield put(actions30.setTeamState({
    users: [newUser, ...teamState2.users],
    addUserDialogState: {
      open: false,
      loading: false
    }
  }));
  callback == null ? void 0 : callback(null);
}
function* updateUserMock({
  payload
}) {
  var _body$roleIds2;
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded162);
  const {
    id: userId
  } = body;
  const teamState2 = yield selectTeamState();
  const oldUserData = teamState2.users.find((user) => user.id === body.id);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER,
    value: userId || ""
  }));
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    })
  }));
  yield put(actions30.setTeamState({
    addUserDialogState: _extends({}, teamState2.addUserDialogState, {
      loading: true
    }),
    users: teamState2.users.map((user) => {
      if (user.id === body.id) {
        return _extends({}, user, body);
      }
      return user;
    })
  }));
  if (oldUserData.roleIds.length > 0 && ((_body$roleIds2 = body.roleIds) == null ? void 0 : _body$roleIds2.length) === 0) {
    body.roleIds = [""];
  }
  yield delay();
  const newUser = _extends({}, oldUserData, body);
  callback == null ? void 0 : callback(newUser);
  yield put(actions30.setTeamState({
    users: teamState2.users.map((user) => user.id === newUser.id ? _extends({}, user, newUser, {
      createdAt: user.createdAt,
      customData: user.customData,
      lastLogin: user.lastLogin
    }) : user)
  }));
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER,
    value: false
  }));
}
function* deleteUserMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded172);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    deleteUserDialogState: _extends({}, teamState2.deleteUserDialogState, {
      loading: true
    })
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamState({
    users: teamState2.users.filter((user) => user.id !== body.userId),
    deleteUserDialogState: {
      open: false,
      loading: false
    }
  }));
}
function* deleteUserFromSubTenantsMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded182);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamState({
    deleteUserDialogState: _extends({}, teamState2.deleteUserDialogState, {
      loading: true
    })
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamState({
    allUsers: teamState2.allUsers.filter((user) => user.id !== body.userId),
    deleteUserDialogState: {
      open: false,
      loading: false
    }
  }));
}
function* resendActivationLinkMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded192);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: body.userId
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_ACTIVATE_LINK,
    value: false
  }));
}
function* resendInvitationLinkMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded202);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: body.email
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: false
  }));
}
function* resendInvitationEmailMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded218);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: body.email
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: false
  }));
}
function* resendInvitationLinkToAllSubTenantsMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded222);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: body.email
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.RESEND_INVITATION_LINK,
    value: false
  }));
}
function* updateUserExpirationTimeMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded232);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
    value: true
  }));
  const date = /* @__PURE__ */ new Date();
  yield put(actions30.setTeamState({
    users: teamState2.users.map((user) => {
      return user.id === body.userId ? _extends({}, user, {
        temporaryExpirationDate: body.expirationInSeconds ? new Date(date.setSeconds(date.getSeconds() + body.expirationInSeconds)) : void 0
      }) : user;
    })
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
    value: false
  }));
}
function* setUserAsPermanentMock({
  payload
}) {
  const {
    callback
  } = payload, body = _objectWithoutPropertiesLoose(payload, _excluded242);
  const teamState2 = yield selectTeamState();
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
    value: true
  }));
  yield put(actions30.setTeamState({
    users: teamState2.users.map((user) => {
      return user.id === body.userId ? _extends({}, user, {
        temporaryExpirationDate: void 0
      }) : user;
    })
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setTeamLoader({
    key: TeamStateKeys.UPDATE_USER_EXPIRATION_TIME,
    value: false
  }));
}
function* teamSagasMock() {
  yield takeLatest$1(actions30.loadUsersV2, loadUsersMock);
  yield takeLatest$1(actions30.loadAllSubTenantsUsers, loadAllSubTenantsUsersMock);
  yield takeLatest$1(actions30.loadRoles, loadRolesMock);
  yield takeEvery$1(actions30.addUser, addUserMock);
  yield takeEvery$1(actions30.addUserToSubTenants, addUserToSubTenantsMock);
  yield takeEvery$1(actions30.updateUser, updateUserMock);
  yield takeEvery$1(actions30.deleteUser, deleteUserMock);
  yield takeEvery$1(actions30.updateUserExpirationTime, updateUserExpirationTimeMock);
  yield takeEvery$1(actions30.setUserAsPermanent, setUserAsPermanentMock);
  yield takeEvery$1(actions30.deleteUserFromSubTenants, deleteUserFromSubTenantsMock);
  yield takeEvery$1(actions30.resendActivationLink, resendActivationLinkMock);
  yield takeEvery$1(actions30.resendInvitationLink, resendInvitationLinkMock);
  yield takeEvery$1(actions30.resendInvitationEmail, resendInvitationEmailMock);
  yield takeEvery$1(actions30.resendInvitationLinkToAllSubTenants, resendInvitationLinkToAllSubTenantsMock);
  yield takeEvery$1(actions30.openAddUserDialog, openAddUserDialog);
  yield takeEvery$1(actions30.closeAddUserDialog, closeAddUserDialog);
  yield takeEvery$1(actions30.openDeleteUserDialog, openDeleteUserDialog);
  yield takeEvery$1(actions30.closeDeleteUserDialog, closeDeleteUserDialog);
}
var _excluded40, _excluded217, _excluded311, _excluded47, _excluded55, _excluded65, _excluded74, _excluded84, _excluded94, _excluded104, _excluded114, _excluded124, _excluded133, _excluded143, _excluded153, _excluded162, _excluded172, _excluded182, _excluded192, _excluded202, _excluded218, _excluded222, _excluded232, _excluded242, selectTeamState;
var init_saga30 = __esm({
  "node_modules/@frontegg/redux-store/auth/TeamState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces53();
    init_constants3();
    init_utils();
    init_dummy();
    init_esm_browser();
    init_interfaces54();
    init_utils5();
    _excluded40 = ["callback"];
    _excluded217 = ["roles"];
    _excluded311 = ["callback"];
    _excluded47 = ["callback", "profileImage"];
    _excluded55 = ["callback"];
    _excluded65 = ["callback", "userId"];
    _excluded74 = ["callback"];
    _excluded84 = ["callback"];
    _excluded94 = ["callback"];
    _excluded104 = ["callback"];
    _excluded114 = ["callback"];
    _excluded124 = ["callback"];
    _excluded133 = ["callback"];
    _excluded143 = ["callback"];
    _excluded153 = ["callback"];
    _excluded162 = ["callback", "profileImage"];
    _excluded172 = ["callback"];
    _excluded182 = ["callback"];
    _excluded192 = ["callback"];
    _excluded202 = ["callback"];
    _excluded218 = ["callback"];
    _excluded222 = ["callback"];
    _excluded232 = ["callback"];
    _excluded242 = ["callback"];
    selectTeamState = () => select((_2) => _2[authStoreName].teamState);
  }
});

// node_modules/@frontegg/redux-store/auth/SocialLogins/saga.js
function* loadSocialLoginsConfigurations() {
  try {
    yield put(actions30.setSocialLoginsState({
      loading: true
    }));
    const socialLoginsConfig = yield call(api.auth.getSocialLoginProviders);
    yield put(actions30.setSocialLoginsState({
      socialLoginsConfig,
      loading: false,
      firstLoad: false
    }));
  } catch (e2) {
    yield put(actions30.setSocialLoginsState({
      error: errorHandler(e2),
      loading: false,
      firstLoad: false
    }));
  }
}
function* getSocialLoginsConfigurationsV2() {
  const isAuthenticated = yield select(({
    auth
  }) => auth.isAuthenticated);
  let socialLoginsConfigV2;
  if (isAuthenticated) {
    socialLoginsConfigV2 = yield call(api.auth.getSocialLoginProvidersV2ForAuthenticatedUser);
  } else {
    socialLoginsConfigV2 = yield call(api.auth.getSocialLoginProvidersV2);
  }
  return socialLoginsConfigV2;
}
function* loadSocialLoginsConfigurationsV2(action) {
  try {
    var _action$payload, _action$payload$callb;
    const context = yield select((state) => state.root.context);
    yield put(actions30.setSocialLoginsState({
      loading: true
    }));
    const socialLoginsConfigV2 = yield call(getSocialLoginsConfigurationsV2);
    const {
      providers: customSocialLoginsConfig
    } = yield call(api.auth.getCustomSocialLoginProvidersV1);
    const socialLoginsConfigWithFullUrl = socialLoginsConfigV2.map((_ref) => {
      let {
        authorizationUrl
      } = _ref, config = _objectWithoutPropertiesLoose(_ref, _excluded41);
      const baseUrl = fetch_exports.getBaseUrl(context, authorizationUrl != null ? authorizationUrl : "");
      return _extends({}, config, {
        authorizationUrl: authorizationUrl ? `${baseUrl}${authorizationUrl}` : null
      });
    });
    const newState = {
      socialLoginsConfigV2: socialLoginsConfigWithFullUrl,
      customSocialLoginsConfig,
      loading: false,
      firstLoad: false
    };
    yield put(actions30.setSocialLoginsState(newState));
    action == null ? void 0 : (_action$payload = action.payload) == null ? void 0 : (_action$payload$callb = _action$payload.callback) == null ? void 0 : _action$payload$callb.call(_action$payload, newState);
  } catch (e2) {
    var _action$payload2, _action$payload2$call;
    action == null ? void 0 : (_action$payload2 = action.payload) == null ? void 0 : (_action$payload2$call = _action$payload2.callback) == null ? void 0 : _action$payload2$call.call(_action$payload2, null, e2);
    yield put(actions30.setSocialLoginsState({
      error: errorHandler(e2),
      loading: false,
      firstLoad: false
    }));
  }
}
function* loginViaSocialLogin2(_ref2) {
  let {
    payload: {
      events,
      url
    }
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2.payload, _excluded219);
  try {
    yield put(actions30.setSocialLoginsState({
      loading: true
    }));
    const {
      email,
      isNewUser,
      userId,
      tenantId,
      name: name10
    } = yield call(api.auth.loginViaSocialLogin, payload);
    if (isNewUser) {
      var _events$signUpComplet, _events$userVerified;
      const basePayload = {
        email,
        url,
        createdAt: /* @__PURE__ */ new Date(),
        id: userId,
        tenantId
      };
      const signUpCompletePayload = _extends({}, basePayload, {
        socialProvider: payload.provider,
        authenticationType: AuthenticationTypes.SOCIAL_LOGIN
      });
      events == null ? void 0 : (_events$signUpComplet = events.signUpComplete) == null ? void 0 : _events$signUpComplet.call(events, signUpCompletePayload);
      reportGTMEvent(GTMEventAction.SIGNUP_COMPLETED, signUpCompletePayload);
      const userVerifiedPayload = _extends({}, basePayload, {
        origin: UserVeirifedOriginTypes.SOCIAL_LOGIN,
        name: name10
      });
      events == null ? void 0 : (_events$userVerified = events.userVerified) == null ? void 0 : _events$userVerified.call(events, userVerifiedPayload);
      reportGTMEvent(GTMEventAction.USER_VERIFIED, userVerifiedPayload);
    }
    if (userId) {
      localStorage.setItem("userId", userId);
    }
    yield put(actions30.setLoginState({
      email,
      isNewUser
    }));
    yield refreshTokenForSocialLogins();
    localStorage.removeItem("register-quick-login");
    yield put(actions30.setSocialLoginsState({
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSocialLoginsState({
      loading: false,
      error: errorHandler(e2, "Failed to authenticate"),
      firstLoad: false
    }));
  }
}
function* setSocialLoginError({
  payload
}) {
  yield put(actions30.setSocialLoginsState({
    error: payload.error,
    loading: false,
    firstLoad: false
  }));
}
function* socialLoginsSaga() {
  yield takeLeading$1(actions30.loadSocialLoginsConfiguration, loadSocialLoginsConfigurations);
  yield takeEvery$1(actions30.loadSocialLoginsConfigurationV2, loadSocialLoginsConfigurationsV2);
  yield takeLeading$1(actions30.loginViaSocialLogin, loginViaSocialLogin2);
  yield takeLatest$1(actions30.setSocialLoginError, setSocialLoginError);
}
var _excluded41, _excluded219;
var init_saga31 = __esm({
  "node_modules/@frontegg/redux-store/auth/SocialLogins/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_rest_api();
    init_redux_saga_effects_npm_proxy_esm();
    init_saga23();
    init_reducer();
    init_interfaces35();
    init_interfaces35();
    init_utils5();
    _excluded41 = ["authorizationUrl"];
    _excluded219 = ["events", "url"];
  }
});

// node_modules/@frontegg/redux-store/auth/ApiTokensState/saga.js
function* addUserApiToken({
  payload
}) {
  const {
    description,
    expires,
    callback
  } = payload;
  const {
    apiTokensDataUser
  } = yield select((state) => state.auth.apiTokensState);
  const {
    policy
  } = yield select((state) => state.auth.securityPolicyState.publicPolicy);
  const isAccessToken = (policy == null ? void 0 : policy.machineToMachineAuthStrategy) === MachineToMachineAuthStrategy.AccessToken;
  try {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: true
    }));
    let data;
    let expiresInMinutes = null;
    if (expires) {
      expiresInMinutes = expires * 1440;
    }
    if (isAccessToken) {
      data = yield call(api.auth.createUserAccessToken, {
        description,
        expiresInMinutes
      });
    } else {
      data = yield call(api.auth.updateUserApiTokensData, {
        description,
        expiresInMinutes
      });
    }
    yield put(actions30.setApiTokensState({
      showAddTokenDialog: false
    }));
    yield delay2(200);
    yield put(actions30.setApiTokensState({
      apiTokensDataUser: [_extends({}, data, {
        type: isAccessToken ? MachineToMachineAuthStrategy.AccessToken : MachineToMachineAuthStrategy.ClientCredentials
      }), ...apiTokensDataUser],
      successDialog: {
        open: true,
        secret: data.secret,
        clientId: !isAccessToken ? data.clientId : void 0
      }
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: false
    }));
    callback == null ? void 0 : callback(null);
  } catch (e2) {
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* addTenantApiToken({
  payload
}) {
  const {
    description,
    roleIds,
    expires,
    callback
  } = payload;
  const {
    apiTokensDataTenant
  } = yield select((state) => state.auth.apiTokensState);
  const {
    policy
  } = yield select((state) => state.auth.securityPolicyState.publicPolicy);
  const isAccessToken = (policy == null ? void 0 : policy.machineToMachineAuthStrategy) === MachineToMachineAuthStrategy.AccessToken;
  try {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: true
    }));
    let data;
    let expiresInMinutes = null;
    if (expires) {
      expiresInMinutes = expires * 1440;
    }
    if (isAccessToken) {
      data = yield call(api.auth.createTenantAccessToken, {
        description,
        expiresInMinutes,
        roleIds
      });
    } else {
      data = yield call(api.auth.updateTenantApiTokensData, {
        description,
        roleIds,
        expiresInMinutes
      });
    }
    yield put(actions30.setApiTokensState({
      showAddTokenDialog: false
    }));
    yield delay2(200);
    yield put(actions30.setApiTokensState({
      apiTokensDataTenant: [_extends({}, data, {
        type: isAccessToken ? MachineToMachineAuthStrategy.AccessToken : MachineToMachineAuthStrategy.ClientCredentials
      }), ...apiTokensDataTenant],
      successDialog: {
        open: true,
        secret: data.secret,
        clientId: !isAccessToken ? data.clientId : void 0
      }
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: false
    }));
    callback == null ? void 0 : callback(null);
  } catch (e2) {
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.ADD_API_TOKEN,
      value: false
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* deleteUserApiToken2({
  payload
}) {
  const {
    apiTokensDataUser
  } = yield select((state) => state.auth.apiTokensState);
  const isAccessToken = apiTokensDataUser.some((token) => token.id === payload);
  try {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: true
    }));
    if (isAccessToken) {
      yield call(api.auth.deleteUserAccessToken, {
        id: payload
      });
      yield put(actions30.setApiTokensState({
        apiTokensDataUser: apiTokensDataUser.filter((token) => token.id !== payload),
        deleteTokenDialog: {
          open: false,
          id: payload
        }
      }));
    } else {
      yield call(api.auth.deleteUserApiToken, {
        tokenId: payload
      });
      yield put(actions30.setApiTokensState({
        apiTokensDataUser: apiTokensDataUser.filter((token) => token.clientId !== payload),
        deleteTokenDialog: {
          open: false,
          clientId: payload
        }
      }));
    }
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: false
    }));
  } catch (e2) {
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: false
    }));
  }
}
function* deleteTenantApiToken2({
  payload
}) {
  const {
    apiTokensDataTenant
  } = yield select((state) => state.auth.apiTokensState);
  const isAccessToken = apiTokensDataTenant.some((token) => token.id === payload);
  let filteredApiTokensDataTenant = apiTokensDataTenant;
  try {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: true
    }));
    if (isAccessToken) {
      yield call(api.auth.deleteTenantAccessToken, {
        id: payload
      });
      filteredApiTokensDataTenant = apiTokensDataTenant.filter((token) => token.id !== payload);
    } else {
      yield call(api.auth.deleteTenantApiToken, {
        tokenId: payload
      });
      filteredApiTokensDataTenant = apiTokensDataTenant.filter((token) => token.clientId !== payload);
    }
    yield put(actions30.setApiTokensState({
      apiTokensDataTenant: filteredApiTokensDataTenant,
      deleteTokenDialog: {
        open: false,
        id: payload
      }
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: false
    }));
  } catch (e2) {
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.DELETE_API_TOKEN,
      value: false
    }));
  }
}
function* loadApiTokens({
  payload
}) {
  if (!(payload != null && payload.silentLoading)) {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: true
    }));
  }
  try {
    var _payload$callback;
    const [apiTokensDataUser = [], apiTokensDataTenant = []] = yield all([call(api.auth.getUserApiTokensData), call(api.auth.getTenantApiTokensData)]);
    yield put(actions30.setApiTokensState({
      apiTokensDataUser,
      apiTokensDataTenant
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: false
    }));
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: false
    }));
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e2);
  }
}
function* loadUserApiTokens({
  payload
}) {
  if (!(payload != null && payload.silentLoading)) {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: true
    }));
  }
  try {
    var _call, _call2, _accessTokensData$acc, _payload$callback3;
    const apiTokensData = yield (_call = call(api.auth.getUserApiTokensData)) != null ? _call : [];
    const accessTokensData = yield (_call2 = call(api.auth.getUserAccessTokensData)) != null ? _call2 : [];
    const accessTokens = (_accessTokensData$acc = accessTokensData.accessTokens) != null ? _accessTokensData$acc : [];
    const allTokens = accessTokens.map((item) => _extends({}, item, {
      type: MachineToMachineAuthStrategy.AccessToken
    })).concat(apiTokensData.map((item) => _extends({}, item, {
      type: MachineToMachineAuthStrategy.ClientCredentials
    })));
    const sortedTokensByDate = allTokens.sort((date1, date2) => new Date(date2.createdAt) - new Date(date1.createdAt));
    yield put(actions30.setApiTokensState({
      apiTokensDataUser: sortedTokensByDate != null ? sortedTokensByDate : []
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: false
    }));
    payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  } catch (e2) {
    var _payload$callback4;
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: false
    }));
    payload == null ? void 0 : (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, null, e2);
  }
}
function* loadTenantApiTokens({
  payload
}) {
  if (!(payload != null && payload.silentLoading)) {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: true
    }));
  }
  try {
    var _call3, _call4, _accessTokensData$acc2, _payload$callback5;
    const apiTokensData = yield (_call3 = call(api.auth.getTenantApiTokensData)) != null ? _call3 : [];
    const accessTokensData = yield (_call4 = call(api.auth.getTenantAccessTokensData)) != null ? _call4 : [];
    const accessTokens = (_accessTokensData$acc2 = accessTokensData == null ? void 0 : accessTokensData.accessTokens) != null ? _accessTokensData$acc2 : [];
    const allTokens = accessTokens.map((item) => _extends({}, item, {
      type: MachineToMachineAuthStrategy.AccessToken
    })).concat(apiTokensData.map((item) => _extends({}, item, {
      type: MachineToMachineAuthStrategy.ClientCredentials
    })));
    const sortedTokensByDate = allTokens.sort((date1, date2) => new Date(date2.createdAt) - new Date(date1.createdAt));
    yield put(actions30.setApiTokensState({
      apiTokensDataTenant: sortedTokensByDate != null ? sortedTokensByDate : []
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: false
    }));
    payload == null ? void 0 : (_payload$callback5 = payload.callback) == null ? void 0 : _payload$callback5.call(payload, true);
  } catch (e2) {
    var _payload$callback6;
    yield put(actions30.setApiTokensError({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: errorHandler(e2)
    }));
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: false
    }));
    payload == null ? void 0 : (_payload$callback6 = payload.callback) == null ? void 0 : _payload$callback6.call(payload, null, e2);
  }
}
function* apiTokensSaga() {
  yield takeLeading$1(actions30.loadApiTokens, loadApiTokens);
  yield takeLeading$1(actions30.loadUserApiTokens, loadUserApiTokens);
  yield takeLeading$1(actions30.loadTenantApiTokens, loadTenantApiTokens);
  yield takeEvery$1(actions30.addUserApiToken, addUserApiToken);
  yield takeEvery$1(actions30.addTenantApiToken, addTenantApiToken);
  yield takeLatest$1(actions30.deleteTenantApiToken, deleteTenantApiToken2);
  yield takeLatest$1(actions30.deleteUserApiToken, deleteUserApiToken2);
}
function* addTenantApiTokenMock({
  payload
}) {
  const {
    description,
    roleIds,
    callback
  } = payload;
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.ADD_API_TOKEN,
    value: true
  }));
  const {
    apiTokensDataTenant
  } = yield select((state) => state.auth.apiTokensState);
  const newToken = _extends({}, apiTokensDataTenantDemo, {
    description,
    roleIds,
    clientId: `CLIENT_ID_${v4_default()}`
  });
  yield put(actions30.setApiTokensState({
    showAddTokenDialog: false
  }));
  yield delay2(200);
  yield put(actions30.setApiTokensState({
    apiTokensDataTenant: [...apiTokensDataTenant, newToken],
    successDialog: {
      open: true,
      secret: newToken.secret,
      clientId: newToken.clientId
    }
  }));
  yield delay2(200);
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.ADD_API_TOKEN,
    value: false
  }));
  callback == null ? void 0 : callback(null);
}
function* deleteTenantApiTokenMock({
  payload
}) {
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.DELETE_API_TOKEN,
    value: true
  }));
  yield delay2(200);
  const apiTokensDataTenant = [apiTokensDataTenantDemo];
  yield put(actions30.setApiTokensState({
    apiTokensDataTenant: apiTokensDataTenant.filter((i2) => i2.clientId !== payload),
    deleteTokenDialog: {
      open: false,
      clientId: payload
    }
  }));
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.DELETE_API_TOKEN,
    value: false
  }));
}
function* loadApiTokensMock({
  payload
}) {
  var _payload$callback7;
  if (!(payload != null && payload.silentLoading)) {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: true
    }));
  }
  const apiTokensDataUser = [apiTokensDataDemo];
  const apiTokensDataTenant = [apiTokensDataTenantDemo];
  yield put(actions30.setApiTokensState({
    apiTokensDataUser,
    apiTokensDataTenant
  }));
  yield delay2(200);
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.LOAD_API_TOKENS,
    value: false
  }));
  payload == null ? void 0 : (_payload$callback7 = payload.callback) == null ? void 0 : _payload$callback7.call(payload, true);
}
function* loadUserApiTokensMock({
  payload
}) {
  var _payload$callback8;
  if (!(payload != null && payload.silentLoading)) {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: true
    }));
  }
  const apiTokensDataUser = [apiTokensDataDemo];
  yield put(actions30.setApiTokensState({
    apiTokensDataUser
  }));
  yield delay2(200);
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.LOAD_API_TOKENS,
    value: false
  }));
  payload == null ? void 0 : (_payload$callback8 = payload.callback) == null ? void 0 : _payload$callback8.call(payload, true);
}
function* loadTenantApiTokensMock({
  payload
}) {
  var _payload$callback9;
  if (!(payload != null && payload.silentLoading)) {
    yield put(actions30.setApiTokensLoader({
      key: ApiStateKeys.LOAD_API_TOKENS,
      value: true
    }));
  }
  const apiTokensDataTenant = [apiTokensDataTenantDemo];
  yield put(actions30.setApiTokensState({
    apiTokensDataTenant
  }));
  yield delay2(200);
  yield put(actions30.setApiTokensLoader({
    key: ApiStateKeys.LOAD_API_TOKENS,
    value: false
  }));
  payload == null ? void 0 : (_payload$callback9 = payload.callback) == null ? void 0 : _payload$callback9.call(payload, true);
}
function* apiTokensSagaMock() {
  yield takeLeading$1(actions30.loadApiTokens, loadApiTokensMock);
  yield takeLeading$1(actions30.loadUserApiTokens, loadUserApiTokensMock);
  yield takeLeading$1(actions30.loadTenantApiTokens, loadTenantApiTokensMock);
  yield takeEvery$1(actions30.addTenantApiToken, addTenantApiTokenMock);
  yield takeLatest$1(actions30.deleteTenantApiToken, deleteTenantApiTokenMock);
}
var init_saga32 = __esm({
  "node_modules/@frontegg/redux-store/auth/ApiTokensState/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces34();
    init_dummy();
    init_esm_browser();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/auth/AccountSettingsState/saga.js
function* saveAccountSettings({
  payload
}) {
  try {
    var _payload$callback;
    yield put(actions30.setAccountSettingsState({
      loading: true
    }));
    const {
      accountSettingsState: accountSettingsState2
    } = yield select((state) => state.auth);
    const {
      address,
      timezone,
      dateFormat,
      timeFormat,
      currency,
      logo
    } = accountSettingsState2;
    const body = yield call(api.accountSettings.updateSettings, _extends({
      address,
      timezone,
      dateFormat,
      timeFormat,
      currency,
      logo
    }, payload));
    yield put(actions30.setAccountSettingsState(_extends({}, body, {
      loading: false
    })));
    (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, body);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setAccountSettingsState({
      loading: false,
      error: errorHandler(e2)
    }));
    (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, null, e2);
  }
}
function* loadAccountSettings({
  payload
}) {
  yield put(actions30.setAccountSettingsState({
    loading: !(payload != null && payload.silentLoading),
    error: null
  }));
  try {
    const body = yield call(api.accountSettings.getSettings);
    yield put(actions30.setAccountSettingsState(_extends({}, body, {
      loading: false
    })));
  } catch (e2) {
    yield put(actions30.setAccountSettingsState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* accountSettingsSaga() {
  yield takeLeading$1(actions30.saveAccountSettings, saveAccountSettings);
  yield takeLeading$1(actions30.loadAccountSettings, loadAccountSettings);
}
function* saveAccountSettingsMock({
  payload
}) {
  var _payload$callback3;
  yield put(actions30.setAccountSettingsState({
    loading: true
  }));
  yield delay();
  const {
    accountSettingsState: accountSettingsState2
  } = yield select((state) => state.auth);
  const {
    address,
    timezone,
    dateFormat,
    timeFormat,
    currency,
    logo
  } = accountSettingsState2;
  const body = _extends({
    address,
    timezone,
    dateFormat,
    timeFormat,
    currency,
    logo
  }, payload);
  yield put(actions30.setAccountSettingsState(_extends({}, body, {
    loading: false
  })));
  (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, body);
}
function* loadAccountSettingsMock({
  payload
}) {
  yield put(actions30.setAccountSettingsState({
    loading: !(payload != null && payload.silentLoading),
    error: null
  }));
  yield delay();
  yield put(actions30.setAccountSettingsState({
    address: "Tel-aviv",
    timezone: "Asia/Jerusalem",
    dateFormat: "DD/MM/YYYY",
    timeFormat: "HH:mm",
    currency: "USD",
    loading: false
  }));
}
function* accountSettingsSagaMock() {
  yield takeLeading$1(actions30.saveAccountSettings, saveAccountSettingsMock);
  yield takeLeading$1(actions30.loadAccountSettings, loadAccountSettingsMock);
}
var init_saga33 = __esm({
  "node_modules/@frontegg/redux-store/auth/AccountSettingsState/saga.js"() {
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_reducer();
    init_rest_api();
    init_utils();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/auth/TenantsState/saga.js
function* switchTenant2({
  payload: {
    tenantId,
    callback
  }
}) {
  yield put(actions30.setState({
    isLoading: true
  }));
  try {
    yield call(api.tenants.switchTenant, {
      tenantId
    });
    yield call(refreshToken2);
    const callbackConsumed = callback == null ? void 0 : callback(true);
    if (!callbackConsumed) {
      yield put(actions30.setState({
        isLoading: false
      }));
    }
  } catch (e2) {
    yield put(actions30.setState({
      isLoading: false
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* loadTenants({
  payload
}) {
  yield put(actions30.setTenantsState({
    loading: true
  }));
  try {
    var _payload$callback;
    const userTenantsResponse = yield call(getCurrentUserTenantsFunction());
    yield put(actions30.setTenantsState({
      tenants: userTenantsResponse.tenants,
      activeTenant: userTenantsResponse.activeTenant,
      loading: false
    }));
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, []);
  } catch (e2) {
    var _payload$callback2;
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, [], e2);
    yield put(actions30.setTenantsState({
      loading: false
    }));
  }
}
function* loadSubTenants({
  payload
}) {
  yield put(actions30.setTenantsState({
    loading: true
  }));
  try {
    var _payload$callback3;
    const subTenants = yield call(api.tenants.getSubTenants);
    yield put(actions30.setTenantsState({
      subTenants,
      loading: false
    }));
    payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  } catch (e2) {
    var _payload$callback4;
    yield put(actions30.setTenantsState({
      loading: false
    }));
    payload == null ? void 0 : (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, null, e2);
  }
}
function* loadSubTenantsTree({
  payload
}) {
  yield put(actions30.setTenantsState({
    loading: true
  }));
  try {
    var _payload$callback5;
    const tenantTree = yield call(api.tenants.getSubTenantsAsTree);
    yield put(actions30.setTenantsState({
      tenantTree,
      loading: false
    }));
    payload == null ? void 0 : (_payload$callback5 = payload.callback) == null ? void 0 : _payload$callback5.call(payload, true);
  } catch (e2) {
    var _payload$callback6;
    yield put(actions30.setTenantsState({
      loading: false
    }));
    payload == null ? void 0 : (_payload$callback6 = payload.callback) == null ? void 0 : _payload$callback6.call(payload, null, e2);
  }
}
function* tenantsSagas() {
  yield takeEvery$1(actions30.loadTenants, loadTenants);
  yield takeEvery$1(actions30.loadSubTenants, loadSubTenants);
  yield takeEvery$1(actions30.switchTenant, switchTenant2);
  yield takeEvery$1(actions30.loadSubTenantsTree, loadSubTenantsTree);
}
function* loadTenantsMock() {
  yield put(actions30.setTenantsState({
    loading: true
  }));
  yield delay();
  yield put(actions30.setTenantsState({
    tenants: tenantsDemo,
    activeTenant: tenantsDemo[0],
    loading: false
  }));
}
function* tenantsSagasMock() {
  yield takeEvery$1(actions30.loadTenants, loadTenantsMock);
}
var init_saga34 = __esm({
  "node_modules/@frontegg/redux-store/auth/TenantsState/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_utils();
    init_dummy();
    init_saga23();
  }
});

// node_modules/@frontegg/redux-store/auth/RolesState/types.js
var RolesStateKeys;
var init_types3 = __esm({
  "node_modules/@frontegg/redux-store/auth/RolesState/types.js"() {
    (function(RolesStateKeys2) {
      RolesStateKeys2["EDIT_ROLE_DIALOG"] = "editRoleDialog";
      RolesStateKeys2["DELETE_ROLE_DIALOG"] = "deleteRoleDialog";
      RolesStateKeys2["LOAD_ROLES"] = "loadRoles";
      RolesStateKeys2["ADD_ROLE"] = "addRole";
      RolesStateKeys2["MANAGE_PERMISSIONS"] = "managePermissions";
    })(RolesStateKeys || (RolesStateKeys = {}));
  }
});

// node_modules/@frontegg/redux-store/auth/RolesState/saga.js
function* loadRolesAndPermissions({
  payload
}) {
  var _payload$silentLoadin;
  const key = RolesStateKeys.LOAD_ROLES;
  yield put(actions30.setRolesStateLoader({
    key,
    value: !((_payload$silentLoadin = payload == null ? void 0 : payload.silentLoading) != null ? _payload$silentLoadin : false)
  }));
  try {
    const result = yield all([call(api.roles.getRoles), call(api.roles.getPermissions), call(api.roles.getPermissionCategories)]);
    const [roles, permissions, permissionCategories] = result;
    const {
      selectedRole
    } = yield select((state) => state.auth.rolesState);
    const updatedSelectedRole = roles == null ? void 0 : roles.find(({
      id: roleId
    }) => (selectedRole == null ? void 0 : selectedRole.id) === roleId);
    yield put(actions30.setRolesState({
      roles,
      permissions,
      permissionCategories,
      selectedRole: updatedSelectedRole
    }));
  } catch (e2) {
    yield put(actions30.setRolesStateError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* addRole2(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, body = _objectWithoutPropertiesLoose(_ref.payload, _excluded48);
  const key = RolesStateKeys.ADD_ROLE;
  yield put(actions30.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    const role = yield call(api.roles.addRole, body);
    const roles = yield call(api.roles.getRoles);
    yield put(actions30.loadRolesAndPermissions({
      silentLoading: true
    }));
    yield put(actions30.setRolesState({
      roles
    }));
    callback == null ? void 0 : callback(role);
  } catch (e2) {
    yield put(actions30.setRolesStateError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* deleteRole2(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2.payload, _excluded220);
  const key = RolesStateKeys.DELETE_ROLE_DIALOG;
  yield put(actions30.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    yield call(api.roles.deleteRole, body);
    yield put(actions30.loadRolesAndPermissions({
      silentLoading: true
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setRolesStateError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false, e2);
  } finally {
    yield put(actions30.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* updateRole2(_ref3) {
  let {
    payload: {
      callback
    }
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3.payload, _excluded312);
  const key = RolesStateKeys.EDIT_ROLE_DIALOG;
  yield put(actions30.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    const role = yield call(api.roles.updateRole, body);
    yield put(actions30.loadRolesAndPermissions({
      silentLoading: true
    }));
    callback == null ? void 0 : callback(role);
  } catch (e2) {
    yield put(actions30.setRolesStateError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* attachPermissionsToRole2(_ref4) {
  let {
    payload: {
      callback
    }
  } = _ref4, body = _objectWithoutPropertiesLoose(_ref4.payload, _excluded49);
  const key = RolesStateKeys.MANAGE_PERMISSIONS;
  yield put(actions30.setRolesStateLoader({
    key,
    value: true
  }));
  try {
    const role = yield call(api.roles.attachPermissionsToRole, body);
    yield put(actions30.loadRolesAndPermissions({
      silentLoading: true
    }));
    callback == null ? void 0 : callback(role);
  } catch (e2) {
    yield put(actions30.setRolesStateError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* rolesSagas() {
  yield takeLeading$1(actions30.loadRolesAndPermissions, loadRolesAndPermissions);
  yield takeEvery$1(actions30.addRole, addRole2);
  yield takeEvery$1(actions30.deleteRole, deleteRole2);
  yield takeEvery$1(actions30.updateRole, updateRole2);
  yield takeEvery$1(actions30.attachPermissionsToRole, attachPermissionsToRole2);
}
function* loadRolesAndPermissionsMock({
  payload
}) {
  var _payload$silentLoadin2;
  const key = RolesStateKeys.LOAD_ROLES;
  yield put(actions30.setRolesStateLoader({
    key,
    value: !((_payload$silentLoadin2 = payload == null ? void 0 : payload.silentLoading) != null ? _payload$silentLoadin2 : false)
  }));
  try {
    yield put(actions30.setRolesState({
      roles: rolesAdminViewerDemo
    }));
  } catch (e2) {
    yield put(actions30.setRolesStateError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setRolesStateLoader({
      key,
      value: false
    }));
  }
}
function* rolesSagasMock() {
  yield takeLeading$1(actions30.loadRolesAndPermissions, loadRolesAndPermissionsMock);
}
var _excluded48, _excluded220, _excluded312, _excluded49;
var init_saga35 = __esm({
  "node_modules/@frontegg/redux-store/auth/RolesState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_dummy();
    init_utils5();
    init_types3();
    _excluded48 = ["callback"];
    _excluded220 = ["callback"];
    _excluded312 = ["callback"];
    _excluded49 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/saga.js
function* resetPhoneNumber2(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, body = _objectWithoutPropertiesLoose(_ref.payload, _excluded50);
  yield put(actions30.setResetPhoneNumberState({
    loading: true
  }));
  try {
    const res = yield call(api.auth.resetPhoneNumber, body);
    yield put(actions30.setResetPhoneNumberState({
      loading: false,
      error: void 0,
      resetPhoneNumberToken: res.resetPhoneNumberToken,
      step: ResetPhoneNumberStep.VerifyResetPhoneNumber
    }));
    yield put(actions30.setLoginState({
      email: body.email
    }));
  } catch (e2) {
    yield put(actions30.setResetPhoneNumberState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* verifyResetPhoneNumber2(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2, body = _objectWithoutPropertiesLoose(_ref2.payload, _excluded221);
  yield put(actions30.setResetPhoneNumberState({
    loading: true
  }));
  try {
    const res = yield call(api.auth.verifyResetPhoneNumber, body);
    yield put(actions30.setResetPhoneNumberState({
      loading: false,
      error: void 0,
      changePhoneNumberToken: res.changePhoneNumberToken,
      step: ResetPhoneNumberStep.ChangePhoneNumber
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setResetPhoneNumberState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* changePhoneNumber2(_ref3) {
  let {
    payload: {
      callback
    }
  } = _ref3, body = _objectWithoutPropertiesLoose(_ref3.payload, _excluded313);
  yield put(actions30.setResetPhoneNumberState({
    loading: true
  }));
  try {
    const {
      onRedirectTo,
      routes
    } = yield select(({
      auth: {
        onRedirectTo: onRedirectTo2,
        routes: routes2
      }
    }) => ({
      onRedirectTo: onRedirectTo2,
      routes: routes2
    }));
    yield call(api.auth.changePhoneNumber, {
      phoneNumber: body.phoneNumber,
      changePhoneNumberToken: body.changePhoneNumberToken
    });
    yield put(actions30.setLoginState({
      step: LoginStep.loginWithSmsOtc
    }));
    yield put(actions30.passwordlessPreLogin({
      type: AuthStrategyEnum.SmsCode,
      email: body.email,
      recaptchaToken: body.recaptchaToken
    }));
    onRedirectTo(routes.loginUrl);
    yield put(actions30.setResetPhoneNumberState({
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setResetPhoneNumberState({
      loading: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* resetPhoneNumberSagas() {
  yield takeLeading$1(actions30.resetPhoneNumber, resetPhoneNumber2);
  yield takeLeading$1(actions30.verifyResetPhoneNumber, verifyResetPhoneNumber2);
  yield takeLeading$1(actions30.changePhoneNumber, changePhoneNumber2);
}
var _excluded50, _excluded221, _excluded313;
var init_saga36 = __esm({
  "node_modules/@frontegg/redux-store/auth/ResetPhoneNumberState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces30();
    init_interfaces25();
    init_utils5();
    _excluded50 = ["callback"];
    _excluded221 = ["callback"];
    _excluded313 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/SessionsState/saga.js
function* loadCurrentUserSessions() {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    const sessions = yield call(api.auth.getCurrentUserSessions);
    yield put(actions30.setSessionsState({
      sessions,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSessionsState({
      error: e2,
      loading: false
    }));
  }
}
function* loadCurrentUserSession() {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    const session = yield call(api.auth.getCurrentUserSession);
    yield put(actions30.setSessionsState({
      currentSession: session,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSessionsState({
      error: e2,
      loading: false
    }));
  }
}
function* deleteUserSession({
  payload: {
    id
  }
}) {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    yield call(api.auth.deleteSessionForUser, id);
    yield put(actions30.loadUserSessions());
  } catch (e2) {
    yield put(actions30.setSessionsState({
      error: e2,
      loading: false
    }));
  }
}
function* revokeUserSessions({
  payload: {
    callback,
    userId
  }
}) {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    yield call(api.auth.revokeSessionsForUser, userId);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSessionsState({
      error: e2,
      loading: false
    }));
    callback == null ? void 0 : callback(false);
  }
}
function* deleteAllUserSessions() {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  try {
    yield call(api.auth.deleteAllSessionsForUser);
    yield put(actions30.loadUserSessions());
  } catch (e2) {
    yield put(actions30.setSessionsState({
      error: e2,
      loading: false
    }));
  }
}
function* sessionsSaga() {
  yield takeLatest$1(actions30.loadUserSessions, loadCurrentUserSessions);
  yield takeLatest$1(actions30.deleteUserSession, deleteUserSession);
  yield takeLatest$1(actions30.deleteAllUserSessions, deleteAllUserSessions);
  yield takeLatest$1(actions30.loadCurrentUserSession, loadCurrentUserSession);
  yield takeEvery$1(actions30.revokeUserSessions, revokeUserSessions);
}
function* loadCurrentUserSessionsMock() {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  yield put(actions30.setSessionsState({
    sessions: sessionsMock,
    loading: false
  }));
}
function* deleteUserSessionMock({
  payload: {
    id
  }
}) {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  const currentSessions = yield select((state) => {
    var _state$auth$sessionsS;
    return (_state$auth$sessionsS = state.auth.sessionsState.sessions) != null ? _state$auth$sessionsS : [];
  });
  const newSessions = currentSessions.filter((s2) => s2.id !== id);
  yield put(actions30.setSessionsState({
    sessions: newSessions,
    loading: false
  }));
}
function* deleteAllUserSessionsMock() {
  yield put(actions30.setSessionsState({
    loading: true,
    error: null
  }));
  const newSessions = sessionsMock.filter((s2) => s2.current);
  yield put(actions30.setSessionsState({
    sessions: newSessions,
    loading: false
  }));
}
function* sessionsSagaMock() {
  yield takeLatest$1(actions30.loadUserSessions, loadCurrentUserSessionsMock);
  yield takeLatest$1(actions30.deleteUserSession, deleteUserSessionMock);
  yield takeLatest$1(actions30.deleteAllUserSessions, deleteAllUserSessionsMock);
}
var init_saga37 = __esm({
  "node_modules/@frontegg/redux-store/auth/SessionsState/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_dummy();
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SessionsPolicyState/saga.js
function* loadSessionPolicyState() {
  yield put(actions30.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  try {
    const sessionsPolicy = yield call(api.auth.getSessionConfigurations);
    yield put(actions30.setSessionsPolicyState({
      configurations: sessionsPolicy,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setSessionsState({
      error: e2,
      loading: false
    }));
  }
}
function* createOrUpdateSessionsPolicy({
  payload
}) {
  yield put(actions30.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  try {
    const {
      callback
    } = payload, rest = _objectWithoutPropertiesLoose(payload, _excluded51);
    yield call(api.auth.createOrUpdateSessionConfigrations, rest);
    yield put(actions30.loadSessionsPolicy());
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSessionsPolicyState({
      error: e2,
      loading: false
    }));
  }
}
function* sessionsPolicySaga() {
  yield takeLeading$1(actions30.loadSessionsPolicy, loadSessionPolicyState);
  yield takeLatest$1(actions30.createOrUpdateSessionsPolicy, securityCenterSagaWrapper(createOrUpdateSessionsPolicy));
}
function* loadSessionPolicyStateMock() {
  yield put(actions30.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  const sessionPolicyState = yield select((state) => {
    var _state$auth$sessionsP, _state$auth;
    return (_state$auth$sessionsP = state == null ? void 0 : (_state$auth = state.auth) == null ? void 0 : _state$auth.sessionsPolicyState) != null ? _state$auth$sessionsP : sessionsConfigDummies;
  });
  yield put(actions30.setSessionsPolicyState(_extends({}, sessionPolicyState, {
    loading: false
  })));
}
function* createOrUpdateSessionsPolicyMock({
  payload
}) {
  yield put(actions30.setSessionsPolicyState({
    loading: true,
    error: null
  }));
  const {
    callback
  } = payload, rest = _objectWithoutPropertiesLoose(payload, _excluded223);
  callback == null ? void 0 : callback(true);
  yield put(actions30.setSessionsPolicyState({
    configurations: rest,
    loading: false
  }));
}
function* sessionsPolicySagaMock() {
  yield takeLeading$1(actions30.loadSessionsPolicy, loadSessionPolicyStateMock);
  yield takeLatest$1(actions30.createOrUpdateSessionsPolicy, createOrUpdateSessionsPolicyMock);
}
var _excluded51, _excluded223;
var init_saga38 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SessionsPolicyState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_dummy();
    init_saga2();
    _excluded51 = ["callback"];
    _excluded223 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/Security/RestrictionsState/saga.js
function* loadEmailDomainRestrictions() {
  yield put(actions30.setEmailDomainRestrictionsState({
    loading: true,
    error: null
  }));
  try {
    const restrictionsConfig = yield call(api.auth.getDomainRestrictionsConfig);
    const restrictions = yield call(api.auth.getDomainRestrictions);
    const filteredRestrictions = restrictions.items.filter((restriction) => restriction.type === restrictionsConfig.listType);
    yield put(actions30.setEmailDomainRestrictionsState({
      data: {
        restrictions: filteredRestrictions,
        config: restrictionsConfig
      },
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setEmailDomainRestrictionsState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* saveEmailDomainRestriction(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, newRestriction = _objectWithoutPropertiesLoose(_ref.payload, _excluded56);
  yield put(actions30.setEmailDomainRestrictionsState({
    saving: true,
    error: null
  }));
  const emailDomainRestrictionsState = yield selectEmailDomainRestrictionsState();
  try {
    var _emailDomainRestricti2;
    yield call(api.auth.createDomainRestriction, newRestriction);
    const restrictions = yield call(api.auth.getDomainRestrictions);
    const filteredRestrictions = restrictions.items.filter((restriction) => {
      var _emailDomainRestricti;
      return restriction.type === ((_emailDomainRestricti = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti.config.listType);
    });
    yield put(actions30.setEmailDomainRestrictionsState({
      data: {
        config: ((_emailDomainRestricti2 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti2.config) || {
          active: false,
          blockPublicDomains: false,
          listType: newRestriction.type
        },
        restrictions: filteredRestrictions
      },
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setEmailDomainRestrictionsState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* saveEmailDomainRestrictionConfig(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2, config = _objectWithoutPropertiesLoose(_ref2.payload, _excluded224);
  yield put(actions30.setEmailDomainRestrictionsState({
    saving: true,
    error: null
  }));
  try {
    const updatedConfig = yield call(api.auth.updateDomainRestrictionConfig, config);
    const restrictions = yield call(api.auth.getDomainRestrictions);
    const filteredRestrictions = restrictions.items.filter((restriction) => restriction.type === updatedConfig.listType);
    yield put(actions30.setEmailDomainRestrictionsState({
      data: {
        config: updatedConfig,
        restrictions: filteredRestrictions
      },
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setEmailDomainRestrictionsState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* deleteEmailDomainRestriction({
  payload: {
    id
  }
}) {
  yield put(actions30.setEmailDomainRestrictionsState({
    saving: true,
    error: null
  }));
  const emailDomainRestrictionsState = yield selectEmailDomainRestrictionsState();
  try {
    var _emailDomainRestricti4;
    yield call(api.auth.deleteDomainRestriction, id);
    const restrictions = yield call(api.auth.getDomainRestrictions);
    const filteredRestrictions = restrictions.items.filter((restriction) => {
      var _emailDomainRestricti3;
      return restriction.type === ((_emailDomainRestricti3 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti3.config.listType);
    });
    yield put(actions30.setEmailDomainRestrictionsState({
      data: {
        config: ((_emailDomainRestricti4 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti4.config) || {
          active: false,
          blockPublicDomains: false,
          listType: RestrictionType.ALLOW
        },
        restrictions: filteredRestrictions
      },
      saving: false
    }));
  } catch (e2) {
    yield put(actions30.setEmailDomainRestrictionsState({
      saving: false,
      error: errorHandler(e2)
    }));
  }
}
function* loadIpRestrictions() {
  yield put(actions30.setIpRestrictionsState({
    loading: true,
    error: null
  }));
  try {
    const ipRestrictionState = yield selectIpRestrictionsState();
    const restrictionsConfig = yield call(api.auth.getIPRestrictionsConfig);
    const pagination = getPagination({
      _filter: restrictionsConfig.strategy,
      _limit: ipRestrictionState.pagination._limit,
      _offset: ipRestrictionState.pagination._offset
    });
    const {
      items: restrictions,
      _metadata: {
        totalPages
      }
    } = yield call(api.auth.getIPRestrictions, pagination);
    yield put(actions30.setIpRestrictionsState({
      data: {
        restrictions,
        config: restrictionsConfig
      },
      totalPages,
      pagination,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* checkIfUserIpValid() {
  try {
    const {
      valid: userIpValid
    } = yield call(api.auth.testCurrentIpInAllowList);
    yield put(actions30.setIpRestrictionsState({
      userIpValid
    }));
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      error: errorHandler(e2)
    }));
  }
}
function* addCurrentUserIpAndActivate({
  payload: {
    callback
  }
}) {
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  try {
    const userIp = yield selectUserIp();
    yield all([call(api.auth.createIPRestriction, {
      ip: userIp,
      isActive: true,
      description: "My IP",
      strategy: RestrictionType.ALLOW
    }), call(api.auth.updateIPRestrictionConfig, {
      isActive: true
    })]);
    const ipRestrictionState = yield selectIpRestrictionsState();
    const pagination = getPagination(ipRestrictionState.pagination);
    const {
      items: restrictions,
      _metadata: {
        totalPages
      }
    } = yield call(api.auth.getIPRestrictions, pagination);
    yield put(actions30.setIpRestrictionsState({
      data: {
        config: {
          isActive: true,
          strategy: RestrictionType.ALLOW
        },
        restrictions
      },
      userIpValid: true,
      pagination,
      totalPages,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      saving: false,
      error: e2
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* saveIpRestriction(_ref3) {
  let {
    payload: {
      callback
    }
  } = _ref3, newRestriction = _objectWithoutPropertiesLoose(_ref3.payload, _excluded314);
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  const ipRestrictionsState = yield selectIpRestrictionsState();
  try {
    var _ipRestrictionsState$, _ipRestrictionsState$2;
    yield call(api.auth.createIPRestriction, newRestriction);
    const ipRestrictionState = yield selectIpRestrictionsState();
    const pagination = getPagination(ipRestrictionState.pagination);
    const {
      items: restrictions,
      _metadata: {
        totalPages
      }
    } = yield call(api.auth.getIPRestrictions, pagination);
    yield checkIfUserIpValid();
    yield put(actions30.setIpRestrictionsState({
      data: {
        config: (_ipRestrictionsState$ = (_ipRestrictionsState$2 = ipRestrictionsState.data) == null ? void 0 : _ipRestrictionsState$2.config) != null ? _ipRestrictionsState$ : {
          isActive: false,
          strategy: RestrictionType.ALLOW
        },
        restrictions
      },
      pagination,
      totalPages,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* saveIpRestrictionsConfig(_ref4) {
  let {
    payload: {
      callback
    }
  } = _ref4, config = _objectWithoutPropertiesLoose(_ref4.payload, _excluded410);
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  try {
    yield call(api.auth.updateIPRestrictionConfig, config);
    const ipRestrictionState = yield selectIpRestrictionsState();
    const restrictionsConfig = yield call(api.auth.getIPRestrictionsConfig);
    const pagination = getPagination(_extends({}, ipRestrictionState.pagination, {
      _filter: restrictionsConfig.strategy
    }));
    const {
      items: restrictions,
      _metadata: {
        totalPages
      }
    } = yield call(api.auth.getIPRestrictions, pagination);
    yield checkIfUserIpValid();
    yield put(actions30.setIpRestrictionsState({
      data: {
        config: restrictionsConfig,
        restrictions
      },
      pagination,
      totalPages,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* deleteIpRestriction({
  payload: {
    id,
    callback
  }
}) {
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  const ipRestrictionsState = yield selectIpRestrictionsState();
  try {
    var _ipRestrictionsState$3;
    yield call(api.auth.deleteIPRestriction, id);
    const ipRestrictionState = yield selectIpRestrictionsState();
    const pagination = getPagination(ipRestrictionState.pagination);
    const {
      items: restrictions,
      _metadata: {
        totalPages
      }
    } = yield call(api.auth.getIPRestrictions, pagination);
    yield checkIfUserIpValid();
    yield put(actions30.setIpRestrictionsState({
      data: {
        config: ((_ipRestrictionsState$3 = ipRestrictionsState.data) == null ? void 0 : _ipRestrictionsState$3.config) || {
          isActive: false,
          strategy: RestrictionType.ALLOW
        },
        restrictions
      },
      pagination,
      totalPages,
      saving: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      saving: false,
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* restrictionsSagas() {
  yield takeLeading$1(actions30.loadIpRestrictions, securityCenterSagaWrapper(loadIpRestrictions));
  yield takeLeading$1(actions30.loadEmailDomainRestrictions, securityCenterSagaWrapper(loadEmailDomainRestrictions));
  yield takeEvery$1(actions30.saveIpRestriction, securityCenterSagaWrapper(saveIpRestriction));
  yield takeEvery$1(actions30.saveIpRestrictionsConfig, securityCenterSagaWrapper(saveIpRestrictionsConfig));
  yield takeEvery$1(actions30.deleteIpRestriction, securityCenterSagaWrapper(deleteIpRestriction));
  yield takeEvery$1(actions30.checkIfUserIpValid, securityCenterSagaWrapper(checkIfUserIpValid));
  yield takeEvery$1(actions30.addCurrentUserIpAndActivate, securityCenterSagaWrapper(addCurrentUserIpAndActivate));
  yield takeEvery$1(actions30.saveEmailDomainRestriction, securityCenterSagaWrapper(saveEmailDomainRestriction));
  yield takeEvery$1(actions30.saveEmailDomainRestrictionsConfig, securityCenterSagaWrapper(saveEmailDomainRestrictionConfig));
  yield takeEvery$1(actions30.deleteEmailDomainRestriction, securityCenterSagaWrapper(deleteEmailDomainRestriction));
}
function* loadIpRestrictionsMock() {
  yield put(actions30.setIpRestrictionsState({
    loading: true,
    error: null
  }));
  yield put(actions30.setIpRestrictionsState({
    data: {
      restrictions: dummyIps.filter((ip) => ip.strategy === dummyIpConfig.strategy),
      config: dummyIpConfig
    },
    totalPages: 1,
    pagination: {
      _filter: RestrictionType.ALLOW,
      _limit: 50,
      _offset: 0
    },
    loading: false
  }));
}
function* checkIfUserIpValidMock() {
  yield put(actions30.setIpRestrictionsState({
    loading: true,
    error: null
  }));
  try {
    const ipRestrictionState = yield selectIpRestrictionsState();
    const userIp = dummyIps[0].ip;
    const userIpValid = !!ipRestrictionState.data.restrictions.find((restriction) => restriction.isActive && restriction.ip === userIp);
    yield put(actions30.setIpRestrictionsState({
      userIpValid,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setIpRestrictionsState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* saveIpRestrictionMock(_ref5) {
  var _ipRestrictionsState$4, _ipRestrictionsState$5, _newRestriction$isAct;
  let {
    payload: {
      callback
    }
  } = _ref5, newRestriction = _objectWithoutPropertiesLoose(_ref5.payload, _excluded57);
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  const ipRestrictionsState = yield selectIpRestrictionsState();
  const filteredRestrictions = ipRestrictionsState.data.restrictions.filter((r2) => r2.ip !== newRestriction.ip);
  yield put(actions30.setIpRestrictionsState({
    data: {
      config: (_ipRestrictionsState$4 = (_ipRestrictionsState$5 = ipRestrictionsState.data) == null ? void 0 : _ipRestrictionsState$5.config) != null ? _ipRestrictionsState$4 : {
        isActive: false,
        strategy: RestrictionType.ALLOW
      },
      restrictions: [...filteredRestrictions, _extends({}, newRestriction, {
        createdAt: /* @__PURE__ */ new Date(),
        updatedAt: /* @__PURE__ */ new Date(),
        id: v4_default(),
        isActive: (_newRestriction$isAct = newRestriction.isActive) != null ? _newRestriction$isAct : true,
        strategy: ipRestrictionsState.data.config.strategy
      })]
    },
    totalPages: 1,
    pagination: {
      _filter: RestrictionType.ALLOW,
      _limit: 50,
      _offset: 0
    },
    saving: false
  }));
  callback == null ? void 0 : callback(true);
}
function* saveIpRestrictionsConfigMock(_ref6) {
  var _ipRestrictionsState$6, _ipRestrictionsState$7, _ipRestrictionsState$8;
  let {
    payload: {
      callback
    }
  } = _ref6, config = _objectWithoutPropertiesLoose(_ref6.payload, _excluded66);
  const ipRestrictionsState = yield selectIpRestrictionsState();
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  yield put(actions30.setIpRestrictionsState({
    data: {
      config: _extends({}, (_ipRestrictionsState$6 = ipRestrictionsState.data) == null ? void 0 : _ipRestrictionsState$6.config, config),
      restrictions: (_ipRestrictionsState$7 = (_ipRestrictionsState$8 = ipRestrictionsState.data) == null ? void 0 : _ipRestrictionsState$8.restrictions) != null ? _ipRestrictionsState$7 : []
    },
    pagination: {
      _filter: RestrictionType.ALLOW,
      _limit: 50,
      _offset: 0
    },
    totalPages: 1,
    saving: false
  }));
  yield put(actions30.setIpRestrictionsState({
    saving: false,
    error: null
  }));
  callback == null ? void 0 : callback(true);
}
function* deleteIpRestrictionMock({
  payload: {
    id,
    callback
  }
}) {
  var _ipRestrictionsState$9;
  yield put(actions30.setIpRestrictionsState({
    saving: true,
    error: null
  }));
  const ipRestrictionsState = yield selectIpRestrictionsState();
  yield put(actions30.setIpRestrictionsState({
    data: {
      config: ((_ipRestrictionsState$9 = ipRestrictionsState.data) == null ? void 0 : _ipRestrictionsState$9.config) || {
        isActive: false,
        strategy: RestrictionType.ALLOW
      },
      restrictions: ipRestrictionsState.data.restrictions.filter((ip) => ip.id !== id)
    },
    pagination: {
      _filter: RestrictionType.ALLOW,
      _limit: 50,
      _offset: 0
    },
    totalPages: 1,
    saving: false,
    error: null
  }));
  callback == null ? void 0 : callback(true);
}
function* loadEmailDomainRestrictionsMock() {
  yield put(actions30.setEmailDomainRestrictionsState({
    loading: true,
    error: null
  }));
  yield put(actions30.setEmailDomainRestrictionsState({
    loading: false,
    data: {
      restrictions: [{
        domain: "mock.com",
        id: "1",
        type: RestrictionType.ALLOW
      }],
      config: {
        active: true,
        listType: RestrictionType.ALLOW,
        blockPublicDomains: false
      }
    }
  }));
}
function* saveEmailDomainRestrictionMock(_ref7) {
  var _emailDomainRestricti5, _emailDomainRestricti6;
  let {
    payload: {
      callback
    }
  } = _ref7, restriction = _objectWithoutPropertiesLoose(_ref7.payload, _excluded75);
  const emailDomainRestrictionsState = yield selectEmailDomainRestrictionsState();
  yield put(actions30.setEmailDomainRestrictionsState({
    saving: true,
    error: null
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setEmailDomainRestrictionsState({
    data: {
      config: ((_emailDomainRestricti5 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti5.config) || {
        active: false,
        blockPublicDomains: false,
        listType: restriction.type
      },
      restrictions: [...((_emailDomainRestricti6 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti6.restrictions) || [], _extends({}, restriction, {
        id: Date.now().toString()
      })]
    },
    saving: false
  }));
}
function* saveEmailDomainRestrictionConfigMock(_ref8) {
  var _emailDomainRestricti7;
  let {
    payload: {
      callback
    }
  } = _ref8, config = _objectWithoutPropertiesLoose(_ref8.payload, _excluded85);
  const emailDomainRestrictionsState = yield selectEmailDomainRestrictionsState();
  yield put(actions30.setEmailDomainRestrictionsState({
    saving: true,
    error: null
  }));
  yield delay();
  callback == null ? void 0 : callback(true);
  yield put(actions30.setEmailDomainRestrictionsState({
    data: {
      config: {
        active: config.active,
        blockPublicDomains: config.blockPublicDomains || false,
        listType: config.type || RestrictionType.ALLOW
      },
      restrictions: [...((_emailDomainRestricti7 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti7.restrictions) || []]
    },
    saving: false
  }));
}
function* deleteEmailDomainRestrictionMock({
  payload: {
    id
  }
}) {
  var _emailDomainRestricti8, _emailDomainRestricti9;
  const emailDomainRestrictionsState = yield selectEmailDomainRestrictionsState();
  yield put(actions30.setEmailDomainRestrictionsState({
    saving: true,
    error: null
  }));
  yield delay();
  yield put(actions30.setEmailDomainRestrictionsState({
    data: {
      config: ((_emailDomainRestricti8 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti8.config) || {
        active: false,
        blockPublicDomains: false,
        listType: RestrictionType.ALLOW
      },
      restrictions: (((_emailDomainRestricti9 = emailDomainRestrictionsState.data) == null ? void 0 : _emailDomainRestricti9.restrictions) || []).filter((restriction) => restriction.id === id)
    },
    saving: false
  }));
}
function* restrictionsSagaMock() {
  yield takeLeading$1(actions30.loadIpRestrictions, loadIpRestrictionsMock);
  yield takeLeading$1(actions30.loadEmailDomainRestrictions, loadEmailDomainRestrictionsMock);
  yield takeEvery$1(actions30.saveIpRestriction, saveIpRestrictionMock);
  yield takeEvery$1(actions30.saveIpRestrictionsConfig, saveIpRestrictionsConfigMock);
  yield takeEvery$1(actions30.deleteIpRestriction, deleteIpRestrictionMock);
  yield takeEvery$1(actions30.checkIfUserIpValid, checkIfUserIpValidMock);
  yield takeEvery$1(actions30.saveEmailDomainRestriction, saveEmailDomainRestrictionMock);
  yield takeEvery$1(actions30.saveEmailDomainRestrictionsConfig, saveEmailDomainRestrictionConfigMock);
  yield takeEvery$1(actions30.deleteEmailDomainRestriction, deleteEmailDomainRestrictionMock);
}
var _excluded56, _excluded224, _excluded314, _excluded410, _excluded57, _excluded66, _excluded75, _excluded85, selectIpRestrictionsState, selectUserIp, selectEmailDomainRestrictionsState, getPagination;
var init_saga39 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/RestrictionsState/saga.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_esm_browser();
    init_constants3();
    init_dummy();
    init_utils();
    init_utils5();
    init_saga2();
    _excluded56 = ["callback"];
    _excluded224 = ["callback"];
    _excluded314 = ["callback"];
    _excluded410 = ["callback"];
    _excluded57 = ["callback"];
    _excluded66 = ["callback"];
    _excluded75 = ["callback"];
    _excluded85 = ["callback"];
    selectIpRestrictionsState = () => select((_2) => _2[authStoreName].restrictionsState.ipRestrictions);
    selectUserIp = () => select((_2) => _2[authStoreName].userIp);
    selectEmailDomainRestrictionsState = () => select((_2) => _2[authStoreName].restrictionsState.emailDomainRestrictions);
    getPagination = (statePagination) => {
      var _statePagination$_fil, _statePagination$_lim, _statePagination$_off;
      return {
        _filter: (_statePagination$_fil = statePagination == null ? void 0 : statePagination._filter) != null ? _statePagination$_fil : RestrictionType.ALLOW,
        _limit: (_statePagination$_lim = statePagination == null ? void 0 : statePagination._limit) != null ? _statePagination$_lim : 10,
        _offset: (_statePagination$_off = statePagination == null ? void 0 : statePagination._offset) != null ? _statePagination$_off : 0
      };
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Provisioning/saga.js
function* loadCountForConnection(connection) {
  const {
    count
  } = yield call(api.directory.countConfigurationUsers, connection.id);
  return _extends({}, connection, {
    count
  });
}
function* loadScim2Connections() {
  yield put(actions30.setProvisioningState({
    loading: true,
    error: null
  }));
  try {
    const connections = yield call(api.directory.getConfigs);
    const connectionsWithCount = yield all(connections.map((connection) => loadCountForConnection(connection)));
    yield put(actions30.setProvisioningState({
      connections: connectionsWithCount,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setProvisioningState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* createScim2Connection(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, newConnectionBody = _objectWithoutPropertiesLoose(_ref.payload, _excluded58);
  yield put(actions30.setProvisioningState({
    loading: true,
    error: null
  }));
  try {
    const newConnectionResponse = yield call(api.directory.createConfiguration, newConnectionBody);
    const connections = yield call(api.directory.getConfigs);
    const connectionsWithCount = yield all(connections.map((connection) => loadCountForConnection(connection)));
    yield put(actions30.setProvisioningState({
      connections: connectionsWithCount,
      loading: false
    }));
    callback == null ? void 0 : callback(newConnectionResponse);
  } catch (e2) {
    yield put(actions30.setProvisioningState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* updateScim2Connection(_ref2) {
  let {
    payload: {
      id
    }
  } = _ref2, updateRequest = _objectWithoutPropertiesLoose(_ref2.payload, _excluded225);
  yield put(actions30.setProvisioningState({
    loading: true,
    error: null
  }));
  try {
    yield call(api.directory.updateConfiguration, id, updateRequest);
    const connections = yield call(api.directory.getConfigs);
    const connectionsWithCount = yield all(connections.map((connection) => loadCountForConnection(connection)));
    yield put(actions30.setProvisioningState({
      connections: connectionsWithCount,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setProvisioningState({
      error: errorHandler(e2),
      loading: false
    }));
  }
}
function* deleteScim2Connection({
  payload: {
    id,
    callback
  }
}) {
  yield put(actions30.setProvisioningState({
    loading: true,
    error: null
  }));
  try {
    yield call(api.directory.deleteConfiguration, id);
    const connections = yield call(api.directory.getConfigs);
    const connectionsWithCount = yield all(connections.map((connection) => loadCountForConnection(connection)));
    yield put(actions30.setProvisioningState({
      connections: connectionsWithCount,
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setProvisioningState({
      error: errorHandler(e2),
      loading: false
    }));
    callback == null ? void 0 : callback(false, e2);
  }
}
function* provisionSagas() {
  yield takeLeading$1(actions30.loadProvisionConnections, loadScim2Connections);
  yield takeEvery$1(actions30.createProvisionConnection, createScim2Connection);
  yield takeEvery$1(actions30.deleteProvisionConnection, deleteScim2Connection);
  yield takeEvery$1(actions30.updateProvisionConnection, updateScim2Connection);
}
var _excluded58, _excluded225;
var init_saga40 = __esm({
  "node_modules/@frontegg/redux-store/auth/Provisioning/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_utils5();
    _excluded58 = ["callback"];
    _excluded225 = ["id"];
  }
});

// node_modules/@frontegg/redux-store/auth/ImpersonationState/saga.js
function* impersonate2(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref.payload, _excluded59);
  yield put(actions30.setImpersonateState({
    loading: true
  }));
  try {
    const data = yield call(api.impersonate.impersonate, payload);
    yield put(actions30.setImpersonateState({
      step: ImpersonateStep.success
    }));
    yield delay2(1e3);
    yield afterAuthNavigation();
    yield put(actions30.resetImpersonateState());
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setImpersonateState({
      loading: false,
      error: errorHandler(e2)
    }));
  }
}
function* impersonateSagas() {
  yield takeLeading$1(actions30.impersonate, impersonate2);
}
var _excluded59;
var init_saga41 = __esm({
  "node_modules/@frontegg/redux-store/auth/ImpersonationState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_rest_api();
    init_redux_saga_effects_npm_proxy_esm();
    init_saga23();
    init_reducer();
    init_interfaces32();
    init_utils5();
    _excluded59 = ["callback", "events"];
  }
});

// node_modules/@frontegg/redux-store/auth/PasskeysState/saga.js
function* deleteWebAuthnDevice2({
  payload
}) {
  const {
    callback,
    deviceId
  } = payload;
  yield put(actions30.setPasskeysState({
    loading: true
  }));
  try {
    yield call(api.auth.deleteWebAuthnDevice, deviceId);
    const {
      devices
    } = yield select((state) => state.auth.passkeysState);
    const newDevices = devices.filter((device) => device.id !== deviceId);
    yield put(actions30.setPasskeysState({
      devices: newDevices,
      loading: false
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setPasskeysState({
      loading: false,
      error: errorHandler(e2, null)
    }));
    callback == null ? void 0 : callback(null, e2);
  }
}
function* loadWebAuthnDevices() {
  yield put(actions30.setPasskeysState({
    loading: true
  }));
  try {
    const {
      devices
    } = yield call(api.auth.getWebAuthnDevices);
    yield put(actions30.setPasskeysState({
      devices,
      loading: false
    }));
  } catch (e2) {
    yield put(actions30.setPasskeysState({
      loading: false,
      error: errorHandler(e2, null)
    }));
  }
}
function* passkeysSagas() {
  yield takeEvery$1(actions30.loadWebAuthnDevices, loadWebAuthnDevices);
  yield takeEvery$1(actions30.deleteWebAuthnDevice, deleteWebAuthnDevice2);
}
var init_saga42 = __esm({
  "node_modules/@frontegg/redux-store/auth/PasskeysState/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_utils5();
  }
});

// node_modules/@frontegg/redux-store/auth/GroupsState/saga.js
function* getTeamUsers({
  payload
}) {
  const key = GroupsStateKeys.GET_TEAM_USERS;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const {
      items: users
    } = yield call(api.users.getUsersV2, {
      _filter: payload.filter,
      _offset: payload.pageOffset,
      _limit: payload.pageSize,
      _includeSubTenants: false
    });
    yield put(actions30.setGroupsState({
      teamUsers: users
    }));
  } catch (e2) {
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* getGroupByIdSaga({
  payload
}) {
  const key = GroupsStateKeys.GET_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const group = yield call(api.groups.getGroupById, {
      groupId: payload.groupId
    }, {
      _groupsRelations: GroupRelations2.rolesAndUsers
    });
    yield put(actions30.setGroupsState({
      selectedGroup: group
    }));
  } catch (e2) {
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* loadGroups() {
  const key = GroupsStateKeys.GET_GROUPS;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const {
      groups
    } = yield call(api.groups.getGroups, {
      _groupsRelations: GroupRelations2.rolesAndUsers
    });
    yield put(actions30.setGroupsState(_extends({
      groups
    }, state.selectedGroup && {
      selectedGroup: groups.find((g2) => {
        var _state$selectedGroup;
        return g2.id === ((_state$selectedGroup = state.selectedGroup) == null ? void 0 : _state$selectedGroup.id);
      })
    })));
  } catch (e2) {
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* createGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.CREATE_GROUP;
  const {
    roleIds,
    userIds
  } = payload, createGroupPayload = _objectWithoutPropertiesLoose(payload, _excluded60);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback;
    const response = yield call(api.groups.createGroup, _extends({
      name: createGroupPayload.name
    }, !!createGroupPayload.description && {
      description: createGroupPayload.description
    }, {
      color: createGroupPayload.color
    }));
    if (userIds != null && userIds.length) {
      yield put(actions30.addUsersToGroup({
        groupId: response.id,
        userIds
      }));
    }
    if (roleIds != null && roleIds.length) {
      yield put(actions30.addRolesToGroup({
        groupId: response.id,
        roleIds
      }));
    }
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback = payload.callback) == null ? void 0 : _payload$callback.call(payload, true);
  } catch (e2) {
    var _payload$callback2;
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback2 = payload.callback) == null ? void 0 : _payload$callback2.call(payload, false);
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* updateGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.UPDATE_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback3;
    yield call(api.groups.updateGroup, payload);
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback3 = payload.callback) == null ? void 0 : _payload$callback3.call(payload, true);
  } catch (e2) {
    var _payload$callback4;
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback4 = payload.callback) == null ? void 0 : _payload$callback4.call(payload, false);
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* deleteGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.DELETE_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback5;
    yield call(api.groups.deleteGroup, payload.groupId);
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback5 = payload.callback) == null ? void 0 : _payload$callback5.call(payload, true);
  } catch (e2) {
    var _payload$callback6;
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback6 = payload.callback) == null ? void 0 : _payload$callback6.call(payload, false, e2);
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* addRolesToGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.ADD_ROLES_TO_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback7;
    yield call(api.groups.addRolesToGroup, payload.groupId, {
      roleIds: payload.roleIds
    });
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback7 = payload.callback) == null ? void 0 : _payload$callback7.call(payload, true);
  } catch (e2) {
    var _payload$callback8;
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback8 = payload.callback) == null ? void 0 : _payload$callback8.call(payload, false);
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* deleteRolesFromGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.DELETE_ROLES_FROM_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback9;
    yield call(api.groups.deleteRolesFromGroup, payload.groupId, {
      roleIds: payload.roleIds
    });
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback9 = payload.callback) == null ? void 0 : _payload$callback9.call(payload, true);
  } catch (e2) {
    var _payload$callback10;
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback10 = payload.callback) == null ? void 0 : _payload$callback10.call(payload, false);
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* addUsersToGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.ADD_USERS_TO_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback11;
    yield call(api.groups.addUsersToGroup, payload.groupId, {
      userIds: payload.userIds
    });
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback11 = payload.callback) == null ? void 0 : _payload$callback11.call(payload, true);
  } catch (e2) {
    var _payload$callback12;
    payload == null ? void 0 : (_payload$callback12 = payload.callback) == null ? void 0 : _payload$callback12.call(payload, false);
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* deleteUsersFromGroupSaga({
  payload
}) {
  const key = GroupsStateKeys.DELETE_USERS_FROM_GROUP;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    var _payload$callback13;
    yield call(api.groups.deleteUsersFromGroup, payload.groupId, {
      userIds: payload.userIds
    });
    yield put(actions30.loadGroups());
    payload == null ? void 0 : (_payload$callback13 = payload.callback) == null ? void 0 : _payload$callback13.call(payload, true);
  } catch (e2) {
    var _payload$callback14;
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
    payload == null ? void 0 : (_payload$callback14 = payload.callback) == null ? void 0 : _payload$callback14.call(payload, false);
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* getGroupConfigurationSaga() {
  const key = GroupsStateKeys.GET_GROUP_CONFIGURATION;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    const response = yield call(api.groups.getGroupConfiguration);
    yield put(actions30.setGroupsState({
      groupsConfiguration: response
    }));
  } catch (e2) {
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* updateGroupConfigurationSaga({
  payload
}) {
  const key = GroupsStateKeys.UPDATE_GROUP_CONFIGURATION;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  try {
    yield call(api.groups.updateGroupConfiguration, payload);
    yield put(actions30.getGroupConfiguration());
  } catch (e2) {
    yield put(actions30.setUsersGroupsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setUsersGroupsLoader({
      key,
      value: false
    }));
  }
}
function* groupsSagas() {
  yield takeLatest$1(actions30.loadGroups, loadGroups);
  yield takeLatest$1(actions30.getGroupById, getGroupByIdSaga);
  yield takeLatest$1(actions30.createGroup, createGroupSaga);
  yield takeLatest$1(actions30.updateGroup, updateGroupSaga);
  yield takeLatest$1(actions30.deleteGroup, deleteGroupSaga);
  yield takeLatest$1(actions30.addRolesToGroup, addRolesToGroupSaga);
  yield takeLatest$1(actions30.deleteRolesFromGroup, deleteRolesFromGroupSaga);
  yield takeLatest$1(actions30.addUsersToGroup, addUsersToGroupSaga);
  yield takeLatest$1(actions30.deleteUsersFromGroup, deleteUsersFromGroupSaga);
  yield takeLatest$1(actions30.getGroupConfiguration, getGroupConfigurationSaga);
  yield takeLatest$1(actions30.updateGroupConfiguration, updateGroupConfigurationSaga);
  yield takeLatest$1(actions30.getTeamUsers, getTeamUsers);
}
function* loadGroupsMock() {
  const key = GroupsStateKeys.GET_GROUPS;
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  const groups = allGroupsDummy;
  yield put(actions30.setGroupsState({
    groups
  }));
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* createGroupMock({
  payload
}) {
  var _payload$callback15;
  const key = GroupsStateKeys.CREATE_GROUP;
  const {
    groups
  } = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: [_extends({}, payload, {
      id: `${payload.name}ID`,
      managedBy: GroupManagedByEnum.FRONTEGG
    }), ...groups != null ? groups : []]
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback15 = payload.callback) == null ? void 0 : _payload$callback15.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* updateGroupMock({
  payload
}) {
  var _state$groups, _payload$name2, _payload$color, _payload$description, _payload$callback16;
  const key = GroupsStateKeys.UPDATE_GROUP;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: state == null ? void 0 : (_state$groups = state.groups) == null ? void 0 : _state$groups.map((group) => {
      var _payload$name;
      return group.id === payload.groupId ? _extends({}, payload, {
        id: payload.groupId,
        name: (_payload$name = payload == null ? void 0 : payload.name) != null ? _payload$name : "",
        managedBy: GroupManagedByEnum.FRONTEGG
      }) : group;
    }),
    selectedGroup: _extends({}, state == null ? void 0 : state.selectedGroup, {
      name: (_payload$name2 = payload == null ? void 0 : payload.name) != null ? _payload$name2 : "",
      color: (_payload$color = payload == null ? void 0 : payload.color) != null ? _payload$color : "",
      description: (_payload$description = payload == null ? void 0 : payload.description) != null ? _payload$description : ""
    })
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback16 = payload.callback) == null ? void 0 : _payload$callback16.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* deleteGroupMock({
  payload
}) {
  var _state$groups2, _payload$callback17;
  const key = GroupsStateKeys.DELETE_GROUP;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: state == null ? void 0 : (_state$groups2 = state.groups) == null ? void 0 : _state$groups2.filter((group) => group.id !== payload.groupId)
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback17 = payload.callback) == null ? void 0 : _payload$callback17.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* addRolesToGroupMock({
  payload
}) {
  var _state$groups3, _payload$callback18;
  const key = GroupsStateKeys.ADD_ROLES_TO_GROUP;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: state == null ? void 0 : (_state$groups3 = state.groups) == null ? void 0 : _state$groups3.map((group) => {
      var _group$roles;
      return group.id === payload.groupId ? _extends({}, group, {
        roles: [...(_group$roles = group == null ? void 0 : group.roles) != null ? _group$roles : [], ...payload.roleIds.map((role) => ({
          id: role,
          name: role
        }))]
      }) : group;
    })
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback18 = payload.callback) == null ? void 0 : _payload$callback18.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* deleteRolesFromGroupMock({
  payload
}) {
  var _state$groups4, _payload$callback19;
  const key = GroupsStateKeys.DELETE_ROLES_FROM_GROUP;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: state == null ? void 0 : (_state$groups4 = state.groups) == null ? void 0 : _state$groups4.map((group) => {
      var _group$roles2;
      return group.id === payload.groupId ? _extends({}, group, {
        roles: group == null ? void 0 : (_group$roles2 = group.roles) == null ? void 0 : _group$roles2.filter((role) => !payload.roleIds.includes(role.id))
      }) : group;
    })
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback19 = payload.callback) == null ? void 0 : _payload$callback19.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* addUsersToGroupMock({
  payload
}) {
  var _state$groups5, _payload$callback20;
  const key = GroupsStateKeys.ADD_USERS_TO_GROUP;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: state == null ? void 0 : (_state$groups5 = state.groups) == null ? void 0 : _state$groups5.map((group) => {
      var _group$users;
      return group.id === payload.groupId ? _extends({}, group, {
        users: [...(_group$users = group == null ? void 0 : group.users) != null ? _group$users : [], ...payload.userIds.map((user) => ({
          id: user,
          name: user
        }))]
      }) : group;
    })
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback20 = payload.callback) == null ? void 0 : _payload$callback20.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* deleteUsersFromGroupMock({
  payload
}) {
  var _state$groups6, _payload$callback21;
  const key = GroupsStateKeys.DELETE_USERS_FROM_GROUP;
  const state = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  yield put(actions30.setGroupsState({
    groups: state == null ? void 0 : (_state$groups6 = state.groups) == null ? void 0 : _state$groups6.map((group) => {
      var _group$users2;
      return group.id === payload.groupId ? _extends({}, group, {
        users: group == null ? void 0 : (_group$users2 = group.users) == null ? void 0 : _group$users2.filter((user) => !payload.userIds.includes(user.id))
      }) : group;
    })
  }));
  yield delay2(500);
  payload == null ? void 0 : (_payload$callback21 = payload.callback) == null ? void 0 : _payload$callback21.call(payload, true);
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* getGroupConfigurationMock() {
  const key = GroupsStateKeys.GET_GROUP_CONFIGURATION;
  const {
    groupsConfiguration
  } = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  if (groupsConfiguration) {
    yield put(actions30.setGroupsState({
      groupsConfiguration: _extends({}, groupsConfiguration)
    }));
  }
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* updateGroupConfigurationMock({
  payload
}) {
  const key = GroupsStateKeys.UPDATE_GROUP_CONFIGURATION;
  const {
    groupsConfiguration
  } = yield selectGroupsState();
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: true
  }));
  if (groupsConfiguration) {
    yield put(actions30.setGroupsState({
      groupsConfiguration: _extends({}, groupsConfiguration, payload)
    }));
  }
  yield put(actions30.setUsersGroupsLoader({
    key,
    value: false
  }));
}
function* groupsSagasMock() {
  yield takeLatest$1(actions30.loadGroups, loadGroupsMock);
  yield takeLatest$1(actions30.createGroup, createGroupMock);
  yield takeLatest$1(actions30.updateGroup, updateGroupMock);
  yield takeLatest$1(actions30.deleteGroup, deleteGroupMock);
  yield takeLatest$1(actions30.addRolesToGroup, addRolesToGroupMock);
  yield takeLatest$1(actions30.deleteRolesFromGroup, deleteRolesFromGroupMock);
  yield takeLatest$1(actions30.addUsersToGroup, addUsersToGroupMock);
  yield takeLatest$1(actions30.deleteUsersFromGroup, deleteUsersFromGroupMock);
  yield takeLatest$1(actions30.getGroupConfiguration, getGroupConfigurationMock);
  yield takeLatest$1(actions30.updateGroupConfiguration, updateGroupConfigurationMock);
}
var _excluded60, selectGroupsState;
var init_saga43 = __esm({
  "node_modules/@frontegg/redux-store/auth/GroupsState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_interfaces54();
    init_constants3();
    init_dummy();
    init_utils5();
    _excluded60 = ["roleIds", "userIds"];
    selectGroupsState = () => select((_2) => _2[authStoreName].groupsState);
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/updateNodeName.js
var updateNodeName;
var init_updateNodeName = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/updateNodeName.js"() {
    init_extends();
    updateNodeName = (treeNode, id, newName) => {
      var _treeNode$children$ma, _treeNode$children;
      if (treeNode.tenantId === id) {
        return _extends({}, treeNode, {
          name: newName
        });
      }
      return _extends({}, treeNode, {
        children: (_treeNode$children$ma = treeNode == null ? void 0 : (_treeNode$children = treeNode.children) == null ? void 0 : _treeNode$children.map((child) => updateNodeName(child, id, newName))) != null ? _treeNode$children$ma : []
      });
    };
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/removeNodeFromTree.js
function removeNodeFromTree(treeNode, idToRemove) {
  var _treeNode$children;
  return _extends({}, treeNode, {
    children: (_treeNode$children = treeNode.children) != null && _treeNode$children.length ? treeNode.children.filter((child) => child.tenantId !== idToRemove).map((child) => removeNodeFromTree(child, idToRemove)) : []
  });
}
var init_removeNodeFromTree = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/removeNodeFromTree.js"() {
    init_extends();
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/appendChildrenToNode.js
function appendChildrenToNode(treeNode, id, newChildren) {
  var _treeNode$children$ma, _treeNode$children2;
  if (treeNode.tenantId === id) {
    var _treeNode$children;
    const combinedChildren = [...(_treeNode$children = treeNode == null ? void 0 : treeNode.children) != null ? _treeNode$children : [], ...newChildren];
    const uniqueChildren = combinedChildren.filter((child, index, self) => index === self.findIndex((t2) => t2.tenantId === child.tenantId));
    return _extends({}, treeNode, {
      children: uniqueChildren
    });
  }
  return _extends({}, treeNode, {
    children: (_treeNode$children$ma = treeNode == null ? void 0 : (_treeNode$children2 = treeNode.children) == null ? void 0 : _treeNode$children2.map((child) => appendChildrenToNode(child, id, newChildren))) != null ? _treeNode$children$ma : []
  });
}
var init_appendChildrenToNode = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/appendChildrenToNode.js"() {
    init_extends();
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/getAccountsWithUsersCount.js
var getAccountsWithUsersCount;
var init_getAccountsWithUsersCount = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/utils/getAccountsWithUsersCount.js"() {
    getAccountsWithUsersCount = ({
      items: accounts
    }, tenantsUsersCountArray) => {
      return accounts.map((account) => {
        var _tenantsUsersCountArr, _tenantsUsersCountArr2;
        return {
          name: account.name,
          tenantId: account.tenantId,
          numberOfUsers: (_tenantsUsersCountArr = (_tenantsUsersCountArr2 = tenantsUsersCountArray.find((i2) => i2.tenantId === account.tenantId)) == null ? void 0 : _tenantsUsersCountArr2.totalUsers) != null ? _tenantsUsersCountArr : 0,
          createdAt: account.createdAt,
          metadata: account.metadata
        };
      });
    };
  }
});

// node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/saga.js
function* loadAccounts({
  payload
}) {
  const key = AllAccountsStateKeys.GET_ACCOUNTS;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    accountsQueryParams
  } = yield selectAllAccountsState();
  const {
    jwt,
    _limit,
    _offset
  } = payload;
  const searchSubTenantsQueryParams = {
    _offset: _offset != null ? _offset : accountsQueryParams._offset,
    _limit: _limit != null ? _limit : accountsQueryParams._limit,
    _subTenantId: payload == null ? void 0 : payload._subTenantId
  };
  try {
    const isSelectedAccountChange = !!jwt;
    if (isSelectedAccountChange) {
      var _payload$_subTenantId;
      const {
        selectedAccount
      } = yield selectAllAccountsState();
      const {
        items,
        _links
      } = yield call(api.tenants.searchSubTenants, searchSubTenantsQueryParams, {
        jwt
      });
      const tenantsUsersCountArray = yield call(api.tenants.getTenantsUsersCount, {
        tenantIds: items.map((tenant) => tenant.tenantId)
      }, {
        jwt
      });
      const accountsWithUsersCount = getAccountsWithUsersCount({
        items
      }, tenantsUsersCountArray);
      const updatedSingleAccountViewAccounts = appendChildrenToNode(selectedAccount.accounts ? selectedAccount.accounts : selectedAccount, (_payload$_subTenantId = payload == null ? void 0 : payload._subTenantId) != null ? _payload$_subTenantId : "", accountsWithUsersCount.map((account) => ({
        name: account.name,
        tenantId: account.tenantId,
        numberOfUsers: account.numberOfUsers,
        createdAt: account.createdAt,
        metadata: account.metadata,
        children: [],
        loadMoreLink: _links == null ? void 0 : _links.next
      })));
      yield put(actions30.setSelectedAccountState({
        accounts: updatedSingleAccountViewAccounts
      }));
    } else {
      var _payload$_subTenantId2;
      const {
        accounts
      } = yield selectAllAccountsState();
      const {
        items,
        _links
      } = yield call(api.tenants.searchSubTenants, searchSubTenantsQueryParams);
      const tenantsUsersCountArray = yield call(api.tenants.getTenantsUsersCount, {
        tenantIds: items.map((i2) => i2.tenantId)
      });
      const accountsWithUsersCount = getAccountsWithUsersCount({
        items
      }, tenantsUsersCountArray);
      const updatedAccounts = appendChildrenToNode(accounts, (_payload$_subTenantId2 = payload == null ? void 0 : payload._subTenantId) != null ? _payload$_subTenantId2 : "", accountsWithUsersCount.map((account) => ({
        name: account.name,
        tenantId: account.tenantId,
        numberOfUsers: account.numberOfUsers,
        createdAt: account.createdAt,
        metadata: account.metadata,
        children: [],
        loadMoreLink: _links == null ? void 0 : _links.next
      })));
      yield put(actions30.setAllAccountsState({
        accounts: updatedAccounts
      }));
    }
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* searchAccounts({
  payload
}) {
  const key = AllAccountsStateKeys.SEARCH_ACCOUNTS;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    rootAccount
  } = yield selectAllAccountsState();
  const {
    jwt
  } = payload;
  try {
    if (payload != null && payload._subTenantId) {
      var _payload$_filter;
      const {
        items
      } = yield call(api.tenants.searchSubTenants, {
        _offset: 0,
        _limit: 50,
        _filter: (_payload$_filter = payload == null ? void 0 : payload._filter) != null ? _payload$_filter : "",
        _subTenantId: payload._subTenantId
      }, {
        jwt
      });
      yield put(actions30.setAllAccountsState({
        searchAccountsData: [...items, {
          name: rootAccount.name,
          tenantId: rootAccount.tenantId
        }]
      }));
    }
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* getUserJwtForSubAccount({
  payload
}) {
  const key = AllAccountsStateKeys.GET_USER_JWT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    tenantId,
    callback
  } = payload;
  try {
    const userJwt = yield call(api.users.GetUserJwt, {
      tenantId
    });
    yield put(actions30.setSelectedAccountState({
      userJwt,
      accessPermission: true
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    yield put(actions30.setSelectedAccountState({
      accessPermission: false
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* createSubAccount({
  payload
}) {
  const key = AllAccountsStateKeys.CREATE_SUB_ACCOUNT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    name: name10,
    parentTenantId,
    tenantId,
    jwt,
    callback
  } = payload;
  try {
    const isSelectedAccountChange = !!jwt;
    if (isSelectedAccountChange) {
      const {
        accounts
      } = yield selectAllAccountsState();
      const {
        selectedAccount
      } = yield selectAllAccountsState();
      const createdSubTenant = yield call(api.subTenants.createSubTenant, {
        name: name10,
        parentTenantId,
        tenantId
      }, {
        jwt
      });
      const updatedAllAccountPageAccounts = appendChildrenToNode(accounts, parentTenantId != null ? parentTenantId : "", [{
        name: createdSubTenant.name,
        tenantId: createdSubTenant.tenantId,
        numberOfUsers: 0,
        createdAt: /* @__PURE__ */ new Date()
      }]);
      const updatedSingleAccountViewAccounts = appendChildrenToNode(_extends({
        name: "",
        tenantId: ""
      }, selectedAccount == null ? void 0 : selectedAccount.accounts), parentTenantId != null ? parentTenantId : "", [{
        name: createdSubTenant.name,
        tenantId: createdSubTenant.tenantId,
        numberOfUsers: 0,
        createdAt: /* @__PURE__ */ new Date()
      }]);
      yield put(actions30.setAllAccountsState({
        accounts: updatedAllAccountPageAccounts
      }));
      yield put(actions30.setSelectedAccountState({
        accounts: updatedSingleAccountViewAccounts
      }));
    } else {
      const {
        accounts
      } = yield selectAllAccountsState();
      const createdSubTenant = yield call(api.subTenants.createSubTenant, {
        name: name10,
        tenantId,
        parentTenantId
      });
      const updatedAccounts = appendChildrenToNode(accounts, parentTenantId != null ? parentTenantId : "", [{
        name: createdSubTenant.name,
        tenantId: createdSubTenant.tenantId,
        numberOfUsers: 0,
        createdAt: /* @__PURE__ */ new Date()
      }]);
      yield put(actions30.setAllAccountsState({
        accounts: updatedAccounts
      }));
    }
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* deleteSubAccount({
  payload
}) {
  const key = AllAccountsStateKeys.DELETE_SUB_ACCOUNT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    jwt,
    tenantId,
    callback
  } = payload;
  try {
    const isSelectedAccountChange = !!jwt;
    if (isSelectedAccountChange) {
      const {
        selectedAccount,
        accounts
      } = yield selectAllAccountsState();
      yield call(api.subTenants.deleteSubTenant, tenantId, {
        jwt
      });
      const udpatedAccounts = removeNodeFromTree(accounts, tenantId);
      const updatedAccountsForSelectedAccount = removeNodeFromTree(selectedAccount == null ? void 0 : selectedAccount.accounts, tenantId);
      yield put(actions30.setAllAccountsState({
        accounts: udpatedAccounts
      }));
      yield put(actions30.setSelectedAccountState({
        accounts: updatedAccountsForSelectedAccount
      }));
    } else {
      const {
        accounts
      } = yield selectAllAccountsState();
      yield call(api.subTenants.deleteSubTenant, tenantId);
      const udpatedAccounts = removeNodeFromTree(accounts, tenantId);
      yield put(actions30.setAllAccountsState({
        accounts: udpatedAccounts
      }));
    }
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* updateSubAccountSettings({
  payload
}) {
  const key = AllAccountsStateKeys.UPDATE_SUB_ACCOUNT_SETTINGS;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    jwt,
    name: name10,
    callback,
    tenantId
  } = payload;
  try {
    const isSelectedAccountChange = !!jwt;
    if (isSelectedAccountChange) {
      const {
        selectedAccount,
        accounts
      } = yield selectAllAccountsState();
      yield call(api.subTenants.updateSubTenant, {
        tenantId
      }, {
        name: name10
      }, {
        jwt
      });
      const udpatedAccs = updateNodeName(selectedAccount.accounts, tenantId, name10);
      yield put(actions30.setSelectedAccountState({
        name: name10,
        accounts: udpatedAccs
      }));
      const udpatedAccsForAllAccountsPage = updateNodeName(accounts, tenantId, name10);
      yield put(actions30.setAllAccountsState({
        accounts: udpatedAccsForAllAccountsPage
      }));
    } else {
      const {
        accounts
      } = yield selectAllAccountsState();
      yield call(api.subTenants.updateSubTenant, {
        tenantId
      }, {
        name: name10
      });
      const udpatedAccs = updateNodeName(accounts, tenantId, name10);
      yield put(actions30.setAllAccountsState({
        accounts: udpatedAccs
      }));
    }
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* deleteUserFromAccount({
  payload
}) {
  const key = AllAccountsStateKeys.DELETE_USERS_FROM_ACCOUNT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    userId,
    subTenants,
    jwt,
    callback
  } = payload;
  try {
    yield call(api.subTenants.removeUserFromTenantAndSubTenants, {
      userId,
      subTenants
    }, {
      jwt
    });
    yield put(actions30.getAccountUsers({
      jwt,
      _tenantId: subTenants[0].tenantId
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* setUserRolesForSubAccount({
  payload
}) {
  const key = AllAccountsStateKeys.SET_USER_ROLES_FOR_SUB_ACCOUNT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    userId,
    subTenantsRoles,
    jwt,
    callback
  } = payload;
  const {
    selectedAccount
  } = yield selectAllAccountsState();
  try {
    yield call(api.subTenants.setUserRolesForSubTenants, userId, {
      subTenantsRoles
    }, {
      jwt
    });
    yield put(actions30.getAccountUsers({
      jwt,
      _tenantId: selectedAccount.tenantId
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* addUsersToAccount({
  payload
}) {
  const key = AllAccountsStateKeys.ADD_USERS_TO_ACCOUNT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    users,
    tenantId,
    jwt,
    callback,
    allowSubAccountAccess = false,
    roleIds
  } = payload;
  try {
    yield call(api.subTenants.addUsersToSubTenant, {
      users,
      tenantId,
      allowSubAccountAccess,
      roleIds
    }, {
      jwt
    });
    yield put(actions30.getAccountUsers({
      jwt,
      _tenantId: tenantId
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* updateSubAccountAccessForUser({
  payload
}) {
  const key = AllAccountsStateKeys.UPDATE_SUB_ACCOUNT_ACCESS_FOR_USER;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    selectedAccount
  } = yield selectAllAccountsState();
  const {
    userId,
    allowAccess,
    jwt,
    callback
  } = payload;
  try {
    var _selectedAccount$user;
    yield call(api.subTenants.updateSubAccountAccess, userId, {
      allowAccess
    }, {
      jwt
    });
    yield put(actions30.setSelectedAccountState({
      users: selectedAccount == null ? void 0 : (_selectedAccount$user = selectedAccount.users) == null ? void 0 : _selectedAccount$user.map((user) => {
        if (user.id === userId) {
          return _extends({}, user, {
            subAccountAccessAllowed: allowAccess
          });
        }
        return user;
      })
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(false);
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* getAccountUsers({
  payload
}) {
  var _ref, _payload$_offset, _allAccountsState$sel, _allAccountsState$sel2, _ref2, _payload$_limit, _allAccountsState$sel3, _allAccountsState$sel4;
  const key = AllAccountsStateKeys.GET_ACCOUNT_USERS;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const allAccountsState = yield selectAllAccountsState();
  const {
    jwt,
    _tenantId,
    _email
  } = payload;
  const _offset = (_ref = (_payload$_offset = payload == null ? void 0 : payload._offset) != null ? _payload$_offset : allAccountsState == null ? void 0 : (_allAccountsState$sel = allAccountsState.selectedAccount) == null ? void 0 : (_allAccountsState$sel2 = _allAccountsState$sel.usersQueryParams) == null ? void 0 : _allAccountsState$sel2._offset) != null ? _ref : 0;
  const _limit = (_ref2 = (_payload$_limit = payload == null ? void 0 : payload._limit) != null ? _payload$_limit : allAccountsState == null ? void 0 : (_allAccountsState$sel3 = allAccountsState.selectedAccount) == null ? void 0 : (_allAccountsState$sel4 = _allAccountsState$sel3.usersQueryParams) == null ? void 0 : _allAccountsState$sel4._limit) != null ? _ref2 : 10;
  const getAccountUsersQueryParams = _extends({
    _offset,
    _limit,
    _tenantId,
    _includeSubTenants: false
  }, !!_email && {
    _email
  });
  try {
    const {
      items: usersItems,
      _metadata: {
        totalItems,
        totalPages
      }
    } = yield call(api.users.getUsersV3, getAccountUsersQueryParams, {
      jwt
    });
    const selectedAccountStateObj = {
      totalUsersItems: totalItems,
      totalUsersPages: totalPages,
      usersQueryParams: _extends({
        _offset: _offset != null ? _offset : 0,
        _limit: _limit != null ? _limit : 10
      }, !!_email && {
        _email
      })
    };
    if (usersItems.length) {
      const usersIds = usersItems.map((user) => user.id);
      const allRoles = yield call(api.roles.getRoles);
      const usersRoles = yield call(api.users.getUsersRoles, {
        ids: usersIds
      }, {
        jwt
      });
      const usersWithRoles = usersItems.map((user) => {
        var _usersRoles$find, _ref3;
        const userRolesIds = usersRoles == null ? void 0 : (_usersRoles$find = usersRoles.find((role) => role.userId === user.id)) == null ? void 0 : _usersRoles$find.roleIds;
        return _extends({}, user, {
          roles: (_ref3 = userRolesIds == null ? void 0 : userRolesIds.map((roleId) => {
            var _allRoles$find;
            return (_allRoles$find = allRoles == null ? void 0 : allRoles.find((role) => role.id === roleId)) != null ? _allRoles$find : [];
          })) != null ? _ref3 : []
        });
      });
      yield put(actions30.setSelectedAccountState(_extends({
        users: usersWithRoles
      }, selectedAccountStateObj)));
    } else {
      yield put(actions30.setSelectedAccountState(_extends({
        users: []
      }, selectedAccountStateObj)));
    }
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* setSelectedSubAccountData({
  payload
}) {
  const key = AllAccountsStateKeys.SET_SELECTED_SUB_ACCOUNT_DATA;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    jwt
  } = payload;
  try {
    var _accountSettings$tena, _accountSettings$tena2, _accountSettings$tena3, _subAccountsAmount$, _accountSettings$tena4, _numberOfUsersArray$, _accountSettings$tena5;
    const accountSettings = yield call(api.accountSettings.getSettings, {
      jwt
    });
    const numberOfUsersArray = yield call(api.tenants.getTenantsUsersCount, {
      tenantIds: [(_accountSettings$tena = accountSettings == null ? void 0 : accountSettings.tenantId) != null ? _accountSettings$tena : ""]
    }, {
      jwt
    });
    const parentsAccounts = yield call(api.tenants.getParentTenants, {
      jwt
    });
    const subAccountsAmount = yield call(api.tenants.getHierarchyMetadata, {
      _tenantIds: [(_accountSettings$tena2 = accountSettings == null ? void 0 : accountSettings.tenantId) != null ? _accountSettings$tena2 : ""]
    }, {
      jwt
    });
    yield put(actions30.setSelectedAccountState({
      tenantId: (_accountSettings$tena3 = accountSettings.tenantId) != null ? _accountSettings$tena3 : "",
      name: accountSettings.name,
      numberOfUsersObject: numberOfUsersArray[0],
      parentsAccounts,
      numberOfSubAccounts: (_subAccountsAmount$ = subAccountsAmount[0]) == null ? void 0 : _subAccountsAmount$.totalSubTenants,
      accountSettings,
      accounts: {
        name: accountSettings.name,
        tenantId: (_accountSettings$tena4 = accountSettings.tenantId) != null ? _accountSettings$tena4 : "",
        numberOfUsers: (_numberOfUsersArray$ = numberOfUsersArray[0]) == null ? void 0 : _numberOfUsersArray$.totalUsers,
        //Not implemented on backend yet
        createdAt: void 0,
        children: []
      }
    }));
    yield put(actions30.getAccountUsers({
      jwt,
      _tenantId: (_accountSettings$tena5 = accountSettings == null ? void 0 : accountSettings.tenantId) != null ? _accountSettings$tena5 : ""
    }));
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* setRootAccountData() {
  const key = AllAccountsStateKeys.SET_ROOT_ACCOUNT_DATA;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    activeTenant
  } = yield selectTenantsState();
  const {
    accounts
  } = yield selectAllAccountsState();
  if (!activeTenant)
    return;
  try {
    var _tenantUsersCount$;
    const tenantUsersCount = yield call(api.tenants.getTenantsUsersCount, {
      tenantIds: [activeTenant == null ? void 0 : activeTenant.tenantId]
    });
    const rootAccount = {
      name: activeTenant == null ? void 0 : activeTenant.name,
      tenantId: activeTenant == null ? void 0 : activeTenant.tenantId,
      numberOfUsers: (_tenantUsersCount$ = tenantUsersCount[0]) == null ? void 0 : _tenantUsersCount$.totalUsers,
      createdAt: activeTenant == null ? void 0 : activeTenant.createdAt
    };
    yield put(actions30.setAllAccountsState({
      rootAccount,
      accounts: _extends({}, accounts, rootAccount)
    }));
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* loadNumberOfUsersForSelectedSubAccount({
  payload
}) {
  const key = AllAccountsStateKeys.LOAD_NUMBER_OF_USERS_FOR_ACCOUNT;
  yield put(actions30.setAllAccountsLoader({
    key,
    value: true
  }));
  const {
    tenantId,
    jwt
  } = payload;
  try {
    const numberOfUsersArray = yield call(api.tenants.getTenantsUsersCount, {
      tenantIds: [tenantId]
    }, {
      jwt
    });
    yield put(actions30.setSelectedAccountState({
      numberOfUsersObject: numberOfUsersArray[0]
    }));
  } catch (e2) {
    yield put(actions30.setAllAccountsError({
      key,
      value: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setAllAccountsLoader({
      key,
      value: false
    }));
  }
}
function* allAccountsSagas() {
  yield takeLatest$1(actions30.loadAccounts, loadAccounts);
  yield takeLatest$1(actions30.searchAccounts, searchAccounts);
  yield takeLatest$1(actions30.updateSubAccountAccessForUser, updateSubAccountAccessForUser);
  yield takeLatest$1(actions30.getUserJwtForSubAccount, getUserJwtForSubAccount);
  yield takeLatest$1(actions30.createSubAccount, createSubAccount);
  yield takeLatest$1(actions30.deleteSubAccount, deleteSubAccount);
  yield takeLatest$1(actions30.updateSubAccountSettings, updateSubAccountSettings);
  yield takeLatest$1(actions30.addUsersToAccount, addUsersToAccount);
  yield takeLatest$1(actions30.deleteUsersFromAccount, deleteUserFromAccount);
  yield takeLatest$1(actions30.setUserRolesForSubAccount, setUserRolesForSubAccount);
  yield takeLatest$1(actions30.getAccountUsers, getAccountUsers);
  yield takeLatest$1(actions30.setRootAccountData, setRootAccountData);
  yield takeLatest$1(actions30.setSelectedSubAccountData, setSelectedSubAccountData);
  yield takeLatest$1(actions30.loadNumberOfUsersForSelectedSubAccount, loadNumberOfUsersForSelectedSubAccount);
}
var selectTenantsState, selectAllAccountsState;
var init_saga44 = __esm({
  "node_modules/@frontegg/redux-store/auth/MSP/AllAccountsState/saga.js"() {
    init_extends();
    init_reducer();
    init_constants3();
    init_stateTypes();
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_utils5();
    init_updateNodeName();
    init_removeNodeFromTree();
    init_appendChildrenToNode();
    init_getAccountsWithUsersCount();
    selectTenantsState = () => select((_2) => _2[authStoreName].tenantsState);
    selectAllAccountsState = () => select((_2) => _2[authStoreName].allAccountsState);
  }
});

// node_modules/@frontegg/redux-store/auth/SmsState/saga.js
function* loadPhoneNumbers() {
  yield put(actions30.setSmsState({
    loading: true
  }));
  const queryParams = {
    _limit: 10,
    _offset: 0
  };
  try {
    const {
      items
    } = yield call(api.userPhoneNumbers.getUserPhoneNumbers, queryParams);
    yield put(actions30.setSmsState({
      phoneNumbers: items
    }));
  } catch (e2) {
    yield put(actions30.setSmsState({
      error: errorHandler(e2)
    }));
  } finally {
    yield put(actions30.setSmsState({
      loading: false
    }));
  }
}
function* setUpPhoneNumber(_ref) {
  let {
    payload: {
      callback
    }
  } = _ref, payload = _objectWithoutPropertiesLoose(_ref.payload, _excluded61);
  yield put(actions30.setSmsState({
    loading: true
  }));
  try {
    const res = yield call(api.userPhoneNumbers.createPhoneNumber, payload);
    yield put(actions30.setSmsState({
      otcToken: res.otcToken
    }));
    yield call(loadPhoneNumbers);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSmsState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setSmsState({
      loading: false
    }));
  }
}
function* verifyPhoneNumber2(_ref2) {
  let {
    payload: {
      callback
    }
  } = _ref2, payload = _objectWithoutPropertiesLoose(_ref2.payload, _excluded226);
  yield put(actions30.setSmsState({
    loading: true
  }));
  try {
    yield call(api.userPhoneNumbers.verifyPhoneNumber, payload);
    yield call(loadPhoneNumbers);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSmsState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setSmsState({
      loading: false
    }));
  }
}
function* deletePhoneNumber2(_ref3) {
  let {
    payload: {
      callback,
      phoneId
    }
  } = _ref3, payload = _objectWithoutPropertiesLoose(_ref3.payload, _excluded315);
  yield put(actions30.setSmsState({
    loading: true
  }));
  try {
    const res = yield call(api.userPhoneNumbers.deletePhoneNumber, phoneId);
    yield put(actions30.setSmsState({
      otcToken: res.otcToken
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSmsState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setSmsState({
      loading: false
    }));
  }
}
function* verifyDeletePhoneNumber2(_ref4) {
  let {
    payload: {
      callback,
      phoneId
    }
  } = _ref4, payload = _objectWithoutPropertiesLoose(_ref4.payload, _excluded411);
  yield put(actions30.setSmsState({
    loading: true
  }));
  try {
    yield call(api.userPhoneNumbers.verifyDeletePhoneNumber, phoneId, payload);
    yield call(loadPhoneNumbers);
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSmsState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setSmsState({
      loading: false
    }));
  }
}
function* preVerifyPhoneNumber2(_ref5) {
  let {
    payload: {
      callback
    }
  } = _ref5, payload = _objectWithoutPropertiesLoose(_ref5.payload, _excluded510);
  yield put(actions30.setSmsState({
    loading: true
  }));
  try {
    const res = yield call(api.userPhoneNumbers.preVerifyPhoneNumber, payload);
    yield put(actions30.setSmsState({
      otcToken: res.otcToken
    }));
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    yield put(actions30.setSmsState({
      error: errorHandler(e2)
    }));
    callback == null ? void 0 : callback(null, e2);
  } finally {
    yield put(actions30.setSmsState({
      loading: false
    }));
  }
}
function* smsSagas() {
  yield takeEvery$1(actions30.loadPhoneNumbers, loadPhoneNumbers);
  yield takeEvery$1(actions30.setUpPhoneNumber, setUpPhoneNumber);
  yield takeEvery$1(actions30.verifyPhoneNumber, verifyPhoneNumber2);
  yield takeEvery$1(actions30.deletePhoneNumber, deletePhoneNumber2);
  yield takeEvery$1(actions30.verifyDeletePhoneNumber, verifyDeletePhoneNumber2);
  yield takeEvery$1(actions30.preVerifyPhoneNumber, preVerifyPhoneNumber2);
}
var _excluded61, _excluded226, _excluded315, _excluded411, _excluded510;
var init_saga45 = __esm({
  "node_modules/@frontegg/redux-store/auth/SmsState/saga.js"() {
    init_objectWithoutPropertiesLoose();
    init_reducer();
    init_rest_api();
    init_redux_saga_effects_npm_proxy_esm();
    init_utils5();
    _excluded61 = ["callback"];
    _excluded226 = ["callback"];
    _excluded315 = ["callback", "phoneId"];
    _excluded411 = ["callback", "phoneId"];
    _excluded510 = ["callback"];
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/generateStepUpSession.saga.js
function* handleNoNeedToStepUpFlow(generateResponse) {
  yield call(afterAuthenticationStateUpdate, generateResponse);
  yield call(afterStepUpAuthNavigation);
}
function* handleNeedToStepUpFlow({
  mfaToken,
  mfaDevices
}) {
  yield put(actions30.setStepUpState({
    mfaDevices,
    mfaToken
  }));
  const step = yield call(getMfaStepForEnrolledUsers, mfaDevices);
  yield put(actions30.setMfaState({
    step
  }));
}
function* handleError(error) {
  if (isMfaIsNotEnrolledError(error)) {
    yield put(actions30.setMfaState({
      step: MFAStep.noMFAEnrolledStepUp
    }));
    return;
  }
  window.localStorage.setItem(SHOULD_STEP_UP_KEY, "true");
  const {
    routes
  } = yield select((state) => state.auth);
  ContextHolder.onRedirectTo(routes.logoutUrl, {
    preserveQueryParams: true
  });
}
function* generateStepUpSession({
  payload: {
    maxAge,
    callback
  }
}) {
  yield put(actions30.setStepUpState({
    mfaDevices: void 0,
    mfaToken: ""
  }));
  try {
    const response = yield call(api.auth.generateStepupSession, {
      maxAge
    });
    if (response["user"]) {
      yield call(handleNoNeedToStepUpFlow, response);
    } else {
      yield call(handleNeedToStepUpFlow, response);
    }
    callback == null ? void 0 : callback(true);
  } catch (e2) {
    callback == null ? void 0 : callback(false);
    yield call(handleError, e2);
  }
}
var MFA_IS_NOT_ENROLLED_ERROR, isMfaIsNotEnrolledError;
var init_generateStepUpSession_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/generateStepUpSession.saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_rest_api();
    init_reducer();
    init_utils3();
    init_interfaces26();
    init_sagas();
    init_saga_utils();
    init_consts2();
    MFA_IS_NOT_ENROLLED_ERROR = "MFA is not enrolled";
    isMfaIsNotEnrolledError = (error) => (error == null ? void 0 : error["message"]) === MFA_IS_NOT_ENROLLED_ERROR;
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/stepUpHostedLogin.saga.js
function* stepUpHostedLogin({
  payload
}) {
  const params = {
    acr_values: ACR_VALUE
  };
  const {
    maxAge
  } = payload || {};
  if (maxAge !== void 0) {
    params.max_age = maxAge.toString();
  }
  const alias = yield select(({
    auth
  }) => {
    var _auth$tenantsState, _auth$tenantsState$ac;
    return (_auth$tenantsState = auth.tenantsState) == null ? void 0 : (_auth$tenantsState$ac = _auth$tenantsState.activeTenant) == null ? void 0 : _auth$tenantsState$ac.alias;
  });
  if (alias) {
    params.organization = alias;
  }
  setAfterAuthRedirectUrlForStepUp();
  window.localStorage.setItem(SHOULD_STEP_UP_KEY, "true");
  yield requestHostedLoginAuthorize(params);
}
var init_stepUpHostedLogin_saga = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/stepUpHostedLogin.saga.js"() {
    init_saga23();
    init_consts2();
    init_utils4();
    init_redux_saga_effects_npm_proxy_esm();
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/saga.js
function* stepUpWithAuthenticator({
  payload
}) {
  yield mfaWithAuthenticator(payload, actions30.setStepUpState, true);
}
function* preVerifyMFAWebAuthnForStepUp({
  payload
}) {
  yield preVerifyMFAWebAuthn(payload, actions30.setStepUpState);
}
function* verifyMFAWebAuthnForStepUp({
  payload
}) {
  yield verifyMFAWebAuthn(payload, actions30.setStepUpState, true);
}
function* preVerifyMFASMSForStepUp({
  payload
}) {
  yield preVerifyMFASMS(payload, actions30.setStepUpState);
}
function* verifyMFASMSForStepUp({
  payload
}) {
  yield verifyMFASMS(payload, actions30.setStepUpState, true);
}
function* verifyMFAEmailCodeForStepUp({
  payload
}) {
  yield verifyMFAEmailCode2(payload, actions30.setStepUpState);
}
function* preVerifyMFAEmailCodeForStepUp({
  payload
}) {
  yield preVerifyMFAEmailCode2(payload, actions30.setStepUpState);
}
function* stepUpSagas() {
  yield takeLeading$1(actions30.stepUpHostedLogin, stepUpHostedLogin);
  yield takeLeading$1(actions30.generateStepUpSession, generateStepUpSession);
  yield takeLeading$1(actions30.stepUpWithAuthenticator, stepUpWithAuthenticator);
  yield takeLeading$1(actions30.preVerifyMFASMSForStepUp, preVerifyMFASMSForStepUp);
  yield takeLeading$1(actions30.verifyMFASMSForStepUp, verifyMFASMSForStepUp);
  yield takeLeading$1(actions30.preVerifyMFAWebAuthnForStepUp, preVerifyMFAWebAuthnForStepUp);
  yield takeLeading$1(actions30.verifyMFAWebAuthnForStepUp, verifyMFAWebAuthnForStepUp);
  yield takeLeading$1(actions30.verifyMFAEmailCodeForStepUp, verifyMFAEmailCodeForStepUp);
  yield takeLeading$1(actions30.preVerifyMFAEmailCodeForStepUp, preVerifyMFAEmailCodeForStepUp);
}
var init_saga46 = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/saga.js"() {
    init_redux_saga_effects_npm_proxy_esm();
    init_reducer();
    init_saga23();
    init_mfaWithSMS_saga();
    init_mfaWithWebAuthn_saga();
    init_mfaWithEmailCode_saga();
    init_generateStepUpSession_saga();
    init_stepUpHostedLogin_saga();
  }
});

// node_modules/@frontegg/redux-store/auth/saga.js
function* sagas6() {
  yield all([call(loginSagas), call(stepUpSagas), call(activateSagas), call(acceptInvitationSagas), call(forgotPasswordSagas), call(resetPhoneNumberSagas), call(ssoSagas), call(ssoSagas2), call(profileSagas), call(customLoginSagas), call(mfaSagas), call(teamSagas), call(groupsSagas), call(socialLoginsSaga), call(signUpSaga), call(apiTokensSaga), call(securityPolicySagas), call(accountSettingsSaga), call(tenantsSagas), call(rolesSagas), call(sessionsSaga), call(sessionsPolicySaga), call(restrictionsSagas), call(provisionSagas), call(impersonateSagas), call(passkeysSagas), call(allAccountsSagas), call(entitlementsSagas), call(securityCenterSagas), call(smsSagas)]);
}
function* mockSagas3() {
  yield all([
    call(loginSagasMock),
    // call(activateSagas),
    // call(acceptInvitationSagas),
    // call(forgotPasswordSagas),
    // call(socialLoginsSaga),
    // call(signUpSaga),
    call(ssoSagasMock),
    call(profileSagasMock),
    call(mfaSagasMock),
    call(teamSagasMock),
    call(apiTokensSagaMock),
    call(securityPolicySagasMock),
    call(sessionsSagaMock),
    call(accountSettingsSagaMock),
    call(tenantsSagasMock),
    call(sessionsPolicySagaMock),
    call(restrictionsSagaMock),
    call(rolesSagasMock),
    call(groupsSagasMock),
    call(securityCenterSagasMock)
  ]);
}
var init_saga47 = __esm({
  "node_modules/@frontegg/redux-store/auth/saga.js"() {
    init_saga24();
    init_saga_v2();
    init_saga25();
    init_saga26();
    init_saga27();
    init_saga28();
    init_saga29();
    init_saga23();
    init_saga30();
    init_saga31();
    init_saga4();
    init_redux_saga_effects_npm_proxy_esm();
    init_saga32();
    init_saga3();
    init_saga33();
    init_saga34();
    init_saga35();
    init_saga36();
    init_saga37();
    init_saga38();
    init_saga39();
    init_saga40();
    init_saga41();
    init_saga42();
    init_saga43();
    init_saga();
    init_saga44();
    init_saga6();
    init_saga2();
    init_saga45();
    init_saga46();
  }
});

// node_modules/@frontegg/redux-store/auth/StepUpState/interfaces.js
var init_interfaces55 = __esm({
  "node_modules/@frontegg/redux-store/auth/StepUpState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/ProfileState/interfaces.js
var init_interfaces56 = __esm({
  "node_modules/@frontegg/redux-store/auth/ProfileState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/SocialLogins/interfaces.js
var init_interfaces57 = __esm({
  "node_modules/@frontegg/redux-store/auth/SocialLogins/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityPolicyState/interfaces.js
var init_interfaces58 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityPolicyState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/AccountSettingsState/interfaces.js
var init_interfaces59 = __esm({
  "node_modules/@frontegg/redux-store/auth/AccountSettingsState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/TenantsState/interfaces.js
var init_interfaces60 = __esm({
  "node_modules/@frontegg/redux-store/auth/TenantsState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/RolesState/interfaces.js
var init_interfaces61 = __esm({
  "node_modules/@frontegg/redux-store/auth/RolesState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/SessionsState/interfaces.js
var init_interfaces62 = __esm({
  "node_modules/@frontegg/redux-store/auth/SessionsState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SessionsPolicyState/interfaces.js
var init_interfaces63 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SessionsPolicyState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Security/RestrictionsState/interfaces.js
var init_interfaces64 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/RestrictionsState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Provisioning/interfaces.js
var init_interfaces65 = __esm({
  "node_modules/@frontegg/redux-store/auth/Provisioning/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Entitlements/interfaces.js
var init_interfaces66 = __esm({
  "node_modules/@frontegg/redux-store/auth/Entitlements/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/PasskeysState/interfaces.js
var init_interfaces67 = __esm({
  "node_modules/@frontegg/redux-store/auth/PasskeysState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/SmsState/interfaces.js
var init_interfaces68 = __esm({
  "node_modules/@frontegg/redux-store/auth/SmsState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/interfaces.js
var init_interfaces69 = __esm({
  "node_modules/@frontegg/redux-store/auth/Security/SecurityCenterState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/CustomLoginState/interfaces.js
var init_interfaces70 = __esm({
  "node_modules/@frontegg/redux-store/auth/CustomLoginState/interfaces.js"() {
  }
});

// node_modules/@frontegg/redux-store/auth/Helpers/isAuthRoute.js
var _excluded67, isAuthRoute;
var init_isAuthRoute = __esm({
  "node_modules/@frontegg/redux-store/auth/Helpers/isAuthRoute.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_initialState();
    _excluded67 = ["authenticatedUrl"];
    isAuthRoute = (path, routes) => {
      const _authInitialState$rou = _extends({}, initialState.routes, routes), authRoutes = _objectWithoutPropertiesLoose(_authInitialState$rou, _excluded67);
      return Object.values(authRoutes).includes(path);
    };
  }
});

// node_modules/@frontegg/redux-store/auth/Helpers/index.js
var init_Helpers = __esm({
  "node_modules/@frontegg/redux-store/auth/Helpers/index.js"() {
    init_isAuthRoute();
    init_base64ToFormData();
  }
});

// node_modules/@frontegg/redux-store/auth/index.js
var auth_default;
var init_auth2 = __esm({
  "node_modules/@frontegg/redux-store/auth/index.js"() {
    init_reducer();
    init_saga47();
    init_constants3();
    init_initialState();
    init_interfaces35();
    init_interfaces25();
    init_LoginState();
    init_interfaces55();
    init_StepUpState();
    init_interfaces27();
    init_ActivateState();
    init_interfaces32();
    init_ImpersonationState();
    init_interfaces28();
    init_AcceptInvitationState();
    init_interfaces29();
    init_ForgotPasswordState();
    init_interfaces30();
    init_ResetPhoneNumberState();
    init_interfaces33();
    init_SSOState();
    init_interfaces26();
    init_MfaState();
    init_interfaces56();
    init_ProfileState();
    init_interfaces53();
    init_TeamState();
    init_interfaces54();
    init_GroupsState();
    init_groupsDialogsState();
    init_interfaces57();
    init_SocialLogins();
    init_interfaces31();
    init_SignUp();
    init_interfaces34();
    init_ApiTokensState();
    init_interfaces58();
    init_SecurityPolicyState();
    init_interfaces59();
    init_AccountSettingsState();
    init_interfaces60();
    init_TenantsState();
    init_interfaces61();
    init_RolesState();
    init_SessionsState();
    init_interfaces62();
    init_SessionsPolicyState();
    init_interfaces63();
    init_RestrictionsState();
    init_interfaces64();
    init_Provisioning();
    init_interfaces65();
    init_Entitlements();
    init_interfaces66();
    init_PasskeysState();
    init_interfaces67();
    init_SmsState();
    init_interfaces68();
    init_SecurityCenterState();
    init_interfaces69();
    init_types2();
    init_CustomLoginState();
    init_interfaces70();
    init_AllAccountsState();
    init_types();
    init_allAccountsDialogsState();
    init_Helpers();
    auth_default = {
      sagas: sagas6,
      mockSagas: mockSagas3,
      storeName: authStoreName,
      initialState,
      reducer,
      actions: actions30
    };
  }
});

// node_modules/@frontegg/redux-store/index.js
var redux_store_exports = {};
__export(redux_store_exports, {
  AcceptInvitationStep: () => AcceptInvitationStep,
  ActivateAccountStep: () => ActivateAccountStep,
  AdminPortalPages: () => AdminPortalPages,
  AdminPortalPagesForEvents: () => AdminPortalPagesForEvents,
  AllAccountsStateKeys: () => AllAccountsStateKeys,
  ApiStateKeys: () => ApiStateKeys,
  AuthStrategyEnum: () => AuthStrategyEnum,
  AuthenticationTypes: () => AuthenticationTypes,
  FRONTEGG_AFTER_AUTH_REDIRECT_URL: () => FRONTEGG_AFTER_AUTH_REDIRECT_URL,
  ForgotPasswordStep: () => ForgotPasswordStep,
  FronteggNativeModule: () => FronteggNativeModule_default,
  GTMEventAction: () => GTMEventAction,
  GroupRelations: () => GroupRelations2,
  GroupsStateKeys: () => GroupsStateKeys,
  ImpersonateStep: () => ImpersonateStep,
  LoginActionTypes: () => LoginActionTypes,
  LoginFlow: () => LoginFlow,
  LoginStep: () => LoginStep,
  MFAStep: () => MFAStep,
  MachineToMachineAuthStrategy: () => MachineToMachineAuthStrategy,
  PaymentMethodType: () => PaymentMethodType2,
  PaymentProvider: () => PaymentProvider,
  QuickLoginStrategy: () => QuickLoginStrategy,
  ResetPhoneNumberStep: () => ResetPhoneNumberStep,
  SHOULD_STEP_UP_KEY: () => SHOULD_STEP_UP_KEY,
  SSOStateKeys: () => SSOStateKeys,
  STEP_UP_MAX_AGE_PARAM_NAME: () => STEP_UP_MAX_AGE_PARAM_NAME,
  SamlVendors: () => SamlVendors,
  SecurityCenterStateKeys: () => SecurityCenterStateKeys,
  SignUpStage: () => SignUpStage,
  SubscriptionCancellationPolicy: () => SubscriptionCancellationPolicy,
  SubscriptionStatus: () => SubscriptionStatus,
  TeamStateKeys: () => TeamStateKeys,
  UserVeirifedOriginTypes: () => UserVeirifedOriginTypes,
  acceptInvitationActions: () => actions3,
  acceptInvitationReducers: () => reducers3,
  acceptInvitationState: () => acceptInvitationState,
  accountSettingsActions: () => actions14,
  accountSettingsReducers: () => reducers14,
  accountSettingsState: () => accountSettingsState,
  actions: () => actions36,
  activateAccountActions: () => actions2,
  activateAccountReducers: () => reducers2,
  activateState: () => activateState,
  all: () => all,
  allAccountsActions: () => actions25,
  allAccountsDialogsReducers: () => reducers26,
  allAccountsDialogsState: () => allAccountsDialogsState,
  allAccountsInitialState: () => allAccountsInitialState,
  allAccountsReducers: () => reducers25,
  allAccountsState: () => allAccountsInitialState,
  apiTokensActions: () => actions12,
  apiTokensReducers: () => reducers12,
  apiTokensState: () => apiTokensState,
  auditLogsActions: () => actions33,
  auditLogsReducers: () => reducers32,
  auditLogsState: () => auditLogsState,
  audits: () => audits_default,
  auditsActions: () => actions35,
  auditsInitialState: () => initialState3,
  auditsMetadataActions: () => actions34,
  auditsMetadataReducers: () => reducers33,
  auditsMetadataState: () => auditsMetadataState,
  auditsMockSagas: () => mockSagas,
  auditsReducers: () => reducer3,
  auditsSagas: () => sagas2,
  auditsStoreName: () => auditsStoreName,
  auth: () => auth_default,
  authActions: () => actions30,
  authInitialState: () => initialState,
  authMockSagas: () => mockSagas3,
  authReducers: () => reducer,
  authSagas: () => sagas6,
  authStoreName: () => authStoreName,
  base64ToFormData: () => base64ToFormData,
  bindActionCreators: () => bindActionCreators,
  call: () => call,
  combineReducers: () => combineReducers,
  configureStore: () => configureStore,
  connectivity: () => connectivity_default,
  connectivityActions: () => actions38,
  connectivityInitialState: () => initialState6,
  connectivityReducers: () => reducer5,
  connectivitySagas: () => sagas4,
  connectivityStoreName: () => connectivityStoreName,
  createFronteggStore: () => createFronteggStore,
  createRandomString: () => createRandomString,
  createSagaMiddleware: () => redux_saga_core_npm_proxy_esm_default,
  createSelector: () => createSelector,
  createSlice: () => createSlice,
  customLoginActions: () => actions24,
  customLoginReducers: () => reducers24,
  customLoginState: () => customLoginState,
  defaultFronteggRoutes: () => defaultFronteggRoutes,
  defaultItemsPerPage: () => defaultItemsPerPage,
  delay: () => delay2,
  entitlementsSagas: () => entitlementsSagas,
  errorHandler: () => errorHandler,
  forgotPasswordActions: () => actions4,
  forgotPasswordReducers: () => reducers4,
  forgotPasswordState: () => forgotPasswordState,
  generateActionCreator: () => generateActionCreator,
  generateCodeChallenge: () => generateCodeChallenge,
  generateCodeChallengeNative: () => generateCodeChallengeNative,
  generateCodeChallengePureJs: () => generateCodeChallengePureJs,
  getDefaultMiddleware: () => getDefaultMiddleware,
  getEntitlements: () => getEntitlements,
  getFeatureEntitlements: () => getFeatureEntitlements,
  getFeatureFlags: () => getFeatureFlags,
  getPermissionEntitlements: () => getPermissionEntitlements,
  getRedirectUrl: () => getRedirectUrl,
  getSearchParam: () => getSearchParam,
  groupsActions: () => actions22,
  groupsDialogsActions: () => actions23,
  groupsDialogsReducers: () => reducers23,
  groupsDialogsState: () => groupsDialogsState,
  groupsReducers: () => reducers22,
  groupsState: () => groupsState,
  handleFetchedEntitlements: () => handleFetchedEntitlements,
  hmac: () => hmac,
  impersonateActions: () => actions29,
  impersonateReducers: () => reducers30,
  impersonateState: () => impersonateState,
  initialState: () => initialState4,
  isAuthRoute: () => isAuthRoute,
  isEntitlementsDeeplyEqual: () => isEntitlementsDeeplyEqual,
  isError: () => isError2,
  isSteppedUp: () => isSteppedUp,
  loadEntitlements: () => loadEntitlements2,
  loginActions: () => actions,
  loginReducers: () => reducers,
  loginState: () => loginState,
  mfaActions: () => actions8,
  mfaReducers: () => reducers8,
  mfaState: () => mfaState,
  omitProps: () => omitProps,
  passkeysActions: () => actions21,
  passkeysReducers: () => reducers21,
  passkeysState: () => passkeysState,
  profileActions: () => actions7,
  profileReducers: () => reducers7,
  profileState: () => profileState,
  provisioningActions: () => actions20,
  provisioningReducers: () => reducers20,
  provisioningState: () => provisioningState,
  put: () => put,
  readFileAsText: () => readFileAsText,
  redirectByStepUpUrl: () => redirectByStepUpUrl,
  reducer: () => reducer4,
  reportGTMEvent: () => reportGTMEvent,
  resetPhoneNumberActions: () => actions5,
  resetPhoneNumberReducers: () => reducers5,
  resetPhoneNumberState: () => resetPhoneNumberState,
  restrictionsActions: () => actions19,
  restrictionsReducers: () => reducers19,
  restrictionsState: () => restrictionsState,
  rolesActions: () => actions16,
  rolesReducers: () => reducers16,
  rolesState: () => rolesState,
  sagas: () => sagas3,
  securityCenterActions: () => actions26,
  securityCenterReducers: () => reducers27,
  securityCenterState: () => securityCenterState,
  securityPolicyActions: () => actions13,
  securityPolicyReducers: () => reducers13,
  securityPolicyState: () => securityPolicyState,
  select: () => select,
  sessionsActions: () => actions17,
  sessionsPolicyActions: () => actions18,
  sessionsPolicyReducers: () => reducers18,
  sessionsPolicyState: () => sessionsPolicyState,
  sessionsReducers: () => reducers17,
  sessionsState: () => sessionsState,
  setAfterAuthRedirectUrlForStepUp: () => setAfterAuthRedirectUrlForStepUp,
  sha256: () => sha256,
  signUpActions: () => actions11,
  signUpReducers: () => reducers11,
  signUpState: () => signUpState,
  smsActions: () => actions27,
  smsReducers: () => reducers28,
  smsState: () => smsState,
  socialLoginState: () => socialLoginState,
  socialLoginsActions: () => actions10,
  socialLoginsReducer: () => reducers10,
  ssoActions: () => actions6,
  ssoReducers: () => reducers6,
  ssoState: () => ssoState,
  stepUpActions: () => actions28,
  stepUpReducers: () => reducers29,
  stepUpState: () => stepUpState,
  storeName: () => storeName,
  subscriptionActions: () => actions48,
  subscriptionInitialState: () => initialState7,
  subscriptionReducers: () => reducer15,
  subscriptionSagas: () => sagas5,
  subscriptionSagasMock: () => mockSagas2,
  subscriptions: () => subscriptions_default,
  subscriptionsStoreName: () => subscriptionsStoreName,
  takeEvery: () => takeEvery$1,
  takeLatest: () => takeLatest$1,
  teamActions: () => actions9,
  teamReducers: () => reducers9,
  teamState: () => teamState,
  tenantsActions: () => actions15,
  tenantsReducers: () => reducers15,
  tenantsState: () => tenantsState,
  vendor: () => vendor_default,
  vendorActions: () => actions32,
  vendorInitialState: () => initialState2,
  vendorReducers: () => reducer2,
  vendorSagas: () => sagas,
  vendorStoreName: () => vendorStoreName
});
var init_redux_store = __esm({
  "node_modules/@frontegg/redux-store/index.js"() {
    init_auth2();
    init_audits2();
    init_connectivity2();
    init_subscriptions3();
    init_vendor2();
    init_auth2();
    init_audits2();
    init_backward_compatibility();
    init_connectivity2();
    init_subscriptions3();
    init_vendor2();
    init_toolkit();
    init_helpers();
    init_utils5();
    init_constants3();
    init_base64ToFormData();
  }
});

// node_modules/@frontegg/types/FronteggAppInstance.js
var init_FronteggAppInstance = __esm({
  "node_modules/@frontegg/types/FronteggAppInstance.js"() {
  }
});

// node_modules/@frontegg/types/FronteggAppOptions.js
var init_FronteggAppOptions = __esm({
  "node_modules/@frontegg/types/FronteggAppOptions.js"() {
  }
});

// node_modules/@frontegg/types/FronteggMetadata.js
var init_FronteggMetadata = __esm({
  "node_modules/@frontegg/types/FronteggMetadata.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/LoginBoxCommon.js
var init_LoginBoxCommon = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/LoginBoxCommon.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/LoginPageTheme.js
var init_LoginPageTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/LoginPageTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/SignupPageTheme.js
var SignupFields;
var init_SignupPageTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/SignupPageTheme.js"() {
    (function(SignupFields2) {
      SignupFields2["phoneNumber"] = "phoneNumber";
    })(SignupFields || (SignupFields = {}));
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/CustomLoginComponents.js
var init_CustomLoginComponents = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/CustomLoginComponents.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/SocialLoginsTheme.js
var init_SocialLoginsTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/SocialLoginsTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ForgotPasswordTheme.js
var init_ForgotPasswordTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ForgotPasswordTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ResetPhoneNumberTheme.js
var init_ResetPhoneNumberTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ResetPhoneNumberTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ResetPasswordTheme.js
var init_ResetPasswordTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ResetPasswordTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ActivateAccountPageTheme.js
var init_ActivateAccountPageTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/ActivateAccountPageTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/AcceptInvitationTheme.js
var init_AcceptInvitationTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/AcceptInvitationTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/OpenAppPageTheme.js
var init_OpenAppPageTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/OpenAppPageTheme.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/index.js
var init_LoginBoxTheme = __esm({
  "node_modules/@frontegg/types/ThemeOptions/LoginBoxTheme/index.js"() {
    init_LoginBoxCommon();
    init_LoginPageTheme();
    init_SignupPageTheme();
    init_CustomLoginComponents();
    init_SocialLoginsTheme();
    init_ForgotPasswordTheme();
    init_ResetPhoneNumberTheme();
    init_ResetPasswordTheme();
    init_ActivateAccountPageTheme();
    init_AcceptInvitationTheme();
    init_OpenAppPageTheme();
  }
});

// node_modules/@frontegg/types/ThemeOptions/ComponentsOptions.js
var init_ComponentsOptions = __esm({
  "node_modules/@frontegg/types/ThemeOptions/ComponentsOptions.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/fieldsAppearanceConsts.js
var ProfilePageFields, PrivacyPageFields, InviteUserModalFields, AccountPageFields, SubscriptionsPageFields, SecurityPageTabs, SessionManagementTabFields, GeneralSettingsTabFields, IpRestrictionsTabFields, DomainRestrictionsTabFields, AccountDetailsPageTabs;
var init_fieldsAppearanceConsts = __esm({
  "node_modules/@frontegg/types/ThemeOptions/fieldsAppearanceConsts.js"() {
    (function(ProfilePageFields2) {
      ProfilePageFields2["Name"] = "name";
      ProfilePageFields2["PhoneNumber"] = "phoneNumber";
      ProfilePageFields2["Address"] = "address";
      ProfilePageFields2["JobTitle"] = "jobTitle";
    })(ProfilePageFields || (ProfilePageFields = {}));
    (function(PrivacyPageFields2) {
      PrivacyPageFields2["LoginSessions"] = "loginSessions";
      PrivacyPageFields2["Mfa"] = "mfa";
    })(PrivacyPageFields || (PrivacyPageFields = {}));
    (function(InviteUserModalFields2) {
      InviteUserModalFields2["Name"] = "name";
      InviteUserModalFields2["PhoneNumber"] = "phoneNumber";
    })(InviteUserModalFields || (InviteUserModalFields = {}));
    (function(AccountPageFields2) {
      AccountPageFields2["CompanyName"] = "companyName";
      AccountPageFields2["Address"] = "address";
      AccountPageFields2["Website"] = "website";
      AccountPageFields2["Timezone"] = "timezone";
      AccountPageFields2["Currency"] = "currency";
    })(AccountPageFields || (AccountPageFields = {}));
    (function(SubscriptionsPageFields2) {
      SubscriptionsPageFields2["Invoices"] = "invoices";
    })(SubscriptionsPageFields || (SubscriptionsPageFields = {}));
    (function(SecurityPageTabs2) {
      SecurityPageTabs2["SessionManagement"] = "sessionManagement";
      SecurityPageTabs2["GeneralSettings"] = "generalSettings";
      SecurityPageTabs2["IpRestrictions"] = "ipRestrictions";
      SecurityPageTabs2["DomainRestrictions"] = "domainRestrictions";
    })(SecurityPageTabs || (SecurityPageTabs = {}));
    (function(SessionManagementTabFields2) {
      SessionManagementTabFields2["IdleSessionTimeout"] = "idleSessionTimeout";
      SessionManagementTabFields2["ForceReLogin"] = "forceReLogin";
      SessionManagementTabFields2["MaximumConcurrentSessions"] = "maximumConcurrentSessions";
    })(SessionManagementTabFields || (SessionManagementTabFields = {}));
    (function(GeneralSettingsTabFields2) {
      GeneralSettingsTabFields2["Mfa"] = "mfa";
      GeneralSettingsTabFields2["UserLockout"] = "userLockout";
      GeneralSettingsTabFields2["PasswordHistory"] = "passwordHistory";
    })(GeneralSettingsTabFields || (GeneralSettingsTabFields = {}));
    (function(IpRestrictionsTabFields2) {
      IpRestrictionsTabFields2["IpAddressRestrictions"] = "ipAddressRestrictions";
    })(IpRestrictionsTabFields || (IpRestrictionsTabFields = {}));
    (function(DomainRestrictionsTabFields2) {
      DomainRestrictionsTabFields2["RestrictSignupByEmailDomain"] = "restrictSignupByEmailDomain";
    })(DomainRestrictionsTabFields || (DomainRestrictionsTabFields = {}));
    (function(AccountDetailsPageTabs2) {
      AccountDetailsPageTabs2["Settings"] = "settings";
      AccountDetailsPageTabs2["CustomLogin"] = "customLogin";
    })(AccountDetailsPageTabs || (AccountDetailsPageTabs = {}));
  }
});

// node_modules/@frontegg/types/ThemeOptions/fieldsAppearanceTypes.js
var init_fieldsAppearanceTypes = __esm({
  "node_modules/@frontegg/types/ThemeOptions/fieldsAppearanceTypes.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/AdminPortalThemeOptions.js
var init_AdminPortalThemeOptions = __esm({
  "node_modules/@frontegg/types/ThemeOptions/AdminPortalThemeOptions.js"() {
  }
});

// node_modules/@frontegg/types/ThemeOptions/index.js
var fieldAppearance, tabAppearance;
var init_ThemeOptions = __esm({
  "node_modules/@frontegg/types/ThemeOptions/index.js"() {
    init_LoginBoxTheme();
    init_ComponentsOptions();
    init_fieldsAppearanceConsts();
    init_fieldsAppearanceTypes();
    init_AdminPortalThemeOptions();
    fieldAppearance = {
      hidden: "hidden",
      viewOnly: "viewOnly",
      edit: "edit"
    };
    tabAppearance = {
      hidden: "hidden",
      edit: "edit"
    };
  }
});

// node_modules/@frontegg/types/Localizations/LocalizationOverrides.js
var init_LocalizationOverrides = __esm({
  "node_modules/@frontegg/types/Localizations/LocalizationOverrides.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LocalizationType.js
var init_LocalizationType = __esm({
  "node_modules/@frontegg/types/Localizations/LocalizationType.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/navigation.js
var init_navigation = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/navigation.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/profile.js
var init_profile = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/profile.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/personalTokens.js
var init_personalTokens = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/personalTokens.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/auditLogs.js
var init_auditLogs = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/auditLogs.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/apiTokens.js
var init_apiTokens = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/apiTokens.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/accountSettings.js
var init_accountSettings = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/accountSettings.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/privacy.js
var init_privacy = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/privacy.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/security.js
var init_security = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/security.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/roles.js
var init_roles2 = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/roles.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/sso.js
var init_sso = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/sso.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/users.js
var init_users2 = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/users.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/groups.js
var init_groups2 = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/groups.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/webhooks.js
var init_webhooks = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/webhooks.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/subscriptions.js
var init_subscriptions4 = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/subscriptions.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/allUsers.js
var init_allUsers = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/allUsers.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/provisioning.js
var init_provisioning = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/provisioning.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/allAccounts.js
var init_allAccounts = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/allAccounts.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/appDialog.js
var init_appDialog = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/appDialog.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/index.js
var init_AdminPortalLocalizations = __esm({
  "node_modules/@frontegg/types/Localizations/AdminPortalLocalizations/index.js"() {
    init_navigation();
    init_profile();
    init_personalTokens();
    init_auditLogs();
    init_apiTokens();
    init_accountSettings();
    init_privacy();
    init_security();
    init_roles2();
    init_sso();
    init_users2();
    init_groups2();
    init_webhooks();
    init_subscriptions4();
    init_allUsers();
    init_provisioning();
    init_allAccounts();
    init_appDialog();
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/login.js
var init_login = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/login.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/stepUp.js
var init_stepUp = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/stepUp.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/signup.js
var init_signup = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/signup.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/forgetPassword.js
var init_forgetPassword = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/forgetPassword.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/resetPhoneNumber.js
var init_resetPhoneNumber = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/resetPhoneNumber.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/resetPassword.js
var init_resetPassword = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/resetPassword.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/socialLogins.js
var init_socialLogins = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/socialLogins.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/acceptInvitation.js
var init_acceptInvitation = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/acceptInvitation.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/activateAccount.js
var init_activateAccount = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/activateAccount.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/recoveryMfa.js
var init_recoveryMfa = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/recoveryMfa.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/SplitPageTypes/index.js
var init_SplitPageTypes = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/SplitPageTypes/index.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/impersonate.js
var init_impersonate2 = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/impersonate.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/openApp.js
var init_openApp = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/openApp.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/LoginBoxLocalization/index.js
var init_LoginBoxLocalization = __esm({
  "node_modules/@frontegg/types/Localizations/LoginBoxLocalization/index.js"() {
    init_login();
    init_stepUp();
    init_signup();
    init_forgetPassword();
    init_resetPhoneNumber();
    init_resetPassword();
    init_socialLogins();
    init_acceptInvitation();
    init_activateAccount();
    init_recoveryMfa();
    init_SplitPageTypes();
    init_impersonate2();
    init_openApp();
  }
});

// node_modules/@frontegg/types/Localizations/Common/passwordStrength.js
var init_passwordStrength = __esm({
  "node_modules/@frontegg/types/Localizations/Common/passwordStrength.js"() {
  }
});

// node_modules/@frontegg/types/Localizations/Common/index.js
var init_Common = __esm({
  "node_modules/@frontegg/types/Localizations/Common/index.js"() {
    init_passwordStrength();
  }
});

// node_modules/@frontegg/types/Localizations/index.js
var init_Localizations = __esm({
  "node_modules/@frontegg/types/Localizations/index.js"() {
    init_LocalizationOverrides();
    init_LocalizationType();
    init_AdminPortalLocalizations();
    init_LoginBoxLocalization();
    init_Common();
  }
});

// node_modules/deepmerge/dist/cjs.js
var require_cjs = __commonJS({
  "node_modules/deepmerge/dist/cjs.js"(exports, module) {
    "use strict";
    var isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    function isNonNullObject(value) {
      return !!value && typeof value === "object";
    }
    function isSpecial(value) {
      var stringValue = Object.prototype.toString.call(value);
      return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
    }
    var canUseSymbol = typeof Symbol === "function" && Symbol.for;
    var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    function isReactElement(value) {
      return value.$$typeof === REACT_ELEMENT_TYPE;
    }
    function emptyTarget(val) {
      return Array.isArray(val) ? [] : {};
    }
    function cloneUnlessOtherwiseSpecified(value, options) {
      return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
    }
    function defaultArrayMerge(target, source, options) {
      return target.concat(source).map(function(element) {
        return cloneUnlessOtherwiseSpecified(element, options);
      });
    }
    function getMergeFunction(key, options) {
      if (!options.customMerge) {
        return deepmerge;
      }
      var customMerge = options.customMerge(key);
      return typeof customMerge === "function" ? customMerge : deepmerge;
    }
    function getEnumerableOwnPropertySymbols(target) {
      return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol5) {
        return Object.propertyIsEnumerable.call(target, symbol5);
      }) : [];
    }
    function getKeys(target) {
      return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
    }
    function propertyIsOnObject(object3, property) {
      try {
        return property in object3;
      } catch (_2) {
        return false;
      }
    }
    function propertyIsUnsafe(target, key) {
      return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
    }
    function mergeObject(target, source, options) {
      var destination = {};
      if (options.isMergeableObject(target)) {
        getKeys(target).forEach(function(key) {
          destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
        });
      }
      getKeys(source).forEach(function(key) {
        if (propertyIsUnsafe(target, key)) {
          return;
        }
        if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
          destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
        } else {
          destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
        }
      });
      return destination;
    }
    function deepmerge(target, source, options) {
      options = options || {};
      options.arrayMerge = options.arrayMerge || defaultArrayMerge;
      options.isMergeableObject = options.isMergeableObject || isMergeableObject;
      options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
      var sourceIsArray = Array.isArray(source);
      var targetIsArray = Array.isArray(target);
      var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
      if (!sourceAndTargetTypesMatch) {
        return cloneUnlessOtherwiseSpecified(source, options);
      } else if (sourceIsArray) {
        return options.arrayMerge(target, source, options);
      } else {
        return mergeObject(target, source, options);
      }
    }
    deepmerge.all = function deepmergeAll(array4, options) {
      if (!Array.isArray(array4)) {
        throw new Error("first argument should be an array");
      }
      return array4.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    var deepmerge_1 = deepmerge;
    module.exports = deepmerge_1;
  }
});

// node_modules/@frontegg/types/Metadata/colorManipulator.js
function clamp(value, min = 0, max = 1) {
  return Math.min(Math.max(min, value), max);
}
function hexToRgb(color) {
  color = color.substr(1);
  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, "g");
  let colors = color.match(re);
  if (colors && colors[0].length === 1) {
    colors = colors.map((n2) => n2 + n2);
  }
  return colors ? `rgb${colors.length === 4 ? "a" : ""}(${colors.map((n2, index) => {
    return index < 3 ? parseInt(n2, 16) : Math.round(parseInt(n2, 16) / 255 * 1e3) / 1e3;
  }).join(", ")})` : "";
}
function intToHex(int) {
  const hex = int.toString(16);
  return hex.length === 1 ? `0${hex}` : hex;
}
function decomposeColor(color) {
  if (color.type) {
    return color;
  }
  if (color.charAt(0) === "#") {
    return decomposeColor(hexToRgb(color));
  }
  const marker = color.indexOf("(");
  const type = color.substring(0, marker);
  if (["rgb", "rgba", "hsl", "hsla", "color"].indexOf(type) === -1) {
    throw new Error("MUI: Unsupported `%s` color.\nThe following formats are supported: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla(), color(). " + color);
  }
  const valuesStr = color.substring(marker + 1, color.length - 1);
  let colorSpace;
  let valuesColor;
  if (type === "color") {
    valuesColor = valuesStr.split(" ");
    colorSpace = valuesColor.shift();
    if (valuesColor.length === 4 && valuesColor[3].charAt(0) === "/") {
      valuesColor[3] = valuesColor[3].substr(1);
    }
    if (["srgb", "display-p3", "a98-rgb", "prophoto-rgb", "rec-2020"].indexOf(colorSpace) === -1) {
      throw new Error("MUI: unsupported `%s` color space.\nThe following color spaces are supported: srgb, display-p3, a98-rgb, prophoto-rgb, rec-2020." + colorSpace);
    }
  } else {
    valuesColor = valuesStr.split(",");
  }
  const values = valuesColor.map((value) => parseFloat(value));
  return {
    type,
    values,
    colorSpace
  };
}
function recomposeColor(color) {
  const {
    type,
    colorSpace
  } = color;
  let {
    values
  } = color;
  if (type.indexOf("rgb") !== -1) {
    values = values.map((n2, i2) => i2 < 3 ? parseInt(n2, 10) : n2);
  } else if (type.indexOf("hsl") !== -1) {
    values[1] = `${values[1]}%`;
    values[2] = `${values[2]}%`;
  }
  if (type.indexOf("color") !== -1) {
    values = `${colorSpace} ${values.join(" ")}`;
  } else {
    values = `${values.join(", ")}`;
  }
  return `${type}(${values})`;
}
function rgbToHex(color) {
  if (color.indexOf("#") === 0) {
    return color;
  }
  const {
    values
  } = decomposeColor(color);
  return `#${values.map((n2, i2) => intToHex(i2 === 3 ? Math.round(255 * n2) : n2)).join("")}`;
}
function alpha(color, value) {
  color = decomposeColor(color);
  value = clamp(value);
  if (color.type === "rgb" || color.type === "hsl") {
    color.type += "a";
  }
  if (color.type === "color") {
    color.values[3] = `/${value}`;
  } else {
    color.values[3] = value;
  }
  return recomposeColor(color);
}
function darken(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clamp(coefficient);
  if (color.type.indexOf("hsl") !== -1) {
    color.values[2] *= 1 - coefficient;
  } else if (color.type.indexOf("rgb") !== -1 || color.type.indexOf("color") !== -1) {
    for (let i2 = 0; i2 < 3; i2 += 1) {
      color.values[i2] *= 1 - coefficient;
    }
  }
  return recomposeColor(color);
}
function lighten(color, coefficient) {
  color = decomposeColor(color);
  coefficient = clamp(coefficient);
  if (color.type.indexOf("hsl") !== -1) {
    color.values[2] += (100 - color.values[2]) * coefficient;
  } else if (color.type.indexOf("rgb") !== -1) {
    for (let i2 = 0; i2 < 3; i2 += 1) {
      color.values[i2] += (255 - color.values[i2]) * coefficient;
    }
  } else if (color.type.indexOf("color") !== -1) {
    for (let i2 = 0; i2 < 3; i2 += 1) {
      color.values[i2] += (1 - color.values[i2]) * coefficient;
    }
  }
  return recomposeColor(color);
}
var init_colorManipulator = __esm({
  "node_modules/@frontegg/types/Metadata/colorManipulator.js"() {
  }
});

// node_modules/@frontegg/types/Metadata/getPalette.js
var generateMainColorObject, generateSubColorObject, getPalette;
var init_getPalette = __esm({
  "node_modules/@frontegg/types/Metadata/getPalette.js"() {
    init_extends();
    init_colorManipulator();
    generateMainColorObject = (color) => {
      if (color) {
        return {
          main: color,
          light: rgbToHex(lighten(color, 0.4)),
          dark: rgbToHex(darken(color, 0.15)),
          hover: rgbToHex(darken(color, 0.15)),
          active: rgbToHex(darken(color, 0.2))
        };
      }
    };
    generateSubColorObject = (color) => {
      if (color) {
        return {
          main: color,
          light: lighten(color, 0.7),
          dark: darken(color, 0.2)
        };
      }
    };
    getPalette = (theme, defaultTheme2) => {
      var _theme$palette, _theme$palette2, _theme$palette$primar, _theme$palette3, _theme$palette4, _theme$palette$second, _theme$palette5, _theme$palette6, _theme$palette7, _theme$palette8, _theme$palette9, _theme$palette10;
      if (!(theme != null && theme.palette) || typeof (theme == null ? void 0 : (_theme$palette = theme.palette) == null ? void 0 : _theme$palette.primary) !== "string") {
        return {};
      }
      return _extends({}, defaultTheme2, {
        palette: {
          primary: _extends({}, generateMainColorObject(theme == null ? void 0 : (_theme$palette2 = theme.palette) == null ? void 0 : _theme$palette2.primary), {
            contrastText: (_theme$palette$primar = theme == null ? void 0 : (_theme$palette3 = theme.palette) == null ? void 0 : _theme$palette3.primaryText) != null ? _theme$palette$primar : "#000000"
          }),
          secondary: _extends({}, generateMainColorObject(theme == null ? void 0 : (_theme$palette4 = theme.palette) == null ? void 0 : _theme$palette4.secondary), {
            contrastText: (_theme$palette$second = theme == null ? void 0 : (_theme$palette5 = theme.palette) == null ? void 0 : _theme$palette5.secondaryText) != null ? _theme$palette$second : "#000000"
          }),
          danger: _extends({}, generateMainColorObject(theme == null ? void 0 : (_theme$palette6 = theme.palette) == null ? void 0 : _theme$palette6.error), {
            contrastText: "#FFF"
          }),
          success: _extends({}, generateSubColorObject(theme == null ? void 0 : (_theme$palette7 = theme.palette) == null ? void 0 : _theme$palette7.success), {
            contrastText: "#FFF"
          }),
          error: _extends({}, generateSubColorObject(theme == null ? void 0 : (_theme$palette8 = theme.palette) == null ? void 0 : _theme$palette8.error), {
            contrastText: "#FFF"
          }),
          warning: _extends({}, generateSubColorObject(theme == null ? void 0 : (_theme$palette9 = theme.palette) == null ? void 0 : _theme$palette9.warning), {
            contrastText: "#FFF"
          }),
          info: _extends({}, generateSubColorObject(theme == null ? void 0 : (_theme$palette10 = theme.palette) == null ? void 0 : _theme$palette10.info), {
            contrastText: "#FFF"
          })
        }
      });
    };
  }
});

// node_modules/@frontegg/types/Metadata/index.js
var import_deepmerge, defaultMetadata, Metadata;
var init_Metadata = __esm({
  "node_modules/@frontegg/types/Metadata/index.js"() {
    import_deepmerge = __toESM(require_cjs());
    init_getPalette();
    init_colorManipulator();
    defaultMetadata = {
      theme: {},
      themeV2: {},
      localizations: {},
      navigation: {
        usage: {
          visibility: "hidden",
          permissions: ["fe.usage.read"],
          featureFlag: "fe-usage-page"
        },
        webhooks: {
          visibility: "hidden",
          permissions: ["fe.connectivity.read.webhooks"]
        },
        roles: {
          visibility: "hidden",
          featureFlag: "fe-roles-page",
          permissions: ["fe.secure.read.roles"]
        },
        users: {
          visibility: "always",
          permissions: ["fe.secure.read.users"],
          inviteDialog: {
            phoneNumberField: "optional"
          }
        },
        personalApiTokens: {
          visibility: "hidden",
          permissions: ["fe.secure.read.userApiTokens"]
        },
        apiTokens: {
          visibility: "hidden",
          permissions: ["fe.secure.read.tenantApiTokens"]
        },
        profile: {
          visibility: "always"
        },
        privacy: {
          visibility: "always",
          permissions: ["fe.secure.read.securityPolicy"]
        },
        account: {
          visibility: "always",
          permissions: ["fe.secure.read.accountSettings"]
        },
        security: {
          visibility: "always",
          permissions: ["fe.secure.read.securityPolicy"]
        },
        sso: {
          visibility: "hidden",
          permissions: ["fe.secure.read.samlConfiguration"]
        },
        provisioning: {
          visibility: "hidden",
          permissions: ["fe.secure.read.provisioningConfiguration"]
        },
        audits: {
          visibility: "always",
          permissions: ["fe.secure.read.audits"]
        },
        subscriptions: {
          visibility: "hidden",
          permissions: ["fe.subscriptions.*"]
        },
        allAccounts: {
          visibility: "byPermissions",
          permissions: ["fe.account-hierarchy.read.subAccount"]
        },
        groups: {
          visibility: "hidden",
          permissions: ["fe.secure.read.groups"]
        }
      }
    };
    Metadata = class _Metadata {
      constructor() {
        this._theme = defaultMetadata.theme;
        this._themeV2 = defaultMetadata.themeV2;
        this._navigation = defaultMetadata.navigation;
        this._localizations = defaultMetadata.localizations;
        this._integrations = defaultMetadata.integrations;
      }
      static getInstance(name10 = "default") {
        return this._instances[name10];
      }
      static set(metadata, name10 = "default") {
        const metadataInstance = new _Metadata();
        metadataInstance.set(metadata);
        _Metadata._instances[name10] = metadataInstance;
        return metadataInstance;
      }
      get theme() {
        var _this$_theme;
        return (_this$_theme = this._theme) != null ? _this$_theme : {};
      }
      get themeV2() {
        var _this$_themeV;
        return (_this$_themeV = this._themeV2) != null ? _this$_themeV : {};
      }
      get navigation() {
        var _this$_navigation;
        return (_this$_navigation = this._navigation) != null ? _this$_navigation : {};
      }
      get localizations() {
        var _this$_localizations;
        return (_this$_localizations = this._localizations) != null ? _this$_localizations : {};
      }
      get integrations() {
        var _this$_integrations;
        return (_this$_integrations = this._integrations) != null ? _this$_integrations : {};
      }
      set(metadata) {
        try {
          var _defaultMetadata$navi, _metadata$navigation, _defaultMetadata$them, _defaultMetadata$them2, _metadata$themeV, _defaultMetadata$loca, _metadata$localizatio, _defaultMetadata$inte, _metadata$integration;
          this._navigation = import_deepmerge.default.all([(_defaultMetadata$navi = defaultMetadata.navigation) != null ? _defaultMetadata$navi : {}, (_metadata$navigation = metadata == null ? void 0 : metadata.navigation) != null ? _metadata$navigation : {}]);
          this._theme = import_deepmerge.default.all([(_defaultMetadata$them = defaultMetadata.theme) != null ? _defaultMetadata$them : {}, getPalette(metadata == null ? void 0 : metadata.theme, defaultMetadata.theme)]);
          this._themeV2 = import_deepmerge.default.all([(_defaultMetadata$them2 = defaultMetadata.themeV2) != null ? _defaultMetadata$them2 : {}, (_metadata$themeV = metadata == null ? void 0 : metadata.themeV2) != null ? _metadata$themeV : {}]);
          this._localizations = import_deepmerge.default.all([(_defaultMetadata$loca = defaultMetadata.localizations) != null ? _defaultMetadata$loca : {}, (_metadata$localizatio = metadata == null ? void 0 : metadata.localizations) != null ? _metadata$localizatio : {}]);
          this._integrations = import_deepmerge.default.all([(_defaultMetadata$inte = defaultMetadata.integrations) != null ? _defaultMetadata$inte : {}, (_metadata$integration = metadata == null ? void 0 : metadata.integrations) != null ? _metadata$integration : {}]);
        } catch (e2) {
          this._navigation = defaultMetadata.navigation;
          this._theme = defaultMetadata.theme;
          this._themeV2 = defaultMetadata.themeV2;
          this._localizations = defaultMetadata.localizations;
          this._integrations = defaultMetadata.integrations;
        }
      }
    };
    Metadata._instances = {};
  }
});

// node_modules/@frontegg/types/CheckoutDialogOptions.js
var init_CheckoutDialogOptions = __esm({
  "node_modules/@frontegg/types/CheckoutDialogOptions.js"() {
  }
});

// node_modules/@frontegg/types/CustomLoginTypes.js
var init_CustomLoginTypes = __esm({
  "node_modules/@frontegg/types/CustomLoginTypes.js"() {
  }
});

// node_modules/@frontegg/types/index.js
var types_exports = {};
__export(types_exports, {
  AccountDetailsPageTabs: () => AccountDetailsPageTabs,
  AccountPageFields: () => AccountPageFields,
  DomainRestrictionsTabFields: () => DomainRestrictionsTabFields,
  GeneralSettingsTabFields: () => GeneralSettingsTabFields,
  InviteUserModalFields: () => InviteUserModalFields,
  IpRestrictionsTabFields: () => IpRestrictionsTabFields,
  Metadata: () => Metadata,
  PrivacyPageFields: () => PrivacyPageFields,
  ProfilePageFields: () => ProfilePageFields,
  SecurityPageTabs: () => SecurityPageTabs,
  SessionManagementTabFields: () => SessionManagementTabFields,
  SignupFields: () => SignupFields,
  SubscriptionsPageFields: () => SubscriptionsPageFields,
  alpha: () => alpha,
  fieldAppearance: () => fieldAppearance,
  tabAppearance: () => tabAppearance
});
var init_types4 = __esm({
  "node_modules/@frontegg/types/index.js"() {
    init_FronteggAppInstance();
    init_FronteggAppOptions();
    init_FronteggMetadata();
    init_ThemeOptions();
    init_Localizations();
    init_Metadata();
    init_CheckoutDialogOptions();
    init_CustomLoginTypes();
  }
});

// node_modules/@frontegg/js/utils/index.js
var formatName, createElement, waitThemeSetter, restoreSearchParams;
var init_utils10 = __esm({
  "node_modules/@frontegg/js/utils/index.js"() {
    formatName = function formatName2(name10) {
      return name10.replace(/\W+/g, " ").split(/ |\B(?=[A-Z])/).map(function(word) {
        return word.toLowerCase();
      }).join("");
    };
    createElement = function createElement2(container, type) {
      var attrs = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {};
      var el = document.createElement(type);
      Object.keys(attrs).forEach(function(key) {
        return el.setAttribute(key, attrs[key]);
      });
      container.appendChild(el);
      return el;
    };
    waitThemeSetter = function waitThemeSetter2(instance) {
      return new Promise(function(resolve, reject) {
        var timeout = 4e3;
        var interval = setInterval(function() {
          if (instance.themeSetter != null) {
            clearInterval(interval);
            resolve(true);
            return;
          }
          if (timeout < 0) {
            reject("Failed to load Renderer with themeSetter");
            clearInterval(interval);
            return;
          }
          timeout -= 50;
        }, 50);
      });
    };
    restoreSearchParams = function restoreSearchParams2(searchParams) {
      var stringifiedSearchParams = searchParams.toString();
      if (!stringifiedSearchParams) {
        return;
      }
      var url = new URL(window.location.href);
      url.search = stringifiedSearchParams;
      window.history.pushState(null, "", url.toString());
    };
  }
});

// node_modules/@frontegg/js/version.js
var version_default2;
var init_version2 = __esm({
  "node_modules/@frontegg/js/version.js"() {
    version_default2 = {
      cdnVersion: "6.179.0"
    };
  }
});

// node_modules/@frontegg/js/utils/mockFlagsList.js
var mockFlagsList;
var init_mockFlagsList = __esm({
  "node_modules/@frontegg/js/utils/mockFlagsList.js"() {
    mockFlagsList = {
      admin_portal_ip_restrictions: "on",
      admin_portal_domain_restrictions: "on",
      "new-mfa-pages": "on",
      "show-passkeys-new": "on",
      "groups-admin-box-new": "on",
      "msp-all-accounts-new": "on",
      "temporary-users": "on"
    };
  }
});

// node_modules/@frontegg/js/FronteggApp/utils.js
var isValidGTMKey, loadGTM;
var init_utils11 = __esm({
  "node_modules/@frontegg/js/FronteggApp/utils.js"() {
    init_types4();
    isValidGTMKey = function isValidGTMKey2(key) {
      return /^GTM-[a-zA-Z0-9]+$/.test(key);
    };
    loadGTM = function loadGTM2(fronteggAppName) {
      var _metadata$integration;
      var metadata = Metadata.getInstance(fronteggAppName);
      var gtmKeysConfig = metadata == null ? void 0 : (_metadata$integration = metadata.integrations) == null ? void 0 : _metadata$integration.gtm;
      gtmKeysConfig == null ? void 0 : gtmKeysConfig.filter(function(_ref) {
        var id = _ref.id, enabled = _ref.enabled;
        return enabled && isValidGTMKey(id);
      }).forEach(function(_ref2) {
        var id = _ref2.id;
        var script = document.createElement("script");
        script.innerHTML = "\n        (function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':\n        new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],\n        j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=\n        'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);\n        })(window,document,'script','dataLayer','".concat(id, "');\n      ");
        document.body.appendChild(script);
      });
    };
  }
});

// node_modules/@frontegg/js/FronteggApp/FronteggApp.js
var import_regenerator, FronteggApp;
var init_FronteggApp = __esm({
  "node_modules/@frontegg/js/FronteggApp/FronteggApp.js"() {
    init_slicedToArray();
    init_asyncToGenerator();
    init_classCallCheck();
    init_createClass();
    import_regenerator = __toESM(require_regenerator());
    init_redux_store();
    init_types4();
    init_utils10();
    init_AppHolder();
    init_rest_api();
    init_rest_api();
    init_rest_api();
    init_types4();
    init_version2();
    init_mockFlagsList();
    init_utils11();
    FronteggApp = function() {
      function FronteggApp2(_options, name10) {
        var _this = this, _this$options$authOpt3, _options$authOptions;
        var iframeRendering = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
        var allowMultipleRenderers = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
        _classCallCheck(this, FronteggApp2);
        this.name = void 0;
        this.iframeRendering = void 0;
        this.options = void 0;
        this.loading = true;
        this.cdnUrl = "https://assets.frontegg.com/admin-box/".concat(version_default2.cdnVersion);
        this.customElementName = "";
        this.adminPortalEl = void 0;
        this.adminPortalRenderer = void 0;
        this.loginBoxEl = void 0;
        this.checkoutDialogEl = void 0;
        this.checkoutDialogRenderer = void 0;
        this.adminPortalContainer = void 0;
        this.loginBoxContainer = void 0;
        this.checkoutDialogContainer = void 0;
        this.loginBoxRenderer = void 0;
        this.store = void 0;
        this.loadingListeners = [];
        this.updateLocalizations = void 0;
        this.loadAdminBoxMetadata = _asyncToGenerator(import_regenerator.default.mark(function _callee() {
          var Get2, _data$rows$0$configur, _data$rows, _data$rows$, data;
          return import_regenerator.default.wrap(function _callee$(_context) {
            while (1)
              switch (_context.prev = _context.next) {
                case 0:
                  Get2 = fetch_exports.Get;
                  if (_this.options.metadata) {
                    _context.next = 12;
                    break;
                  }
                  _context.prev = 2;
                  _context.next = 5;
                  return Get2("/metadata", {
                    entityName: "adminBox"
                  });
                case 5:
                  data = _context.sent;
                  _this.options.metadata = (_data$rows$0$configur = data == null ? void 0 : (_data$rows = data.rows) == null ? void 0 : (_data$rows$ = _data$rows[0]) == null ? void 0 : _data$rows$.configuration) != null ? _data$rows$0$configur : {};
                  _context.next = 12;
                  break;
                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](2);
                  console.error("failed to get admin portal metadata", _context.t0);
                case 12:
                  Metadata.set(_this.options.metadata, _this.name);
                case 13:
                case "end":
                  return _context.stop();
              }
          }, _callee, null, [[2, 9]]);
        }));
        this.requestAuthorize = _asyncToGenerator(import_regenerator.default.mark(function _callee2() {
          var _this$options$authOpt, _this$options$authOpt2;
          var shouldRequestHostedLoginAuthorize;
          return import_regenerator.default.wrap(function _callee2$(_context2) {
            while (1)
              switch (_context2.prev = _context2.next) {
                case 0:
                  shouldRequestHostedLoginAuthorize = (_this$options$authOpt = _this.options.authOptions) == null ? void 0 : (_this$options$authOpt2 = _this$options$authOpt.hostedLoginOptions) == null ? void 0 : _this$options$authOpt2.loadUserOnFirstLoad;
                  if (!_this.options.builderMode && _this.options.framework !== "nextjs") {
                    if (_this.options.hostedLoginBox && !_this.options.customLoginBox) {
                      if (shouldRequestHostedLoginAuthorize) {
                        _this.store.dispatch({
                          type: "auth/requestHostedLoginAuthorizeV2",
                          payload: {
                            shouldRedirectToLogin: false,
                            firstTime: true
                          }
                        });
                      }
                    } else {
                      _this.store.dispatch({
                        type: "auth/requestAuthorize",
                        payload: true
                      });
                    }
                  }
                case 2:
                case "end":
                  return _context2.stop();
              }
          }, _callee2);
        }));
        this.loadFeatureFlags = _asyncToGenerator(import_regenerator.default.mark(function _callee3() {
          var flags;
          return import_regenerator.default.wrap(function _callee3$(_context3) {
            while (1)
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(_this.options.previewMode || _this.options.builderMode)) {
                    _context3.next = 4;
                    break;
                  }
                  FeatureFlags.set(mockFlagsList, _this.name);
                  _context3.next = 15;
                  break;
                case 4:
                  _context3.prev = 4;
                  _context3.next = 7;
                  return loadFeatureFlags();
                case 7:
                  flags = _context3.sent;
                  if (_this.options.overrideFeatureFlags) {
                    Object.assign(flags, _this.options.overrideFeatureFlags);
                  }
                  FeatureFlags.set(flags, _this.name);
                  _context3.next = 15;
                  break;
                case 12:
                  _context3.prev = 12;
                  _context3.t0 = _context3["catch"](4);
                  console.error("failed to get admin portal feature flags", _context3.t0);
                case 15:
                case "end":
                  return _context3.stop();
              }
          }, _callee3, null, [[4, 12]]);
        }));
        this.setFeatureFlagsForPreview = function(previewFeatureFlags) {
          FeatureFlags.set(Object.assign({}, mockFlagsList, previewFeatureFlags), _this.name);
        };
        this.queryFeatureFlags = function(flags) {
          return FeatureFlags.getFeatureFlags(flags, _this.name);
        };
        this.updateLocalizationsSetter = function(localizationUpdateFn) {
          _this.updateLocalizations = localizationUpdateFn;
        };
        this.getEntitlementsFromStore = function() {
          var _this$store$getState$;
          return (_this$store$getState$ = _this.store.getState().auth.user) == null ? void 0 : _this$store$getState$.entitlements;
        };
        this.getUserFromStore = function() {
          return _this.store.getState().auth.user;
        };
        this.getEntitlementsQueryData = function(customAttributes) {
          var user = _this.getUserFromStore();
          var entitlements = _this.getEntitlementsFromStore();
          var attributes = {
            custom: customAttributes,
            jwt: user
          };
          var _this$queryFeatureFla = _this.queryFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF]), _this$queryFeatureFla2 = _slicedToArray(_this$queryFeatureFla, 1), useEntitlementsV2 = _this$queryFeatureFla2[0];
          return {
            entitlements,
            attributes,
            isV2: useEntitlementsV2
          };
        };
        var appName = formatName(name10);
        var customElementName = "frontegg-app-".concat(appName);
        this.iframeRendering = iframeRendering;
        this.name = appName;
        this.options = Object.assign({}, _options, {
          contextOptions: Object.assign({
            requestCredentials: "include"
          }, _options.contextOptions)
        });
        if (this.options.cdnUrl) {
          this.cdnUrl = this.options.cdnUrl;
        }
        this.customElementName = customElementName;
        var authOptions = this.options.authOptions ? Object.assign({}, this.options.authOptions, {
          hostedLoginBox: this.options.hostedLoginBox
        }) : {
          hostedLoginBox: this.options.hostedLoginBox
        };
        authOptions.disableSilentRefresh = (_this$options$authOpt3 = this.options.authOptions) == null ? void 0 : _this$options$authOpt3.disableSilentRefresh;
        if (this.options.store) {
          this.store = this.options.store;
          if (!allowMultipleRenderers && this.options.store.getState().root.appName !== name10) {
            throw Error("Mismatch in store names");
          }
        } else {
          var _this$options$authOpt4, _this$options$auditsO;
          this.store = createFronteggStore({
            context: this.options.contextOptions,
            appName: this.name
          }, this, this.options.previewMode, authOptions, {
            auth: (_this$options$authOpt4 = this.options.authOptions) != null ? _this$options$authOpt4 : {},
            audits: (_this$options$auditsO = this.options.auditsOptions) != null ? _this$options$auditsO : {}
          }, false, this.options.urlStrategy);
        }
        AppHolder.setInstance(appName, this);
        this.setEntitlementsOptions(_options.entitlementsOptions);
        this.setSessionContext({
          enableSessionPerTenant: (_options$authOptions = _options.authOptions) == null ? void 0 : _options$authOptions.enableSessionPerTenant
        });
        ContextHolder.setAppName(appName);
      }
      _createClass(FronteggApp2, [{
        key: "setEntitlementsOptions",
        value: function setEntitlementsOptions(entitlementsOptions) {
          ContextHolder.setEntitlementsOptions(Object.assign({}, entitlementsOptions));
        }
      }, {
        key: "setSessionContext",
        value: function setSessionContext(sessionContext) {
          ContextHolder.setSessionContext(Object.assign({}, sessionContext));
        }
      }, {
        key: "initContainers",
        value: function() {
          var _initContainers = _asyncToGenerator(import_regenerator.default.mark(function _callee4(elements) {
            return import_regenerator.default.wrap(function _callee4$(_context4) {
              while (1)
                switch (_context4.prev = _context4.next) {
                  case 0:
                    this.adminPortalEl = elements.adminPortalEl;
                    this.loginBoxEl = elements.loginBoxEl;
                    this.checkoutDialogEl = elements.checkoutDialogEl;
                    this.adminPortalContainer = elements.adminPortalContainer;
                    this.loginBoxContainer = elements.loginBoxContainer;
                    this.checkoutDialogContainer = elements.checkoutDialogContainer;
                    try {
                      if (this.options.framework !== "nextjs") {
                        document.body.classList.add("frontegg-loading");
                      }
                    } catch (e2) {
                      console.error("Failed to add frontegg-loading to body classList");
                    }
                    _context4.next = 9;
                    return this.loadFeatureFlags();
                  case 9:
                    _context4.next = 11;
                    return Promise.all([this.loadAdminBoxMetadata(), this.requestAuthorize()]);
                  case 11:
                    if (!this.options.previewMode && !this.options.customLoginBox) {
                      this.loadLoginBox();
                      loadGTM(this.name);
                    }
                    if (!this.options.lazyLoadAdminPortal) {
                      this.loadScript("FronteggAdminPortal");
                    }
                  case 13:
                  case "end":
                    return _context4.stop();
                }
            }, _callee4, this);
          }));
          function initContainers(_x) {
            return _initContainers.apply(this, arguments);
          }
          return initContainers;
        }()
      }, {
        key: "updateMetadata",
        value: function updateMetadata(metadata) {
          Metadata.set(metadata, this.name);
          if (metadata != null && metadata.localizations) {
            var _this$updateLocalizat;
            (_this$updateLocalizat = this.updateLocalizations) == null ? void 0 : _this$updateLocalizat.call(this, metadata.localizations);
          }
        }
      }, {
        key: "addOnLoadedListener",
        value: function addOnLoadedListener(listener2) {
          if (!this.loading) {
            listener2();
            return;
          }
          this.loadingListeners.push(listener2);
        }
      }, {
        key: "ready",
        value: function ready(listener2) {
          if (this.loading) {
            listener2();
          } else {
            this.addOnLoadedListener(listener2);
          }
        }
      }, {
        key: "loginWithRedirect",
        value: function loginWithRedirect() {
          this.store.dispatch({
            type: "auth/setState",
            payload: {
              isLoading: true
            }
          });
          this.store.dispatch({
            type: "auth/requestHostedLoginAuthorize"
          });
        }
      }, {
        key: "logout",
        value: function logout3() {
          this.store.dispatch({
            type: "auth/setState",
            payload: {
              isLoading: true
            }
          });
          this.store.dispatch({
            type: "auth/logout"
          });
        }
      }, {
        key: "loadScript",
        value: function loadScript(component) {
          var _this2 = this;
          return new Promise(function(resolve, reject) {
            if (window[component]) {
              resolve(window[component]);
              return;
            }
            var entries = {
              FronteggLoginBox: "login-box/index.js",
              FronteggAdminPortal: "admin-portal/index.js"
            };
            var script = document.createElement("script");
            script.src = "".concat(_this2.cdnUrl, "/").concat(entries[component]);
            script.setAttribute("id", "".concat(component, "Script"));
            script.setAttribute("cdn-url", _this2.cdnUrl);
            script.onload = function() {
              if (window["".concat(component, "Init")]) {
                resolve(window["".concat(component, "Init")]({
                  FronteggRestApi: rest_api_exports,
                  FronteggTypes: types_exports
                }));
              } else {
                resolve(window[component]);
              }
            };
            script.onerror = function(e2) {
              console.log("Profile page error", e2);
              reject(e2);
            };
            document.body.append(script);
          });
        }
      }, {
        key: "loadLoginBox",
        value: function() {
          var _loadLoginBox = _asyncToGenerator(import_regenerator.default.mark(function _callee5() {
            var FronteggLoginBox;
            return import_regenerator.default.wrap(function _callee5$(_context5) {
              while (1)
                switch (_context5.prev = _context5.next) {
                  case 0:
                    _context5.next = 2;
                    return this.loadScript("FronteggLoginBox");
                  case 2:
                    FronteggLoginBox = _context5.sent;
                    FronteggLoginBox.render(this.loginBoxEl, {
                      injector: this,
                      options: this.options
                    });
                    this.loading = false;
                    this.loadingListeners.forEach(function(listener2) {
                      try {
                        listener2();
                      } catch (e2) {
                        console.error("Failed to call loadLoginBoxListener", e2);
                      }
                    });
                    this.loadingListeners = [];
                  case 7:
                  case "end":
                    return _context5.stop();
                }
            }, _callee5, this);
          }));
          function loadLoginBox() {
            return _loadLoginBox.apply(this, arguments);
          }
          return loadLoginBox;
        }()
      }, {
        key: "showAdminPortal",
        value: function() {
          var _showAdminPortal = _asyncToGenerator(import_regenerator.default.mark(function _callee6() {
            var FronteggAdminPortal;
            return import_regenerator.default.wrap(function _callee6$(_context6) {
              while (1)
                switch (_context6.prev = _context6.next) {
                  case 0:
                    ContextHolder.setRequestSource(RequestSource.AdminPortal);
                    _context6.next = 3;
                    return this.loadScript("FronteggAdminPortal");
                  case 3:
                    FronteggAdminPortal = _context6.sent;
                    this.adminPortalRenderer = FronteggAdminPortal.render(this.adminPortalEl, {
                      injector: this,
                      options: this.options
                    });
                  case 5:
                  case "end":
                    return _context6.stop();
                }
            }, _callee6, this);
          }));
          function showAdminPortal() {
            return _showAdminPortal.apply(this, arguments);
          }
          return showAdminPortal;
        }()
      }, {
        key: "hideAdminPortal",
        value: function hideAdminPortal() {
          try {
            var _this$adminPortalRend;
            var searchParams = new URLSearchParams(window.location.search);
            (_this$adminPortalRend = this.adminPortalRenderer) == null ? void 0 : _this$adminPortalRend.unmount();
            restoreSearchParams(searchParams);
            ContextHolder.setRequestSource(null);
          } catch (e2) {
            console.error("Failed to unmount admin portal", e2);
          }
        }
      }, {
        key: "showCheckoutDialog",
        value: function() {
          var _showCheckoutDialog = _asyncToGenerator(import_regenerator.default.mark(function _callee7(opts) {
            var FronteggAdminPortal;
            return import_regenerator.default.wrap(function _callee7$(_context7) {
              while (1)
                switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.next = 2;
                    return this.loadScript("FronteggAdminPortal");
                  case 2:
                    FronteggAdminPortal = _context7.sent;
                    this.checkoutDialogRenderer = FronteggAdminPortal.renderCheckoutDialog(this.checkoutDialogEl, Object.assign({
                      injector: this
                    }, opts, {
                      options: this.options
                    }));
                  case 4:
                  case "end":
                    return _context7.stop();
                }
            }, _callee7, this);
          }));
          function showCheckoutDialog(_x2) {
            return _showCheckoutDialog.apply(this, arguments);
          }
          return showCheckoutDialog;
        }()
      }, {
        key: "hideCheckoutDialog",
        value: function hideCheckoutDialog() {
          try {
            var _this$checkoutDialogR;
            (_this$checkoutDialogR = this.checkoutDialogRenderer) == null ? void 0 : _this$checkoutDialogR.unmount();
          } catch (e2) {
            console.error("Failed to unmount checkout dialog", e2);
          }
        }
        /**
         * @returns entitlements store data
         */
      }, {
        key: "getFeatureEntitlements",
        value: (
          /**
            @param key feature key
            @param customAttributes user attributes
            @returns if the user is entitled to the given feature. Attaching the justification if not
            @throws when entitlement is not enabled via frontegg options
          */
          function getFeatureEntitlements2(key, customAttributes) {
            var _this$getEntitlements = this.getEntitlementsQueryData(customAttributes), entitlements = _this$getEntitlements.entitlements, attributes = _this$getEntitlements.attributes, isV2 = _this$getEntitlements.isV2;
            return getFeatureEntitlements(entitlements, key, attributes, isV2);
          }
        )
        /**
          @param key permission key
          @param customAttributes user attributes
          @returns if the user is entitled to the given permission. Attaching the justification if not
          @throws when entitlement is not enabled via frontegg options
        */
      }, {
        key: "getPermissionEntitlements",
        value: function getPermissionEntitlements2(key, customAttributes) {
          var _this$getEntitlements2 = this.getEntitlementsQueryData(customAttributes), entitlements = _this$getEntitlements2.entitlements, attributes = _this$getEntitlements2.attributes, isV2 = _this$getEntitlements2.isV2;
          return getPermissionEntitlements(entitlements, key, attributes, isV2);
        }
        /**
          @param options - including permission or feature key
          @param customAttributes user attributes
          @returns if the user is entitled to the given permission or feature. Attaching the justification if not
          @throws when entitlement is not enabled via frontegg options
        */
      }, {
        key: "getEntitlements",
        value: function getEntitlements2(options, customAttributes) {
          if ("permissionKey" in options) {
            return this.getPermissionEntitlements(options.permissionKey, customAttributes);
          }
          return this.getFeatureEntitlements(options.featureKey, customAttributes);
        }
        /**
         * Load entitlements
         * @param callback called on request completed with true if succeeded, false if failed
         */
      }, {
        key: "loadEntitlements",
        value: function loadEntitlements3(callback) {
          this.store.dispatch({
            type: "auth/loadEntitlements",
            payload: {
              callback
            }
          });
        }
        /**
         * Redirects to the step up page with the max age param and set the redirect url in the local storage
         * @param options.maxAge optional max age
         */
      }, {
        key: "stepUp",
        value: function stepUp(options) {
          var state = this.store.getState();
          var _ref4 = (state == null ? void 0 : state.auth) || {}, hostedLoginBox = _ref4.hostedLoginBox, stepUpUrl = _ref4.routes.stepUpUrl;
          if (hostedLoginBox) {
            this.store.dispatch({
              type: "auth/stepUpHostedLogin",
              payload: options
            });
            return;
          }
          redirectByStepUpUrl(stepUpUrl, state.auth.onRedirectTo, options == null ? void 0 : options.maxAge);
        }
        /**
         * @param options.maxAge optional max age
         * @return true when user is stepped up, false otherwise
         */
      }, {
        key: "isSteppedUp",
        value: function isSteppedUp2() {
          var _this$store$getState;
          var options = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
          var _ref5 = ((_this$store$getState = this.store.getState()) == null ? void 0 : _this$store$getState.auth) || {}, user = _ref5.user;
          return isSteppedUp(user, options);
        }
      }, {
        key: "close",
        value: function close() {
          this.hideAdminPortal();
          this.hideCheckoutDialog();
        }
      }]);
      return FronteggApp2;
    }();
  }
});

// node_modules/@frontegg/js/FronteggApp/index.js
var init_FronteggApp2 = __esm({
  "node_modules/@frontegg/js/FronteggApp/index.js"() {
    init_FronteggApp();
  }
});

// node_modules/@frontegg/js/HostedLogin/index.js
var HostedLogin;
var init_HostedLogin = __esm({
  "node_modules/@frontegg/js/HostedLogin/index.js"() {
    init_classCallCheck();
    init_createClass();
    init_redux_store();
    init_AppHolder();
    init_rest_api();
    HostedLogin = function() {
      function HostedLogin2() {
        _classCallCheck(this, HostedLogin2);
      }
      _createClass(HostedLogin2, null, [{
        key: "setAuthentication",
        value: function setAuthentication(isAuthenticated, accessToken, user) {
          var appName = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : "default";
          var app = AppHolder.getInstance(appName);
          if (isAuthenticated && accessToken) {
            ContextHolder.setAccessToken(accessToken);
            ContextHolder.setUser(Object.assign({}, user, {
              accessToken
            }));
            app.store.dispatch(actions30.setState({
              isLoading: false,
              isAuthenticated,
              user
            }));
            app.store.dispatch(actions30.loadTenants());
          } else {
            ContextHolder.setAccessToken(null);
            ContextHolder.setUser(null);
            app.store.dispatch(actions30.setState({
              isLoading: false,
              isAuthenticated: false,
              user: null
            }));
          }
        }
      }]);
      return HostedLogin2;
    }();
  }
});

// node_modules/@frontegg/js/AdminPortal/index.js
var AdminPortal;
var init_AdminPortal = __esm({
  "node_modules/@frontegg/js/AdminPortal/index.js"() {
    init_classCallCheck();
    init_createClass();
    init_AppHolder();
    AdminPortal = function() {
      function AdminPortal2() {
        _classCallCheck(this, AdminPortal2);
      }
      _createClass(AdminPortal2, null, [{
        key: "show",
        value: function show() {
          var name10 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "default";
          AppHolder.getInstance(name10).showAdminPortal();
        }
      }, {
        key: "hide",
        value: function hide() {
          var name10 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "default";
          AppHolder.getInstance(name10).hideAdminPortal();
        }
      }]);
      return AdminPortal2;
    }();
  }
});

// node_modules/@frontegg/js/CheckoutDialog/index.js
var CheckoutDialog;
var init_CheckoutDialog = __esm({
  "node_modules/@frontegg/js/CheckoutDialog/index.js"() {
    init_classCallCheck();
    init_createClass();
    init_AppHolder();
    CheckoutDialog = function() {
      function CheckoutDialog2() {
        _classCallCheck(this, CheckoutDialog2);
      }
      _createClass(CheckoutDialog2, null, [{
        key: "show",
        value: function show(opts) {
          var name10 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default";
          AppHolder.getInstance(name10).showCheckoutDialog(opts);
        }
      }, {
        key: "hide",
        value: function hide() {
          var name10 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "default";
          AppHolder.getInstance(name10).hideCheckoutDialog();
        }
      }]);
      return CheckoutDialog2;
    }();
  }
});

// node_modules/@frontegg/js/AdminPortalRenderer/index.js
var import_regenerator2, getThemeAdminByName, AdminPortalRenderer;
var init_AdminPortalRenderer = __esm({
  "node_modules/@frontegg/js/AdminPortalRenderer/index.js"() {
    init_asyncToGenerator();
    init_classCallCheck();
    init_createClass();
    import_regenerator2 = __toESM(require_regenerator());
    init_redux_store();
    init_types4();
    init_FronteggApp2();
    init_utils10();
    getThemeAdminByName = function getThemeAdminByName2(name10) {
      var _name;
      var adminPortalThemes = window["FronteggAdminPortal"].adminPortalStaticThemesDefaults;
      return (_name = adminPortalThemes[name10]) != null ? _name : void 0;
    };
    AdminPortalRenderer = function() {
      function AdminPortalRenderer2(name10, themeOptions, store, appOptions) {
        var allowMultipleRenderers = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
        _classCallCheck(this, AdminPortalRenderer2);
        this.app = void 0;
        this.options = void 0;
        this.store = void 0;
        this.setRoute = function() {
        };
        this.themeSetter = void 0;
        this.themeOptions = {};
        var contextOptions = {
          baseUrl: "preview"
        };
        if (store) {
          this.store = store;
          if (!allowMultipleRenderers && store.getState().root.appName !== name10) {
            throw Error("Mismatch in store names");
          }
        } else {
          this.store = createFronteggStore({
            context: contextOptions,
            appName: name10
          }, this, true, void 0, void 0, true);
        }
        this.options = Object.assign({
          themeOptions,
          iframeRendering: true,
          metadata: {},
          previewMode: true,
          builderMode: true,
          store: this.store,
          contextOptions
        }, appOptions);
        this.app = new FronteggApp(this.options, name10, true);
        Metadata.set({}, name10);
      }
      _createClass(AdminPortalRenderer2, [{
        key: "render",
        value: function() {
          var _render = _asyncToGenerator(import_regenerator2.default.mark(function _callee(adminPortalContainer) {
            var _this = this;
            var adminPortalEl, setThemeSetter, setStaticRouteSetter, FronteggAdminPortal;
            return import_regenerator2.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    adminPortalEl = adminPortalContainer.querySelector("#root");
                    if (!adminPortalEl) {
                      adminPortalEl = adminPortalContainer.ownerDocument.createElement("div");
                      adminPortalEl.setAttribute("id", "root");
                      adminPortalContainer.appendChild(adminPortalEl);
                    }
                    this.app.adminPortalContainer = adminPortalContainer;
                    this.app.adminPortalEl = adminPortalEl;
                    setThemeSetter = function setThemeSetter2(themeSetter) {
                      _this.themeSetter = themeSetter;
                    };
                    setStaticRouteSetter = function setStaticRouteSetter2(setStaticRoute) {
                      _this.setRoute = setStaticRoute;
                    };
                    _context.next = 8;
                    return this.app.loadScript("FronteggAdminPortal");
                  case 8:
                    FronteggAdminPortal = _context.sent;
                    this.app.adminPortalRenderer = FronteggAdminPortal.renderPage(adminPortalEl, {
                      options: this.options,
                      injector: this.app,
                      setThemeSetter,
                      setStaticRouteSetter
                    });
                    this.app.loading = false;
                    _context.next = 13;
                    return waitThemeSetter(this);
                  case 13:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function render(_x) {
            return _render.apply(this, arguments);
          }
          return render;
        }()
      }, {
        key: "setStaticRoute",
        value: function setStaticRoute(staticRoute) {
          var _this$setRoute;
          (_this$setRoute = this.setRoute) == null ? void 0 : _this$setRoute.call(this, staticRoute);
        }
      }, {
        key: "unmount",
        value: function unmount() {
          try {
            var _this$app$adminPortal;
            (_this$app$adminPortal = this.app.adminPortalRenderer) == null ? void 0 : _this$app$adminPortal.unmount();
          } catch (e2) {
            console.error("Failed to unmount admin Portal renderer", e2);
          }
        }
      }, {
        key: "setTheme",
        value: function setTheme(themeOptions) {
          var _this$themeSetter;
          this.themeOptions = themeOptions;
          if (!this.themeSetter) {
            console.warn("this.themeSetter is not defined yet");
          }
          (_this$themeSetter = this.themeSetter) == null ? void 0 : _this$themeSetter.call(this, this.themeOptions);
        }
      }]);
      return AdminPortalRenderer2;
    }();
  }
});

// node_modules/@frontegg/js/LoginBoxRenderer/index.js
var import_regenerator3, defaultTheme, getThemeByName, LoginBoxRenderer;
var init_LoginBoxRenderer = __esm({
  "node_modules/@frontegg/js/LoginBoxRenderer/index.js"() {
    init_asyncToGenerator();
    init_classCallCheck();
    init_createClass();
    import_regenerator3 = __toESM(require_regenerator());
    init_redux_store();
    init_types4();
    init_FronteggApp2();
    init_utils10();
    defaultTheme = "modern";
    getThemeByName = function getThemeByName2(name10) {
      var _name;
      var themes = window["FronteggAdminPortal"].themes;
      return (_name = themes[name10]) != null ? _name : themes[defaultTheme];
    };
    LoginBoxRenderer = function() {
      function LoginBoxRenderer2(name10, themeOptions, store, appOptions) {
        var allowMultipleRenderers = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : true;
        _classCallCheck(this, LoginBoxRenderer2);
        this.app = void 0;
        this.options = void 0;
        this.store = void 0;
        this.themeSetter = void 0;
        this.setRoute = function() {
        };
        this.themeOptions = {};
        var contextOptions = {
          baseUrl: "preview"
        };
        if (store) {
          this.store = store;
          if (!allowMultipleRenderers && store.getState().root.appName !== name10) {
            throw Error("Mismatch in store names");
          }
        } else {
          this.store = createFronteggStore({
            context: contextOptions,
            appName: name10
          }, this, true, void 0, void 0, true);
        }
        this.options = Object.assign({
          themeOptions,
          iframeRendering: true,
          metadata: {},
          previewMode: true,
          builderMode: true,
          store: this.store,
          contextOptions,
          onRedirectTo: function onRedirectTo() {
            console.debug("path");
          }
        }, appOptions);
        this.app = new FronteggApp(this.options, name10, true, allowMultipleRenderers);
        Metadata.set({}, name10);
      }
      _createClass(LoginBoxRenderer2, [{
        key: "render",
        value: function() {
          var _render = _asyncToGenerator(import_regenerator3.default.mark(function _callee(loginBoxContainer) {
            var _this = this;
            var loginBoxEl, setThemeSetter, setStaticRouteSetter, FronteggLoginBox;
            return import_regenerator3.default.wrap(function _callee$(_context) {
              while (1)
                switch (_context.prev = _context.next) {
                  case 0:
                    loginBoxEl = loginBoxContainer.querySelector("#root");
                    if (!loginBoxEl) {
                      loginBoxEl = loginBoxContainer.ownerDocument.createElement("div");
                      loginBoxEl.setAttribute("id", "root");
                      loginBoxContainer.appendChild(loginBoxEl);
                    }
                    this.app.loginBoxContainer = loginBoxContainer;
                    this.app.loginBoxEl = loginBoxEl;
                    setThemeSetter = function setThemeSetter2(themeSetter) {
                      _this.themeSetter = themeSetter;
                    };
                    setStaticRouteSetter = function setStaticRouteSetter2(setStaticRoute) {
                      _this.setRoute = setStaticRoute;
                    };
                    _context.next = 8;
                    return this.app.loadScript("FronteggLoginBox");
                  case 8:
                    FronteggLoginBox = _context.sent;
                    this.app.loginBoxRenderer = FronteggLoginBox.renderPage(loginBoxEl, {
                      options: this.options,
                      injector: this.app,
                      setThemeSetter,
                      setStaticRouteSetter,
                      staticRoute: "/account/login"
                    });
                    _context.next = 12;
                    return waitThemeSetter(this);
                  case 12:
                  case "end":
                    return _context.stop();
                }
            }, _callee, this);
          }));
          function render(_x) {
            return _render.apply(this, arguments);
          }
          return render;
        }()
      }, {
        key: "unmount",
        value: function unmount() {
          try {
            var _this$app$loginBoxRen;
            (_this$app$loginBoxRen = this.app.loginBoxRenderer) == null ? void 0 : _this$app$loginBoxRen.unmount();
          } catch (e2) {
            console.error("Failed to unmount login box renderer", e2);
          }
        }
      }, {
        key: "setTheme",
        value: function setTheme(themeOptions) {
          var _this$themeSetter;
          this.themeOptions = themeOptions;
          if (!this.themeSetter) {
            console.warn("this.themeSetter is not defined yet");
          }
          (_this$themeSetter = this.themeSetter) == null ? void 0 : _this$themeSetter.call(this, this.themeOptions);
        }
      }, {
        key: "setStaticRoute",
        value: function setStaticRoute(staticRoute) {
          var _this$setRoute;
          if (!this.setRoute) {
            console.warn("this.setRoute is not defined yet");
          }
          (_this$setRoute = this.setRoute) == null ? void 0 : _this$setRoute.call(this, staticRoute);
        }
      }, {
        key: "setStore",
        value: function setStore(state) {
          this.store.dispatch({
            type: "auth/setState",
            payload: state
          });
        }
      }]);
      return LoginBoxRenderer2;
    }();
  }
});

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(o2, p2) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o3, p3) {
    o3.__proto__ = p3;
    return o3;
  };
  return _setPrototypeOf(o2, p2);
}
var init_setPrototypeOf = __esm({
  "node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/inherits.js
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass)
    _setPrototypeOf(subClass, superClass);
}
var init_inherits = __esm({
  "node_modules/@babel/runtime/helpers/esm/inherits.js"() {
    init_setPrototypeOf();
  }
});

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self;
}
var init_assertThisInitialized = __esm({
  "node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js
function _possibleConstructorReturn(self, call2) {
  if (call2 && (_typeof(call2) === "object" || typeof call2 === "function")) {
    return call2;
  } else if (call2 !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self);
}
var init_possibleConstructorReturn = __esm({
  "node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js"() {
    init_typeof();
    init_assertThisInitialized();
  }
});

// node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js
function _getPrototypeOf(o2) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o3) {
    return o3.__proto__ || Object.getPrototypeOf(o3);
  };
  return _getPrototypeOf(o2);
}
var init_getPrototypeOf = __esm({
  "node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/isNativeFunction.js
function _isNativeFunction(fn2) {
  try {
    return Function.toString.call(fn2).indexOf("[native code]") !== -1;
  } catch (e2) {
    return typeof fn2 === "function";
  }
}
var init_isNativeFunction = __esm({
  "node_modules/@babel/runtime/helpers/esm/isNativeFunction.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js
function _isNativeReflectConstruct() {
  try {
    var t2 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t3) {
  }
  return (_isNativeReflectConstruct = function _isNativeReflectConstruct3() {
    return !!t2;
  })();
}
var init_isNativeReflectConstruct = __esm({
  "node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js"() {
  }
});

// node_modules/@babel/runtime/helpers/esm/construct.js
function _construct(t2, e2, r2) {
  if (_isNativeReflectConstruct())
    return Reflect.construct.apply(null, arguments);
  var o2 = [null];
  o2.push.apply(o2, e2);
  var p2 = new (t2.bind.apply(t2, o2))();
  return r2 && _setPrototypeOf(p2, r2.prototype), p2;
}
var init_construct = __esm({
  "node_modules/@babel/runtime/helpers/esm/construct.js"() {
    init_setPrototypeOf();
    init_isNativeReflectConstruct();
  }
});

// node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2))
      return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2))
        return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
var init_wrapNativeSuper = __esm({
  "node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js"() {
    init_getPrototypeOf();
    init_setPrototypeOf();
    init_isNativeFunction();
    init_construct();
  }
});

// node_modules/@frontegg/js/initialize.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e2) {
    return false;
  }
}
var initialize;
var init_initialize = __esm({
  "node_modules/@frontegg/js/initialize.js"() {
    init_classCallCheck();
    init_createClass();
    init_inherits();
    init_possibleConstructorReturn();
    init_getPrototypeOf();
    init_wrapNativeSuper();
    init_FronteggApp2();
    init_AppHolder();
    init_utils10();
    initialize = function initialize2(options) {
      var name10 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "default";
      var createdApp = new FronteggApp(options, name10);
      if (typeof document !== "undefined") {
        var _document$querySelect;
        if (!options.contextOptions.baseUrl) {
          var error = new Error('Edit <FronteggProvider/> options { ContextOptions: { baseUrl: "" } } in order to connect your application');
          document.body.innerHTML = "";
          alert(error.message);
          throw error;
        }
        if (!customElements.get("frontegg-app")) {
          var FronteggAppContainer = function(_HTMLElement) {
            _inherits(FronteggAppContainer2, _HTMLElement);
            var _super = _createSuper(FronteggAppContainer2);
            function FronteggAppContainer2() {
              var _this;
              _classCallCheck(this, FronteggAppContainer2);
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              _this = _super.call.apply(_super, [this].concat(args));
              _this.app = null;
              return _this;
            }
            _createClass(FronteggAppContainer2, [{
              key: "connectedCallback",
              value: function connectedCallback() {
                this.updateContent();
              }
            }, {
              key: "attributeChangedCallback",
              value: function attributeChangedCallback(name11, oldValue, newValue) {
                if (name11 === "app-name") {
                  if (oldValue === null) {
                    return;
                  }
                  if (oldValue === newValue) {
                    return;
                  }
                  this.innerHTML = "";
                  if (newValue === null) {
                    this.remove();
                  } else {
                    this.updateContent();
                  }
                }
                console.debug("attributeChangedCallback", name11, oldValue, newValue);
              }
            }, {
              key: "updateContent",
              value: function updateContent() {
                var _this$getAttribute;
                var appName = (_this$getAttribute = this.getAttribute("app-name")) != null ? _this$getAttribute : "default";
                var app = AppHolder.getInstance(appName);
                if (app === null) {
                  throw Error("FronteggApp not found for appName: '".concat(appName, "'"));
                }
                this.setAttribute("id", "frontegg-app-".concat(app.name));
                var adminPortalContainer = createElement(this, "div", {
                  id: "frontegg-admin-portal-container-".concat(app.name)
                });
                var loginBoxContainer = createElement(this, "div", {
                  id: "frontegg-login-box-container-".concat(app.name)
                });
                var checkoutDialogContainer = createElement(this, "div", {
                  id: "frontegg-checkout-dialog-container-".concat(app.name)
                });
                var adminBoxShadowEl = adminPortalContainer.attachShadow({
                  mode: "open"
                });
                var loginBoxShadowEl = loginBoxContainer.attachShadow({
                  mode: "open"
                });
                var checkoutDialogShadowEl = checkoutDialogContainer.attachShadow({
                  mode: "open"
                });
                var adminPortalEl = createElement(adminBoxShadowEl, "div", {
                  id: "frontegg-admin-portal-".concat(app.name),
                  "class": "frontegg-root-content"
                });
                var loginBoxEl = createElement(loginBoxShadowEl, "div", {
                  id: "frontegg-login-box-".concat(app.name),
                  "class": "frontegg-root-content"
                });
                var checkoutDialogEl = createElement(checkoutDialogShadowEl, "div", {
                  id: "frontegg-checkout-dialog-".concat(app.name),
                  "class": "frontegg-root-content"
                });
                app.initContainers({
                  adminPortalEl,
                  loginBoxEl,
                  adminPortalContainer,
                  loginBoxContainer,
                  checkoutDialogContainer,
                  checkoutDialogEl
                });
              }
            }], [{
              key: "observedAttributes",
              get: function get2() {
                return ["app-name"];
              }
            }]);
            return FronteggAppContainer2;
          }(_wrapNativeSuper(HTMLElement));
          customElements.define("frontegg-app", FronteggAppContainer);
        }
        (_document$querySelect = document.querySelector('frontegg-app[app-name="'.concat(createdApp.name, '"]'))) == null ? void 0 : _document$querySelect.remove();
        var element = document.createElement("frontegg-app");
        element.setAttribute("app-name", createdApp.name);
        document.body.appendChild(element);
      }
      return createdApp;
    };
  }
});

// node_modules/@frontegg/js/index.js
var js_exports = {};
__export(js_exports, {
  AdminPortal: () => AdminPortal,
  AdminPortalRenderer: () => AdminPortalRenderer,
  AppHolder: () => AppHolder,
  CheckoutDialog: () => CheckoutDialog,
  FronteggApp: () => FronteggApp,
  HostedLogin: () => HostedLogin,
  LoginBoxRenderer: () => LoginBoxRenderer,
  createElement: () => createElement,
  defaultTheme: () => defaultTheme,
  formatName: () => formatName,
  getThemeAdminByName: () => getThemeAdminByName,
  getThemeByName: () => getThemeByName,
  initialize: () => initialize,
  mockFlagsList: () => mockFlagsList,
  restoreSearchParams: () => restoreSearchParams,
  waitThemeSetter: () => waitThemeSetter
});
var init_js = __esm({
  "node_modules/@frontegg/js/index.js"() {
    init_AppHolder();
    init_FronteggApp2();
    init_HostedLogin();
    init_AdminPortal();
    init_CheckoutDialog();
    init_AdminPortalRenderer();
    init_LoginBoxRenderer();
    init_initialize();
    init_utils10();
    init_mockFlagsList();
  }
});

// node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/prop-types/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object3) {
          if (typeof object3 === "object" && object3 !== null) {
            var $$typeof = object3.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object3.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object3) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object3) || typeOf(object3) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object3) {
          return typeOf(object3) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer2(object3) {
          return typeOf(object3) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object3) {
          return typeOf(object3) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object3) {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object3) {
          return typeOf(object3) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object3) {
          return typeOf(object3) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object3) {
          return typeOf(object3) === REACT_LAZY_TYPE;
        }
        function isMemo(object3) {
          return typeOf(object3) === REACT_MEMO_TYPE;
        }
        function isPortal(object3) {
          return typeOf(object3) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object3) {
          return typeOf(object3) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object3) {
          return typeOf(object3) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object3) {
          return typeOf(object3) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment3;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/prop-types/node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/prop-types/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i2 = 0; i2 < 10; i2++) {
          test2["_" + String.fromCharCode(i2)] = i2;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
          return test2[n2];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s2 = 1; s2 < arguments.length; s2++) {
        from = Object(arguments[s2]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i2 = 0; i2 < symbols.length; i2++) {
            if (propIsEnumerable.call(from, symbols[i2])) {
              to[symbols[i2]] = from[symbols[i2]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x2) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement3, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is2(x2, y2) {
        if (x2 === y2) {
          return x2 !== 0 || 1 / x2 === 1 / y2;
        } else {
          return x2 !== x2 && y2 !== y2;
        }
      }
      function PropTypeError(message, data) {
        this.message = message;
        this.data = data && typeof data === "object" ? data : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate2) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate2(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate2(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i2 = 0; i2 < propValue.length; i2++) {
            var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement3(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createElementTypeTypeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i2 = 0; i2 < expectedValues.length; i2++) {
            if (is2(propValue, expectedValues[i2])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate2(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
          var checker = arrayOfTypeCheckers[i2];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate2(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
            var checker2 = arrayOfTypeCheckers[i3];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate2);
      }
      function createNodeChecker() {
        function validate2(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate2(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate2);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement3(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator3 = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator3.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator3.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/react-redux/es/components/Context.js
var import_react, ReactReduxContext;
var init_Context = __esm({
  "node_modules/react-redux/es/components/Context.js"() {
    import_react = __toESM(require_react());
    ReactReduxContext = import_react.default.createContext(null);
    if (true) {
      ReactReduxContext.displayName = "ReactRedux";
    }
  }
});

// node_modules/react-redux/es/utils/batch.js
function defaultNoopBatch(callback) {
  callback();
}
var batch, setBatch, getBatch;
var init_batch = __esm({
  "node_modules/react-redux/es/utils/batch.js"() {
    batch = defaultNoopBatch;
    setBatch = function setBatch2(newBatch) {
      return batch = newBatch;
    };
    getBatch = function getBatch2() {
      return batch;
    };
  }
});

// node_modules/react-redux/es/utils/Subscription.js
function createListenerCollection() {
  var batch2 = getBatch();
  var first = null;
  var last = null;
  return {
    clear: function clear3() {
      first = null;
      last = null;
    },
    notify: function notify2() {
      batch2(function() {
        var listener2 = first;
        while (listener2) {
          listener2.callback();
          listener2 = listener2.next;
        }
      });
    },
    get: function get2() {
      var listeners = [];
      var listener2 = first;
      while (listener2) {
        listeners.push(listener2);
        listener2 = listener2.next;
      }
      return listeners;
    },
    subscribe: function subscribe(callback) {
      var isSubscribed = true;
      var listener2 = last = {
        callback,
        next: null,
        prev: last
      };
      if (listener2.prev) {
        listener2.prev.next = listener2;
      } else {
        first = listener2;
      }
      return function unsubscribe() {
        if (!isSubscribed || first === null)
          return;
        isSubscribed = false;
        if (listener2.next) {
          listener2.next.prev = listener2.prev;
        } else {
          last = listener2.prev;
        }
        if (listener2.prev) {
          listener2.prev.next = listener2.next;
        } else {
          first = listener2.next;
        }
      };
    }
  };
}
function createSubscription2(store, parentSub) {
  var unsubscribe;
  var listeners = nullListeners;
  function addNestedSub(listener2) {
    trySubscribe();
    return listeners.subscribe(listener2);
  }
  function notifyNestedSubs() {
    listeners.notify();
  }
  function handleChangeWrapper() {
    if (subscription.onStateChange) {
      subscription.onStateChange();
    }
  }
  function isSubscribed() {
    return Boolean(unsubscribe);
  }
  function trySubscribe() {
    if (!unsubscribe) {
      unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
      listeners = createListenerCollection();
    }
  }
  function tryUnsubscribe() {
    if (unsubscribe) {
      unsubscribe();
      unsubscribe = void 0;
      listeners.clear();
      listeners = nullListeners;
    }
  }
  var subscription = {
    addNestedSub,
    notifyNestedSubs,
    handleChangeWrapper,
    isSubscribed,
    trySubscribe,
    tryUnsubscribe,
    getListeners: function getListeners() {
      return listeners;
    }
  };
  return subscription;
}
var nullListeners;
var init_Subscription2 = __esm({
  "node_modules/react-redux/es/utils/Subscription.js"() {
    init_batch();
    nullListeners = {
      notify: function notify() {
      },
      get: function get() {
        return [];
      }
    };
  }
});

// node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js
var import_react2, useIsomorphicLayoutEffect;
var init_useIsomorphicLayoutEffect = __esm({
  "node_modules/react-redux/es/utils/useIsomorphicLayoutEffect.js"() {
    import_react2 = __toESM(require_react());
    useIsomorphicLayoutEffect = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined" ? import_react2.useLayoutEffect : import_react2.useEffect;
  }
});

// node_modules/react-redux/es/components/Provider.js
function Provider(_ref) {
  var store = _ref.store, context = _ref.context, children = _ref.children;
  var contextValue = (0, import_react3.useMemo)(function() {
    var subscription = createSubscription2(store);
    return {
      store,
      subscription
    };
  }, [store]);
  var previousState = (0, import_react3.useMemo)(function() {
    return store.getState();
  }, [store]);
  useIsomorphicLayoutEffect(function() {
    var subscription = contextValue.subscription;
    subscription.onStateChange = subscription.notifyNestedSubs;
    subscription.trySubscribe();
    if (previousState !== store.getState()) {
      subscription.notifyNestedSubs();
    }
    return function() {
      subscription.tryUnsubscribe();
      subscription.onStateChange = null;
    };
  }, [contextValue, previousState]);
  var Context = context || ReactReduxContext;
  return import_react3.default.createElement(Context.Provider, {
    value: contextValue
  }, children);
}
var import_react3, import_prop_types, Provider_default;
var init_Provider = __esm({
  "node_modules/react-redux/es/components/Provider.js"() {
    import_react3 = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_Context();
    init_Subscription2();
    init_useIsomorphicLayoutEffect();
    if (true) {
      Provider.propTypes = {
        store: import_prop_types.default.shape({
          subscribe: import_prop_types.default.func.isRequired,
          dispatch: import_prop_types.default.func.isRequired,
          getState: import_prop_types.default.func.isRequired
        }),
        context: import_prop_types.default.object,
        children: import_prop_types.default.any
      };
    }
    Provider_default = Provider;
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js
var require_react_is_development2 = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol2 = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol2 ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol2 ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol2 ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol2 ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol2 ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol2 ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol2 ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol2 ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol2 ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol2 ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol2 ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol2 ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol2 ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol2 ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol2 ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol2 ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol2 ? Symbol.for("react.scope") : 60119;
        function isValidElementType2(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object3) {
          if (typeof object3 === "object" && object3 !== null) {
            var $$typeof = object3.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object3.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object3) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object3) || typeOf(object3) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object3) {
          return typeOf(object3) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer2(object3) {
          return typeOf(object3) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object3) {
          return typeOf(object3) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object3) {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object3) {
          return typeOf(object3) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object3) {
          return typeOf(object3) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object3) {
          return typeOf(object3) === REACT_LAZY_TYPE;
        }
        function isMemo(object3) {
          return typeOf(object3) === REACT_MEMO_TYPE;
        }
        function isPortal(object3) {
          return typeOf(object3) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object3) {
          return typeOf(object3) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object3) {
          return typeOf(object3) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object3) {
          return typeOf(object3) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment3;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/hoist-non-react-statics/node_modules/react-is/index.js
var require_react_is2 = __commonJS({
  "node_modules/hoist-non-react-statics/node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development2();
    }
  }
});

// node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js
var require_hoist_non_react_statics_cjs = __commonJS({
  "node_modules/hoist-non-react-statics/dist/hoist-non-react-statics.cjs.js"(exports, module) {
    "use strict";
    var reactIs = require_react_is2();
    var REACT_STATICS = {
      childContextTypes: true,
      contextType: true,
      contextTypes: true,
      defaultProps: true,
      displayName: true,
      getDefaultProps: true,
      getDerivedStateFromError: true,
      getDerivedStateFromProps: true,
      mixins: true,
      propTypes: true,
      type: true
    };
    var KNOWN_STATICS = {
      name: true,
      length: true,
      prototype: true,
      caller: true,
      callee: true,
      arguments: true,
      arity: true
    };
    var FORWARD_REF_STATICS = {
      "$$typeof": true,
      render: true,
      defaultProps: true,
      displayName: true,
      propTypes: true
    };
    var MEMO_STATICS = {
      "$$typeof": true,
      compare: true,
      defaultProps: true,
      displayName: true,
      propTypes: true,
      type: true
    };
    var TYPE_STATICS = {};
    TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
    TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;
    function getStatics(component) {
      if (reactIs.isMemo(component)) {
        return MEMO_STATICS;
      }
      return TYPE_STATICS[component["$$typeof"]] || REACT_STATICS;
    }
    var defineProperty = Object.defineProperty;
    var getOwnPropertyNames = Object.getOwnPropertyNames;
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
    var getPrototypeOf = Object.getPrototypeOf;
    var objectPrototype = Object.prototype;
    function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
      if (typeof sourceComponent !== "string") {
        if (objectPrototype) {
          var inheritedComponent = getPrototypeOf(sourceComponent);
          if (inheritedComponent && inheritedComponent !== objectPrototype) {
            hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
          }
        }
        var keys = getOwnPropertyNames(sourceComponent);
        if (getOwnPropertySymbols) {
          keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }
        var targetStatics = getStatics(targetComponent);
        var sourceStatics = getStatics(sourceComponent);
        for (var i2 = 0; i2 < keys.length; ++i2) {
          var key = keys[i2];
          if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
            var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
            try {
              defineProperty(targetComponent, key, descriptor);
            } catch (e2) {
            }
          }
        }
      }
      return targetComponent;
    }
    module.exports = hoistNonReactStatics;
  }
});

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development3 = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var REACT_ELEMENT_TYPE = 60103;
        var REACT_PORTAL_TYPE = 60106;
        var REACT_FRAGMENT_TYPE = 60107;
        var REACT_STRICT_MODE_TYPE = 60108;
        var REACT_PROFILER_TYPE = 60114;
        var REACT_PROVIDER_TYPE = 60109;
        var REACT_CONTEXT_TYPE = 60110;
        var REACT_FORWARD_REF_TYPE = 60112;
        var REACT_SUSPENSE_TYPE = 60113;
        var REACT_SUSPENSE_LIST_TYPE = 60120;
        var REACT_MEMO_TYPE = 60115;
        var REACT_LAZY_TYPE = 60116;
        var REACT_BLOCK_TYPE = 60121;
        var REACT_SERVER_BLOCK_TYPE = 60122;
        var REACT_FUNDAMENTAL_TYPE = 60117;
        var REACT_SCOPE_TYPE = 60119;
        var REACT_OPAQUE_ID_TYPE = 60128;
        var REACT_DEBUG_TRACING_MODE_TYPE = 60129;
        var REACT_OFFSCREEN_TYPE = 60130;
        var REACT_LEGACY_HIDDEN_TYPE = 60131;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          REACT_ELEMENT_TYPE = symbolFor("react.element");
          REACT_PORTAL_TYPE = symbolFor("react.portal");
          REACT_FRAGMENT_TYPE = symbolFor("react.fragment");
          REACT_STRICT_MODE_TYPE = symbolFor("react.strict_mode");
          REACT_PROFILER_TYPE = symbolFor("react.profiler");
          REACT_PROVIDER_TYPE = symbolFor("react.provider");
          REACT_CONTEXT_TYPE = symbolFor("react.context");
          REACT_FORWARD_REF_TYPE = symbolFor("react.forward_ref");
          REACT_SUSPENSE_TYPE = symbolFor("react.suspense");
          REACT_SUSPENSE_LIST_TYPE = symbolFor("react.suspense_list");
          REACT_MEMO_TYPE = symbolFor("react.memo");
          REACT_LAZY_TYPE = symbolFor("react.lazy");
          REACT_BLOCK_TYPE = symbolFor("react.block");
          REACT_SERVER_BLOCK_TYPE = symbolFor("react.server.block");
          REACT_FUNDAMENTAL_TYPE = symbolFor("react.fundamental");
          REACT_SCOPE_TYPE = symbolFor("react.scope");
          REACT_OPAQUE_ID_TYPE = symbolFor("react.opaque.id");
          REACT_DEBUG_TRACING_MODE_TYPE = symbolFor("react.debug_trace_mode");
          REACT_OFFSCREEN_TYPE = symbolFor("react.offscreen");
          REACT_LEGACY_HIDDEN_TYPE = symbolFor("react.legacy_hidden");
        }
        var enableScopeAPI = false;
        function isValidElementType2(type) {
          if (typeof type === "string" || typeof type === "function") {
            return true;
          }
          if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI) {
            return true;
          }
          if (typeof type === "object" && type !== null) {
            if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
              return true;
            }
          }
          return false;
        }
        function typeOf(object3) {
          if (typeof object3 === "object" && object3 !== null) {
            var $$typeof = object3.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object3.type;
                switch (type) {
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                  case REACT_SUSPENSE_LIST_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment3 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        var hasWarnedAboutDeprecatedIsConcurrentMode = false;
        function isAsyncMode(object3) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isConcurrentMode(object3) {
          {
            if (!hasWarnedAboutDeprecatedIsConcurrentMode) {
              hasWarnedAboutDeprecatedIsConcurrentMode = true;
              console["warn"]("The ReactIs.isConcurrentMode() alias has been deprecated, and will be removed in React 18+.");
            }
          }
          return false;
        }
        function isContextConsumer2(object3) {
          return typeOf(object3) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object3) {
          return typeOf(object3) === REACT_PROVIDER_TYPE;
        }
        function isElement2(object3) {
          return typeof object3 === "object" && object3 !== null && object3.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object3) {
          return typeOf(object3) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object3) {
          return typeOf(object3) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object3) {
          return typeOf(object3) === REACT_LAZY_TYPE;
        }
        function isMemo(object3) {
          return typeOf(object3) === REACT_MEMO_TYPE;
        }
        function isPortal(object3) {
          return typeOf(object3) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object3) {
          return typeOf(object3) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object3) {
          return typeOf(object3) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object3) {
          return typeOf(object3) === REACT_SUSPENSE_TYPE;
        }
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment3;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer2;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement2;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType2;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is3 = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development3();
    }
  }
});

// node_modules/react-redux/es/components/connectAdvanced.js
function storeStateUpdatesReducer(state, action) {
  var updateCount = state[1];
  return [action.payload, updateCount + 1];
}
function useIsomorphicLayoutEffectWithArgs(effectFunc, effectArgs, dependencies) {
  useIsomorphicLayoutEffect(function() {
    return effectFunc.apply(void 0, effectArgs);
  }, dependencies);
}
function captureWrapperProps(lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs) {
  lastWrapperProps.current = wrapperProps;
  lastChildProps.current = actualChildProps;
  renderIsScheduled.current = false;
  if (childPropsFromStoreUpdate.current) {
    childPropsFromStoreUpdate.current = null;
    notifyNestedSubs();
  }
}
function subscribeUpdates(shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch) {
  if (!shouldHandleStateChanges)
    return;
  var didUnsubscribe = false;
  var lastThrownError = null;
  var checkForUpdates = function checkForUpdates2() {
    if (didUnsubscribe) {
      return;
    }
    var latestStoreState = store.getState();
    var newChildProps, error;
    try {
      newChildProps = childPropsSelector(latestStoreState, lastWrapperProps.current);
    } catch (e2) {
      error = e2;
      lastThrownError = e2;
    }
    if (!error) {
      lastThrownError = null;
    }
    if (newChildProps === lastChildProps.current) {
      if (!renderIsScheduled.current) {
        notifyNestedSubs();
      }
    } else {
      lastChildProps.current = newChildProps;
      childPropsFromStoreUpdate.current = newChildProps;
      renderIsScheduled.current = true;
      forceComponentUpdateDispatch({
        type: "STORE_UPDATED",
        payload: {
          error
        }
      });
    }
  };
  subscription.onStateChange = checkForUpdates;
  subscription.trySubscribe();
  checkForUpdates();
  var unsubscribeWrapper = function unsubscribeWrapper2() {
    didUnsubscribe = true;
    subscription.tryUnsubscribe();
    subscription.onStateChange = null;
    if (lastThrownError) {
      throw lastThrownError;
    }
  };
  return unsubscribeWrapper;
}
function connectAdvanced(selectorFactory, _ref) {
  if (_ref === void 0) {
    _ref = {};
  }
  var _ref2 = _ref, _ref2$getDisplayName = _ref2.getDisplayName, getDisplayName = _ref2$getDisplayName === void 0 ? function(name10) {
    return "ConnectAdvanced(" + name10 + ")";
  } : _ref2$getDisplayName, _ref2$methodName = _ref2.methodName, methodName = _ref2$methodName === void 0 ? "connectAdvanced" : _ref2$methodName, _ref2$renderCountProp = _ref2.renderCountProp, renderCountProp = _ref2$renderCountProp === void 0 ? void 0 : _ref2$renderCountProp, _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges, shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta, _ref2$storeKey = _ref2.storeKey, storeKey = _ref2$storeKey === void 0 ? "store" : _ref2$storeKey, _ref2$withRef = _ref2.withRef, withRef = _ref2$withRef === void 0 ? false : _ref2$withRef, _ref2$forwardRef = _ref2.forwardRef, forwardRef2 = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef, _ref2$context = _ref2.context, context = _ref2$context === void 0 ? ReactReduxContext : _ref2$context, connectOptions = _objectWithoutPropertiesLoose(_ref2, _excluded68);
  if (true) {
    if (renderCountProp !== void 0) {
      throw new Error("renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension");
    }
    if (withRef) {
      throw new Error("withRef is removed. To access the wrapped instance, use a ref on the connected component");
    }
    var customStoreWarningMessage = "To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect";
    if (storeKey !== "store") {
      throw new Error("storeKey has been removed and does not do anything. " + customStoreWarningMessage);
    }
  }
  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if (!(0, import_react_is.isValidElementType)(WrappedComponent)) {
      throw new Error("You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }
    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || "Component";
    var displayName = getDisplayName(wrappedComponentName);
    var selectorFactoryOptions = _extends({}, connectOptions, {
      getDisplayName,
      methodName,
      renderCountProp,
      shouldHandleStateChanges,
      storeKey,
      displayName,
      wrappedComponentName,
      WrappedComponent
    });
    var pure = connectOptions.pure;
    function createChildSelector(store) {
      return selectorFactory(store.dispatch, selectorFactoryOptions);
    }
    var usePureOnlyMemo = pure ? import_react4.useMemo : function(callback) {
      return callback();
    };
    function ConnectFunction(props) {
      var _useMemo = (0, import_react4.useMemo)(function() {
        var reactReduxForwardedRef2 = props.reactReduxForwardedRef, wrapperProps2 = _objectWithoutPropertiesLoose(props, _excluded227);
        return [props.context, reactReduxForwardedRef2, wrapperProps2];
      }, [props]), propsContext = _useMemo[0], reactReduxForwardedRef = _useMemo[1], wrapperProps = _useMemo[2];
      var ContextToUse = (0, import_react4.useMemo)(function() {
        return propsContext && propsContext.Consumer && (0, import_react_is.isContextConsumer)(import_react4.default.createElement(propsContext.Consumer, null)) ? propsContext : Context;
      }, [propsContext, Context]);
      var contextValue = (0, import_react4.useContext)(ContextToUse);
      var didStoreComeFromProps = Boolean(props.store) && Boolean(props.store.getState) && Boolean(props.store.dispatch);
      var didStoreComeFromContext = Boolean(contextValue) && Boolean(contextValue.store);
      if (!didStoreComeFromProps && !didStoreComeFromContext) {
        throw new Error('Could not find "store" in the context of ' + ('"' + displayName + '". Either wrap the root component in a <Provider>, ') + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
      }
      var store = didStoreComeFromProps ? props.store : contextValue.store;
      var childPropsSelector = (0, import_react4.useMemo)(function() {
        return createChildSelector(store);
      }, [store]);
      var _useMemo2 = (0, import_react4.useMemo)(function() {
        if (!shouldHandleStateChanges)
          return NO_SUBSCRIPTION_ARRAY;
        var subscription2 = createSubscription2(store, didStoreComeFromProps ? null : contextValue.subscription);
        var notifyNestedSubs2 = subscription2.notifyNestedSubs.bind(subscription2);
        return [subscription2, notifyNestedSubs2];
      }, [store, didStoreComeFromProps, contextValue]), subscription = _useMemo2[0], notifyNestedSubs = _useMemo2[1];
      var overriddenContextValue = (0, import_react4.useMemo)(function() {
        if (didStoreComeFromProps) {
          return contextValue;
        }
        return _extends({}, contextValue, {
          subscription
        });
      }, [didStoreComeFromProps, contextValue, subscription]);
      var _useReducer = (0, import_react4.useReducer)(storeStateUpdatesReducer, EMPTY_ARRAY, initStateUpdates), _useReducer$ = _useReducer[0], previousStateUpdateResult = _useReducer$[0], forceComponentUpdateDispatch = _useReducer[1];
      if (previousStateUpdateResult && previousStateUpdateResult.error) {
        throw previousStateUpdateResult.error;
      }
      var lastChildProps = (0, import_react4.useRef)();
      var lastWrapperProps = (0, import_react4.useRef)(wrapperProps);
      var childPropsFromStoreUpdate = (0, import_react4.useRef)();
      var renderIsScheduled = (0, import_react4.useRef)(false);
      var actualChildProps = usePureOnlyMemo(function() {
        if (childPropsFromStoreUpdate.current && wrapperProps === lastWrapperProps.current) {
          return childPropsFromStoreUpdate.current;
        }
        return childPropsSelector(store.getState(), wrapperProps);
      }, [store, previousStateUpdateResult, wrapperProps]);
      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [lastWrapperProps, lastChildProps, renderIsScheduled, wrapperProps, actualChildProps, childPropsFromStoreUpdate, notifyNestedSubs]);
      useIsomorphicLayoutEffectWithArgs(subscribeUpdates, [shouldHandleStateChanges, store, subscription, childPropsSelector, lastWrapperProps, lastChildProps, renderIsScheduled, childPropsFromStoreUpdate, notifyNestedSubs, forceComponentUpdateDispatch], [store, subscription, childPropsSelector]);
      var renderedWrappedComponent = (0, import_react4.useMemo)(function() {
        return import_react4.default.createElement(WrappedComponent, _extends({}, actualChildProps, {
          ref: reactReduxForwardedRef
        }));
      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps]);
      var renderedChild = (0, import_react4.useMemo)(function() {
        if (shouldHandleStateChanges) {
          return import_react4.default.createElement(ContextToUse.Provider, {
            value: overriddenContextValue
          }, renderedWrappedComponent);
        }
        return renderedWrappedComponent;
      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue]);
      return renderedChild;
    }
    var Connect = pure ? import_react4.default.memo(ConnectFunction) : ConnectFunction;
    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = ConnectFunction.displayName = displayName;
    if (forwardRef2) {
      var forwarded = import_react4.default.forwardRef(function forwardConnectRef(props, ref) {
        return import_react4.default.createElement(Connect, _extends({}, props, {
          reactReduxForwardedRef: ref
        }));
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return (0, import_hoist_non_react_statics.default)(forwarded, WrappedComponent);
    }
    return (0, import_hoist_non_react_statics.default)(Connect, WrappedComponent);
  };
}
var import_hoist_non_react_statics, import_react4, import_react_is, _excluded68, _excluded227, EMPTY_ARRAY, NO_SUBSCRIPTION_ARRAY, stringifyComponent, initStateUpdates;
var init_connectAdvanced = __esm({
  "node_modules/react-redux/es/components/connectAdvanced.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    import_hoist_non_react_statics = __toESM(require_hoist_non_react_statics_cjs());
    import_react4 = __toESM(require_react());
    import_react_is = __toESM(require_react_is3());
    init_Subscription2();
    init_useIsomorphicLayoutEffect();
    init_Context();
    _excluded68 = ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"];
    _excluded227 = ["reactReduxForwardedRef"];
    EMPTY_ARRAY = [];
    NO_SUBSCRIPTION_ARRAY = [null, null];
    stringifyComponent = function stringifyComponent2(Comp) {
      try {
        return JSON.stringify(Comp);
      } catch (err) {
        return String(Comp);
      }
    };
    initStateUpdates = function initStateUpdates2() {
      return [null, 0];
    };
  }
});

// node_modules/react-redux/es/utils/shallowEqual.js
function is(x2, y2) {
  if (x2 === y2) {
    return x2 !== 0 || y2 !== 0 || 1 / x2 === 1 / y2;
  } else {
    return x2 !== x2 && y2 !== y2;
  }
}
function shallowEqual(objA, objB) {
  if (is(objA, objB))
    return true;
  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }
  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length)
    return false;
  for (var i2 = 0; i2 < keysA.length; i2++) {
    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i2]) || !is(objA[keysA[i2]], objB[keysA[i2]])) {
      return false;
    }
  }
  return true;
}
var init_shallowEqual = __esm({
  "node_modules/react-redux/es/utils/shallowEqual.js"() {
  }
});

// node_modules/react-redux/es/utils/bindActionCreators.js
function bindActionCreators2(actionCreators, dispatch) {
  var boundActionCreators = {};
  var _loop = function _loop2(key2) {
    var actionCreator = actionCreators[key2];
    if (typeof actionCreator === "function") {
      boundActionCreators[key2] = function() {
        return dispatch(actionCreator.apply(void 0, arguments));
      };
    }
  };
  for (var key in actionCreators) {
    _loop(key);
  }
  return boundActionCreators;
}
var init_bindActionCreators = __esm({
  "node_modules/react-redux/es/utils/bindActionCreators.js"() {
  }
});

// node_modules/react-redux/es/utils/isPlainObject.js
function isPlainObject3(obj) {
  if (typeof obj !== "object" || obj === null)
    return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null)
    return true;
  var baseProto = proto;
  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }
  return proto === baseProto;
}
var init_isPlainObject = __esm({
  "node_modules/react-redux/es/utils/isPlainObject.js"() {
  }
});

// node_modules/react-redux/es/utils/warning.js
function warning2(message) {
  if (typeof console !== "undefined" && typeof console.error === "function") {
    console.error(message);
  }
  try {
    throw new Error(message);
  } catch (e2) {
  }
}
var init_warning = __esm({
  "node_modules/react-redux/es/utils/warning.js"() {
  }
});

// node_modules/react-redux/es/utils/verifyPlainObject.js
function verifyPlainObject(value, displayName, methodName) {
  if (!isPlainObject3(value)) {
    warning2(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}
var init_verifyPlainObject = __esm({
  "node_modules/react-redux/es/utils/verifyPlainObject.js"() {
    init_isPlainObject();
    init_warning();
  }
});

// node_modules/react-redux/es/connect/wrapMapToProps.js
function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);
    function constantSelector() {
      return constant;
    }
    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
}
function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== void 0 ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
}
function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;
    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    };
    proxy.dependsOnOwnProps = true;
    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);
      if (typeof props === "function") {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }
      if (true)
        verifyPlainObject(props, displayName, methodName);
      return props;
    };
    return proxy;
  };
}
var init_wrapMapToProps = __esm({
  "node_modules/react-redux/es/connect/wrapMapToProps.js"() {
    init_verifyPlainObject();
  }
});

// node_modules/react-redux/es/connect/mapDispatchToProps.js
function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === "function" ? wrapMapToPropsFunc(mapDispatchToProps, "mapDispatchToProps") : void 0;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? wrapMapToPropsConstant(function(dispatch) {
    return {
      dispatch
    };
  }) : void 0;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === "object" ? wrapMapToPropsConstant(function(dispatch) {
    return bindActionCreators2(mapDispatchToProps, dispatch);
  }) : void 0;
}
var mapDispatchToProps_default;
var init_mapDispatchToProps = __esm({
  "node_modules/react-redux/es/connect/mapDispatchToProps.js"() {
    init_bindActionCreators();
    init_wrapMapToProps();
    mapDispatchToProps_default = [whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject];
  }
});

// node_modules/react-redux/es/connect/mapStateToProps.js
function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === "function" ? wrapMapToPropsFunc(mapStateToProps, "mapStateToProps") : void 0;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? wrapMapToPropsConstant(function() {
    return {};
  }) : void 0;
}
var mapStateToProps_default;
var init_mapStateToProps = __esm({
  "node_modules/react-redux/es/connect/mapStateToProps.js"() {
    init_wrapMapToProps();
    mapStateToProps_default = [whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing];
  }
});

// node_modules/react-redux/es/connect/mergeProps.js
function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return _extends({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName, pure = _ref.pure, areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);
      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps))
          mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (true)
          verifyPlainObject(mergedProps, displayName, "mergeProps");
      }
      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === "function" ? wrapMergePropsFunc(mergeProps) : void 0;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function() {
    return defaultMergeProps;
  } : void 0;
}
var mergeProps_default;
var init_mergeProps = __esm({
  "node_modules/react-redux/es/connect/mergeProps.js"() {
    init_extends();
    init_verifyPlainObject();
    mergeProps_default = [whenMergePropsIsFunction, whenMergePropsIsOmitted];
  }
});

// node_modules/react-redux/es/connect/verifySubselectors.js
function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === "mapStateToProps" || methodName === "mapDispatchToProps") {
    if (!Object.prototype.hasOwnProperty.call(selector, "dependsOnOwnProps")) {
      warning2("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}
function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, "mapStateToProps", displayName);
  verify(mapDispatchToProps, "mapDispatchToProps", displayName);
  verify(mergeProps, "mergeProps", displayName);
}
var init_verifySubselectors = __esm({
  "node_modules/react-redux/es/connect/verifySubselectors.js"() {
    init_warning();
  }
});

// node_modules/react-redux/es/connect/selectorFactory.js
function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual, areOwnPropsEqual = _ref.areOwnPropsEqual, areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;
  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }
  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps)
      dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps)
      stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps)
      dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged)
      mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }
  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state, nextOwnProps, ownProps);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged)
      return handleNewPropsAndNewState();
    if (propsChanged)
      return handleNewProps();
    if (stateChanged)
      return handleNewState();
    return mergedProps;
  }
  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
}
function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps, initMapDispatchToProps = _ref2.initMapDispatchToProps, initMergeProps = _ref2.initMergeProps, options = _objectWithoutPropertiesLoose(_ref2, _excluded69);
  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);
  if (true) {
    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }
  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
var _excluded69;
var init_selectorFactory = __esm({
  "node_modules/react-redux/es/connect/selectorFactory.js"() {
    init_objectWithoutPropertiesLoose();
    init_verifySubselectors();
    _excluded69 = ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"];
  }
});

// node_modules/react-redux/es/connect/connect.js
function match(arg, factories, name10) {
  for (var i2 = factories.length - 1; i2 >= 0; i2--) {
    var result = factories[i2](arg);
    if (result)
      return result;
  }
  return function(dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name10 + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}
function strictEqual(a2, b2) {
  return a2 === b2;
}
function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp, _ref$connectHOC = _ref.connectHOC, connectHOC = _ref$connectHOC === void 0 ? connectAdvanced : _ref$connectHOC, _ref$mapStateToPropsF = _ref.mapStateToPropsFactories, mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? mapStateToProps_default : _ref$mapStateToPropsF, _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories, mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? mapDispatchToProps_default : _ref$mapDispatchToPro, _ref$mergePropsFactor = _ref.mergePropsFactories, mergePropsFactories = _ref$mergePropsFactor === void 0 ? mergeProps_default : _ref$mergePropsFactor, _ref$selectorFactory = _ref.selectorFactory, selectorFactory = _ref$selectorFactory === void 0 ? finalPropsSelectorFactory : _ref$selectorFactory;
  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }
    var _ref3 = _ref2, _ref3$pure = _ref3.pure, pure = _ref3$pure === void 0 ? true : _ref3$pure, _ref3$areStatesEqual = _ref3.areStatesEqual, areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual, _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual, areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? shallowEqual : _ref3$areOwnPropsEqua, _ref3$areStatePropsEq = _ref3.areStatePropsEqual, areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? shallowEqual : _ref3$areStatePropsEq, _ref3$areMergedPropsE = _ref3.areMergedPropsEqual, areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? shallowEqual : _ref3$areMergedPropsE, extraOptions = _objectWithoutPropertiesLoose(_ref3, _excluded70);
    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, "mapStateToProps");
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, "mapDispatchToProps");
    var initMergeProps = match(mergeProps, mergePropsFactories, "mergeProps");
    return connectHOC(selectorFactory, _extends({
      // used in error messages
      methodName: "connect",
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name10) {
        return "Connect(" + name10 + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps,
      initMapDispatchToProps,
      initMergeProps,
      pure,
      areStatesEqual,
      areOwnPropsEqual,
      areStatePropsEqual,
      areMergedPropsEqual
    }, extraOptions));
  };
}
var _excluded70, connect_default;
var init_connect = __esm({
  "node_modules/react-redux/es/connect/connect.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    init_connectAdvanced();
    init_shallowEqual();
    init_mapDispatchToProps();
    init_mapStateToProps();
    init_mergeProps();
    init_selectorFactory();
    _excluded70 = ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"];
    connect_default = createConnect();
  }
});

// node_modules/react-redux/es/hooks/useReduxContext.js
function useReduxContext() {
  var contextValue = (0, import_react5.useContext)(ReactReduxContext);
  if (!contextValue) {
    throw new Error("could not find react-redux context value; please ensure the component is wrapped in a <Provider>");
  }
  return contextValue;
}
var import_react5;
var init_useReduxContext = __esm({
  "node_modules/react-redux/es/hooks/useReduxContext.js"() {
    import_react5 = __toESM(require_react());
    init_Context();
  }
});

// node_modules/react-redux/es/hooks/useStore.js
function createStoreHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react6.useContext)(context);
  };
  return function useStore3() {
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store;
    return store;
  };
}
var import_react6, useStore;
var init_useStore = __esm({
  "node_modules/react-redux/es/hooks/useStore.js"() {
    import_react6 = __toESM(require_react());
    init_Context();
    init_useReduxContext();
    useStore = createStoreHook();
  }
});

// node_modules/react-redux/es/hooks/useDispatch.js
function createDispatchHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useStore3 = context === ReactReduxContext ? useStore : createStoreHook(context);
  return function useDispatch3() {
    var store = useStore3();
    return store.dispatch;
  };
}
var useDispatch;
var init_useDispatch = __esm({
  "node_modules/react-redux/es/hooks/useDispatch.js"() {
    init_Context();
    init_useStore();
    useDispatch = createDispatchHook();
  }
});

// node_modules/react-redux/es/hooks/useSelector.js
function useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {
  var _useReducer = (0, import_react7.useReducer)(function(s2) {
    return s2 + 1;
  }, 0), forceRender = _useReducer[1];
  var subscription = (0, import_react7.useMemo)(function() {
    return createSubscription2(store, contextSub);
  }, [store, contextSub]);
  var latestSubscriptionCallbackError = (0, import_react7.useRef)();
  var latestSelector = (0, import_react7.useRef)();
  var latestStoreState = (0, import_react7.useRef)();
  var latestSelectedState = (0, import_react7.useRef)();
  var storeState = store.getState();
  var selectedState;
  try {
    if (selector !== latestSelector.current || storeState !== latestStoreState.current || latestSubscriptionCallbackError.current) {
      var newSelectedState = selector(storeState);
      if (latestSelectedState.current === void 0 || !equalityFn(newSelectedState, latestSelectedState.current)) {
        selectedState = newSelectedState;
      } else {
        selectedState = latestSelectedState.current;
      }
    } else {
      selectedState = latestSelectedState.current;
    }
  } catch (err) {
    if (latestSubscriptionCallbackError.current) {
      err.message += "\nThe error may be correlated with this previous error:\n" + latestSubscriptionCallbackError.current.stack + "\n\n";
    }
    throw err;
  }
  useIsomorphicLayoutEffect(function() {
    latestSelector.current = selector;
    latestStoreState.current = storeState;
    latestSelectedState.current = selectedState;
    latestSubscriptionCallbackError.current = void 0;
  });
  useIsomorphicLayoutEffect(function() {
    function checkForUpdates() {
      try {
        var newStoreState = store.getState();
        if (newStoreState === latestStoreState.current) {
          return;
        }
        var _newSelectedState = latestSelector.current(newStoreState);
        if (equalityFn(_newSelectedState, latestSelectedState.current)) {
          return;
        }
        latestSelectedState.current = _newSelectedState;
        latestStoreState.current = newStoreState;
      } catch (err) {
        latestSubscriptionCallbackError.current = err;
      }
      forceRender();
    }
    subscription.onStateChange = checkForUpdates;
    subscription.trySubscribe();
    checkForUpdates();
    return function() {
      return subscription.tryUnsubscribe();
    };
  }, [store, subscription]);
  return selectedState;
}
function createSelectorHook(context) {
  if (context === void 0) {
    context = ReactReduxContext;
  }
  var useReduxContext2 = context === ReactReduxContext ? useReduxContext : function() {
    return (0, import_react7.useContext)(context);
  };
  return function useSelector3(selector, equalityFn) {
    if (equalityFn === void 0) {
      equalityFn = refEquality;
    }
    if (true) {
      if (!selector) {
        throw new Error("You must pass a selector to useSelector");
      }
      if (typeof selector !== "function") {
        throw new Error("You must pass a function as a selector to useSelector");
      }
      if (typeof equalityFn !== "function") {
        throw new Error("You must pass a function as an equality function to useSelector");
      }
    }
    var _useReduxContext = useReduxContext2(), store = _useReduxContext.store, contextSub = _useReduxContext.subscription;
    var selectedState = useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);
    (0, import_react7.useDebugValue)(selectedState);
    return selectedState;
  };
}
var import_react7, refEquality, useSelector;
var init_useSelector = __esm({
  "node_modules/react-redux/es/hooks/useSelector.js"() {
    import_react7 = __toESM(require_react());
    init_useReduxContext();
    init_Subscription2();
    init_useIsomorphicLayoutEffect();
    init_Context();
    refEquality = function refEquality2(a2, b2) {
      return a2 === b2;
    };
    useSelector = createSelectorHook();
  }
});

// node_modules/react-redux/es/exports.js
var init_exports = __esm({
  "node_modules/react-redux/es/exports.js"() {
    init_Provider();
    init_connectAdvanced();
    init_Context();
    init_connect();
    init_useDispatch();
    init_useSelector();
    init_useStore();
    init_shallowEqual();
  }
});

// node_modules/react-redux/es/utils/reactBatchedUpdates.js
var import_react_dom;
var init_reactBatchedUpdates = __esm({
  "node_modules/react-redux/es/utils/reactBatchedUpdates.js"() {
    import_react_dom = __toESM(require_react_dom());
  }
});

// node_modules/react-redux/es/index.js
var init_es3 = __esm({
  "node_modules/react-redux/es/index.js"() {
    init_exports();
    init_reactBatchedUpdates();
    init_batch();
    setBatch(import_react_dom.unstable_batchedUpdates);
  }
});

// node_modules/@frontegg/react-hooks/FronteggStoreContext/index.js
var import_react8, FronteggStoreContext, useSelector2, useDispatch2, useStore2, Provider2;
var init_FronteggStoreContext = __esm({
  "node_modules/@frontegg/react-hooks/FronteggStoreContext/index.js"() {
    import_react8 = __toESM(require_react());
    init_es3();
    init_es3();
    FronteggStoreContext = import_react8.default.createContext(null);
    if (true) {
      FronteggStoreContext.displayName = "FronteggStoreContext";
    }
    useSelector2 = createSelectorHook(FronteggStoreContext);
    useDispatch2 = createDispatchHook(FronteggStoreContext);
    useStore2 = createStoreHook(FronteggStoreContext);
    Provider2 = Provider_default;
  }
});

// node_modules/@frontegg/react-hooks/common/CustomComponentHolder.js
var import_react9, import_react_dom2, import_react_is2, import_jsx_runtime, import_jsx_runtime2, CustomComponentHolder, overrideValue, Registerer, CustomComponentRegister;
var init_CustomComponentHolder = __esm({
  "node_modules/@frontegg/react-hooks/common/CustomComponentHolder.js"() {
    import_react9 = __toESM(require_react());
    import_react_dom2 = __toESM(require_react_dom());
    import_react_is2 = __toESM(require_react_is3());
    import_jsx_runtime = __toESM(require_jsx_runtime());
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    CustomComponentHolder = class _CustomComponentHolder {
      static set(name10, element) {
        _CustomComponentHolder.components[name10] = element;
      }
      static get(name10) {
        return _CustomComponentHolder.components[name10];
      }
    };
    CustomComponentHolder.components = {};
    overrideValue = (object3, key, value) => {
      const keys = key.split(".");
      let iterator3 = object3;
      while (keys.length > 1) {
        iterator3 = iterator3[keys.shift()];
      }
      iterator3[keys.shift()] = value;
    };
    Registerer = (props) => {
      var _app$loginBoxContaine;
      const {
        app,
        themeKey
      } = props;
      const value = CustomComponentHolder.get(themeKey);
      const [mounted, setMounted] = (0, import_react9.useState)(false);
      const [componentProps, setComponentProps] = (0, import_react9.useState)({});
      const mount = (0, import_react9.useCallback)((props2 = {}) => {
        setMounted(true);
        setComponentProps(props2);
      }, []);
      const unmount = (0, import_react9.useCallback)(() => {
        setMounted(false);
      }, []);
      overrideValue(app.options.themeOptions, themeKey, {
        type: "slot",
        themeKey,
        mount,
        unmount
      });
      let element = (_app$loginBoxContaine = app.loginBoxContainer) == null ? void 0 : _app$loginBoxContaine.querySelector(`[slot="${themeKey}"]`);
      if (!element && typeof document !== void 0) {
        var _app$loginBoxContaine2;
        element = document.createElement("div");
        element.slot = themeKey;
        (_app$loginBoxContaine2 = app.loginBoxContainer) == null ? void 0 : _app$loginBoxContaine2.appendChild(element);
      }
      const component = value ? import_react9.default.createElement(value, componentProps) : null;
      return element && mounted ? (0, import_jsx_runtime.jsx)(import_react9.default.Fragment, {
        children: import_react_dom2.default.createPortal(component, element)
      }) : (0, import_jsx_runtime.jsx)(import_jsx_runtime2.Fragment, {});
    };
    CustomComponentRegister = ({
      app,
      themeOptions
    }) => {
      const keys = (0, import_react9.useMemo)(() => {
        if (!themeOptions || !themeOptions.loginBox) {
          return [];
        }
        const loop = (key, obj, keyPath) => {
          if (typeof obj !== "object" && typeof obj !== "function") {
            return [];
          }
          if (typeof obj === "function") {
            try {
              const reactElement = import_react9.default.createElement(obj, {
                title: "title"
              });
              if ((0, import_react9.isValidElement)(reactElement) || (0, import_react_is2.isElement)(reactElement)) {
                const generatedKey = `${keyPath}.${key}`;
                CustomComponentHolder.set(generatedKey, obj);
                return [generatedKey];
              }
            } catch (e2) {
            }
          }
          if ((0, import_react9.isValidElement)(obj) || (0, import_react_is2.isElement)(obj) || obj === null) {
            const generatedKey = `${keyPath}.${key}`;
            CustomComponentHolder.set(generatedKey, obj);
            return [generatedKey];
          } else {
            const elements = [];
            Object.keys(obj).forEach((k2) => {
              elements.push(...loop(k2, obj[k2], keyPath === "" ? key : `${keyPath}.${key}`));
            });
            return elements;
          }
        };
        return loop("loginBox", themeOptions.loginBox, "");
      }, []);
      return (0, import_jsx_runtime.jsx)(import_jsx_runtime2.Fragment, {
        children: keys.map((key) => (0, import_jsx_runtime.jsx)(Registerer, {
          app,
          themeKey: key
        }, key))
      });
    };
  }
});

// node_modules/@frontegg/react-hooks/common/index.js
var import_react10, _excluded71, ShadowDomContext, useShadowDom, useRootState;
var init_common = __esm({
  "node_modules/@frontegg/react-hooks/common/index.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    import_react10 = __toESM(require_react());
    init_FronteggStoreContext();
    init_es3();
    init_CustomComponentHolder();
    _excluded71 = ["urlStrategy", "onRedirectTo", "renderByRoute", "customLoader", "customStyles", "contextOptions"];
    ShadowDomContext = (0, import_react10.createContext)({});
    useShadowDom = () => {
      const context = (0, import_react10.useContext)(ShadowDomContext);
      const {
        urlStrategy = "path",
        onRedirectTo = urlStrategy === "path" ? (path) => window.history.pushState(null, "", path) : (path) => window.history.pushState(null, "", `#${path}`),
        renderByRoute = false,
        customLoader = false,
        customStyles,
        contextOptions
      } = context, rest = _objectWithoutPropertiesLoose(context, _excluded71);
      return _extends({
        isShadowDom: true,
        onRedirectTo,
        renderByRoute,
        customLoader,
        customStyles,
        urlStrategy,
        contextOptions: _extends({
          requestCredentials: "include"
        }, contextOptions)
      }, rest);
    };
    useRootState = () => {
      return useSelector2((state) => state.root, shallowEqual);
    };
  }
});

// node_modules/@frontegg/react-hooks/audits/hooks.js
function useAuditsState(stateMapper = defaultMapper.state) {
  return useSelector2((state) => stateMapper(state[auditsStoreName]), shallowEqual);
}
var import_react11, defaultMapper, useAuditsActions, sliceReducerActionsBy, stateHookGenerator, reducerActionsGenerator;
var init_hooks = __esm({
  "node_modules/@frontegg/react-hooks/audits/hooks.js"() {
    init_extends();
    import_react11 = __toESM(require_react());
    init_redux_store();
    init_es3();
    init_FronteggStoreContext();
    init_redux_store();
    defaultMapper = {
      state: (state) => state,
      actions: (actions49) => actions49
    };
    useAuditsActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react11.useMemo)(() => bindActionCreators(actions35, dispatch), [actions35]);
    };
    sliceReducerActionsBy = (reducer16) => {
      const reducerKeys = Object.keys(reducer16);
      const reducerActions2 = reducerKeys.map((key) => ({
        [key]: actions35[key]
      }));
      return reducerActions2.reduce((p2, n2) => _extends({}, p2, n2), {});
    };
    stateHookGenerator = (stateMapper, subState) => {
      return useSelector2((state) => {
        var _stateMapper;
        return (_stateMapper = stateMapper == null ? void 0 : stateMapper(state[auditsStoreName][subState])) != null ? _stateMapper : state[auditsStoreName][subState];
      }, shallowEqual);
    };
    reducerActionsGenerator = (actions49, reducers42) => {
      const dispatch = useDispatch2();
      return (0, import_react11.useMemo)(() => bindActionCreators(_extends({}, actions49, sliceReducerActionsBy(reducers42)), dispatch), [dispatch]);
    };
  }
});

// node_modules/@frontegg/react-hooks/audits/auditLogs.js
function useAuditLogsState(stateMapper = defaultMapper2) {
  return stateHookGenerator(stateMapper, "auditLogsState");
}
var defaultMapper2, useAuditLogsActions;
var init_auditLogs2 = __esm({
  "node_modules/@frontegg/react-hooks/audits/auditLogs.js"() {
    init_hooks();
    init_redux_store();
    defaultMapper2 = (state) => state;
    useAuditLogsActions = () => reducerActionsGenerator(actions33, reducers32);
  }
});

// node_modules/@frontegg/react-hooks/audits/auditsMetadata.js
function useAuditsMetadataState(stateMapper = defaultMapper3) {
  return stateHookGenerator(stateMapper, "auditsMetadataState");
}
var defaultMapper3, useAuditsMetadataActions;
var init_auditsMetadata = __esm({
  "node_modules/@frontegg/react-hooks/audits/auditsMetadata.js"() {
    init_redux_store();
    init_hooks();
    defaultMapper3 = (state) => state;
    useAuditsMetadataActions = () => reducerActionsGenerator(actions34, reducers33);
  }
});

// node_modules/@frontegg/react-hooks/audits/index.js
var init_audits3 = __esm({
  "node_modules/@frontegg/react-hooks/audits/index.js"() {
    init_hooks();
    init_auditLogs2();
    init_auditsMetadata();
  }
});

// node_modules/@frontegg/react-hooks/auth/hooks.js
function useAuth(stateMapper = defaultMapper4.state) {
  return useSelector2((state) => stateMapper(state[authStoreName]), shallowEqual);
}
var import_react12, defaultMapper4, useLoginWithRedirect, useLoginWithRedirectV2, useAuthActions, useOnRedirectTo, useAuthRoutes, useIsAuthenticated, useAuthUser, useAuthUserOrNull, sliceReducerActionsBy2, stateHookGenerator2, reducerActionsGenerator2;
var init_hooks2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/hooks.js"() {
    init_extends();
    import_react12 = __toESM(require_react());
    init_redux_store();
    init_redux_store();
    init_es3();
    init_FronteggStoreContext();
    init_rest_api();
    init_common();
    defaultMapper4 = {
      state: (state) => state,
      actions: (actions49) => actions49
    };
    useLoginWithRedirect = () => {
      const dispatch = useDispatch2();
      return (0, import_react12.useMemo)(() => bindActionCreators(actions30.requestHostedLoginAuthorize, dispatch), [actions30.requestHostedLoginAuthorize]);
    };
    useLoginWithRedirectV2 = () => {
      const dispatch = useDispatch2();
      return (0, import_react12.useMemo)(() => bindActionCreators(actions30.requestHostedLoginAuthorizeV2, dispatch), [actions30.requestHostedLoginAuthorizeV2]);
    };
    useAuthActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react12.useMemo)(() => bindActionCreators(actions30, dispatch), [actions30]);
    };
    useOnRedirectTo = () => {
      var _context$onRedirectTo;
      const context = (0, import_react12.useContext)(ShadowDomContext);
      return (_context$onRedirectTo = context == null ? void 0 : context.onRedirectTo) != null ? _context$onRedirectTo : ContextHolder.onRedirectTo;
    };
    useAuthRoutes = () => useAuth((state) => _extends({}, state.routes));
    useIsAuthenticated = () => useSelector2(({
      [authStoreName]: {
        isAuthenticated
      }
    }) => isAuthenticated, shallowEqual);
    useAuthUser = () => {
      const {
        loginUrl,
        customLoginUrl
      } = useAuthRoutes();
      const onRedirectTo = useOnRedirectTo();
      const user = useAuthUserOrNull();
      const isSSR = typeof window === "undefined";
      const noUser = {};
      if (user == null && !isSSR) {
        onRedirectTo(customLoginUrl != null ? customLoginUrl : loginUrl, {
          refresh: true
        });
        return noUser;
      }
      return user || noUser;
    };
    useAuthUserOrNull = () => {
      const {
        user
      } = useSelector2(({
        [authStoreName]: {
          user: user2
        }
      }) => ({
        user: user2
      }), shallowEqual);
      return user || null;
    };
    sliceReducerActionsBy2 = (reducer16) => {
      const reducerKeys = Object.keys(reducer16);
      const reducerActions2 = reducerKeys.map((key) => ({
        [key]: actions30[key]
      }));
      return reducerActions2.reduce((p2, n2) => _extends({}, p2, n2), {});
    };
    stateHookGenerator2 = (stateMapper, subState, enableMapperFalsyReturnValue = false) => {
      return useSelector2((state) => {
        const mapperValue = stateMapper == null ? void 0 : stateMapper(state[authStoreName][subState]);
        if (enableMapperFalsyReturnValue && stateMapper) {
          return mapperValue;
        }
        return mapperValue != null ? mapperValue : state[authStoreName][subState];
      }, shallowEqual);
    };
    reducerActionsGenerator2 = (actions49, reducers42) => {
      const dispatch = useDispatch2();
      return (0, import_react12.useMemo)(() => bindActionCreators(_extends({}, actions49, sliceReducerActionsBy2(reducers42)), dispatch), [dispatch]);
    };
  }
});

// node_modules/@frontegg/react-hooks/auth/acceptInvitation.js
function useAcceptInvitationState(stateMapper = defaultMapper5) {
  return stateHookGenerator2(stateMapper, "acceptInvitationState");
}
var defaultMapper5, useAcceptInvitationActions;
var init_acceptInvitation2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/acceptInvitation.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper5 = (state) => state;
    useAcceptInvitationActions = () => reducerActionsGenerator2(actions3, reducers3);
  }
});

// node_modules/@frontegg/react-hooks/auth/activateAccount.js
function useActivateAccountState(stateMapper = defaultMapper6) {
  return stateHookGenerator2(stateMapper, "activateState");
}
var defaultMapper6, useActivateAccountActions;
var init_activateAccount2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/activateAccount.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper6 = (state) => state;
    useActivateAccountActions = () => reducerActionsGenerator2(actions2, reducers2);
  }
});

// node_modules/@frontegg/react-hooks/auth/apiTokens.js
function useApiTokensState(stateMapper = defaultMapper7) {
  return stateHookGenerator2(stateMapper, "apiTokensState");
}
var defaultMapper7, useApiTokensActions;
var init_apiTokens2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/apiTokens.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper7 = (state) => state;
    useApiTokensActions = () => reducerActionsGenerator2(actions12, reducers12);
  }
});

// node_modules/@frontegg/react-hooks/auth/forgotPassword.js
function useForgotPasswordState(stateMapper = defaultMapper8) {
  return stateHookGenerator2(stateMapper, "forgotPasswordState");
}
var defaultMapper8, useForgotPasswordActions;
var init_forgotPassword = __esm({
  "node_modules/@frontegg/react-hooks/auth/forgotPassword.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper8 = (state) => state;
    useForgotPasswordActions = () => reducerActionsGenerator2(actions4, reducers4);
  }
});

// node_modules/@frontegg/react-hooks/auth/resetPhoneNumber.js
function useResetPhoneNumberState(stateMapper = defaultMapper9) {
  return stateHookGenerator2(stateMapper, "resetPhoneNumberState");
}
var defaultMapper9, useResetPhoneNumberActions;
var init_resetPhoneNumber2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/resetPhoneNumber.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper9 = (state) => state;
    useResetPhoneNumberActions = () => reducerActionsGenerator2(actions5, reducers5);
  }
});

// node_modules/@frontegg/react-hooks/auth/login.js
function useLoginState(stateMapper = defaultMapper10) {
  return stateHookGenerator2(stateMapper, "loginState");
}
var defaultMapper10, useLoginActions;
var init_login2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/login.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper10 = (state) => state;
    useLoginActions = () => reducerActionsGenerator2(actions, reducers);
  }
});

// node_modules/@frontegg/react-hooks/auth/stepUp/stepUp.js
function useStepUpState(stateMapper = defaultMapper11) {
  return stateHookGenerator2(stateMapper, "stepUpState");
}
var import_react13, defaultMapper11, useStepUpActions, getMaxAgeFromQueryParam, useStepUp, useIsSteppedUp;
var init_stepUp2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/stepUp/stepUp.js"() {
    init_redux_store();
    init_hooks2();
    import_react13 = __toESM(require_react());
    defaultMapper11 = (state) => state;
    useStepUpActions = () => reducerActionsGenerator2(actions28, reducers29);
    getMaxAgeFromQueryParam = () => {
      const str = getSearchParam(STEP_UP_MAX_AGE_PARAM_NAME);
      return str === void 0 ? void 0 : +str;
    };
    useStepUp = () => {
      const {
        stepUpUrl
      } = useAuthRoutes();
      const {
        hostedLoginBox
      } = useAuth();
      const {
        stepUpHostedLogin: stepUpHostedLogin2
      } = useStepUpActions();
      const onRedirectTo = useOnRedirectTo();
      return (0, import_react13.useCallback)((options) => {
        if (hostedLoginBox) {
          stepUpHostedLogin2(options || {});
          return;
        }
        redirectByStepUpUrl(stepUpUrl, onRedirectTo, options == null ? void 0 : options.maxAge);
      }, [stepUpUrl, onRedirectTo, stepUpHostedLogin2, hostedLoginBox]);
    };
    useIsSteppedUp = (options = {}) => {
      const user = useAuthUserOrNull();
      return isSteppedUp(user, options);
    };
  }
});

// node_modules/@frontegg/react-hooks/auth/stepUp/interfaces.js
var init_interfaces71 = __esm({
  "node_modules/@frontegg/react-hooks/auth/stepUp/interfaces.js"() {
  }
});

// node_modules/@frontegg/react-hooks/auth/stepUp/index.js
var init_stepUp3 = __esm({
  "node_modules/@frontegg/react-hooks/auth/stepUp/index.js"() {
    init_stepUp2();
    init_interfaces71();
  }
});

// node_modules/@frontegg/react-hooks/auth/mfa.js
function useMfaState(stateMapper = defaultMapper12) {
  return stateHookGenerator2(stateMapper, "mfaState");
}
var defaultMapper12, useMfaActions;
var init_mfa = __esm({
  "node_modules/@frontegg/react-hooks/auth/mfa.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper12 = (state) => state;
    useMfaActions = () => reducerActionsGenerator2(actions8, reducers8);
  }
});

// node_modules/@frontegg/react-hooks/auth/profile.js
function useProfileState(stateMapper = defaultMapper13) {
  return stateHookGenerator2(stateMapper, "profileState");
}
var import_react14, reloadProfileIfNeeded, defaultMapper13, useProfileActions;
var init_profile2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/profile.js"() {
    import_react14 = __toESM(require_react());
    init_redux_store();
    init_hooks2();
    reloadProfileIfNeeded = () => {
      const {
        loading
      } = useProfileState();
      const {
        loadProfile: loadProfile2
      } = useProfileActions();
      (0, import_react14.useEffect)(() => {
        !loading && loadProfile2();
      }, []);
    };
    defaultMapper13 = (state) => state;
    useProfileActions = () => reducerActionsGenerator2(actions7, reducers7);
  }
});

// node_modules/@frontegg/react-hooks/auth/signup.js
function useSignUpState(stateMapper = defaultMapper14) {
  return stateHookGenerator2(stateMapper, "signUpState");
}
var defaultMapper14, useSignUpActions;
var init_signup2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/signup.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper14 = (state) => state;
    useSignUpActions = () => reducerActionsGenerator2(actions11, reducers11);
  }
});

// node_modules/@frontegg/react-hooks/auth/socialLogin.js
function useSocialLoginState(stateMapper = defaultMapper15) {
  return stateHookGenerator2(stateMapper, "socialLoginState");
}
var defaultMapper15, useSocialLoginActions;
var init_socialLogin = __esm({
  "node_modules/@frontegg/react-hooks/auth/socialLogin.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper15 = (state) => state;
    useSocialLoginActions = () => reducerActionsGenerator2(actions10, reducers10);
  }
});

// node_modules/@frontegg/react-hooks/auth/team.js
function useAuthTeamState(stateMapper = defaultMapper16) {
  return stateHookGenerator2(stateMapper, "teamState");
}
var defaultMapper16, useAuthTeamActions;
var init_team = __esm({
  "node_modules/@frontegg/react-hooks/auth/team.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper16 = (state) => state;
    useAuthTeamActions = () => reducerActionsGenerator2(actions9, reducers9);
  }
});

// node_modules/@frontegg/react-hooks/auth/sso.js
function useSSOState(stateMapper = defaultMapper17) {
  return stateHookGenerator2(stateMapper, "ssoState");
}
var defaultMapper17, useSSOActions;
var init_sso2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/sso.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper17 = (state) => state;
    useSSOActions = () => reducerActionsGenerator2(actions6, reducers6);
  }
});

// node_modules/@frontegg/react-hooks/auth/security/securityPolicy.js
function useSecurityPolicyState(stateMapper = defaultMapper18) {
  return stateHookGenerator2(stateMapper, "securityPolicyState");
}
var import_react15, defaultMapper18, useSecurityPolicyActions, usePublicPolicySettings, usePublicAuthStrategiesPolicySettings;
var init_securityPolicy = __esm({
  "node_modules/@frontegg/react-hooks/auth/security/securityPolicy.js"() {
    init_redux_store();
    init_hooks2();
    import_react15 = __toESM(require_react());
    defaultMapper18 = (state) => state;
    useSecurityPolicyActions = () => reducerActionsGenerator2(actions13, reducers13);
    usePublicPolicySettings = (loadOnMount = false) => {
      const {
        loading,
        policy,
        saving,
        error
      } = useSecurityPolicyState((state) => state.publicPolicy);
      const {
        loadPublicSecurityPolicy: loadPublicSecurityPolicy2
      } = useSecurityPolicyActions();
      (0, import_react15.useEffect)(() => {
        (loadOnMount || !policy) && loadPublicSecurityPolicy2();
      }, [loadOnMount, loadPublicSecurityPolicy2]);
      return {
        loading,
        saving,
        error,
        policy
      };
    };
    usePublicAuthStrategiesPolicySettings = (loadOnMount = false) => {
      const {
        loading,
        policy,
        saving,
        error
      } = useSecurityPolicyState((state) => state.publicAuthStrategyPolicy);
      const {
        loadPublicAuthStrategiesPolicy: loadPublicAuthStrategiesPolicy2
      } = useSecurityPolicyActions();
      (0, import_react15.useEffect)(() => {
        (loadOnMount || !policy) && loadPublicAuthStrategiesPolicy2();
      }, [loadOnMount, loadPublicAuthStrategiesPolicy2]);
      return {
        loading,
        saving,
        error,
        policy
      };
    };
  }
});

// node_modules/@frontegg/react-hooks/auth/tenants.js
function useTenantsState(stateMapper = defaultMapper19) {
  return stateHookGenerator2(stateMapper, "tenantsState");
}
var defaultMapper19, useTenantsActions;
var init_tenants2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/tenants.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper19 = (state) => state;
    useTenantsActions = () => reducerActionsGenerator2(actions15, reducers15);
  }
});

// node_modules/@frontegg/react-hooks/auth/roles.js
function useRolesState(stateMapper = defaultMapper20) {
  return stateHookGenerator2(stateMapper, "rolesState");
}
var defaultMapper20, useRolesActions;
var init_roles3 = __esm({
  "node_modules/@frontegg/react-hooks/auth/roles.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper20 = (state) => state;
    useRolesActions = () => reducerActionsGenerator2(actions16, reducers16);
  }
});

// node_modules/@frontegg/react-hooks/auth/sessions.js
function useSessionsState(stateMapper = defaultMapper21) {
  return stateHookGenerator2(stateMapper, "sessionsState");
}
var defaultMapper21, useSessionsActions;
var init_sessions = __esm({
  "node_modules/@frontegg/react-hooks/auth/sessions.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper21 = (state) => state;
    useSessionsActions = () => reducerActionsGenerator2(actions17, reducers17);
  }
});

// node_modules/@frontegg/react-hooks/auth/security/sessionsPolicy.js
function useSessionsPolicyState(stateMapper = defaultMapper22) {
  return stateHookGenerator2(stateMapper, "sessionsPolicyState");
}
var defaultMapper22, useSessionsPolicyActions;
var init_sessionsPolicy = __esm({
  "node_modules/@frontegg/react-hooks/auth/security/sessionsPolicy.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper22 = (state) => state;
    useSessionsPolicyActions = () => reducerActionsGenerator2(actions18, reducers18);
  }
});

// node_modules/@frontegg/react-hooks/auth/security/restrictions.js
function useRestrictionsState(stateMapper = defaultMapper23) {
  return stateHookGenerator2(stateMapper, "restrictionsState");
}
var import_react16, defaultMapper23, useRestrictionsActions, useIpRestrictions, useEmailDomainRestrictions;
var init_restrictions = __esm({
  "node_modules/@frontegg/react-hooks/auth/security/restrictions.js"() {
    init_redux_store();
    import_react16 = __toESM(require_react());
    init_hooks2();
    defaultMapper23 = (state) => state;
    useRestrictionsActions = () => reducerActionsGenerator2(actions19, reducers19);
    useIpRestrictions = (loadOnMount = false) => {
      const {
        loading,
        data,
        saving,
        error,
        pagination,
        totalPages,
        userIpValid
      } = useRestrictionsState((state) => state.ipRestrictions);
      const {
        loadIpRestrictions: loadIpRestrictions2
      } = useRestrictionsActions();
      (0, import_react16.useEffect)(() => {
        (loadOnMount || !data) && loadIpRestrictions2();
      }, [loadOnMount, loadIpRestrictions2]);
      return {
        loading,
        saving,
        error,
        data,
        pagination,
        totalPages,
        userIpValid
      };
    };
    useEmailDomainRestrictions = (loadOnMount = false) => {
      const {
        loading,
        data,
        saving,
        error
      } = useRestrictionsState((state) => state.emailDomainRestrictions);
      const {
        loadEmailDomainRestrictions: loadEmailDomainRestrictions2
      } = useRestrictionsActions();
      (0, import_react16.useEffect)(() => {
        (loadOnMount || !data) && loadEmailDomainRestrictions2();
      }, [loadOnMount, loadEmailDomainRestrictions2]);
      return {
        loading,
        saving,
        error,
        data
      };
    };
  }
});

// node_modules/@frontegg/react-hooks/auth/provisioning.js
function useProvisioningState(stateMapper = defaultMapper24) {
  return stateHookGenerator2(stateMapper, "provisioningState");
}
var defaultMapper24, useProvisioningActions;
var init_provisioning2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/provisioning.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper24 = (state) => state;
    useProvisioningActions = () => reducerActionsGenerator2(actions20, reducers20);
  }
});

// node_modules/@frontegg/react-hooks/auth/impersonate.js
function useImpersonateState(stateMapper = defaultMapper25) {
  return stateHookGenerator2(stateMapper, "impersonateState");
}
var defaultMapper25, useImpersonateActions;
var init_impersonate3 = __esm({
  "node_modules/@frontegg/react-hooks/auth/impersonate.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper25 = (state) => state;
    useImpersonateActions = () => reducerActionsGenerator2(actions29, reducers30);
  }
});

// node_modules/@frontegg/react-hooks/auth/passkeys.js
function usePasskeysState(stateMapper = defaultMapper26) {
  return stateHookGenerator2(stateMapper, "passkeysState");
}
var defaultMapper26, usePasskeysActions;
var init_passkeys = __esm({
  "node_modules/@frontegg/react-hooks/auth/passkeys.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper26 = (state) => state;
    usePasskeysActions = () => reducerActionsGenerator2(actions21, reducers21);
  }
});

// node_modules/@frontegg/react-hooks/auth/groups.js
function useGroupsState(stateMapper = defaultMapper27) {
  return stateHookGenerator2(stateMapper, "groupsState");
}
function useGroupsDialogsState(stateMapper = defaultDialogsMapper) {
  return stateHookGenerator2(stateMapper, "groupsDialogsState");
}
var defaultMapper27, useGroupsActions, defaultDialogsMapper, useGroupsDialogsActions;
var init_groups3 = __esm({
  "node_modules/@frontegg/react-hooks/auth/groups.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper27 = (state) => state;
    useGroupsActions = () => reducerActionsGenerator2(actions22, reducers22);
    defaultDialogsMapper = (state) => state;
    useGroupsDialogsActions = () => reducerActionsGenerator2(actions23, reducers23);
  }
});

// node_modules/isobject/index.js
var require_isobject = __commonJS({
  "node_modules/isobject/index.js"(exports, module) {
    "use strict";
    module.exports = function isObject(val) {
      return val != null && typeof val === "object" && Array.isArray(val) === false;
    };
  }
});

// node_modules/get-value/index.js
var require_get_value = __commonJS({
  "node_modules/get-value/index.js"(exports, module) {
    var isObject = require_isobject();
    module.exports = function(target, path, options) {
      if (!isObject(options)) {
        options = { default: options };
      }
      if (!isValidObject(target)) {
        return typeof options.default !== "undefined" ? options.default : target;
      }
      if (typeof path === "number") {
        path = String(path);
      }
      const isArray = Array.isArray(path);
      const isString = typeof path === "string";
      const splitChar = options.separator || ".";
      const joinChar = options.joinChar || (typeof splitChar === "string" ? splitChar : ".");
      if (!isString && !isArray) {
        return target;
      }
      if (isString && path in target) {
        return isValid(path, target, options) ? target[path] : options.default;
      }
      let segs = isArray ? path : split(path, splitChar, options);
      let len = segs.length;
      let idx = 0;
      do {
        let prop = segs[idx];
        if (typeof prop === "number") {
          prop = String(prop);
        }
        while (prop && prop.slice(-1) === "\\") {
          prop = join2([prop.slice(0, -1), segs[++idx] || ""], joinChar, options);
        }
        if (prop in target) {
          if (!isValid(prop, target, options)) {
            return options.default;
          }
          target = target[prop];
        } else {
          let hasProp = false;
          let n2 = idx + 1;
          while (n2 < len) {
            prop = join2([prop, segs[n2++]], joinChar, options);
            if (hasProp = prop in target) {
              if (!isValid(prop, target, options)) {
                return options.default;
              }
              target = target[prop];
              idx = n2 - 1;
              break;
            }
          }
          if (!hasProp) {
            return options.default;
          }
        }
      } while (++idx < len && isValidObject(target));
      if (idx === len) {
        return target;
      }
      return options.default;
    };
    function join2(segs, joinChar, options) {
      if (typeof options.join === "function") {
        return options.join(segs);
      }
      return segs[0] + joinChar + segs[1];
    }
    function split(path, splitChar, options) {
      if (typeof options.split === "function") {
        return options.split(path);
      }
      return path.split(splitChar);
    }
    function isValid(key, target, options) {
      if (typeof options.isValid === "function") {
        return options.isValid(key, target);
      }
      return true;
    }
    function isValidObject(val) {
      return isObject(val) || Array.isArray(val) || typeof val === "function";
    }
  }
});

// node_modules/@frontegg/react-hooks/auth/customLogin.js
function useCustomLoginState(stateMapper = defaultMapper28) {
  return stateHookGenerator2(stateMapper, "customLoginState");
}
var import_get_value, import_react17, defaultMapper28, useCustomLoginActions, themeMapper, useCustomLoginTheme;
var init_customLogin = __esm({
  "node_modules/@frontegg/react-hooks/auth/customLogin.js"() {
    init_redux_store();
    init_hooks2();
    import_get_value = __toESM(require_get_value());
    import_react17 = __toESM(require_react());
    defaultMapper28 = (state) => state;
    useCustomLoginActions = () => reducerActionsGenerator2(actions24, reducers24);
    themeMapper = (state) => {
      var _state$tenantMetadata, _state$tenantMetadata2, _state$tenantMetadata3;
      return (_state$tenantMetadata = state.tenantMetadata) == null ? void 0 : (_state$tenantMetadata2 = _state$tenantMetadata.configuration) == null ? void 0 : (_state$tenantMetadata3 = _state$tenantMetadata2.themeV2) == null ? void 0 : _state$tenantMetadata3.loginBox;
    };
    useCustomLoginTheme = () => {
      const customLoginTheme = useCustomLoginState(themeMapper);
      const getCustomLoginThemeValue = (0, import_react17.useCallback)((path) => {
        return path && customLoginTheme ? (0, import_get_value.default)(customLoginTheme, path) : customLoginTheme;
      }, [customLoginTheme]);
      return {
        customLoginTheme,
        getCustomLoginThemeValue
      };
    };
  }
});

// node_modules/@frontegg/react-hooks/auth/MSP/allAccounts.js
function useAllAccountsState(stateMapper = defaultMapper29) {
  return stateHookGenerator2(stateMapper, "allAccountsState");
}
function useAllAccountsDialogsState(stateMapper = defaultDialogsMapper2) {
  return stateHookGenerator2(stateMapper, "allAccountsDialogsState");
}
var defaultMapper29, useAllAccountsActions, defaultDialogsMapper2, useAllAccountsDialogsActions;
var init_allAccounts2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/MSP/allAccounts.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper29 = (state) => state;
    useAllAccountsActions = () => reducerActionsGenerator2(actions25, reducers25);
    defaultDialogsMapper2 = (state) => state;
    useAllAccountsDialogsActions = () => reducerActionsGenerator2({}, reducers26);
  }
});

// node_modules/@frontegg/react-hooks/flags/useFeatureFlags.js
var useFeatureFlags, useFeatureFlagsChecker;
var init_useFeatureFlags = __esm({
  "node_modules/@frontegg/react-hooks/flags/useFeatureFlags.js"() {
    init_rest_api();
    init_common();
    useFeatureFlags = (flags) => {
      const {
        injector
      } = useShadowDom();
      return FeatureFlags.getFeatureFlags(flags, injector.name);
    };
    useFeatureFlagsChecker = () => {
      const {
        injector
      } = useShadowDom();
      return (flags) => {
        return FeatureFlags.getFeatureFlags(flags, injector.name);
      };
    };
  }
});

// node_modules/@frontegg/react-hooks/flags/index.js
var init_flags = __esm({
  "node_modules/@frontegg/react-hooks/flags/index.js"() {
    init_useFeatureFlags();
  }
});

// node_modules/@frontegg/react-hooks/auth/entitlements.js
var import_react18, useEntitlementsState, useUserState, useEntitlementsQueryData, useFeatureEntitlements, usePermissionEntitlements, useEntitlements, useEntitlementsActions, useEntitlementsOptions;
var init_entitlements2 = __esm({
  "node_modules/@frontegg/react-hooks/auth/entitlements.js"() {
    init_redux_store();
    init_rest_api();
    init_hooks2();
    import_react18 = __toESM(require_react());
    init_common();
    init_flags();
    useEntitlementsState = () => useAuth(({
      user
    }) => user == null ? void 0 : user.entitlements);
    useUserState = () => useAuth(({
      user
    }) => user);
    useEntitlementsQueryData = (customAttributes) => {
      const user = useUserState();
      const entitlements = useEntitlementsState();
      const {
        appName
      } = useRootState();
      const [useEntitlementsV2] = FeatureFlags.getFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF], appName);
      const attributes = {
        custom: customAttributes,
        jwt: user
      };
      return {
        entitlements,
        attributes,
        isV2: useEntitlementsV2
      };
    };
    useFeatureEntitlements = (key, customAttributes) => {
      const {
        entitlements,
        attributes,
        isV2
      } = useEntitlementsQueryData(customAttributes);
      return getFeatureEntitlements(entitlements, key, attributes, isV2);
    };
    usePermissionEntitlements = (key, customAttributes) => {
      const {
        entitlements,
        attributes,
        isV2
      } = useEntitlementsQueryData(customAttributes);
      return getPermissionEntitlements(entitlements, key, attributes, isV2);
    };
    useEntitlements = (options, customAttributes) => {
      const {
        entitlements,
        attributes,
        isV2
      } = useEntitlementsQueryData(customAttributes);
      return getEntitlements(entitlements, options, attributes, isV2);
    };
    useEntitlementsActions = () => {
      const user = useUserState();
      const entitlements = useEntitlementsState();
      const {
        appName
      } = useRootState();
      const [useEntitlementsV2] = FeatureFlags.getFeatureFlags([USE_ENTITLEMENTS_V2_ENDPOINT_FF], appName);
      return (0, import_react18.useMemo)(() => ({
        isEntitledTo: (options, customAttributes) => {
          const attributes = {
            custom: customAttributes,
            jwt: user
          };
          return getEntitlements(entitlements, options, attributes, useEntitlementsV2);
        }
      }), [user, entitlements, useEntitlementsV2]);
    };
    useEntitlementsOptions = () => {
      var _entitlementsOptions$;
      const {
        entitlementsOptions
      } = useShadowDom();
      const isEntitlementsEnabled = (_entitlementsOptions$ = entitlementsOptions == null ? void 0 : entitlementsOptions.enabled) != null ? _entitlementsOptions$ : false;
      const {
        isEntitledTo
      } = useEntitlementsActions();
      const [verifyIsEntitledFF] = useFeatureFlags(["admin-portal-use-is-entitled"]);
      return {
        isEntitlementsEnabled,
        isEntitledTo,
        verifyIsEntitledFF
      };
    };
  }
});

// node_modules/@frontegg/react-hooks/auth/security/securityCenter.js
function useSecurityCenterState(stateMapper = defaultMapper30) {
  return stateHookGenerator2(stateMapper, "securityCenterState");
}
var defaultMapper30, useSecurityCenterActions;
var init_securityCenter = __esm({
  "node_modules/@frontegg/react-hooks/auth/security/securityCenter.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper30 = (state) => state;
    useSecurityCenterActions = () => reducerActionsGenerator2(actions26, reducers27);
  }
});

// node_modules/@frontegg/react-hooks/auth/sms.js
function useSmsState(stateMapper = defaultMapper31) {
  return stateHookGenerator2(stateMapper, "smsState");
}
var defaultMapper31, useSmsActions;
var init_sms = __esm({
  "node_modules/@frontegg/react-hooks/auth/sms.js"() {
    init_redux_store();
    init_hooks2();
    defaultMapper31 = (state) => state;
    useSmsActions = () => reducerActionsGenerator2(actions27, reducers28);
  }
});

// node_modules/@frontegg/react-hooks/auth/index.js
var init_auth3 = __esm({
  "node_modules/@frontegg/react-hooks/auth/index.js"() {
    init_hooks2();
    init_acceptInvitation2();
    init_activateAccount2();
    init_apiTokens2();
    init_forgotPassword();
    init_resetPhoneNumber2();
    init_login2();
    init_stepUp3();
    init_mfa();
    init_profile2();
    init_signup2();
    init_socialLogin();
    init_team();
    init_sso2();
    init_securityPolicy();
    init_tenants2();
    init_roles3();
    init_sessions();
    init_sessionsPolicy();
    init_restrictions();
    init_provisioning2();
    init_impersonate3();
    init_passkeys();
    init_groups3();
    init_customLogin();
    init_allAccounts2();
    init_entitlements2();
    init_securityCenter();
    init_sms();
  }
});

// node_modules/@frontegg/react-hooks/connectivity/hooks.js
function useConnectivityState(stateMapper = defaultMapper32) {
  return useSelector2((state) => stateMapper(state[connectivityStoreName]), shallowEqual);
}
var import_react19, defaultMapper32, useConnectivityActions;
var init_hooks3 = __esm({
  "node_modules/@frontegg/react-hooks/connectivity/hooks.js"() {
    import_react19 = __toESM(require_react());
    init_es3();
    init_FronteggStoreContext();
    init_redux_store();
    defaultMapper32 = (state) => state;
    useConnectivityActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react19.useMemo)(() => bindActionCreators(actions38, dispatch), [actions38]);
    };
  }
});

// node_modules/@frontegg/react-hooks/connectivity/index.js
var init_connectivity3 = __esm({
  "node_modules/@frontegg/react-hooks/connectivity/index.js"() {
    init_hooks3();
  }
});

// node_modules/@frontegg/react-hooks/subscriptions/hooks.js
function getSubscriptionState(state) {
  return state[subscriptionsStoreName];
}
var import_react20, usePaymentProvider, usePaymentProviderActions, usePlans, usePlansActions, useCheckout, useCheckoutActions, useBillingActions, useBillingInformation, useBillingInformationActions, usePaymentMethod, usePaymentMethodActions, useInvoices, useInvoicesActions, useStripeState, useStripeActions, useSubscriptionCancellation, useSubscriptionRenewal, useSubscription, useSubscriptionActions, useVendorPublicConfig, useVendorPublicConfigActions;
var init_hooks4 = __esm({
  "node_modules/@frontegg/react-hooks/subscriptions/hooks.js"() {
    init_redux_store();
    init_FronteggStoreContext();
    init_es3();
    import_react20 = __toESM(require_react());
    usePaymentProvider = () => {
      return useSelector2((state) => getSubscriptionState(state).config, shallowEqual);
    };
    usePaymentProviderActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.config, dispatch), [dispatch]);
    };
    usePlans = () => {
      return useSelector2((state) => getSubscriptionState(state).plans, shallowEqual);
    };
    usePlansActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.plans, dispatch), [dispatch]);
    };
    useCheckout = () => {
      return useSelector2((state) => getSubscriptionState(state).checkout, shallowEqual);
    };
    useCheckoutActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.checkout, dispatch), [dispatch]);
    };
    useBillingActions = (billingKey) => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.billing[billingKey], dispatch), [billingKey, dispatch]);
    };
    useBillingInformation = () => useSelector2((state) => getSubscriptionState(state).billing.information, shallowEqual);
    useBillingInformationActions = () => useBillingActions("information");
    usePaymentMethod = () => useSelector2((state) => getSubscriptionState(state).billing.paymentMethod, shallowEqual);
    usePaymentMethodActions = () => useBillingActions("paymentMethod");
    useInvoices = () => useSelector2((state) => getSubscriptionState(state).billing.invoices, shallowEqual);
    useInvoicesActions = () => useBillingActions("invoices");
    useStripeState = () => {
      return useSelector2((state) => getSubscriptionState(state).stripe, shallowEqual);
    };
    useStripeActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.stripe, dispatch), [dispatch]);
    };
    useSubscriptionCancellation = () => {
      return useSelector2((state) => getSubscriptionState(state).billing.subscription.cancellation, shallowEqual);
    };
    useSubscriptionRenewal = () => {
      return useSelector2((state) => getSubscriptionState(state).billing.subscription.renewal, shallowEqual);
    };
    useSubscription = () => {
      return useSelector2((state) => {
        const {
          billing: {
            subscription
          }
        } = getSubscriptionState(state);
        return subscription;
      }, shallowEqual);
    };
    useSubscriptionActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.billing.subscription, dispatch), [dispatch]);
    };
    useVendorPublicConfig = () => {
      return useSelector2((state) => {
        const {
          vendorPublicConfig
        } = getSubscriptionState(state);
        return vendorPublicConfig;
      }, shallowEqual);
    };
    useVendorPublicConfigActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react20.useMemo)(() => bindActionCreators(actions48.vendorPublicConfig, dispatch), [dispatch]);
    };
  }
});

// node_modules/@frontegg/react-hooks/subscriptions/index.js
var init_subscriptions5 = __esm({
  "node_modules/@frontegg/react-hooks/subscriptions/index.js"() {
    init_hooks4();
  }
});

// node_modules/@frontegg/react-hooks/vendor/hooks.js
function useVendorState(stateMapper = defaultMapper33) {
  return useSelector2((state) => stateMapper(state[vendorStoreName]), shallowEqual);
}
var import_react21, defaultMapper33, useVendorActions;
var init_hooks5 = __esm({
  "node_modules/@frontegg/react-hooks/vendor/hooks.js"() {
    import_react21 = __toESM(require_react());
    init_redux_store();
    init_es3();
    init_FronteggStoreContext();
    defaultMapper33 = (state) => state;
    useVendorActions = () => {
      const dispatch = useDispatch2();
      return (0, import_react21.useMemo)(() => bindActionCreators(actions32, dispatch), [actions32]);
    };
  }
});

// node_modules/@frontegg/react-hooks/vendor/index.js
var init_vendor3 = __esm({
  "node_modules/@frontegg/react-hooks/vendor/index.js"() {
    init_hooks5();
  }
});

// node_modules/@frontegg/react-hooks/FronteggProvider/index.js
var import_react22, import_jsx_runtime3, import_jsx_runtime4, import_jsx_runtime5, _excluded76, defaultSetLoading, HideChildrenIfFronteggRoutes, FronteggContent, FronteggStoreProvider;
var init_FronteggProvider = __esm({
  "node_modules/@frontegg/react-hooks/FronteggProvider/index.js"() {
    init_extends();
    init_objectWithoutPropertiesLoose();
    import_react22 = __toESM(require_react());
    init_redux_store();
    init_rest_api();
    init_auth3();
    init_FronteggStoreContext();
    import_jsx_runtime3 = __toESM(require_jsx_runtime());
    import_jsx_runtime4 = __toESM(require_jsx_runtime());
    import_jsx_runtime5 = __toESM(require_jsx_runtime());
    _excluded76 = ["authenticatedUrl", "signUpSuccessUrl"];
    defaultSetLoading = (loading) => {
      if (loading) {
        document.body.classList.add("frontegg-loading");
      } else {
        document.body.classList.remove("frontegg-loading");
      }
    };
    HideChildrenIfFronteggRoutes = ({
      children,
      basename
    }) => {
      const routes = useAuthRoutes();
      const uriRef = (0, import_react22.useRef)(window.location.pathname);
      const animationFrameRef = (0, import_react22.useRef)(0);
      const [uri, setUri] = (0, import_react22.useState)(window.location.pathname);
      const checker = (0, import_react22.useCallback)(() => {
        if (uriRef.current !== window.location.pathname) {
          uriRef.current = window.location.pathname;
          setUri(document.location.pathname);
        }
        animationFrameRef.current = window.requestAnimationFrame(checker);
      }, []);
      (0, import_react22.useEffect)(() => {
        document.addEventListener("frontegg_onRedirectTo_fired", () => {
          if (uriRef.current !== window.location.pathname) {
            uriRef.current = window.location.pathname;
            setUri(document.location.pathname);
          }
        });
        window.addEventListener("popstate", () => {
          if (uriRef.current !== window.location.pathname) {
            uriRef.current = window.location.pathname;
            setUri(document.location.pathname);
          }
        });
        animationFrameRef.current = window.requestAnimationFrame(checker);
        return () => {
          window.cancelAnimationFrame(animationFrameRef.current);
        };
      }, [checker, setUri]);
      const calculatedBasename = basename ? basename.endsWith("/") ? basename.substring(0, basename.length - 1) : "" : "";
      const checkRoutes = _objectWithoutPropertiesLoose(routes, _excluded76);
      if (Object.values(checkRoutes).map((url) => `${calculatedBasename}${url}`).indexOf(uri) !== -1) {
        return null;
      }
      return (0, import_jsx_runtime4.jsx)(import_jsx_runtime3.Fragment, {
        children
      });
    };
    FronteggContent = ({
      children,
      app,
      setLoading
    }) => {
      var _app$options, _app$options2;
      const {
        isLoading
      } = useAuth(({
        isLoading: isLoading2
      }) => ({
        isLoading: isLoading2
      }));
      const customLoginBox = !app || (app == null ? void 0 : (_app$options = app.options) == null ? void 0 : _app$options.customLoginBox) === true;
      const isNextJS = (app == null ? void 0 : (_app$options2 = app.options) == null ? void 0 : _app$options2.framework) === "nextjs";
      const alwaysShowChildren = customLoginBox || isNextJS;
      const loadingRef = (0, import_react22.useRef)(void 0);
      if (isLoading !== loadingRef.current && !isNextJS) {
        loadingRef.current = isLoading;
        setLoading(isLoading);
      }
      if (alwaysShowChildren) {
        return (0, import_jsx_runtime4.jsx)(import_jsx_runtime3.Fragment, {
          children
        });
      }
      if (isLoading && !isNextJS) {
        return null;
      }
      return (0, import_jsx_runtime4.jsx)(HideChildrenIfFronteggRoutes, {
        basename: app == null ? void 0 : app.options.basename,
        children
      });
    };
    FronteggStoreProvider = (props) => {
      var _app$options$contextO, _app$options3, _app$options$previewM, _app$options4, _app$options5, _app$options6;
      const {
        children,
        app,
        contextOptions,
        setLoading = defaultSetLoading,
        alwaysVisibleChildren
      } = props;
      const context = (_app$options$contextO = app == null ? void 0 : (_app$options3 = app.options) == null ? void 0 : _app$options3.contextOptions) != null ? _app$options$contextO : contextOptions;
      if (!context) {
        throw Error("contextOptions must not be null or undefined");
      }
      const previewMode = (_app$options$previewM = app == null ? void 0 : (_app$options4 = app.options) == null ? void 0 : _app$options4.previewMode) != null ? _app$options$previewM : false;
      const authOptions = app != null && (_app$options5 = app.options) != null && _app$options5.authOptions ? _extends({}, app.options.authOptions, {
        hostedLoginBox: app.options.hostedLoginBox
      }) : {
        hostedLoginBox: app == null ? void 0 : (_app$options6 = app.options) == null ? void 0 : _app$options6.hostedLoginBox
      };
      ContextHolder.setContext(context);
      const store = (0, import_react22.useMemo)(() => {
        var _app$name, _app$options7;
        return createFronteggStore({
          context,
          appName: (_app$name = app == null ? void 0 : app.name) != null ? _app$name : "default"
        }, app, previewMode, authOptions, void 0, false, app == null ? void 0 : (_app$options7 = app.options) == null ? void 0 : _app$options7.urlStrategy);
      }, [app, previewMode]);
      return (0, import_jsx_runtime5.jsxs)(Provider2, {
        context: FronteggStoreContext,
        store,
        children: [alwaysVisibleChildren, (0, import_jsx_runtime4.jsx)(FronteggContent, {
          setLoading,
          app,
          children
        })]
      });
    };
  }
});

// node_modules/@frontegg/react-hooks/index.js
var react_hooks_exports = {};
__export(react_hooks_exports, {
  CustomComponentHolder: () => CustomComponentHolder,
  CustomComponentRegister: () => CustomComponentRegister,
  FronteggStoreContext: () => FronteggStoreContext,
  FronteggStoreProvider: () => FronteggStoreProvider,
  Provider: () => Provider2,
  ReactReduxProvider: () => Provider_default,
  ShadowDomContext: () => ShadowDomContext,
  getMaxAgeFromQueryParam: () => getMaxAgeFromQueryParam,
  reloadProfileIfNeeded: () => reloadProfileIfNeeded,
  shallowEqual: () => shallowEqual,
  useAcceptInvitationActions: () => useAcceptInvitationActions,
  useAcceptInvitationState: () => useAcceptInvitationState,
  useActivateAccountActions: () => useActivateAccountActions,
  useActivateAccountState: () => useActivateAccountState,
  useAllAccountsActions: () => useAllAccountsActions,
  useAllAccountsDialogsActions: () => useAllAccountsDialogsActions,
  useAllAccountsDialogsState: () => useAllAccountsDialogsState,
  useAllAccountsState: () => useAllAccountsState,
  useApiTokensActions: () => useApiTokensActions,
  useApiTokensState: () => useApiTokensState,
  useAuditLogsActions: () => useAuditLogsActions,
  useAuditLogsState: () => useAuditLogsState,
  useAuditsActions: () => useAuditsActions,
  useAuditsMetadataActions: () => useAuditsMetadataActions,
  useAuditsMetadataState: () => useAuditsMetadataState,
  useAuditsState: () => useAuditsState,
  useAuth: () => useAuth,
  useAuthActions: () => useAuthActions,
  useAuthRoutes: () => useAuthRoutes,
  useAuthTeamActions: () => useAuthTeamActions,
  useAuthTeamState: () => useAuthTeamState,
  useAuthUser: () => useAuthUser,
  useAuthUserOrNull: () => useAuthUserOrNull,
  useBillingInformation: () => useBillingInformation,
  useBillingInformationActions: () => useBillingInformationActions,
  useCheckout: () => useCheckout,
  useCheckoutActions: () => useCheckoutActions,
  useConnectivityActions: () => useConnectivityActions,
  useConnectivityState: () => useConnectivityState,
  useCustomLoginActions: () => useCustomLoginActions,
  useCustomLoginState: () => useCustomLoginState,
  useCustomLoginTheme: () => useCustomLoginTheme,
  useDispatch: () => useDispatch2,
  useEmailDomainRestrictions: () => useEmailDomainRestrictions,
  useEntitlements: () => useEntitlements,
  useEntitlementsActions: () => useEntitlementsActions,
  useEntitlementsOptions: () => useEntitlementsOptions,
  useFeatureEntitlements: () => useFeatureEntitlements,
  useFeatureFlags: () => useFeatureFlags,
  useFeatureFlagsChecker: () => useFeatureFlagsChecker,
  useForgotPasswordActions: () => useForgotPasswordActions,
  useForgotPasswordState: () => useForgotPasswordState,
  useGroupsActions: () => useGroupsActions,
  useGroupsDialogsActions: () => useGroupsDialogsActions,
  useGroupsDialogsState: () => useGroupsDialogsState,
  useGroupsState: () => useGroupsState,
  useImpersonateActions: () => useImpersonateActions,
  useImpersonateState: () => useImpersonateState,
  useInvoices: () => useInvoices,
  useInvoicesActions: () => useInvoicesActions,
  useIpRestrictions: () => useIpRestrictions,
  useIsAuthenticated: () => useIsAuthenticated,
  useIsSteppedUp: () => useIsSteppedUp,
  useLoginActions: () => useLoginActions,
  useLoginState: () => useLoginState,
  useLoginWithRedirect: () => useLoginWithRedirect,
  useLoginWithRedirectV2: () => useLoginWithRedirectV2,
  useMfaActions: () => useMfaActions,
  useMfaState: () => useMfaState,
  useOnRedirectTo: () => useOnRedirectTo,
  usePasskeysActions: () => usePasskeysActions,
  usePasskeysState: () => usePasskeysState,
  usePaymentMethod: () => usePaymentMethod,
  usePaymentMethodActions: () => usePaymentMethodActions,
  usePaymentProvider: () => usePaymentProvider,
  usePaymentProviderActions: () => usePaymentProviderActions,
  usePermissionEntitlements: () => usePermissionEntitlements,
  usePlans: () => usePlans,
  usePlansActions: () => usePlansActions,
  useProfileActions: () => useProfileActions,
  useProfileState: () => useProfileState,
  useProvisioningActions: () => useProvisioningActions,
  useProvisioningState: () => useProvisioningState,
  usePublicAuthStrategiesPolicySettings: () => usePublicAuthStrategiesPolicySettings,
  usePublicPolicySettings: () => usePublicPolicySettings,
  useResetPhoneNumberActions: () => useResetPhoneNumberActions,
  useResetPhoneNumberState: () => useResetPhoneNumberState,
  useRestrictionsActions: () => useRestrictionsActions,
  useRestrictionsState: () => useRestrictionsState,
  useRolesActions: () => useRolesActions,
  useRolesState: () => useRolesState,
  useRootState: () => useRootState,
  useSSOActions: () => useSSOActions,
  useSSOState: () => useSSOState,
  useSecurityCenterActions: () => useSecurityCenterActions,
  useSecurityCenterState: () => useSecurityCenterState,
  useSecurityPolicyActions: () => useSecurityPolicyActions,
  useSecurityPolicyState: () => useSecurityPolicyState,
  useSelector: () => useSelector2,
  useSessionsActions: () => useSessionsActions,
  useSessionsPolicyActions: () => useSessionsPolicyActions,
  useSessionsPolicyState: () => useSessionsPolicyState,
  useSessionsState: () => useSessionsState,
  useShadowDom: () => useShadowDom,
  useSignUpActions: () => useSignUpActions,
  useSignUpState: () => useSignUpState,
  useSmsActions: () => useSmsActions,
  useSmsState: () => useSmsState,
  useSocialLoginActions: () => useSocialLoginActions,
  useSocialLoginState: () => useSocialLoginState,
  useStepUp: () => useStepUp,
  useStepUpActions: () => useStepUpActions,
  useStepUpState: () => useStepUpState,
  useStore: () => useStore2,
  useStripeActions: () => useStripeActions,
  useStripeState: () => useStripeState,
  useSubscription: () => useSubscription,
  useSubscriptionActions: () => useSubscriptionActions,
  useSubscriptionCancellation: () => useSubscriptionCancellation,
  useSubscriptionRenewal: () => useSubscriptionRenewal,
  useTenantsActions: () => useTenantsActions,
  useTenantsState: () => useTenantsState,
  useVendorActions: () => useVendorActions,
  useVendorPublicConfig: () => useVendorPublicConfig,
  useVendorPublicConfigActions: () => useVendorPublicConfigActions,
  useVendorState: () => useVendorState
});
var init_react_hooks = __esm({
  "node_modules/@frontegg/react-hooks/index.js"() {
    init_common();
    init_audits3();
    init_auth3();
    init_connectivity3();
    init_subscriptions5();
    init_vendor3();
    init_flags();
    init_FronteggProvider();
    init_FronteggStoreContext();
  }
});

// node_modules/@remix-run/router/dist/router.js
function _extends2() {
  _extends2 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends2.apply(this, arguments);
}
function createMemoryHistory(options) {
  if (options === void 0) {
    options = {};
  }
  let {
    initialEntries = ["/"],
    initialIndex,
    v5Compat = false
  } = options;
  let entries;
  entries = initialEntries.map((entry, index2) => createMemoryLocation(entry, typeof entry === "string" ? null : entry.state, index2 === 0 ? "default" : void 0));
  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);
  let action = Action.Pop;
  let listener2 = null;
  function clampIndex(n2) {
    return Math.min(Math.max(n2, 0), entries.length - 1);
  }
  function getCurrentLocation() {
    return entries[index];
  }
  function createMemoryLocation(to, state, key) {
    if (state === void 0) {
      state = null;
    }
    let location = createLocation(entries ? getCurrentLocation().pathname : "/", to, state, key);
    warning3(location.pathname.charAt(0) === "/", "relative pathnames are not supported in memory history: " + JSON.stringify(to));
    return location;
  }
  function createHref(to) {
    return typeof to === "string" ? to : createPath(to);
  }
  let history = {
    get index() {
      return index;
    },
    get action() {
      return action;
    },
    get location() {
      return getCurrentLocation();
    },
    createHref,
    createURL(to) {
      return new URL(createHref(to), "http://localhost");
    },
    encodeLocation(to) {
      let path = typeof to === "string" ? parsePath(to) : to;
      return {
        pathname: path.pathname || "",
        search: path.search || "",
        hash: path.hash || ""
      };
    },
    push(to, state) {
      action = Action.Push;
      let nextLocation = createMemoryLocation(to, state);
      index += 1;
      entries.splice(index, entries.length, nextLocation);
      if (v5Compat && listener2) {
        listener2({
          action,
          location: nextLocation,
          delta: 1
        });
      }
    },
    replace(to, state) {
      action = Action.Replace;
      let nextLocation = createMemoryLocation(to, state);
      entries[index] = nextLocation;
      if (v5Compat && listener2) {
        listener2({
          action,
          location: nextLocation,
          delta: 0
        });
      }
    },
    go(delta) {
      action = Action.Pop;
      let nextIndex = clampIndex(index + delta);
      let nextLocation = entries[nextIndex];
      index = nextIndex;
      if (listener2) {
        listener2({
          action,
          location: nextLocation,
          delta
        });
      }
    },
    listen(fn2) {
      listener2 = fn2;
      return () => {
        listener2 = null;
      };
    }
  };
  return history;
}
function createBrowserHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createBrowserLocation(window2, globalHistory) {
    let {
      pathname,
      search,
      hash
    } = window2.location;
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createBrowserHref(window2, to) {
    return typeof to === "string" ? to : createPath(to);
  }
  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);
}
function createHashHistory(options) {
  if (options === void 0) {
    options = {};
  }
  function createHashLocation(window2, globalHistory) {
    let {
      pathname = "/",
      search = "",
      hash = ""
    } = parsePath(window2.location.hash.substr(1));
    if (!pathname.startsWith("/") && !pathname.startsWith(".")) {
      pathname = "/" + pathname;
    }
    return createLocation(
      "",
      {
        pathname,
        search,
        hash
      },
      // state defaults to `null` because `window.history.state` does
      globalHistory.state && globalHistory.state.usr || null,
      globalHistory.state && globalHistory.state.key || "default"
    );
  }
  function createHashHref(window2, to) {
    let base = window2.document.querySelector("base");
    let href = "";
    if (base && base.getAttribute("href")) {
      let url = window2.location.href;
      let hashIndex = url.indexOf("#");
      href = hashIndex === -1 ? url : url.slice(0, hashIndex);
    }
    return href + "#" + (typeof to === "string" ? to : createPath(to));
  }
  function validateHashLocation(location, to) {
    warning3(location.pathname.charAt(0) === "/", "relative pathnames are not supported in hash history.push(" + JSON.stringify(to) + ")");
  }
  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);
}
function invariant2(value, message) {
  if (value === false || value === null || typeof value === "undefined") {
    throw new Error(message);
  }
}
function warning3(cond, message) {
  if (!cond) {
    if (typeof console !== "undefined")
      console.warn(message);
    try {
      throw new Error(message);
    } catch (e2) {
    }
  }
}
function createKey() {
  return Math.random().toString(36).substr(2, 8);
}
function getHistoryState(location, index) {
  return {
    usr: location.state,
    key: location.key,
    idx: index
  };
}
function createLocation(current2, to, state, key) {
  if (state === void 0) {
    state = null;
  }
  let location = _extends2({
    pathname: typeof current2 === "string" ? current2 : current2.pathname,
    search: "",
    hash: ""
  }, typeof to === "string" ? parsePath(to) : to, {
    state,
    // TODO: This could be cleaned up.  push/replace should probably just take
    // full Locations now and avoid the need to run through this flow at all
    // But that's a pretty big refactor to the current test suite so going to
    // keep as is for the time being and just let any incoming keys take precedence
    key: to && to.key || key || createKey()
  });
  return location;
}
function createPath(_ref) {
  let {
    pathname = "/",
    search = "",
    hash = ""
  } = _ref;
  if (search && search !== "?")
    pathname += search.charAt(0) === "?" ? search : "?" + search;
  if (hash && hash !== "#")
    pathname += hash.charAt(0) === "#" ? hash : "#" + hash;
  return pathname;
}
function parsePath(path) {
  let parsedPath = {};
  if (path) {
    let hashIndex = path.indexOf("#");
    if (hashIndex >= 0) {
      parsedPath.hash = path.substr(hashIndex);
      path = path.substr(0, hashIndex);
    }
    let searchIndex = path.indexOf("?");
    if (searchIndex >= 0) {
      parsedPath.search = path.substr(searchIndex);
      path = path.substr(0, searchIndex);
    }
    if (path) {
      parsedPath.pathname = path;
    }
  }
  return parsedPath;
}
function getUrlBasedHistory(getLocation2, createHref, validateLocation, options) {
  if (options === void 0) {
    options = {};
  }
  let {
    window: window2 = document.defaultView,
    v5Compat = false
  } = options;
  let globalHistory = window2.history;
  let action = Action.Pop;
  let listener2 = null;
  let index = getIndex();
  if (index == null) {
    index = 0;
    globalHistory.replaceState(_extends2({}, globalHistory.state, {
      idx: index
    }), "");
  }
  function getIndex() {
    let state = globalHistory.state || {
      idx: null
    };
    return state.idx;
  }
  function handlePop() {
    action = Action.Pop;
    let nextIndex = getIndex();
    let delta = nextIndex == null ? null : nextIndex - index;
    index = nextIndex;
    if (listener2) {
      listener2({
        action,
        location: history.location,
        delta
      });
    }
  }
  function push(to, state) {
    action = Action.Push;
    let location = createLocation(history.location, to, state);
    if (validateLocation)
      validateLocation(location, to);
    index = getIndex() + 1;
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    try {
      globalHistory.pushState(historyState, "", url);
    } catch (error) {
      if (error instanceof DOMException && error.name === "DataCloneError") {
        throw error;
      }
      window2.location.assign(url);
    }
    if (v5Compat && listener2) {
      listener2({
        action,
        location: history.location,
        delta: 1
      });
    }
  }
  function replace(to, state) {
    action = Action.Replace;
    let location = createLocation(history.location, to, state);
    if (validateLocation)
      validateLocation(location, to);
    index = getIndex();
    let historyState = getHistoryState(location, index);
    let url = history.createHref(location);
    globalHistory.replaceState(historyState, "", url);
    if (v5Compat && listener2) {
      listener2({
        action,
        location: history.location,
        delta: 0
      });
    }
  }
  function createURL(to) {
    let base = window2.location.origin !== "null" ? window2.location.origin : window2.location.href;
    let href = typeof to === "string" ? to : createPath(to);
    href = href.replace(/ $/, "%20");
    invariant2(base, "No window.location.(origin|href) available to create URL for href: " + href);
    return new URL(href, base);
  }
  let history = {
    get action() {
      return action;
    },
    get location() {
      return getLocation2(window2, globalHistory);
    },
    listen(fn2) {
      if (listener2) {
        throw new Error("A history only accepts one active listener");
      }
      window2.addEventListener(PopStateEventType, handlePop);
      listener2 = fn2;
      return () => {
        window2.removeEventListener(PopStateEventType, handlePop);
        listener2 = null;
      };
    },
    createHref(to) {
      return createHref(window2, to);
    },
    createURL,
    encodeLocation(to) {
      let url = createURL(to);
      return {
        pathname: url.pathname,
        search: url.search,
        hash: url.hash
      };
    },
    push,
    replace,
    go(n2) {
      return globalHistory.go(n2);
    }
  };
  return history;
}
function isIndexRoute(route) {
  return route.index === true;
}
function convertRoutesToDataRoutes(routes, mapRouteProperties2, parentPath, manifest) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  if (manifest === void 0) {
    manifest = {};
  }
  return routes.map((route, index) => {
    let treePath = [...parentPath, index];
    let id = typeof route.id === "string" ? route.id : treePath.join("-");
    invariant2(route.index !== true || !route.children, "Cannot specify children on an index route");
    invariant2(!manifest[id], 'Found a route id collision on id "' + id + `".  Route id's must be globally unique within Data Router usages`);
    if (isIndexRoute(route)) {
      let indexRoute = _extends2({}, route, mapRouteProperties2(route), {
        id
      });
      manifest[id] = indexRoute;
      return indexRoute;
    } else {
      let pathOrLayoutRoute = _extends2({}, route, mapRouteProperties2(route), {
        id,
        children: void 0
      });
      manifest[id] = pathOrLayoutRoute;
      if (route.children) {
        pathOrLayoutRoute.children = convertRoutesToDataRoutes(route.children, mapRouteProperties2, treePath, manifest);
      }
      return pathOrLayoutRoute;
    }
  });
}
function matchRoutes(routes, locationArg, basename) {
  if (basename === void 0) {
    basename = "/";
  }
  let location = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
  let pathname = stripBasename(location.pathname || "/", basename);
  if (pathname == null) {
    return null;
  }
  let branches = flattenRoutes(routes);
  rankRouteBranches(branches);
  let matches = null;
  for (let i2 = 0; matches == null && i2 < branches.length; ++i2) {
    let decoded = decodePath(pathname);
    matches = matchRouteBranch(branches[i2], decoded);
  }
  return matches;
}
function convertRouteMatchToUiMatch(match2, loaderData) {
  let {
    route,
    pathname,
    params
  } = match2;
  return {
    id: route.id,
    pathname,
    params,
    data: loaderData[route.id],
    handle: route.handle
  };
}
function flattenRoutes(routes, branches, parentsMeta, parentPath) {
  if (branches === void 0) {
    branches = [];
  }
  if (parentsMeta === void 0) {
    parentsMeta = [];
  }
  if (parentPath === void 0) {
    parentPath = "";
  }
  let flattenRoute = (route, index, relativePath) => {
    let meta = {
      relativePath: relativePath === void 0 ? route.path || "" : relativePath,
      caseSensitive: route.caseSensitive === true,
      childrenIndex: index,
      route
    };
    if (meta.relativePath.startsWith("/")) {
      invariant2(meta.relativePath.startsWith(parentPath), 'Absolute route path "' + meta.relativePath + '" nested under path ' + ('"' + parentPath + '" is not valid. An absolute child route path ') + "must start with the combined path of all its parent routes.");
      meta.relativePath = meta.relativePath.slice(parentPath.length);
    }
    let path = joinPaths([parentPath, meta.relativePath]);
    let routesMeta = parentsMeta.concat(meta);
    if (route.children && route.children.length > 0) {
      invariant2(
        // Our types know better, but runtime JS may not!
        // @ts-expect-error
        route.index !== true,
        "Index routes must not have child routes. Please remove " + ('all child routes from route path "' + path + '".')
      );
      flattenRoutes(route.children, branches, routesMeta, path);
    }
    if (route.path == null && !route.index) {
      return;
    }
    branches.push({
      path,
      score: computeScore(path, route.index),
      routesMeta
    });
  };
  routes.forEach((route, index) => {
    var _route$path;
    if (route.path === "" || !((_route$path = route.path) != null && _route$path.includes("?"))) {
      flattenRoute(route, index);
    } else {
      for (let exploded of explodeOptionalSegments(route.path)) {
        flattenRoute(route, index, exploded);
      }
    }
  });
  return branches;
}
function explodeOptionalSegments(path) {
  let segments = path.split("/");
  if (segments.length === 0)
    return [];
  let [first, ...rest] = segments;
  let isOptional = first.endsWith("?");
  let required = first.replace(/\?$/, "");
  if (rest.length === 0) {
    return isOptional ? [required, ""] : [required];
  }
  let restExploded = explodeOptionalSegments(rest.join("/"));
  let result = [];
  result.push(...restExploded.map((subpath) => subpath === "" ? required : [required, subpath].join("/")));
  if (isOptional) {
    result.push(...restExploded);
  }
  return result.map((exploded) => path.startsWith("/") && exploded === "" ? "/" : exploded);
}
function rankRouteBranches(branches) {
  branches.sort((a2, b2) => a2.score !== b2.score ? b2.score - a2.score : compareIndexes(a2.routesMeta.map((meta) => meta.childrenIndex), b2.routesMeta.map((meta) => meta.childrenIndex)));
}
function computeScore(path, index) {
  let segments = path.split("/");
  let initialScore = segments.length;
  if (segments.some(isSplat)) {
    initialScore += splatPenalty;
  }
  if (index) {
    initialScore += indexRouteValue;
  }
  return segments.filter((s2) => !isSplat(s2)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === "" ? emptySegmentValue : staticSegmentValue), initialScore);
}
function compareIndexes(a2, b2) {
  let siblings = a2.length === b2.length && a2.slice(0, -1).every((n2, i2) => n2 === b2[i2]);
  return siblings ? (
    // If two routes are siblings, we should try to match the earlier sibling
    // first. This allows people to have fine-grained control over the matching
    // behavior by simply putting routes with identical paths in the order they
    // want them tried.
    a2[a2.length - 1] - b2[b2.length - 1]
  ) : (
    // Otherwise, it doesn't really make sense to rank non-siblings by index,
    // so they sort equally.
    0
  );
}
function matchRouteBranch(branch, pathname) {
  let {
    routesMeta
  } = branch;
  let matchedParams = {};
  let matchedPathname = "/";
  let matches = [];
  for (let i2 = 0; i2 < routesMeta.length; ++i2) {
    let meta = routesMeta[i2];
    let end = i2 === routesMeta.length - 1;
    let remainingPathname = matchedPathname === "/" ? pathname : pathname.slice(matchedPathname.length) || "/";
    let match2 = matchPath({
      path: meta.relativePath,
      caseSensitive: meta.caseSensitive,
      end
    }, remainingPathname);
    if (!match2)
      return null;
    Object.assign(matchedParams, match2.params);
    let route = meta.route;
    matches.push({
      // TODO: Can this as be avoided?
      params: matchedParams,
      pathname: joinPaths([matchedPathname, match2.pathname]),
      pathnameBase: normalizePathname(joinPaths([matchedPathname, match2.pathnameBase])),
      route
    });
    if (match2.pathnameBase !== "/") {
      matchedPathname = joinPaths([matchedPathname, match2.pathnameBase]);
    }
  }
  return matches;
}
function generatePath(originalPath, params) {
  if (params === void 0) {
    params = {};
  }
  let path = originalPath;
  if (path.endsWith("*") && path !== "*" && !path.endsWith("/*")) {
    warning3(false, 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
    path = path.replace(/\*$/, "/*");
  }
  const prefix2 = path.startsWith("/") ? "/" : "";
  const stringify3 = (p2) => p2 == null ? "" : typeof p2 === "string" ? p2 : String(p2);
  const segments = path.split(/\/+/).map((segment, index, array4) => {
    const isLastSegment = index === array4.length - 1;
    if (isLastSegment && segment === "*") {
      const star = "*";
      return stringify3(params[star]);
    }
    const keyMatch = segment.match(/^:([\w-]+)(\??)$/);
    if (keyMatch) {
      const [, key, optional] = keyMatch;
      let param = params[key];
      invariant2(optional === "?" || param != null, 'Missing ":' + key + '" param');
      return stringify3(param);
    }
    return segment.replace(/\?$/g, "");
  }).filter((segment) => !!segment);
  return prefix2 + segments.join("/");
}
function matchPath(pattern3, pathname) {
  if (typeof pattern3 === "string") {
    pattern3 = {
      path: pattern3,
      caseSensitive: false,
      end: true
    };
  }
  let [matcher2, compiledParams] = compilePath(pattern3.path, pattern3.caseSensitive, pattern3.end);
  let match2 = pathname.match(matcher2);
  if (!match2)
    return null;
  let matchedPathname = match2[0];
  let pathnameBase = matchedPathname.replace(/(.)\/+$/, "$1");
  let captureGroups = match2.slice(1);
  let params = compiledParams.reduce((memo, _ref, index) => {
    let {
      paramName,
      isOptional
    } = _ref;
    if (paramName === "*") {
      let splatValue = captureGroups[index] || "";
      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\/+$/, "$1");
    }
    const value = captureGroups[index];
    if (isOptional && !value) {
      memo[paramName] = void 0;
    } else {
      memo[paramName] = (value || "").replace(/%2F/g, "/");
    }
    return memo;
  }, {});
  return {
    params,
    pathname: matchedPathname,
    pathnameBase,
    pattern: pattern3
  };
}
function compilePath(path, caseSensitive, end) {
  if (caseSensitive === void 0) {
    caseSensitive = false;
  }
  if (end === void 0) {
    end = true;
  }
  warning3(path === "*" || !path.endsWith("*") || path.endsWith("/*"), 'Route path "' + path + '" will be treated as if it were ' + ('"' + path.replace(/\*$/, "/*") + '" because the `*` character must ') + "always follow a `/` in the pattern. To get rid of this warning, " + ('please change the route path to "' + path.replace(/\*$/, "/*") + '".'));
  let params = [];
  let regexpSource = "^" + path.replace(/\/*\*?$/, "").replace(/^\/*/, "/").replace(/[\\.*+^${}|()[\]]/g, "\\$&").replace(/\/:([\w-]+)(\?)?/g, (_2, paramName, isOptional) => {
    params.push({
      paramName,
      isOptional: isOptional != null
    });
    return isOptional ? "/?([^\\/]+)?" : "/([^\\/]+)";
  });
  if (path.endsWith("*")) {
    params.push({
      paramName: "*"
    });
    regexpSource += path === "*" || path === "/*" ? "(.*)$" : "(?:\\/(.+)|\\/*)$";
  } else if (end) {
    regexpSource += "\\/*$";
  } else if (path !== "" && path !== "/") {
    regexpSource += "(?:(?=\\/|$))";
  } else
    ;
  let matcher2 = new RegExp(regexpSource, caseSensitive ? void 0 : "i");
  return [matcher2, params];
}
function decodePath(value) {
  try {
    return value.split("/").map((v2) => decodeURIComponent(v2).replace(/\//g, "%2F")).join("/");
  } catch (error) {
    warning3(false, 'The URL path "' + value + '" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent ' + ("encoding (" + error + ")."));
    return value;
  }
}
function stripBasename(pathname, basename) {
  if (basename === "/")
    return pathname;
  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {
    return null;
  }
  let startIndex = basename.endsWith("/") ? basename.length - 1 : basename.length;
  let nextChar = pathname.charAt(startIndex);
  if (nextChar && nextChar !== "/") {
    return null;
  }
  return pathname.slice(startIndex) || "/";
}
function resolvePath(to, fromPathname) {
  if (fromPathname === void 0) {
    fromPathname = "/";
  }
  let {
    pathname: toPathname,
    search = "",
    hash = ""
  } = typeof to === "string" ? parsePath(to) : to;
  let pathname = toPathname ? toPathname.startsWith("/") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;
  return {
    pathname,
    search: normalizeSearch(search),
    hash: normalizeHash(hash)
  };
}
function resolvePathname(relativePath, fromPathname) {
  let segments = fromPathname.replace(/\/+$/, "").split("/");
  let relativeSegments = relativePath.split("/");
  relativeSegments.forEach((segment) => {
    if (segment === "..") {
      if (segments.length > 1)
        segments.pop();
    } else if (segment !== ".") {
      segments.push(segment);
    }
  });
  return segments.length > 1 ? segments.join("/") : "/";
}
function getInvalidPathError(char, field, dest, path) {
  return "Cannot include a '" + char + "' character in a manually specified " + ("`to." + field + "` field [" + JSON.stringify(path) + "].  Please separate it out to the ") + ("`to." + dest + "` field. Alternatively you may provide the full path as ") + 'a string in <Link to="..."> and the router will parse it for you.';
}
function getPathContributingMatches(matches) {
  return matches.filter((match2, index) => index === 0 || match2.route.path && match2.route.path.length > 0);
}
function getResolveToMatches(matches, v7_relativeSplatPath) {
  let pathMatches = getPathContributingMatches(matches);
  if (v7_relativeSplatPath) {
    return pathMatches.map((match2, idx) => idx === matches.length - 1 ? match2.pathname : match2.pathnameBase);
  }
  return pathMatches.map((match2) => match2.pathnameBase);
}
function resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {
  if (isPathRelative === void 0) {
    isPathRelative = false;
  }
  let to;
  if (typeof toArg === "string") {
    to = parsePath(toArg);
  } else {
    to = _extends2({}, toArg);
    invariant2(!to.pathname || !to.pathname.includes("?"), getInvalidPathError("?", "pathname", "search", to));
    invariant2(!to.pathname || !to.pathname.includes("#"), getInvalidPathError("#", "pathname", "hash", to));
    invariant2(!to.search || !to.search.includes("#"), getInvalidPathError("#", "search", "hash", to));
  }
  let isEmptyPath = toArg === "" || to.pathname === "";
  let toPathname = isEmptyPath ? "/" : to.pathname;
  let from;
  if (toPathname == null) {
    from = locationPathname;
  } else {
    let routePathnameIndex = routePathnames.length - 1;
    if (!isPathRelative && toPathname.startsWith("..")) {
      let toSegments = toPathname.split("/");
      while (toSegments[0] === "..") {
        toSegments.shift();
        routePathnameIndex -= 1;
      }
      to.pathname = toSegments.join("/");
    }
    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : "/";
  }
  let path = resolvePath(to, from);
  let hasExplicitTrailingSlash = toPathname && toPathname !== "/" && toPathname.endsWith("/");
  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === ".") && locationPathname.endsWith("/");
  if (!path.pathname.endsWith("/") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {
    path.pathname += "/";
  }
  return path;
}
function isTrackedPromise(value) {
  return value instanceof Promise && value._tracked === true;
}
function unwrapTrackedPromise(value) {
  if (!isTrackedPromise(value)) {
    return value;
  }
  if (value._error) {
    throw value._error;
  }
  return value._data;
}
function isRouteErrorResponse(error) {
  return error != null && typeof error.status === "number" && typeof error.statusText === "string" && typeof error.internal === "boolean" && "data" in error;
}
function createRouter(init) {
  const routerWindow = init.window ? init.window : typeof window !== "undefined" ? window : void 0;
  const isBrowser2 = typeof routerWindow !== "undefined" && typeof routerWindow.document !== "undefined" && typeof routerWindow.document.createElement !== "undefined";
  const isServer = !isBrowser2;
  invariant2(init.routes.length > 0, "You must provide a non-empty routes array to createRouter");
  let mapRouteProperties2;
  if (init.mapRouteProperties) {
    mapRouteProperties2 = init.mapRouteProperties;
  } else if (init.detectErrorBoundary) {
    let detectErrorBoundary = init.detectErrorBoundary;
    mapRouteProperties2 = (route) => ({
      hasErrorBoundary: detectErrorBoundary(route)
    });
  } else {
    mapRouteProperties2 = defaultMapRouteProperties;
  }
  let manifest = {};
  let dataRoutes = convertRoutesToDataRoutes(init.routes, mapRouteProperties2, void 0, manifest);
  let inFlightDataRoutes;
  let basename = init.basename || "/";
  let future = _extends2({
    v7_fetcherPersist: false,
    v7_normalizeFormMethod: false,
    v7_partialHydration: false,
    v7_prependBasename: false,
    v7_relativeSplatPath: false
  }, init.future);
  let unlistenHistory = null;
  let subscribers = /* @__PURE__ */ new Set();
  let savedScrollPositions2 = null;
  let getScrollRestorationKey = null;
  let getScrollPosition = null;
  let initialScrollRestored = init.hydrationData != null;
  let initialMatches = matchRoutes(dataRoutes, init.history.location, basename);
  let initialErrors = null;
  if (initialMatches == null) {
    let error = getInternalRouterError(404, {
      pathname: init.history.location.pathname
    });
    let {
      matches,
      route
    } = getShortCircuitMatches(dataRoutes);
    initialMatches = matches;
    initialErrors = {
      [route.id]: error
    };
  }
  let initialized;
  let hasLazyRoutes = initialMatches.some((m2) => m2.route.lazy);
  let hasLoaders = initialMatches.some((m2) => m2.route.loader);
  if (hasLazyRoutes) {
    initialized = false;
  } else if (!hasLoaders) {
    initialized = true;
  } else if (future.v7_partialHydration) {
    let loaderData = init.hydrationData ? init.hydrationData.loaderData : null;
    let errors = init.hydrationData ? init.hydrationData.errors : null;
    initialized = initialMatches.every((m2) => m2.route.loader && m2.route.loader.hydrate !== true && (loaderData && loaderData[m2.route.id] !== void 0 || errors && errors[m2.route.id] !== void 0));
  } else {
    initialized = init.hydrationData != null;
  }
  let router;
  let state = {
    historyAction: init.history.action,
    location: init.history.location,
    matches: initialMatches,
    initialized,
    navigation: IDLE_NAVIGATION,
    // Don't restore on initial updateState() if we were SSR'd
    restoreScrollPosition: init.hydrationData != null ? false : null,
    preventScrollReset: false,
    revalidation: "idle",
    loaderData: init.hydrationData && init.hydrationData.loaderData || {},
    actionData: init.hydrationData && init.hydrationData.actionData || null,
    errors: init.hydrationData && init.hydrationData.errors || initialErrors,
    fetchers: /* @__PURE__ */ new Map(),
    blockers: /* @__PURE__ */ new Map()
  };
  let pendingAction = Action.Pop;
  let pendingPreventScrollReset = false;
  let pendingNavigationController;
  let pendingViewTransitionEnabled = false;
  let appliedViewTransitions = /* @__PURE__ */ new Map();
  let removePageHideEventListener = null;
  let isUninterruptedRevalidation = false;
  let isRevalidationRequired = false;
  let cancelledDeferredRoutes = [];
  let cancelledFetcherLoads = [];
  let fetchControllers = /* @__PURE__ */ new Map();
  let incrementingLoadId = 0;
  let pendingNavigationLoadId = -1;
  let fetchReloadIds = /* @__PURE__ */ new Map();
  let fetchRedirectIds = /* @__PURE__ */ new Set();
  let fetchLoadMatches = /* @__PURE__ */ new Map();
  let activeFetchers = /* @__PURE__ */ new Map();
  let deletedFetchers = /* @__PURE__ */ new Set();
  let activeDeferreds = /* @__PURE__ */ new Map();
  let blockerFunctions = /* @__PURE__ */ new Map();
  let ignoreNextHistoryUpdate = false;
  function initialize3() {
    unlistenHistory = init.history.listen((_ref) => {
      let {
        action: historyAction,
        location,
        delta
      } = _ref;
      if (ignoreNextHistoryUpdate) {
        ignoreNextHistoryUpdate = false;
        return;
      }
      warning3(blockerFunctions.size === 0 || delta != null, "You are trying to use a blocker on a POP navigation to a location that was not created by @remix-run/router. This will fail silently in production. This can happen if you are navigating outside the router via `window.history.pushState`/`window.location.hash` instead of using router navigation APIs.  This can also happen if you are using createHashRouter and the user manually changes the URL.");
      let blockerKey = shouldBlockNavigation({
        currentLocation: state.location,
        nextLocation: location,
        historyAction
      });
      if (blockerKey && delta != null) {
        ignoreNextHistoryUpdate = true;
        init.history.go(delta * -1);
        updateBlocker(blockerKey, {
          state: "blocked",
          location,
          proceed() {
            updateBlocker(blockerKey, {
              state: "proceeding",
              proceed: void 0,
              reset: void 0,
              location
            });
            init.history.go(delta);
          },
          reset() {
            let blockers = new Map(state.blockers);
            blockers.set(blockerKey, IDLE_BLOCKER);
            updateState({
              blockers
            });
          }
        });
        return;
      }
      return startNavigation(historyAction, location);
    });
    if (isBrowser2) {
      restoreAppliedTransitions(routerWindow, appliedViewTransitions);
      let _saveAppliedTransitions = () => persistAppliedTransitions(routerWindow, appliedViewTransitions);
      routerWindow.addEventListener("pagehide", _saveAppliedTransitions);
      removePageHideEventListener = () => routerWindow.removeEventListener("pagehide", _saveAppliedTransitions);
    }
    if (!state.initialized) {
      startNavigation(Action.Pop, state.location, {
        initialHydration: true
      });
    }
    return router;
  }
  function dispose() {
    if (unlistenHistory) {
      unlistenHistory();
    }
    if (removePageHideEventListener) {
      removePageHideEventListener();
    }
    subscribers.clear();
    pendingNavigationController && pendingNavigationController.abort();
    state.fetchers.forEach((_2, key) => deleteFetcher(key));
    state.blockers.forEach((_2, key) => deleteBlocker(key));
  }
  function subscribe(fn2) {
    subscribers.add(fn2);
    return () => subscribers.delete(fn2);
  }
  function updateState(newState, opts) {
    if (opts === void 0) {
      opts = {};
    }
    state = _extends2({}, state, newState);
    let completedFetchers = [];
    let deletedFetchersKeys = [];
    if (future.v7_fetcherPersist) {
      state.fetchers.forEach((fetcher, key) => {
        if (fetcher.state === "idle") {
          if (deletedFetchers.has(key)) {
            deletedFetchersKeys.push(key);
          } else {
            completedFetchers.push(key);
          }
        }
      });
    }
    [...subscribers].forEach((subscriber) => subscriber(state, {
      deletedFetchers: deletedFetchersKeys,
      unstable_viewTransitionOpts: opts.viewTransitionOpts,
      unstable_flushSync: opts.flushSync === true
    }));
    if (future.v7_fetcherPersist) {
      completedFetchers.forEach((key) => state.fetchers.delete(key));
      deletedFetchersKeys.forEach((key) => deleteFetcher(key));
    }
  }
  function completeNavigation(location, newState, _temp) {
    var _location$state, _location$state2;
    let {
      flushSync
    } = _temp === void 0 ? {} : _temp;
    let isActionReload = state.actionData != null && state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && state.navigation.state === "loading" && ((_location$state = location.state) == null ? void 0 : _location$state._isRedirect) !== true;
    let actionData;
    if (newState.actionData) {
      if (Object.keys(newState.actionData).length > 0) {
        actionData = newState.actionData;
      } else {
        actionData = null;
      }
    } else if (isActionReload) {
      actionData = state.actionData;
    } else {
      actionData = null;
    }
    let loaderData = newState.loaderData ? mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [], newState.errors) : state.loaderData;
    let blockers = state.blockers;
    if (blockers.size > 0) {
      blockers = new Map(blockers);
      blockers.forEach((_2, k2) => blockers.set(k2, IDLE_BLOCKER));
    }
    let preventScrollReset = pendingPreventScrollReset === true || state.navigation.formMethod != null && isMutationMethod(state.navigation.formMethod) && ((_location$state2 = location.state) == null ? void 0 : _location$state2._isRedirect) !== true;
    if (inFlightDataRoutes) {
      dataRoutes = inFlightDataRoutes;
      inFlightDataRoutes = void 0;
    }
    if (isUninterruptedRevalidation)
      ;
    else if (pendingAction === Action.Pop)
      ;
    else if (pendingAction === Action.Push) {
      init.history.push(location, location.state);
    } else if (pendingAction === Action.Replace) {
      init.history.replace(location, location.state);
    }
    let viewTransitionOpts;
    if (pendingAction === Action.Pop) {
      let priorPaths = appliedViewTransitions.get(state.location.pathname);
      if (priorPaths && priorPaths.has(location.pathname)) {
        viewTransitionOpts = {
          currentLocation: state.location,
          nextLocation: location
        };
      } else if (appliedViewTransitions.has(location.pathname)) {
        viewTransitionOpts = {
          currentLocation: location,
          nextLocation: state.location
        };
      }
    } else if (pendingViewTransitionEnabled) {
      let toPaths = appliedViewTransitions.get(state.location.pathname);
      if (toPaths) {
        toPaths.add(location.pathname);
      } else {
        toPaths = /* @__PURE__ */ new Set([location.pathname]);
        appliedViewTransitions.set(state.location.pathname, toPaths);
      }
      viewTransitionOpts = {
        currentLocation: state.location,
        nextLocation: location
      };
    }
    updateState(_extends2({}, newState, {
      actionData,
      loaderData,
      historyAction: pendingAction,
      location,
      initialized: true,
      navigation: IDLE_NAVIGATION,
      revalidation: "idle",
      restoreScrollPosition: getSavedScrollPosition(location, newState.matches || state.matches),
      preventScrollReset,
      blockers
    }), {
      viewTransitionOpts,
      flushSync: flushSync === true
    });
    pendingAction = Action.Pop;
    pendingPreventScrollReset = false;
    pendingViewTransitionEnabled = false;
    isUninterruptedRevalidation = false;
    isRevalidationRequired = false;
    cancelledDeferredRoutes = [];
    cancelledFetcherLoads = [];
  }
  async function navigate(to, opts) {
    if (typeof to === "number") {
      init.history.go(to);
      return;
    }
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, to, future.v7_relativeSplatPath, opts == null ? void 0 : opts.fromRouteId, opts == null ? void 0 : opts.relative);
    let {
      path,
      submission,
      error
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, false, normalizedPath, opts);
    let currentLocation = state.location;
    let nextLocation = createLocation(state.location, path, opts && opts.state);
    nextLocation = _extends2({}, nextLocation, init.history.encodeLocation(nextLocation));
    let userReplace = opts && opts.replace != null ? opts.replace : void 0;
    let historyAction = Action.Push;
    if (userReplace === true) {
      historyAction = Action.Replace;
    } else if (userReplace === false)
      ;
    else if (submission != null && isMutationMethod(submission.formMethod) && submission.formAction === state.location.pathname + state.location.search) {
      historyAction = Action.Replace;
    }
    let preventScrollReset = opts && "preventScrollReset" in opts ? opts.preventScrollReset === true : void 0;
    let flushSync = (opts && opts.unstable_flushSync) === true;
    let blockerKey = shouldBlockNavigation({
      currentLocation,
      nextLocation,
      historyAction
    });
    if (blockerKey) {
      updateBlocker(blockerKey, {
        state: "blocked",
        location: nextLocation,
        proceed() {
          updateBlocker(blockerKey, {
            state: "proceeding",
            proceed: void 0,
            reset: void 0,
            location: nextLocation
          });
          navigate(to, opts);
        },
        reset() {
          let blockers = new Map(state.blockers);
          blockers.set(blockerKey, IDLE_BLOCKER);
          updateState({
            blockers
          });
        }
      });
      return;
    }
    return await startNavigation(historyAction, nextLocation, {
      submission,
      // Send through the formData serialization error if we have one so we can
      // render at the right error boundary after we match routes
      pendingError: error,
      preventScrollReset,
      replace: opts && opts.replace,
      enableViewTransition: opts && opts.unstable_viewTransition,
      flushSync
    });
  }
  function revalidate() {
    interruptActiveLoads();
    updateState({
      revalidation: "loading"
    });
    if (state.navigation.state === "submitting") {
      return;
    }
    if (state.navigation.state === "idle") {
      startNavigation(state.historyAction, state.location, {
        startUninterruptedRevalidation: true
      });
      return;
    }
    startNavigation(pendingAction || state.historyAction, state.navigation.location, {
      overrideNavigation: state.navigation
    });
  }
  async function startNavigation(historyAction, location, opts) {
    pendingNavigationController && pendingNavigationController.abort();
    pendingNavigationController = null;
    pendingAction = historyAction;
    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true;
    saveScrollPosition(state.location, state.matches);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    pendingViewTransitionEnabled = (opts && opts.enableViewTransition) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let loadingNavigation = opts && opts.overrideNavigation;
    let matches = matchRoutes(routesToUse, location, basename);
    let flushSync = (opts && opts.flushSync) === true;
    if (!matches) {
      let error = getInternalRouterError(404, {
        pathname: location.pathname
      });
      let {
        matches: notFoundMatches,
        route
      } = getShortCircuitMatches(routesToUse);
      cancelActiveDeferreds();
      completeNavigation(location, {
        matches: notFoundMatches,
        loaderData: {},
        errors: {
          [route.id]: error
        }
      }, {
        flushSync
      });
      return;
    }
    if (state.initialized && !isRevalidationRequired && isHashChangeOnly(state.location, location) && !(opts && opts.submission && isMutationMethod(opts.submission.formMethod))) {
      completeNavigation(location, {
        matches
      }, {
        flushSync
      });
      return;
    }
    pendingNavigationController = new AbortController();
    let request = createClientSideRequest(init.history, location, pendingNavigationController.signal, opts && opts.submission);
    let pendingActionData;
    let pendingError;
    if (opts && opts.pendingError) {
      pendingError = {
        [findNearestBoundary(matches).route.id]: opts.pendingError
      };
    } else if (opts && opts.submission && isMutationMethod(opts.submission.formMethod)) {
      let actionOutput = await handleAction(request, location, opts.submission, matches, {
        replace: opts.replace,
        flushSync
      });
      if (actionOutput.shortCircuited) {
        return;
      }
      pendingActionData = actionOutput.pendingActionData;
      pendingError = actionOutput.pendingActionError;
      loadingNavigation = getLoadingNavigation(location, opts.submission);
      flushSync = false;
      request = new Request(request.url, {
        signal: request.signal
      });
    }
    let {
      shortCircuited,
      loaderData,
      errors
    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.fetcherSubmission, opts && opts.replace, opts && opts.initialHydration === true, flushSync, pendingActionData, pendingError);
    if (shortCircuited) {
      return;
    }
    pendingNavigationController = null;
    completeNavigation(location, _extends2({
      matches
    }, pendingActionData ? {
      actionData: pendingActionData
    } : {}, {
      loaderData,
      errors
    }));
  }
  async function handleAction(request, location, submission, matches, opts) {
    if (opts === void 0) {
      opts = {};
    }
    interruptActiveLoads();
    let navigation = getSubmittingNavigation(location, submission);
    updateState({
      navigation
    }, {
      flushSync: opts.flushSync === true
    });
    let result;
    let actionMatch = getTargetMatch(matches, location);
    if (!actionMatch.route.action && !actionMatch.route.lazy) {
      result = {
        type: ResultType.error,
        error: getInternalRouterError(405, {
          method: request.method,
          pathname: location.pathname,
          routeId: actionMatch.route.id
        })
      };
    } else {
      result = await callLoaderOrAction("action", request, actionMatch, matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
      if (request.signal.aborted) {
        return {
          shortCircuited: true
        };
      }
    }
    if (isRedirectResult(result)) {
      let replace;
      if (opts && opts.replace != null) {
        replace = opts.replace;
      } else {
        replace = result.location === state.location.pathname + state.location.search;
      }
      await startRedirectNavigation(state, result, {
        submission,
        replace
      });
      return {
        shortCircuited: true
      };
    }
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);
      if ((opts && opts.replace) !== true) {
        pendingAction = Action.Push;
      }
      return {
        // Send back an empty object we can use to clear out any prior actionData
        pendingActionData: {},
        pendingActionError: {
          [boundaryMatch.route.id]: result.error
        }
      };
    }
    if (isDeferredResult(result)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    return {
      pendingActionData: {
        [actionMatch.route.id]: result.data
      }
    };
  }
  async function handleLoaders(request, location, matches, overrideNavigation, submission, fetcherSubmission, replace, initialHydration, flushSync, pendingActionData, pendingError) {
    let loadingNavigation = overrideNavigation || getLoadingNavigation(location, submission);
    let activeSubmission = submission || fetcherSubmission || getSubmissionFromNavigation(loadingNavigation);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(init.history, state, matches, activeSubmission, location, future.v7_partialHydration && initialHydration === true, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError);
    cancelActiveDeferreds((routeId) => !(matches && matches.some((m2) => m2.route.id === routeId)) || matchesToLoad && matchesToLoad.some((m2) => m2.route.id === routeId));
    pendingNavigationLoadId = ++incrementingLoadId;
    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {
      let updatedFetchers2 = markFetchRedirectsDone();
      completeNavigation(location, _extends2({
        matches,
        loaderData: {},
        // Commit pending error if we're short circuiting
        errors: pendingError || null
      }, pendingActionData ? {
        actionData: pendingActionData
      } : {}, updatedFetchers2 ? {
        fetchers: new Map(state.fetchers)
      } : {}), {
        flushSync
      });
      return {
        shortCircuited: true
      };
    }
    if (!isUninterruptedRevalidation && (!future.v7_partialHydration || !initialHydration)) {
      revalidatingFetchers.forEach((rf) => {
        let fetcher = state.fetchers.get(rf.key);
        let revalidatingFetcher = getLoadingFetcher(void 0, fetcher ? fetcher.data : void 0);
        state.fetchers.set(rf.key, revalidatingFetcher);
      });
      let actionData = pendingActionData || state.actionData;
      updateState(_extends2({
        navigation: loadingNavigation
      }, actionData ? Object.keys(actionData).length === 0 ? {
        actionData: null
      } : {
        actionData
      } : {}, revalidatingFetchers.length > 0 ? {
        fetchers: new Map(state.fetchers)
      } : {}), {
        flushSync
      });
    }
    revalidatingFetchers.forEach((rf) => {
      if (fetchControllers.has(rf.key)) {
        abortFetcher(rf.key);
      }
      if (rf.controller) {
        fetchControllers.set(rf.key, rf.controller);
      }
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((f3) => abortFetcher(f3.key));
    if (pendingNavigationController) {
      pendingNavigationController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    }
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);
    if (request.signal.aborted) {
      return {
        shortCircuited: true
      };
    }
    if (pendingNavigationController) {
      pendingNavigationController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    }
    revalidatingFetchers.forEach((rf) => fetchControllers.delete(rf.key));
    let redirect3 = findRedirect(results);
    if (redirect3) {
      if (redirect3.idx >= matchesToLoad.length) {
        let fetcherKey = revalidatingFetchers[redirect3.idx - matchesToLoad.length].key;
        fetchRedirectIds.add(fetcherKey);
      }
      await startRedirectNavigation(state, redirect3.result, {
        replace
      });
      return {
        shortCircuited: true
      };
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds);
    activeDeferreds.forEach((deferredData, routeId) => {
      deferredData.subscribe((aborted) => {
        if (aborted || deferredData.done) {
          activeDeferreds.delete(routeId);
        }
      });
    });
    let updatedFetchers = markFetchRedirectsDone();
    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);
    let shouldUpdateFetchers = updatedFetchers || didAbortFetchLoads || revalidatingFetchers.length > 0;
    return _extends2({
      loaderData,
      errors
    }, shouldUpdateFetchers ? {
      fetchers: new Map(state.fetchers)
    } : {});
  }
  function fetch2(key, routeId, href, opts) {
    if (isServer) {
      throw new Error("router.fetch() was called during the server render, but it shouldn't be. You are likely calling a useFetcher() method in the body of your component. Try moving it to a useEffect or a callback.");
    }
    if (fetchControllers.has(key))
      abortFetcher(key);
    let flushSync = (opts && opts.unstable_flushSync) === true;
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let normalizedPath = normalizeTo(state.location, state.matches, basename, future.v7_prependBasename, href, future.v7_relativeSplatPath, routeId, opts == null ? void 0 : opts.relative);
    let matches = matchRoutes(routesToUse, normalizedPath, basename);
    if (!matches) {
      setFetcherError(key, routeId, getInternalRouterError(404, {
        pathname: normalizedPath
      }), {
        flushSync
      });
      return;
    }
    let {
      path,
      submission,
      error
    } = normalizeNavigateOptions(future.v7_normalizeFormMethod, true, normalizedPath, opts);
    if (error) {
      setFetcherError(key, routeId, error, {
        flushSync
      });
      return;
    }
    let match2 = getTargetMatch(matches, path);
    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;
    if (submission && isMutationMethod(submission.formMethod)) {
      handleFetcherAction(key, routeId, path, match2, matches, flushSync, submission);
      return;
    }
    fetchLoadMatches.set(key, {
      routeId,
      path
    });
    handleFetcherLoader(key, routeId, path, match2, matches, flushSync, submission);
  }
  async function handleFetcherAction(key, routeId, path, match2, requestMatches, flushSync, submission) {
    interruptActiveLoads();
    fetchLoadMatches.delete(key);
    if (!match2.route.action && !match2.route.lazy) {
      let error = getInternalRouterError(405, {
        method: submission.formMethod,
        pathname: path,
        routeId
      });
      setFetcherError(key, routeId, error, {
        flushSync
      });
      return;
    }
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getSubmittingFetcher(submission, existingFetcher), {
      flushSync
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal, submission);
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId;
    let actionResult = await callLoaderOrAction("action", fetchRequest, match2, requestMatches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
    if (fetchRequest.signal.aborted) {
      if (fetchControllers.get(key) === abortController) {
        fetchControllers.delete(key);
      }
      return;
    }
    if (future.v7_fetcherPersist && deletedFetchers.has(key)) {
      if (isRedirectResult(actionResult) || isErrorResult(actionResult)) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      }
    } else {
      if (isRedirectResult(actionResult)) {
        fetchControllers.delete(key);
        if (pendingNavigationLoadId > originatingLoadId) {
          updateFetcherState(key, getDoneFetcher(void 0));
          return;
        } else {
          fetchRedirectIds.add(key);
          updateFetcherState(key, getLoadingFetcher(submission));
          return startRedirectNavigation(state, actionResult, {
            fetcherSubmission: submission
          });
        }
      }
      if (isErrorResult(actionResult)) {
        setFetcherError(key, routeId, actionResult.error);
        return;
      }
    }
    if (isDeferredResult(actionResult)) {
      throw getInternalRouterError(400, {
        type: "defer-action"
      });
    }
    let nextLocation = state.navigation.location || state.location;
    let revalidationRequest = createClientSideRequest(init.history, nextLocation, abortController.signal);
    let routesToUse = inFlightDataRoutes || dataRoutes;
    let matches = state.navigation.state !== "idle" ? matchRoutes(routesToUse, state.navigation.location, basename) : state.matches;
    invariant2(matches, "Didn't find any matches after fetcher action");
    let loadId = ++incrementingLoadId;
    fetchReloadIds.set(key, loadId);
    let loadFetcher = getLoadingFetcher(submission, actionResult.data);
    state.fetchers.set(key, loadFetcher);
    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(
      init.history,
      state,
      matches,
      submission,
      nextLocation,
      false,
      isRevalidationRequired,
      cancelledDeferredRoutes,
      cancelledFetcherLoads,
      deletedFetchers,
      fetchLoadMatches,
      fetchRedirectIds,
      routesToUse,
      basename,
      {
        [match2.route.id]: actionResult.data
      },
      void 0
      // No need to send through errors since we short circuit above
    );
    revalidatingFetchers.filter((rf) => rf.key !== key).forEach((rf) => {
      let staleKey = rf.key;
      let existingFetcher2 = state.fetchers.get(staleKey);
      let revalidatingFetcher = getLoadingFetcher(void 0, existingFetcher2 ? existingFetcher2.data : void 0);
      state.fetchers.set(staleKey, revalidatingFetcher);
      if (fetchControllers.has(staleKey)) {
        abortFetcher(staleKey);
      }
      if (rf.controller) {
        fetchControllers.set(staleKey, rf.controller);
      }
    });
    updateState({
      fetchers: new Map(state.fetchers)
    });
    let abortPendingFetchRevalidations = () => revalidatingFetchers.forEach((rf) => abortFetcher(rf.key));
    abortController.signal.addEventListener("abort", abortPendingFetchRevalidations);
    let {
      results,
      loaderResults,
      fetcherResults
    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);
    if (abortController.signal.aborted) {
      return;
    }
    abortController.signal.removeEventListener("abort", abortPendingFetchRevalidations);
    fetchReloadIds.delete(key);
    fetchControllers.delete(key);
    revalidatingFetchers.forEach((r2) => fetchControllers.delete(r2.key));
    let redirect3 = findRedirect(results);
    if (redirect3) {
      if (redirect3.idx >= matchesToLoad.length) {
        let fetcherKey = revalidatingFetchers[redirect3.idx - matchesToLoad.length].key;
        fetchRedirectIds.add(fetcherKey);
      }
      return startRedirectNavigation(state, redirect3.result);
    }
    let {
      loaderData,
      errors
    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, void 0, revalidatingFetchers, fetcherResults, activeDeferreds);
    if (state.fetchers.has(key)) {
      let doneFetcher = getDoneFetcher(actionResult.data);
      state.fetchers.set(key, doneFetcher);
    }
    abortStaleFetchLoads(loadId);
    if (state.navigation.state === "loading" && loadId > pendingNavigationLoadId) {
      invariant2(pendingAction, "Expected pending action");
      pendingNavigationController && pendingNavigationController.abort();
      completeNavigation(state.navigation.location, {
        matches,
        loaderData,
        errors,
        fetchers: new Map(state.fetchers)
      });
    } else {
      updateState({
        errors,
        loaderData: mergeLoaderData(state.loaderData, loaderData, matches, errors),
        fetchers: new Map(state.fetchers)
      });
      isRevalidationRequired = false;
    }
  }
  async function handleFetcherLoader(key, routeId, path, match2, matches, flushSync, submission) {
    let existingFetcher = state.fetchers.get(key);
    updateFetcherState(key, getLoadingFetcher(submission, existingFetcher ? existingFetcher.data : void 0), {
      flushSync
    });
    let abortController = new AbortController();
    let fetchRequest = createClientSideRequest(init.history, path, abortController.signal);
    fetchControllers.set(key, abortController);
    let originatingLoadId = incrementingLoadId;
    let result = await callLoaderOrAction("loader", fetchRequest, match2, matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
    if (isDeferredResult(result)) {
      result = await resolveDeferredData(result, fetchRequest.signal, true) || result;
    }
    if (fetchControllers.get(key) === abortController) {
      fetchControllers.delete(key);
    }
    if (fetchRequest.signal.aborted) {
      return;
    }
    if (deletedFetchers.has(key)) {
      updateFetcherState(key, getDoneFetcher(void 0));
      return;
    }
    if (isRedirectResult(result)) {
      if (pendingNavigationLoadId > originatingLoadId) {
        updateFetcherState(key, getDoneFetcher(void 0));
        return;
      } else {
        fetchRedirectIds.add(key);
        await startRedirectNavigation(state, result);
        return;
      }
    }
    if (isErrorResult(result)) {
      setFetcherError(key, routeId, result.error);
      return;
    }
    invariant2(!isDeferredResult(result), "Unhandled fetcher deferred data");
    updateFetcherState(key, getDoneFetcher(result.data));
  }
  async function startRedirectNavigation(state2, redirect3, _temp2) {
    let {
      submission,
      fetcherSubmission,
      replace
    } = _temp2 === void 0 ? {} : _temp2;
    if (redirect3.revalidate) {
      isRevalidationRequired = true;
    }
    let redirectLocation = createLocation(state2.location, redirect3.location, {
      _isRedirect: true
    });
    invariant2(redirectLocation, "Expected a location on the redirect navigation");
    if (isBrowser2) {
      let isDocumentReload = false;
      if (redirect3.reloadDocument) {
        isDocumentReload = true;
      } else if (ABSOLUTE_URL_REGEX.test(redirect3.location)) {
        const url = init.history.createURL(redirect3.location);
        isDocumentReload = // Hard reload if it's an absolute URL to a new origin
        url.origin !== routerWindow.location.origin || // Hard reload if it's an absolute URL that does not match our basename
        stripBasename(url.pathname, basename) == null;
      }
      if (isDocumentReload) {
        if (replace) {
          routerWindow.location.replace(redirect3.location);
        } else {
          routerWindow.location.assign(redirect3.location);
        }
        return;
      }
    }
    pendingNavigationController = null;
    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;
    let {
      formMethod,
      formAction,
      formEncType
    } = state2.navigation;
    if (!submission && !fetcherSubmission && formMethod && formAction && formEncType) {
      submission = getSubmissionFromNavigation(state2.navigation);
    }
    let activeSubmission = submission || fetcherSubmission;
    if (redirectPreserveMethodStatusCodes.has(redirect3.status) && activeSubmission && isMutationMethod(activeSubmission.formMethod)) {
      await startNavigation(redirectHistoryAction, redirectLocation, {
        submission: _extends2({}, activeSubmission, {
          formAction: redirect3.location
        }),
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    } else {
      let overrideNavigation = getLoadingNavigation(redirectLocation, submission);
      await startNavigation(redirectHistoryAction, redirectLocation, {
        overrideNavigation,
        // Send fetcher submissions through for shouldRevalidate
        fetcherSubmission,
        // Preserve this flag across redirects
        preventScrollReset: pendingPreventScrollReset
      });
    }
  }
  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {
    let results = await Promise.all([...matchesToLoad.map((match2) => callLoaderOrAction("loader", request, match2, matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath)), ...fetchersToLoad.map((f3) => {
      if (f3.matches && f3.match && f3.controller) {
        return callLoaderOrAction("loader", createClientSideRequest(init.history, f3.path, f3.controller.signal), f3.match, f3.matches, manifest, mapRouteProperties2, basename, future.v7_relativeSplatPath);
      } else {
        let error = {
          type: ResultType.error,
          error: getInternalRouterError(404, {
            pathname: f3.path
          })
        };
        return error;
      }
    })]);
    let loaderResults = results.slice(0, matchesToLoad.length);
    let fetcherResults = results.slice(matchesToLoad.length);
    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, loaderResults.map(() => request.signal), false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map((f3) => f3.match), fetcherResults, fetchersToLoad.map((f3) => f3.controller ? f3.controller.signal : null), true)]);
    return {
      results,
      loaderResults,
      fetcherResults
    };
  }
  function interruptActiveLoads() {
    isRevalidationRequired = true;
    cancelledDeferredRoutes.push(...cancelActiveDeferreds());
    fetchLoadMatches.forEach((_2, key) => {
      if (fetchControllers.has(key)) {
        cancelledFetcherLoads.push(key);
        abortFetcher(key);
      }
    });
  }
  function updateFetcherState(key, fetcher, opts) {
    if (opts === void 0) {
      opts = {};
    }
    state.fetchers.set(key, fetcher);
    updateState({
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function setFetcherError(key, routeId, error, opts) {
    if (opts === void 0) {
      opts = {};
    }
    let boundaryMatch = findNearestBoundary(state.matches, routeId);
    deleteFetcher(key);
    updateState({
      errors: {
        [boundaryMatch.route.id]: error
      },
      fetchers: new Map(state.fetchers)
    }, {
      flushSync: (opts && opts.flushSync) === true
    });
  }
  function getFetcher(key) {
    if (future.v7_fetcherPersist) {
      activeFetchers.set(key, (activeFetchers.get(key) || 0) + 1);
      if (deletedFetchers.has(key)) {
        deletedFetchers.delete(key);
      }
    }
    return state.fetchers.get(key) || IDLE_FETCHER;
  }
  function deleteFetcher(key) {
    let fetcher = state.fetchers.get(key);
    if (fetchControllers.has(key) && !(fetcher && fetcher.state === "loading" && fetchReloadIds.has(key))) {
      abortFetcher(key);
    }
    fetchLoadMatches.delete(key);
    fetchReloadIds.delete(key);
    fetchRedirectIds.delete(key);
    deletedFetchers.delete(key);
    state.fetchers.delete(key);
  }
  function deleteFetcherAndUpdateState(key) {
    if (future.v7_fetcherPersist) {
      let count = (activeFetchers.get(key) || 0) - 1;
      if (count <= 0) {
        activeFetchers.delete(key);
        deletedFetchers.add(key);
      } else {
        activeFetchers.set(key, count);
      }
    } else {
      deleteFetcher(key);
    }
    updateState({
      fetchers: new Map(state.fetchers)
    });
  }
  function abortFetcher(key) {
    let controller = fetchControllers.get(key);
    invariant2(controller, "Expected fetch controller: " + key);
    controller.abort();
    fetchControllers.delete(key);
  }
  function markFetchersDone(keys) {
    for (let key of keys) {
      let fetcher = getFetcher(key);
      let doneFetcher = getDoneFetcher(fetcher.data);
      state.fetchers.set(key, doneFetcher);
    }
  }
  function markFetchRedirectsDone() {
    let doneKeys = [];
    let updatedFetchers = false;
    for (let key of fetchRedirectIds) {
      let fetcher = state.fetchers.get(key);
      invariant2(fetcher, "Expected fetcher: " + key);
      if (fetcher.state === "loading") {
        fetchRedirectIds.delete(key);
        doneKeys.push(key);
        updatedFetchers = true;
      }
    }
    markFetchersDone(doneKeys);
    return updatedFetchers;
  }
  function abortStaleFetchLoads(landedId) {
    let yeetedKeys = [];
    for (let [key, id] of fetchReloadIds) {
      if (id < landedId) {
        let fetcher = state.fetchers.get(key);
        invariant2(fetcher, "Expected fetcher: " + key);
        if (fetcher.state === "loading") {
          abortFetcher(key);
          fetchReloadIds.delete(key);
          yeetedKeys.push(key);
        }
      }
    }
    markFetchersDone(yeetedKeys);
    return yeetedKeys.length > 0;
  }
  function getBlocker(key, fn2) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    if (blockerFunctions.get(key) !== fn2) {
      blockerFunctions.set(key, fn2);
    }
    return blocker;
  }
  function deleteBlocker(key) {
    state.blockers.delete(key);
    blockerFunctions.delete(key);
  }
  function updateBlocker(key, newBlocker) {
    let blocker = state.blockers.get(key) || IDLE_BLOCKER;
    invariant2(blocker.state === "unblocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "blocked" || blocker.state === "blocked" && newBlocker.state === "proceeding" || blocker.state === "blocked" && newBlocker.state === "unblocked" || blocker.state === "proceeding" && newBlocker.state === "unblocked", "Invalid blocker state transition: " + blocker.state + " -> " + newBlocker.state);
    let blockers = new Map(state.blockers);
    blockers.set(key, newBlocker);
    updateState({
      blockers
    });
  }
  function shouldBlockNavigation(_ref2) {
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = _ref2;
    if (blockerFunctions.size === 0) {
      return;
    }
    if (blockerFunctions.size > 1) {
      warning3(false, "A router only supports one blocker at a time");
    }
    let entries = Array.from(blockerFunctions.entries());
    let [blockerKey, blockerFunction] = entries[entries.length - 1];
    let blocker = state.blockers.get(blockerKey);
    if (blocker && blocker.state === "proceeding") {
      return;
    }
    if (blockerFunction({
      currentLocation,
      nextLocation,
      historyAction
    })) {
      return blockerKey;
    }
  }
  function cancelActiveDeferreds(predicate3) {
    let cancelledRouteIds = [];
    activeDeferreds.forEach((dfd, routeId) => {
      if (!predicate3 || predicate3(routeId)) {
        dfd.cancel();
        cancelledRouteIds.push(routeId);
        activeDeferreds.delete(routeId);
      }
    });
    return cancelledRouteIds;
  }
  function enableScrollRestoration(positions, getPosition, getKey) {
    savedScrollPositions2 = positions;
    getScrollPosition = getPosition;
    getScrollRestorationKey = getKey || null;
    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {
      initialScrollRestored = true;
      let y2 = getSavedScrollPosition(state.location, state.matches);
      if (y2 != null) {
        updateState({
          restoreScrollPosition: y2
        });
      }
    }
    return () => {
      savedScrollPositions2 = null;
      getScrollPosition = null;
      getScrollRestorationKey = null;
    };
  }
  function getScrollKey(location, matches) {
    if (getScrollRestorationKey) {
      let key = getScrollRestorationKey(location, matches.map((m2) => convertRouteMatchToUiMatch(m2, state.loaderData)));
      return key || location.key;
    }
    return location.key;
  }
  function saveScrollPosition(location, matches) {
    if (savedScrollPositions2 && getScrollPosition) {
      let key = getScrollKey(location, matches);
      savedScrollPositions2[key] = getScrollPosition();
    }
  }
  function getSavedScrollPosition(location, matches) {
    if (savedScrollPositions2) {
      let key = getScrollKey(location, matches);
      let y2 = savedScrollPositions2[key];
      if (typeof y2 === "number") {
        return y2;
      }
    }
    return null;
  }
  function _internalSetRoutes(newRoutes) {
    manifest = {};
    inFlightDataRoutes = convertRoutesToDataRoutes(newRoutes, mapRouteProperties2, void 0, manifest);
  }
  router = {
    get basename() {
      return basename;
    },
    get future() {
      return future;
    },
    get state() {
      return state;
    },
    get routes() {
      return dataRoutes;
    },
    get window() {
      return routerWindow;
    },
    initialize: initialize3,
    subscribe,
    enableScrollRestoration,
    navigate,
    fetch: fetch2,
    revalidate,
    // Passthrough to history-aware createHref used by useHref so we get proper
    // hash-aware URLs in DOM paths
    createHref: (to) => init.history.createHref(to),
    encodeLocation: (to) => init.history.encodeLocation(to),
    getFetcher,
    deleteFetcher: deleteFetcherAndUpdateState,
    dispose,
    getBlocker,
    deleteBlocker,
    _internalFetchControllers: fetchControllers,
    _internalActiveDeferreds: activeDeferreds,
    // TODO: Remove setRoutes, it's temporary to avoid dealing with
    // updating the tree while validating the update algorithm.
    _internalSetRoutes
  };
  return router;
}
function isSubmissionNavigation(opts) {
  return opts != null && ("formData" in opts && opts.formData != null || "body" in opts && opts.body !== void 0);
}
function normalizeTo(location, matches, basename, prependBasename, to, v7_relativeSplatPath, fromRouteId, relative) {
  let contextualMatches;
  let activeRouteMatch;
  if (fromRouteId) {
    contextualMatches = [];
    for (let match2 of matches) {
      contextualMatches.push(match2);
      if (match2.route.id === fromRouteId) {
        activeRouteMatch = match2;
        break;
      }
    }
  } else {
    contextualMatches = matches;
    activeRouteMatch = matches[matches.length - 1];
  }
  let path = resolveTo(to ? to : ".", getResolveToMatches(contextualMatches, v7_relativeSplatPath), stripBasename(location.pathname, basename) || location.pathname, relative === "path");
  if (to == null) {
    path.search = location.search;
    path.hash = location.hash;
  }
  if ((to == null || to === "" || to === ".") && activeRouteMatch && activeRouteMatch.route.index && !hasNakedIndexQuery(path.search)) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (prependBasename && basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
function normalizeNavigateOptions(normalizeFormMethod, isFetcher, path, opts) {
  if (!opts || !isSubmissionNavigation(opts)) {
    return {
      path
    };
  }
  if (opts.formMethod && !isValidMethod(opts.formMethod)) {
    return {
      path,
      error: getInternalRouterError(405, {
        method: opts.formMethod
      })
    };
  }
  let getInvalidBodyError = () => ({
    path,
    error: getInternalRouterError(400, {
      type: "invalid-body"
    })
  });
  let rawFormMethod = opts.formMethod || "get";
  let formMethod = normalizeFormMethod ? rawFormMethod.toUpperCase() : rawFormMethod.toLowerCase();
  let formAction = stripHashFromPath(path);
  if (opts.body !== void 0) {
    if (opts.formEncType === "text/plain") {
      if (!isMutationMethod(formMethod)) {
        return getInvalidBodyError();
      }
      let text = typeof opts.body === "string" ? opts.body : opts.body instanceof FormData || opts.body instanceof URLSearchParams ? (
        // https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#plain-text-form-data
        Array.from(opts.body.entries()).reduce((acc, _ref3) => {
          let [name10, value] = _ref3;
          return "" + acc + name10 + "=" + value + "\n";
        }, "")
      ) : String(opts.body);
      return {
        path,
        submission: {
          formMethod,
          formAction,
          formEncType: opts.formEncType,
          formData: void 0,
          json: void 0,
          text
        }
      };
    } else if (opts.formEncType === "application/json") {
      if (!isMutationMethod(formMethod)) {
        return getInvalidBodyError();
      }
      try {
        let json3 = typeof opts.body === "string" ? JSON.parse(opts.body) : opts.body;
        return {
          path,
          submission: {
            formMethod,
            formAction,
            formEncType: opts.formEncType,
            formData: void 0,
            json: json3,
            text: void 0
          }
        };
      } catch (e2) {
        return getInvalidBodyError();
      }
    }
  }
  invariant2(typeof FormData === "function", "FormData is not available in this environment");
  let searchParams;
  let formData;
  if (opts.formData) {
    searchParams = convertFormDataToSearchParams(opts.formData);
    formData = opts.formData;
  } else if (opts.body instanceof FormData) {
    searchParams = convertFormDataToSearchParams(opts.body);
    formData = opts.body;
  } else if (opts.body instanceof URLSearchParams) {
    searchParams = opts.body;
    formData = convertSearchParamsToFormData(searchParams);
  } else if (opts.body == null) {
    searchParams = new URLSearchParams();
    formData = new FormData();
  } else {
    try {
      searchParams = new URLSearchParams(opts.body);
      formData = convertSearchParamsToFormData(searchParams);
    } catch (e2) {
      return getInvalidBodyError();
    }
  }
  let submission = {
    formMethod,
    formAction,
    formEncType: opts && opts.formEncType || "application/x-www-form-urlencoded",
    formData,
    json: void 0,
    text: void 0
  };
  if (isMutationMethod(submission.formMethod)) {
    return {
      path,
      submission
    };
  }
  let parsedPath = parsePath(path);
  if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {
    searchParams.append("index", "");
  }
  parsedPath.search = "?" + searchParams;
  return {
    path: createPath(parsedPath),
    submission
  };
}
function getLoaderMatchesUntilBoundary(matches, boundaryId) {
  let boundaryMatches = matches;
  if (boundaryId) {
    let index = matches.findIndex((m2) => m2.route.id === boundaryId);
    if (index >= 0) {
      boundaryMatches = matches.slice(0, index);
    }
  }
  return boundaryMatches;
}
function getMatchesToLoad(history, state, matches, submission, location, isInitialLoad, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, deletedFetchers, fetchLoadMatches, fetchRedirectIds, routesToUse, basename, pendingActionData, pendingError) {
  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : void 0;
  let currentUrl = history.createURL(state.location);
  let nextUrl = history.createURL(location);
  let boundaryId = pendingError ? Object.keys(pendingError)[0] : void 0;
  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);
  let navigationMatches = boundaryMatches.filter((match2, index) => {
    let {
      route
    } = match2;
    if (route.lazy) {
      return true;
    }
    if (route.loader == null) {
      return false;
    }
    if (isInitialLoad) {
      if (route.loader.hydrate) {
        return true;
      }
      return state.loaderData[route.id] === void 0 && // Don't re-run if the loader ran and threw an error
      (!state.errors || state.errors[route.id] === void 0);
    }
    if (isNewLoader(state.loaderData, state.matches[index], match2) || cancelledDeferredRoutes.some((id) => id === match2.route.id)) {
      return true;
    }
    let currentRouteMatch = state.matches[index];
    let nextRouteMatch = match2;
    return shouldRevalidateLoader(match2, _extends2({
      currentUrl,
      currentParams: currentRouteMatch.params,
      nextUrl,
      nextParams: nextRouteMatch.params
    }, submission, {
      actionResult,
      defaultShouldRevalidate: (
        // Forced revalidation due to submission, useRevalidator, or X-Remix-Revalidate
        isRevalidationRequired || // Clicked the same link, resubmitted a GET form
        currentUrl.pathname + currentUrl.search === nextUrl.pathname + nextUrl.search || // Search params affect all loaders
        currentUrl.search !== nextUrl.search || isNewRouteInstance(currentRouteMatch, nextRouteMatch)
      )
    }));
  });
  let revalidatingFetchers = [];
  fetchLoadMatches.forEach((f3, key) => {
    if (isInitialLoad || !matches.some((m2) => m2.route.id === f3.routeId) || deletedFetchers.has(key)) {
      return;
    }
    let fetcherMatches = matchRoutes(routesToUse, f3.path, basename);
    if (!fetcherMatches) {
      revalidatingFetchers.push({
        key,
        routeId: f3.routeId,
        path: f3.path,
        matches: null,
        match: null,
        controller: null
      });
      return;
    }
    let fetcher = state.fetchers.get(key);
    let fetcherMatch = getTargetMatch(fetcherMatches, f3.path);
    let shouldRevalidate = false;
    if (fetchRedirectIds.has(key)) {
      shouldRevalidate = false;
    } else if (cancelledFetcherLoads.includes(key)) {
      shouldRevalidate = true;
    } else if (fetcher && fetcher.state !== "idle" && fetcher.data === void 0) {
      shouldRevalidate = isRevalidationRequired;
    } else {
      shouldRevalidate = shouldRevalidateLoader(fetcherMatch, _extends2({
        currentUrl,
        currentParams: state.matches[state.matches.length - 1].params,
        nextUrl,
        nextParams: matches[matches.length - 1].params
      }, submission, {
        actionResult,
        defaultShouldRevalidate: isRevalidationRequired
      }));
    }
    if (shouldRevalidate) {
      revalidatingFetchers.push({
        key,
        routeId: f3.routeId,
        path: f3.path,
        matches: fetcherMatches,
        match: fetcherMatch,
        controller: new AbortController()
      });
    }
  });
  return [navigationMatches, revalidatingFetchers];
}
function isNewLoader(currentLoaderData, currentMatch, match2) {
  let isNew = (
    // [a] -> [a, b]
    !currentMatch || // [a, b] -> [a, c]
    match2.route.id !== currentMatch.route.id
  );
  let isMissingData = currentLoaderData[match2.route.id] === void 0;
  return isNew || isMissingData;
}
function isNewRouteInstance(currentMatch, match2) {
  let currentPath = currentMatch.route.path;
  return (
    // param change for this match, /users/123 -> /users/456
    currentMatch.pathname !== match2.pathname || // splat param changed, which is not present in match.path
    // e.g. /files/images/avatar.jpg -> files/finances.xls
    currentPath != null && currentPath.endsWith("*") && currentMatch.params["*"] !== match2.params["*"]
  );
}
function shouldRevalidateLoader(loaderMatch, arg) {
  if (loaderMatch.route.shouldRevalidate) {
    let routeChoice = loaderMatch.route.shouldRevalidate(arg);
    if (typeof routeChoice === "boolean") {
      return routeChoice;
    }
  }
  return arg.defaultShouldRevalidate;
}
async function loadLazyRouteModule(route, mapRouteProperties2, manifest) {
  if (!route.lazy) {
    return;
  }
  let lazyRoute = await route.lazy();
  if (!route.lazy) {
    return;
  }
  let routeToUpdate = manifest[route.id];
  invariant2(routeToUpdate, "No route found in manifest");
  let routeUpdates = {};
  for (let lazyRouteProperty in lazyRoute) {
    let staticRouteValue = routeToUpdate[lazyRouteProperty];
    let isPropertyStaticallyDefined = staticRouteValue !== void 0 && // This property isn't static since it should always be updated based
    // on the route updates
    lazyRouteProperty !== "hasErrorBoundary";
    warning3(!isPropertyStaticallyDefined, 'Route "' + routeToUpdate.id + '" has a static property "' + lazyRouteProperty + '" defined but its lazy function is also returning a value for this property. ' + ('The lazy route property "' + lazyRouteProperty + '" will be ignored.'));
    if (!isPropertyStaticallyDefined && !immutableRouteKeys.has(lazyRouteProperty)) {
      routeUpdates[lazyRouteProperty] = lazyRoute[lazyRouteProperty];
    }
  }
  Object.assign(routeToUpdate, routeUpdates);
  Object.assign(routeToUpdate, _extends2({}, mapRouteProperties2(routeToUpdate), {
    lazy: void 0
  }));
}
async function callLoaderOrAction(type, request, match2, matches, manifest, mapRouteProperties2, basename, v7_relativeSplatPath, opts) {
  if (opts === void 0) {
    opts = {};
  }
  let resultType;
  let result;
  let onReject;
  let runHandler = (handler) => {
    let reject;
    let abortPromise = new Promise((_2, r2) => reject = r2);
    onReject = () => reject();
    request.signal.addEventListener("abort", onReject);
    return Promise.race([handler({
      request,
      params: match2.params,
      context: opts.requestContext
    }), abortPromise]);
  };
  try {
    let handler = match2.route[type];
    if (match2.route.lazy) {
      if (handler) {
        let handlerError;
        let values = await Promise.all([
          // If the handler throws, don't let it immediately bubble out,
          // since we need to let the lazy() execution finish so we know if this
          // route has a boundary that can handle the error
          runHandler(handler).catch((e2) => {
            handlerError = e2;
          }),
          loadLazyRouteModule(match2.route, mapRouteProperties2, manifest)
        ]);
        if (handlerError) {
          throw handlerError;
        }
        result = values[0];
      } else {
        await loadLazyRouteModule(match2.route, mapRouteProperties2, manifest);
        handler = match2.route[type];
        if (handler) {
          result = await runHandler(handler);
        } else if (type === "action") {
          let url = new URL(request.url);
          let pathname = url.pathname + url.search;
          throw getInternalRouterError(405, {
            method: request.method,
            pathname,
            routeId: match2.route.id
          });
        } else {
          return {
            type: ResultType.data,
            data: void 0
          };
        }
      }
    } else if (!handler) {
      let url = new URL(request.url);
      let pathname = url.pathname + url.search;
      throw getInternalRouterError(404, {
        pathname
      });
    } else {
      result = await runHandler(handler);
    }
    invariant2(result !== void 0, "You defined " + (type === "action" ? "an action" : "a loader") + " for route " + ('"' + match2.route.id + "\" but didn't return anything from your `" + type + "` ") + "function. Please return a value or `null`.");
  } catch (e2) {
    resultType = ResultType.error;
    result = e2;
  } finally {
    if (onReject) {
      request.signal.removeEventListener("abort", onReject);
    }
  }
  if (isResponse(result)) {
    let status = result.status;
    if (redirectStatusCodes.has(status)) {
      let location = result.headers.get("Location");
      invariant2(location, "Redirects returned/thrown from loaders/actions must have a Location header");
      if (!ABSOLUTE_URL_REGEX.test(location)) {
        location = normalizeTo(new URL(request.url), matches.slice(0, matches.indexOf(match2) + 1), basename, true, location, v7_relativeSplatPath);
      } else if (!opts.isStaticRequest) {
        let currentUrl = new URL(request.url);
        let url = location.startsWith("//") ? new URL(currentUrl.protocol + location) : new URL(location);
        let isSameBasename = stripBasename(url.pathname, basename) != null;
        if (url.origin === currentUrl.origin && isSameBasename) {
          location = url.pathname + url.search + url.hash;
        }
      }
      if (opts.isStaticRequest) {
        result.headers.set("Location", location);
        throw result;
      }
      return {
        type: ResultType.redirect,
        status,
        location,
        revalidate: result.headers.get("X-Remix-Revalidate") !== null,
        reloadDocument: result.headers.get("X-Remix-Reload-Document") !== null
      };
    }
    if (opts.isRouteRequest) {
      let queryRouteResponse = {
        type: resultType === ResultType.error ? ResultType.error : ResultType.data,
        response: result
      };
      throw queryRouteResponse;
    }
    let data;
    try {
      let contentType = result.headers.get("Content-Type");
      if (contentType && /\bapplication\/json\b/.test(contentType)) {
        if (result.body == null) {
          data = null;
        } else {
          data = await result.json();
        }
      } else {
        data = await result.text();
      }
    } catch (e2) {
      return {
        type: ResultType.error,
        error: e2
      };
    }
    if (resultType === ResultType.error) {
      return {
        type: resultType,
        error: new ErrorResponseImpl(status, result.statusText, data),
        headers: result.headers
      };
    }
    return {
      type: ResultType.data,
      data,
      statusCode: result.status,
      headers: result.headers
    };
  }
  if (resultType === ResultType.error) {
    return {
      type: resultType,
      error: result
    };
  }
  if (isDeferredData(result)) {
    var _result$init, _result$init2;
    return {
      type: ResultType.deferred,
      deferredData: result,
      statusCode: (_result$init = result.init) == null ? void 0 : _result$init.status,
      headers: ((_result$init2 = result.init) == null ? void 0 : _result$init2.headers) && new Headers(result.init.headers)
    };
  }
  return {
    type: ResultType.data,
    data: result
  };
}
function createClientSideRequest(history, location, signal, submission) {
  let url = history.createURL(stripHashFromPath(location)).toString();
  let init = {
    signal
  };
  if (submission && isMutationMethod(submission.formMethod)) {
    let {
      formMethod,
      formEncType
    } = submission;
    init.method = formMethod.toUpperCase();
    if (formEncType === "application/json") {
      init.headers = new Headers({
        "Content-Type": formEncType
      });
      init.body = JSON.stringify(submission.json);
    } else if (formEncType === "text/plain") {
      init.body = submission.text;
    } else if (formEncType === "application/x-www-form-urlencoded" && submission.formData) {
      init.body = convertFormDataToSearchParams(submission.formData);
    } else {
      init.body = submission.formData;
    }
  }
  return new Request(url, init);
}
function convertFormDataToSearchParams(formData) {
  let searchParams = new URLSearchParams();
  for (let [key, value] of formData.entries()) {
    searchParams.append(key, typeof value === "string" ? value : value.name);
  }
  return searchParams;
}
function convertSearchParamsToFormData(searchParams) {
  let formData = new FormData();
  for (let [key, value] of searchParams.entries()) {
    formData.append(key, value);
  }
  return formData;
}
function processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {
  let loaderData = {};
  let errors = null;
  let statusCode;
  let foundError = false;
  let loaderHeaders = {};
  results.forEach((result, index) => {
    let id = matchesToLoad[index].route.id;
    invariant2(!isRedirectResult(result), "Cannot handle redirect results in processLoaderData");
    if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(matches, id);
      let error = result.error;
      if (pendingError) {
        error = Object.values(pendingError)[0];
        pendingError = void 0;
      }
      errors = errors || {};
      if (errors[boundaryMatch.route.id] == null) {
        errors[boundaryMatch.route.id] = error;
      }
      loaderData[id] = void 0;
      if (!foundError) {
        foundError = true;
        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;
      }
      if (result.headers) {
        loaderHeaders[id] = result.headers;
      }
    } else {
      if (isDeferredResult(result)) {
        activeDeferreds.set(id, result.deferredData);
        loaderData[id] = result.deferredData.data;
      } else {
        loaderData[id] = result.data;
      }
      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {
        statusCode = result.statusCode;
      }
      if (result.headers) {
        loaderHeaders[id] = result.headers;
      }
    }
  });
  if (pendingError) {
    errors = pendingError;
    loaderData[Object.keys(pendingError)[0]] = void 0;
  }
  return {
    loaderData,
    errors,
    statusCode: statusCode || 200,
    loaderHeaders
  };
}
function processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {
  let {
    loaderData,
    errors
  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds);
  for (let index = 0; index < revalidatingFetchers.length; index++) {
    let {
      key,
      match: match2,
      controller
    } = revalidatingFetchers[index];
    invariant2(fetcherResults !== void 0 && fetcherResults[index] !== void 0, "Did not find corresponding fetcher result");
    let result = fetcherResults[index];
    if (controller && controller.signal.aborted) {
      continue;
    } else if (isErrorResult(result)) {
      let boundaryMatch = findNearestBoundary(state.matches, match2 == null ? void 0 : match2.route.id);
      if (!(errors && errors[boundaryMatch.route.id])) {
        errors = _extends2({}, errors, {
          [boundaryMatch.route.id]: result.error
        });
      }
      state.fetchers.delete(key);
    } else if (isRedirectResult(result)) {
      invariant2(false, "Unhandled fetcher revalidation redirect");
    } else if (isDeferredResult(result)) {
      invariant2(false, "Unhandled fetcher deferred data");
    } else {
      let doneFetcher = getDoneFetcher(result.data);
      state.fetchers.set(key, doneFetcher);
    }
  }
  return {
    loaderData,
    errors
  };
}
function mergeLoaderData(loaderData, newLoaderData, matches, errors) {
  let mergedLoaderData = _extends2({}, newLoaderData);
  for (let match2 of matches) {
    let id = match2.route.id;
    if (newLoaderData.hasOwnProperty(id)) {
      if (newLoaderData[id] !== void 0) {
        mergedLoaderData[id] = newLoaderData[id];
      }
    } else if (loaderData[id] !== void 0 && match2.route.loader) {
      mergedLoaderData[id] = loaderData[id];
    }
    if (errors && errors.hasOwnProperty(id)) {
      break;
    }
  }
  return mergedLoaderData;
}
function findNearestBoundary(matches, routeId) {
  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex((m2) => m2.route.id === routeId) + 1) : [...matches];
  return eligibleMatches.reverse().find((m2) => m2.route.hasErrorBoundary === true) || matches[0];
}
function getShortCircuitMatches(routes) {
  let route = routes.length === 1 ? routes[0] : routes.find((r2) => r2.index || !r2.path || r2.path === "/") || {
    id: "__shim-error-route__"
  };
  return {
    matches: [{
      params: {},
      pathname: "",
      pathnameBase: "",
      route
    }],
    route
  };
}
function getInternalRouterError(status, _temp5) {
  let {
    pathname,
    routeId,
    method,
    type
  } = _temp5 === void 0 ? {} : _temp5;
  let statusText = "Unknown Server Error";
  let errorMessage = "Unknown @remix-run/router error";
  if (status === 400) {
    statusText = "Bad Request";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method + ' request to "' + pathname + '" but ' + ('did not provide a `loader` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (type === "defer-action") {
      errorMessage = "defer() is not supported in actions";
    } else if (type === "invalid-body") {
      errorMessage = "Unable to encode submission body";
    }
  } else if (status === 403) {
    statusText = "Forbidden";
    errorMessage = 'Route "' + routeId + '" does not match URL "' + pathname + '"';
  } else if (status === 404) {
    statusText = "Not Found";
    errorMessage = 'No route matches URL "' + pathname + '"';
  } else if (status === 405) {
    statusText = "Method Not Allowed";
    if (method && pathname && routeId) {
      errorMessage = "You made a " + method.toUpperCase() + ' request to "' + pathname + '" but ' + ('did not provide an `action` for route "' + routeId + '", ') + "so there is no way to handle the request.";
    } else if (method) {
      errorMessage = 'Invalid request method "' + method.toUpperCase() + '"';
    }
  }
  return new ErrorResponseImpl(status || 500, statusText, new Error(errorMessage), true);
}
function findRedirect(results) {
  for (let i2 = results.length - 1; i2 >= 0; i2--) {
    let result = results[i2];
    if (isRedirectResult(result)) {
      return {
        result,
        idx: i2
      };
    }
  }
}
function stripHashFromPath(path) {
  let parsedPath = typeof path === "string" ? parsePath(path) : path;
  return createPath(_extends2({}, parsedPath, {
    hash: ""
  }));
}
function isHashChangeOnly(a2, b2) {
  if (a2.pathname !== b2.pathname || a2.search !== b2.search) {
    return false;
  }
  if (a2.hash === "") {
    return b2.hash !== "";
  } else if (a2.hash === b2.hash) {
    return true;
  } else if (b2.hash !== "") {
    return true;
  }
  return false;
}
function isDeferredResult(result) {
  return result.type === ResultType.deferred;
}
function isErrorResult(result) {
  return result.type === ResultType.error;
}
function isRedirectResult(result) {
  return (result && result.type) === ResultType.redirect;
}
function isDeferredData(value) {
  let deferred2 = value;
  return deferred2 && typeof deferred2 === "object" && typeof deferred2.data === "object" && typeof deferred2.subscribe === "function" && typeof deferred2.cancel === "function" && typeof deferred2.resolveData === "function";
}
function isResponse(value) {
  return value != null && typeof value.status === "number" && typeof value.statusText === "string" && typeof value.headers === "object" && typeof value.body !== "undefined";
}
function isValidMethod(method) {
  return validRequestMethods.has(method.toLowerCase());
}
function isMutationMethod(method) {
  return validMutationMethods.has(method.toLowerCase());
}
async function resolveDeferredResults(currentMatches, matchesToLoad, results, signals, isFetcher, currentLoaderData) {
  for (let index = 0; index < results.length; index++) {
    let result = results[index];
    let match2 = matchesToLoad[index];
    if (!match2) {
      continue;
    }
    let currentMatch = currentMatches.find((m2) => m2.route.id === match2.route.id);
    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match2) && (currentLoaderData && currentLoaderData[match2.route.id]) !== void 0;
    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {
      let signal = signals[index];
      invariant2(signal, "Expected an AbortSignal for revalidating fetcher deferred result");
      await resolveDeferredData(result, signal, isFetcher).then((result2) => {
        if (result2) {
          results[index] = result2 || results[index];
        }
      });
    }
  }
}
async function resolveDeferredData(result, signal, unwrap) {
  if (unwrap === void 0) {
    unwrap = false;
  }
  let aborted = await result.deferredData.resolveData(signal);
  if (aborted) {
    return;
  }
  if (unwrap) {
    try {
      return {
        type: ResultType.data,
        data: result.deferredData.unwrappedData
      };
    } catch (e2) {
      return {
        type: ResultType.error,
        error: e2
      };
    }
  }
  return {
    type: ResultType.data,
    data: result.deferredData.data
  };
}
function hasNakedIndexQuery(search) {
  return new URLSearchParams(search).getAll("index").some((v2) => v2 === "");
}
function getTargetMatch(matches, location) {
  let search = typeof location === "string" ? parsePath(location).search : location.search;
  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || "")) {
    return matches[matches.length - 1];
  }
  let pathMatches = getPathContributingMatches(matches);
  return pathMatches[pathMatches.length - 1];
}
function getSubmissionFromNavigation(navigation) {
  let {
    formMethod,
    formAction,
    formEncType,
    text,
    formData,
    json: json3
  } = navigation;
  if (!formMethod || !formAction || !formEncType) {
    return;
  }
  if (text != null) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData: void 0,
      json: void 0,
      text
    };
  } else if (formData != null) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData,
      json: void 0,
      text: void 0
    };
  } else if (json3 !== void 0) {
    return {
      formMethod,
      formAction,
      formEncType,
      formData: void 0,
      json: json3,
      text: void 0
    };
  }
}
function getLoadingNavigation(location, submission) {
  if (submission) {
    let navigation = {
      state: "loading",
      location,
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text
    };
    return navigation;
  } else {
    let navigation = {
      state: "loading",
      location,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    return navigation;
  }
}
function getSubmittingNavigation(location, submission) {
  let navigation = {
    state: "submitting",
    location,
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text
  };
  return navigation;
}
function getLoadingFetcher(submission, data) {
  if (submission) {
    let fetcher = {
      state: "loading",
      formMethod: submission.formMethod,
      formAction: submission.formAction,
      formEncType: submission.formEncType,
      formData: submission.formData,
      json: submission.json,
      text: submission.text,
      data
    };
    return fetcher;
  } else {
    let fetcher = {
      state: "loading",
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0,
      data
    };
    return fetcher;
  }
}
function getSubmittingFetcher(submission, existingFetcher) {
  let fetcher = {
    state: "submitting",
    formMethod: submission.formMethod,
    formAction: submission.formAction,
    formEncType: submission.formEncType,
    formData: submission.formData,
    json: submission.json,
    text: submission.text,
    data: existingFetcher ? existingFetcher.data : void 0
  };
  return fetcher;
}
function getDoneFetcher(data) {
  let fetcher = {
    state: "idle",
    formMethod: void 0,
    formAction: void 0,
    formEncType: void 0,
    formData: void 0,
    json: void 0,
    text: void 0,
    data
  };
  return fetcher;
}
function restoreAppliedTransitions(_window, transitions) {
  try {
    let sessionPositions = _window.sessionStorage.getItem(TRANSITIONS_STORAGE_KEY);
    if (sessionPositions) {
      let json3 = JSON.parse(sessionPositions);
      for (let [k2, v2] of Object.entries(json3 || {})) {
        if (v2 && Array.isArray(v2)) {
          transitions.set(k2, new Set(v2 || []));
        }
      }
    }
  } catch (e2) {
  }
}
function persistAppliedTransitions(_window, transitions) {
  if (transitions.size > 0) {
    let json3 = {};
    for (let [k2, v2] of transitions) {
      json3[k2] = [...v2];
    }
    try {
      _window.sessionStorage.setItem(TRANSITIONS_STORAGE_KEY, JSON.stringify(json3));
    } catch (error) {
      warning3(false, "Failed to save applied view transitions in sessionStorage (" + error + ").");
    }
  }
}
var Action, PopStateEventType, ResultType, immutableRouteKeys, paramRe, dynamicSegmentValue, indexRouteValue, emptySegmentValue, staticSegmentValue, splatPenalty, isSplat, joinPaths, normalizePathname, normalizeSearch, normalizeHash, json, AbortedDeferredError, DeferredData, defer, redirect, redirectDocument, ErrorResponseImpl, validMutationMethodsArr, validMutationMethods, validRequestMethodsArr, validRequestMethods, redirectStatusCodes, redirectPreserveMethodStatusCodes, IDLE_NAVIGATION, IDLE_FETCHER, IDLE_BLOCKER, ABSOLUTE_URL_REGEX, defaultMapRouteProperties, TRANSITIONS_STORAGE_KEY, UNSAFE_DEFERRED_SYMBOL;
var init_router = __esm({
  "node_modules/@remix-run/router/dist/router.js"() {
    (function(Action2) {
      Action2["Pop"] = "POP";
      Action2["Push"] = "PUSH";
      Action2["Replace"] = "REPLACE";
    })(Action || (Action = {}));
    PopStateEventType = "popstate";
    (function(ResultType2) {
      ResultType2["data"] = "data";
      ResultType2["deferred"] = "deferred";
      ResultType2["redirect"] = "redirect";
      ResultType2["error"] = "error";
    })(ResultType || (ResultType = {}));
    immutableRouteKeys = /* @__PURE__ */ new Set(["lazy", "caseSensitive", "path", "id", "index", "children"]);
    paramRe = /^:[\w-]+$/;
    dynamicSegmentValue = 3;
    indexRouteValue = 2;
    emptySegmentValue = 1;
    staticSegmentValue = 10;
    splatPenalty = -2;
    isSplat = (s2) => s2 === "*";
    joinPaths = (paths) => paths.join("/").replace(/\/\/+/g, "/");
    normalizePathname = (pathname) => pathname.replace(/\/+$/, "").replace(/^\/*/, "/");
    normalizeSearch = (search) => !search || search === "?" ? "" : search.startsWith("?") ? search : "?" + search;
    normalizeHash = (hash) => !hash || hash === "#" ? "" : hash.startsWith("#") ? hash : "#" + hash;
    json = function json2(data, init) {
      if (init === void 0) {
        init = {};
      }
      let responseInit = typeof init === "number" ? {
        status: init
      } : init;
      let headers = new Headers(responseInit.headers);
      if (!headers.has("Content-Type")) {
        headers.set("Content-Type", "application/json; charset=utf-8");
      }
      return new Response(JSON.stringify(data), _extends2({}, responseInit, {
        headers
      }));
    };
    AbortedDeferredError = class extends Error {
    };
    DeferredData = class {
      constructor(data, responseInit) {
        this.pendingKeysSet = /* @__PURE__ */ new Set();
        this.subscribers = /* @__PURE__ */ new Set();
        this.deferredKeys = [];
        invariant2(data && typeof data === "object" && !Array.isArray(data), "defer() only accepts plain objects");
        let reject;
        this.abortPromise = new Promise((_2, r2) => reject = r2);
        this.controller = new AbortController();
        let onAbort = () => reject(new AbortedDeferredError("Deferred data aborted"));
        this.unlistenAbortSignal = () => this.controller.signal.removeEventListener("abort", onAbort);
        this.controller.signal.addEventListener("abort", onAbort);
        this.data = Object.entries(data).reduce((acc, _ref2) => {
          let [key, value] = _ref2;
          return Object.assign(acc, {
            [key]: this.trackPromise(key, value)
          });
        }, {});
        if (this.done) {
          this.unlistenAbortSignal();
        }
        this.init = responseInit;
      }
      trackPromise(key, value) {
        if (!(value instanceof Promise)) {
          return value;
        }
        this.deferredKeys.push(key);
        this.pendingKeysSet.add(key);
        let promise3 = Promise.race([value, this.abortPromise]).then((data) => this.onSettle(promise3, key, void 0, data), (error) => this.onSettle(promise3, key, error));
        promise3.catch(() => {
        });
        Object.defineProperty(promise3, "_tracked", {
          get: () => true
        });
        return promise3;
      }
      onSettle(promise3, key, error, data) {
        if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {
          this.unlistenAbortSignal();
          Object.defineProperty(promise3, "_error", {
            get: () => error
          });
          return Promise.reject(error);
        }
        this.pendingKeysSet.delete(key);
        if (this.done) {
          this.unlistenAbortSignal();
        }
        if (error === void 0 && data === void 0) {
          let undefinedError = new Error('Deferred data for key "' + key + '" resolved/rejected with `undefined`, you must resolve/reject with a value or `null`.');
          Object.defineProperty(promise3, "_error", {
            get: () => undefinedError
          });
          this.emit(false, key);
          return Promise.reject(undefinedError);
        }
        if (data === void 0) {
          Object.defineProperty(promise3, "_error", {
            get: () => error
          });
          this.emit(false, key);
          return Promise.reject(error);
        }
        Object.defineProperty(promise3, "_data", {
          get: () => data
        });
        this.emit(false, key);
        return data;
      }
      emit(aborted, settledKey) {
        this.subscribers.forEach((subscriber) => subscriber(aborted, settledKey));
      }
      subscribe(fn2) {
        this.subscribers.add(fn2);
        return () => this.subscribers.delete(fn2);
      }
      cancel() {
        this.controller.abort();
        this.pendingKeysSet.forEach((v2, k2) => this.pendingKeysSet.delete(k2));
        this.emit(true);
      }
      async resolveData(signal) {
        let aborted = false;
        if (!this.done) {
          let onAbort = () => this.cancel();
          signal.addEventListener("abort", onAbort);
          aborted = await new Promise((resolve) => {
            this.subscribe((aborted2) => {
              signal.removeEventListener("abort", onAbort);
              if (aborted2 || this.done) {
                resolve(aborted2);
              }
            });
          });
        }
        return aborted;
      }
      get done() {
        return this.pendingKeysSet.size === 0;
      }
      get unwrappedData() {
        invariant2(this.data !== null && this.done, "Can only unwrap data on initialized and settled deferreds");
        return Object.entries(this.data).reduce((acc, _ref3) => {
          let [key, value] = _ref3;
          return Object.assign(acc, {
            [key]: unwrapTrackedPromise(value)
          });
        }, {});
      }
      get pendingKeys() {
        return Array.from(this.pendingKeysSet);
      }
    };
    defer = function defer2(data, init) {
      if (init === void 0) {
        init = {};
      }
      let responseInit = typeof init === "number" ? {
        status: init
      } : init;
      return new DeferredData(data, responseInit);
    };
    redirect = function redirect2(url, init) {
      if (init === void 0) {
        init = 302;
      }
      let responseInit = init;
      if (typeof responseInit === "number") {
        responseInit = {
          status: responseInit
        };
      } else if (typeof responseInit.status === "undefined") {
        responseInit.status = 302;
      }
      let headers = new Headers(responseInit.headers);
      headers.set("Location", url);
      return new Response(null, _extends2({}, responseInit, {
        headers
      }));
    };
    redirectDocument = (url, init) => {
      let response = redirect(url, init);
      response.headers.set("X-Remix-Reload-Document", "true");
      return response;
    };
    ErrorResponseImpl = class {
      constructor(status, statusText, data, internal) {
        if (internal === void 0) {
          internal = false;
        }
        this.status = status;
        this.statusText = statusText || "";
        this.internal = internal;
        if (data instanceof Error) {
          this.data = data.toString();
          this.error = data;
        } else {
          this.data = data;
        }
      }
    };
    validMutationMethodsArr = ["post", "put", "patch", "delete"];
    validMutationMethods = new Set(validMutationMethodsArr);
    validRequestMethodsArr = ["get", ...validMutationMethodsArr];
    validRequestMethods = new Set(validRequestMethodsArr);
    redirectStatusCodes = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
    redirectPreserveMethodStatusCodes = /* @__PURE__ */ new Set([307, 308]);
    IDLE_NAVIGATION = {
      state: "idle",
      location: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    IDLE_FETCHER = {
      state: "idle",
      data: void 0,
      formMethod: void 0,
      formAction: void 0,
      formEncType: void 0,
      formData: void 0,
      json: void 0,
      text: void 0
    };
    IDLE_BLOCKER = {
      state: "unblocked",
      proceed: void 0,
      reset: void 0,
      location: void 0
    };
    ABSOLUTE_URL_REGEX = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    defaultMapRouteProperties = (route) => ({
      hasErrorBoundary: Boolean(route.hasErrorBoundary)
    });
    TRANSITIONS_STORAGE_KEY = "remix-router-transitions";
    UNSAFE_DEFERRED_SYMBOL = Symbol("deferred");
  }
});

// node_modules/react-router/dist/index.js
function _extends3() {
  _extends3 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends3.apply(this, arguments);
}
function useHref(to, _temp) {
  let {
    relative
  } = _temp === void 0 ? {} : _temp;
  !useInRouterContext() ? true ? invariant2(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useHref() may be used only in the context of a <Router> component."
  ) : invariant2(false) : void 0;
  let {
    basename,
    navigator
  } = React7.useContext(NavigationContext);
  let {
    hash,
    pathname,
    search
  } = useResolvedPath(to, {
    relative
  });
  let joinedPathname = pathname;
  if (basename !== "/") {
    joinedPathname = pathname === "/" ? basename : joinPaths([basename, pathname]);
  }
  return navigator.createHref({
    pathname: joinedPathname,
    search,
    hash
  });
}
function useInRouterContext() {
  return React7.useContext(LocationContext) != null;
}
function useLocation() {
  !useInRouterContext() ? true ? invariant2(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useLocation() may be used only in the context of a <Router> component."
  ) : invariant2(false) : void 0;
  return React7.useContext(LocationContext).location;
}
function useNavigationType() {
  return React7.useContext(LocationContext).navigationType;
}
function useMatch(pattern3) {
  !useInRouterContext() ? true ? invariant2(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useMatch() may be used only in the context of a <Router> component."
  ) : invariant2(false) : void 0;
  let {
    pathname
  } = useLocation();
  return React7.useMemo(() => matchPath(pattern3, pathname), [pathname, pattern3]);
}
function useIsomorphicLayoutEffect2(cb) {
  let isStatic = React7.useContext(NavigationContext).static;
  if (!isStatic) {
    React7.useLayoutEffect(cb);
  }
}
function useNavigate() {
  let {
    isDataRoute
  } = React7.useContext(RouteContext);
  return isDataRoute ? useNavigateStable() : useNavigateUnstable();
}
function useNavigateUnstable() {
  !useInRouterContext() ? true ? invariant2(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useNavigate() may be used only in the context of a <Router> component."
  ) : invariant2(false) : void 0;
  let dataRouterContext = React7.useContext(DataRouterContext);
  let {
    basename,
    future,
    navigator
  } = React7.useContext(NavigationContext);
  let {
    matches
  } = React7.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  let activeRef = React7.useRef(false);
  useIsomorphicLayoutEffect2(() => {
    activeRef.current = true;
  });
  let navigate = React7.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    true ? warning3(activeRef.current, navigateEffectWarning) : void 0;
    if (!activeRef.current)
      return;
    if (typeof to === "number") {
      navigator.go(to);
      return;
    }
    let path = resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, options.relative === "path");
    if (dataRouterContext == null && basename !== "/") {
      path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
    }
    (!!options.replace ? navigator.replace : navigator.push)(path, options.state, options);
  }, [basename, navigator, routePathnamesJson, locationPathname, dataRouterContext]);
  return navigate;
}
function useOutletContext() {
  return React7.useContext(OutletContext);
}
function useOutlet(context) {
  let outlet = React7.useContext(RouteContext).outlet;
  if (outlet) {
    return React7.createElement(OutletContext.Provider, {
      value: context
    }, outlet);
  }
  return outlet;
}
function useParams() {
  let {
    matches
  } = React7.useContext(RouteContext);
  let routeMatch = matches[matches.length - 1];
  return routeMatch ? routeMatch.params : {};
}
function useResolvedPath(to, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    future
  } = React7.useContext(NavigationContext);
  let {
    matches
  } = React7.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let routePathnamesJson = JSON.stringify(getResolveToMatches(matches, future.v7_relativeSplatPath));
  return React7.useMemo(() => resolveTo(to, JSON.parse(routePathnamesJson), locationPathname, relative === "path"), [to, routePathnamesJson, locationPathname, relative]);
}
function useRoutes(routes, locationArg) {
  return useRoutesImpl(routes, locationArg);
}
function useRoutesImpl(routes, locationArg, dataRouterState, future) {
  !useInRouterContext() ? true ? invariant2(
    false,
    // TODO: This error is probably because they somehow have 2 versions of the
    // router loaded. We can help them understand how to avoid that.
    "useRoutes() may be used only in the context of a <Router> component."
  ) : invariant2(false) : void 0;
  let {
    navigator
  } = React7.useContext(NavigationContext);
  let {
    matches: parentMatches
  } = React7.useContext(RouteContext);
  let routeMatch = parentMatches[parentMatches.length - 1];
  let parentParams = routeMatch ? routeMatch.params : {};
  let parentPathname = routeMatch ? routeMatch.pathname : "/";
  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : "/";
  let parentRoute = routeMatch && routeMatch.route;
  if (true) {
    let parentPath = parentRoute && parentRoute.path || "";
    warningOnce(parentPathname, !parentRoute || parentPath.endsWith("*"), "You rendered descendant <Routes> (or called `useRoutes()`) at " + ('"' + parentPathname + '" (under <Route path="' + parentPath + '">) but the ') + `parent route path has no trailing "*". This means if you navigate deeper, the parent won't match anymore and therefore the child routes will never render.

` + ('Please change the parent <Route path="' + parentPath + '"> to <Route ') + ('path="' + (parentPath === "/" ? "*" : parentPath + "/*") + '">.'));
  }
  let locationFromContext = useLocation();
  let location;
  if (locationArg) {
    var _parsedLocationArg$pa;
    let parsedLocationArg = typeof locationArg === "string" ? parsePath(locationArg) : locationArg;
    !(parentPathnameBase === "/" || ((_parsedLocationArg$pa = parsedLocationArg.pathname) == null ? void 0 : _parsedLocationArg$pa.startsWith(parentPathnameBase))) ? true ? invariant2(false, "When overriding the location using `<Routes location>` or `useRoutes(routes, location)`, the location pathname must begin with the portion of the URL pathname that was " + ('matched by all parent routes. The current pathname base is "' + parentPathnameBase + '" ') + ('but pathname "' + parsedLocationArg.pathname + '" was given in the `location` prop.')) : invariant2(false) : void 0;
    location = parsedLocationArg;
  } else {
    location = locationFromContext;
  }
  let pathname = location.pathname || "/";
  let remainingPathname = pathname;
  if (parentPathnameBase !== "/") {
    let parentSegments = parentPathnameBase.replace(/^\//, "").split("/");
    let segments = pathname.replace(/^\//, "").split("/");
    remainingPathname = "/" + segments.slice(parentSegments.length).join("/");
  }
  let matches = matchRoutes(routes, {
    pathname: remainingPathname
  });
  if (true) {
    true ? warning3(parentRoute || matches != null, 'No routes matched location "' + location.pathname + location.search + location.hash + '" ') : void 0;
    true ? warning3(matches == null || matches[matches.length - 1].route.element !== void 0 || matches[matches.length - 1].route.Component !== void 0 || matches[matches.length - 1].route.lazy !== void 0, 'Matched leaf route at location "' + location.pathname + location.search + location.hash + '" does not have an element or Component. This means it will render an <Outlet /> with a null value by default resulting in an "empty" page.') : void 0;
  }
  let renderedMatches = _renderMatches(matches && matches.map((match2) => Object.assign({}, match2, {
    params: Object.assign({}, parentParams, match2.params),
    pathname: joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator.encodeLocation ? navigator.encodeLocation(match2.pathname).pathname : match2.pathname
    ]),
    pathnameBase: match2.pathnameBase === "/" ? parentPathnameBase : joinPaths([
      parentPathnameBase,
      // Re-encode pathnames that were decoded inside matchRoutes
      navigator.encodeLocation ? navigator.encodeLocation(match2.pathnameBase).pathname : match2.pathnameBase
    ])
  })), parentMatches, dataRouterState, future);
  if (locationArg && renderedMatches) {
    return React7.createElement(LocationContext.Provider, {
      value: {
        location: _extends3({
          pathname: "/",
          search: "",
          hash: "",
          state: null,
          key: "default"
        }, location),
        navigationType: Action.Pop
      }
    }, renderedMatches);
  }
  return renderedMatches;
}
function DefaultErrorComponent() {
  let error = useRouteError();
  let message = isRouteErrorResponse(error) ? error.status + " " + error.statusText : error instanceof Error ? error.message : JSON.stringify(error);
  let stack = error instanceof Error ? error.stack : null;
  let lightgrey = "rgba(200,200,200, 0.5)";
  let preStyles = {
    padding: "0.5rem",
    backgroundColor: lightgrey
  };
  let codeStyles = {
    padding: "2px 4px",
    backgroundColor: lightgrey
  };
  let devInfo = null;
  if (true) {
    console.error("Error handled by React Router default ErrorBoundary:", error);
    devInfo = React7.createElement(React7.Fragment, null, React7.createElement("p", null, "💿 Hey developer 👋"), React7.createElement("p", null, "You can provide a way better UX than this when your app throws errors by providing your own ", React7.createElement("code", {
      style: codeStyles
    }, "ErrorBoundary"), " or", " ", React7.createElement("code", {
      style: codeStyles
    }, "errorElement"), " prop on your route."));
  }
  return React7.createElement(React7.Fragment, null, React7.createElement("h2", null, "Unexpected Application Error!"), React7.createElement("h3", {
    style: {
      fontStyle: "italic"
    }
  }, message), stack ? React7.createElement("pre", {
    style: preStyles
  }, stack) : null, devInfo);
}
function RenderedRoute(_ref) {
  let {
    routeContext,
    match: match2,
    children
  } = _ref;
  let dataRouterContext = React7.useContext(DataRouterContext);
  if (dataRouterContext && dataRouterContext.static && dataRouterContext.staticContext && (match2.route.errorElement || match2.route.ErrorBoundary)) {
    dataRouterContext.staticContext._deepestRenderedBoundaryId = match2.route.id;
  }
  return React7.createElement(RouteContext.Provider, {
    value: routeContext
  }, children);
}
function _renderMatches(matches, parentMatches, dataRouterState, future) {
  var _dataRouterState2;
  if (parentMatches === void 0) {
    parentMatches = [];
  }
  if (dataRouterState === void 0) {
    dataRouterState = null;
  }
  if (future === void 0) {
    future = null;
  }
  if (matches == null) {
    var _dataRouterState;
    if ((_dataRouterState = dataRouterState) != null && _dataRouterState.errors) {
      matches = dataRouterState.matches;
    } else {
      return null;
    }
  }
  let renderedMatches = matches;
  let errors = (_dataRouterState2 = dataRouterState) == null ? void 0 : _dataRouterState2.errors;
  if (errors != null) {
    let errorIndex = renderedMatches.findIndex((m2) => m2.route.id && (errors == null ? void 0 : errors[m2.route.id]));
    !(errorIndex >= 0) ? true ? invariant2(false, "Could not find a matching route for errors on route IDs: " + Object.keys(errors).join(",")) : invariant2(false) : void 0;
    renderedMatches = renderedMatches.slice(0, Math.min(renderedMatches.length, errorIndex + 1));
  }
  let renderFallback = false;
  let fallbackIndex = -1;
  if (dataRouterState && future && future.v7_partialHydration) {
    for (let i2 = 0; i2 < renderedMatches.length; i2++) {
      let match2 = renderedMatches[i2];
      if (match2.route.HydrateFallback || match2.route.hydrateFallbackElement) {
        fallbackIndex = i2;
      }
      if (match2.route.id) {
        let {
          loaderData,
          errors: errors2
        } = dataRouterState;
        let needsToRunLoader = match2.route.loader && loaderData[match2.route.id] === void 0 && (!errors2 || errors2[match2.route.id] === void 0);
        if (match2.route.lazy || needsToRunLoader) {
          renderFallback = true;
          if (fallbackIndex >= 0) {
            renderedMatches = renderedMatches.slice(0, fallbackIndex + 1);
          } else {
            renderedMatches = [renderedMatches[0]];
          }
          break;
        }
      }
    }
  }
  return renderedMatches.reduceRight((outlet, match2, index) => {
    let error;
    let shouldRenderHydrateFallback = false;
    let errorElement = null;
    let hydrateFallbackElement = null;
    if (dataRouterState) {
      error = errors && match2.route.id ? errors[match2.route.id] : void 0;
      errorElement = match2.route.errorElement || defaultErrorElement;
      if (renderFallback) {
        if (fallbackIndex < 0 && index === 0) {
          warningOnce("route-fallback", false, "No `HydrateFallback` element provided to render during initial hydration");
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = null;
        } else if (fallbackIndex === index) {
          shouldRenderHydrateFallback = true;
          hydrateFallbackElement = match2.route.hydrateFallbackElement || null;
        }
      }
    }
    let matches2 = parentMatches.concat(renderedMatches.slice(0, index + 1));
    let getChildren = () => {
      let children;
      if (error) {
        children = errorElement;
      } else if (shouldRenderHydrateFallback) {
        children = hydrateFallbackElement;
      } else if (match2.route.Component) {
        children = React7.createElement(match2.route.Component, null);
      } else if (match2.route.element) {
        children = match2.route.element;
      } else {
        children = outlet;
      }
      return React7.createElement(RenderedRoute, {
        match: match2,
        routeContext: {
          outlet,
          matches: matches2,
          isDataRoute: dataRouterState != null
        },
        children
      });
    };
    return dataRouterState && (match2.route.ErrorBoundary || match2.route.errorElement || index === 0) ? React7.createElement(RenderErrorBoundary, {
      location: dataRouterState.location,
      revalidation: dataRouterState.revalidation,
      component: errorElement,
      error,
      children: getChildren(),
      routeContext: {
        outlet: null,
        matches: matches2,
        isDataRoute: true
      }
    }) : getChildren();
  }, null);
}
function getDataRouterConsoleError(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext(hookName) {
  let ctx = React7.useContext(DataRouterContext);
  !ctx ? true ? invariant2(false, getDataRouterConsoleError(hookName)) : invariant2(false) : void 0;
  return ctx;
}
function useDataRouterState(hookName) {
  let state = React7.useContext(DataRouterStateContext);
  !state ? true ? invariant2(false, getDataRouterConsoleError(hookName)) : invariant2(false) : void 0;
  return state;
}
function useRouteContext(hookName) {
  let route = React7.useContext(RouteContext);
  !route ? true ? invariant2(false, getDataRouterConsoleError(hookName)) : invariant2(false) : void 0;
  return route;
}
function useCurrentRouteId(hookName) {
  let route = useRouteContext(hookName);
  let thisRoute = route.matches[route.matches.length - 1];
  !thisRoute.route.id ? true ? invariant2(false, hookName + ' can only be used on routes that contain a unique "id"') : invariant2(false) : void 0;
  return thisRoute.route.id;
}
function useRouteId() {
  return useCurrentRouteId(DataRouterStateHook.UseRouteId);
}
function useNavigation() {
  let state = useDataRouterState(DataRouterStateHook.UseNavigation);
  return state.navigation;
}
function useRevalidator() {
  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);
  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);
  return React7.useMemo(() => ({
    revalidate: dataRouterContext.router.revalidate,
    state: state.revalidation
  }), [dataRouterContext.router.revalidate, state.revalidation]);
}
function useMatches() {
  let {
    matches,
    loaderData
  } = useDataRouterState(DataRouterStateHook.UseMatches);
  return React7.useMemo(() => matches.map((m2) => convertRouteMatchToUiMatch(m2, loaderData)), [matches, loaderData]);
}
function useLoaderData() {
  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);
  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  if (state.errors && state.errors[routeId] != null) {
    console.error("You cannot `useLoaderData` in an errorElement (routeId: " + routeId + ")");
    return void 0;
  }
  return state.loaderData[routeId];
}
function useRouteLoaderData(routeId) {
  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);
  return state.loaderData[routeId];
}
function useActionData() {
  let state = useDataRouterState(DataRouterStateHook.UseActionData);
  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);
  return state.actionData ? state.actionData[routeId] : void 0;
}
function useRouteError() {
  var _state$errors;
  let error = React7.useContext(RouteErrorContext);
  let state = useDataRouterState(DataRouterStateHook.UseRouteError);
  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);
  if (error !== void 0) {
    return error;
  }
  return (_state$errors = state.errors) == null ? void 0 : _state$errors[routeId];
}
function useAsyncValue() {
  let value = React7.useContext(AwaitContext);
  return value == null ? void 0 : value._data;
}
function useAsyncError() {
  let value = React7.useContext(AwaitContext);
  return value == null ? void 0 : value._error;
}
function useBlocker(shouldBlock) {
  let {
    router,
    basename
  } = useDataRouterContext(DataRouterHook.UseBlocker);
  let state = useDataRouterState(DataRouterStateHook.UseBlocker);
  let [blockerKey, setBlockerKey] = React7.useState("");
  let blockerFunction = React7.useCallback((arg) => {
    if (typeof shouldBlock !== "function") {
      return !!shouldBlock;
    }
    if (basename === "/") {
      return shouldBlock(arg);
    }
    let {
      currentLocation,
      nextLocation,
      historyAction
    } = arg;
    return shouldBlock({
      currentLocation: _extends3({}, currentLocation, {
        pathname: stripBasename(currentLocation.pathname, basename) || currentLocation.pathname
      }),
      nextLocation: _extends3({}, nextLocation, {
        pathname: stripBasename(nextLocation.pathname, basename) || nextLocation.pathname
      }),
      historyAction
    });
  }, [basename, shouldBlock]);
  React7.useEffect(() => {
    let key = String(++blockerId);
    setBlockerKey(key);
    return () => router.deleteBlocker(key);
  }, [router]);
  React7.useEffect(() => {
    if (blockerKey !== "") {
      router.getBlocker(blockerKey, blockerFunction);
    }
  }, [router, blockerKey, blockerFunction]);
  return blockerKey && state.blockers.has(blockerKey) ? state.blockers.get(blockerKey) : IDLE_BLOCKER;
}
function useNavigateStable() {
  let {
    router
  } = useDataRouterContext(DataRouterHook.UseNavigateStable);
  let id = useCurrentRouteId(DataRouterStateHook.UseNavigateStable);
  let activeRef = React7.useRef(false);
  useIsomorphicLayoutEffect2(() => {
    activeRef.current = true;
  });
  let navigate = React7.useCallback(function(to, options) {
    if (options === void 0) {
      options = {};
    }
    true ? warning3(activeRef.current, navigateEffectWarning) : void 0;
    if (!activeRef.current)
      return;
    if (typeof to === "number") {
      router.navigate(to);
    } else {
      router.navigate(to, _extends3({
        fromRouteId: id
      }, options));
    }
  }, [router, id]);
  return navigate;
}
function warningOnce(key, cond, message) {
  if (!cond && !alreadyWarned[key]) {
    alreadyWarned[key] = true;
    true ? warning3(false, message) : void 0;
  }
}
function MemoryRouter(_ref3) {
  let {
    basename,
    children,
    initialEntries,
    initialIndex,
    future
  } = _ref3;
  let historyRef = React7.useRef();
  if (historyRef.current == null) {
    historyRef.current = createMemoryHistory({
      initialEntries,
      initialIndex,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React7.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React7.useCallback((newState) => {
    v7_startTransition && startTransitionImpl ? startTransitionImpl(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React7.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return React7.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function Navigate(_ref4) {
  let {
    to,
    replace,
    state,
    relative
  } = _ref4;
  !useInRouterContext() ? true ? invariant2(
    false,
    // TODO: This error is probably because they somehow have 2 versions of
    // the router loaded. We can help them understand how to avoid that.
    "<Navigate> may be used only in the context of a <Router> component."
  ) : invariant2(false) : void 0;
  let {
    future,
    static: isStatic
  } = React7.useContext(NavigationContext);
  true ? warning3(!isStatic, "<Navigate> must not be used on the initial render in a <StaticRouter>. This is a no-op, but you should modify your code so the <Navigate> is only ever rendered in response to some user interaction or state change.") : void 0;
  let {
    matches
  } = React7.useContext(RouteContext);
  let {
    pathname: locationPathname
  } = useLocation();
  let navigate = useNavigate();
  let path = resolveTo(to, getResolveToMatches(matches, future.v7_relativeSplatPath), locationPathname, relative === "path");
  let jsonPath = JSON.stringify(path);
  React7.useEffect(() => navigate(JSON.parse(jsonPath), {
    replace,
    state,
    relative
  }), [navigate, jsonPath, relative, replace, state]);
  return null;
}
function Outlet(props) {
  return useOutlet(props.context);
}
function Route(_props) {
  true ? invariant2(false, "A <Route> is only ever to be used as the child of <Routes> element, never rendered directly. Please wrap your <Route> in a <Routes>.") : invariant2(false);
}
function Router(_ref5) {
  let {
    basename: basenameProp = "/",
    children = null,
    location: locationProp,
    navigationType = Action.Pop,
    navigator,
    static: staticProp = false,
    future
  } = _ref5;
  !!useInRouterContext() ? true ? invariant2(false, "You cannot render a <Router> inside another <Router>. You should never have more than one in your app.") : invariant2(false) : void 0;
  let basename = basenameProp.replace(/^\/*/, "/");
  let navigationContext = React7.useMemo(() => ({
    basename,
    navigator,
    static: staticProp,
    future: _extends3({
      v7_relativeSplatPath: false
    }, future)
  }), [basename, future, navigator, staticProp]);
  if (typeof locationProp === "string") {
    locationProp = parsePath(locationProp);
  }
  let {
    pathname = "/",
    search = "",
    hash = "",
    state = null,
    key = "default"
  } = locationProp;
  let locationContext = React7.useMemo(() => {
    let trailingPathname = stripBasename(pathname, basename);
    if (trailingPathname == null) {
      return null;
    }
    return {
      location: {
        pathname: trailingPathname,
        search,
        hash,
        state,
        key
      },
      navigationType
    };
  }, [basename, pathname, search, hash, state, key, navigationType]);
  true ? warning3(locationContext != null, '<Router basename="' + basename + '"> is not able to match the URL ' + ('"' + pathname + search + hash + '" because it does not start with the ') + "basename, so the <Router> won't render anything.") : void 0;
  if (locationContext == null) {
    return null;
  }
  return React7.createElement(NavigationContext.Provider, {
    value: navigationContext
  }, React7.createElement(LocationContext.Provider, {
    children,
    value: locationContext
  }));
}
function Routes(_ref6) {
  let {
    children,
    location
  } = _ref6;
  return useRoutes(createRoutesFromChildren(children), location);
}
function Await(_ref7) {
  let {
    children,
    errorElement,
    resolve
  } = _ref7;
  return React7.createElement(AwaitErrorBoundary, {
    resolve,
    errorElement
  }, React7.createElement(ResolveAwait, null, children));
}
function ResolveAwait(_ref8) {
  let {
    children
  } = _ref8;
  let data = useAsyncValue();
  let toRender = typeof children === "function" ? children(data) : children;
  return React7.createElement(React7.Fragment, null, toRender);
}
function createRoutesFromChildren(children, parentPath) {
  if (parentPath === void 0) {
    parentPath = [];
  }
  let routes = [];
  React7.Children.forEach(children, (element, index) => {
    if (!React7.isValidElement(element)) {
      return;
    }
    let treePath = [...parentPath, index];
    if (element.type === React7.Fragment) {
      routes.push.apply(routes, createRoutesFromChildren(element.props.children, treePath));
      return;
    }
    !(element.type === Route) ? true ? invariant2(false, "[" + (typeof element.type === "string" ? element.type : element.type.name) + "] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>") : invariant2(false) : void 0;
    !(!element.props.index || !element.props.children) ? true ? invariant2(false, "An index route cannot have child routes.") : invariant2(false) : void 0;
    let route = {
      id: element.props.id || treePath.join("-"),
      caseSensitive: element.props.caseSensitive,
      element: element.props.element,
      Component: element.props.Component,
      index: element.props.index,
      path: element.props.path,
      loader: element.props.loader,
      action: element.props.action,
      errorElement: element.props.errorElement,
      ErrorBoundary: element.props.ErrorBoundary,
      hasErrorBoundary: element.props.ErrorBoundary != null || element.props.errorElement != null,
      shouldRevalidate: element.props.shouldRevalidate,
      handle: element.props.handle,
      lazy: element.props.lazy
    };
    if (element.props.children) {
      route.children = createRoutesFromChildren(element.props.children, treePath);
    }
    routes.push(route);
  });
  return routes;
}
function renderMatches(matches) {
  return _renderMatches(matches);
}
function mapRouteProperties(route) {
  let updates = {
    // Note: this check also occurs in createRoutesFromChildren so update
    // there if you change this -- please and thank you!
    hasErrorBoundary: route.ErrorBoundary != null || route.errorElement != null
  };
  if (route.Component) {
    if (true) {
      if (route.element) {
        true ? warning3(false, "You should not include both `Component` and `element` on your route - `Component` will be used.") : void 0;
      }
    }
    Object.assign(updates, {
      element: React7.createElement(route.Component),
      Component: void 0
    });
  }
  if (route.HydrateFallback) {
    if (true) {
      if (route.hydrateFallbackElement) {
        true ? warning3(false, "You should not include both `HydrateFallback` and `hydrateFallbackElement` on your route - `HydrateFallback` will be used.") : void 0;
      }
    }
    Object.assign(updates, {
      hydrateFallbackElement: React7.createElement(route.HydrateFallback),
      HydrateFallback: void 0
    });
  }
  if (route.ErrorBoundary) {
    if (true) {
      if (route.errorElement) {
        true ? warning3(false, "You should not include both `ErrorBoundary` and `errorElement` on your route - `ErrorBoundary` will be used.") : void 0;
      }
    }
    Object.assign(updates, {
      errorElement: React7.createElement(route.ErrorBoundary),
      ErrorBoundary: void 0
    });
  }
  return updates;
}
function createMemoryRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends3({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createMemoryHistory({
      initialEntries: opts == null ? void 0 : opts.initialEntries,
      initialIndex: opts == null ? void 0 : opts.initialIndex
    }),
    hydrationData: opts == null ? void 0 : opts.hydrationData,
    routes,
    mapRouteProperties
  }).initialize();
}
var React7, DataRouterContext, DataRouterStateContext, AwaitContext, NavigationContext, LocationContext, RouteContext, RouteErrorContext, navigateEffectWarning, OutletContext, defaultErrorElement, RenderErrorBoundary, DataRouterHook, DataRouterStateHook, blockerId, alreadyWarned, START_TRANSITION, startTransitionImpl, AwaitRenderStatus, neverSettledPromise, AwaitErrorBoundary;
var init_dist = __esm({
  "node_modules/react-router/dist/index.js"() {
    React7 = __toESM(require_react());
    init_router();
    init_router();
    DataRouterContext = React7.createContext(null);
    if (true) {
      DataRouterContext.displayName = "DataRouter";
    }
    DataRouterStateContext = React7.createContext(null);
    if (true) {
      DataRouterStateContext.displayName = "DataRouterState";
    }
    AwaitContext = React7.createContext(null);
    if (true) {
      AwaitContext.displayName = "Await";
    }
    NavigationContext = React7.createContext(null);
    if (true) {
      NavigationContext.displayName = "Navigation";
    }
    LocationContext = React7.createContext(null);
    if (true) {
      LocationContext.displayName = "Location";
    }
    RouteContext = React7.createContext({
      outlet: null,
      matches: [],
      isDataRoute: false
    });
    if (true) {
      RouteContext.displayName = "Route";
    }
    RouteErrorContext = React7.createContext(null);
    if (true) {
      RouteErrorContext.displayName = "RouteError";
    }
    navigateEffectWarning = "You should call navigate() in a React.useEffect(), not when your component is first rendered.";
    OutletContext = React7.createContext(null);
    defaultErrorElement = React7.createElement(DefaultErrorComponent, null);
    RenderErrorBoundary = class extends React7.Component {
      constructor(props) {
        super(props);
        this.state = {
          location: props.location,
          revalidation: props.revalidation,
          error: props.error
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      static getDerivedStateFromProps(props, state) {
        if (state.location !== props.location || state.revalidation !== "idle" && props.revalidation === "idle") {
          return {
            error: props.error,
            location: props.location,
            revalidation: props.revalidation
          };
        }
        return {
          error: props.error !== void 0 ? props.error : state.error,
          location: state.location,
          revalidation: props.revalidation || state.revalidation
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error("React Router caught the following error during render", error, errorInfo);
      }
      render() {
        return this.state.error !== void 0 ? React7.createElement(RouteContext.Provider, {
          value: this.props.routeContext
        }, React7.createElement(RouteErrorContext.Provider, {
          value: this.state.error,
          children: this.props.component
        })) : this.props.children;
      }
    };
    DataRouterHook = function(DataRouterHook3) {
      DataRouterHook3["UseBlocker"] = "useBlocker";
      DataRouterHook3["UseRevalidator"] = "useRevalidator";
      DataRouterHook3["UseNavigateStable"] = "useNavigate";
      return DataRouterHook3;
    }(DataRouterHook || {});
    DataRouterStateHook = function(DataRouterStateHook3) {
      DataRouterStateHook3["UseBlocker"] = "useBlocker";
      DataRouterStateHook3["UseLoaderData"] = "useLoaderData";
      DataRouterStateHook3["UseActionData"] = "useActionData";
      DataRouterStateHook3["UseRouteError"] = "useRouteError";
      DataRouterStateHook3["UseNavigation"] = "useNavigation";
      DataRouterStateHook3["UseRouteLoaderData"] = "useRouteLoaderData";
      DataRouterStateHook3["UseMatches"] = "useMatches";
      DataRouterStateHook3["UseRevalidator"] = "useRevalidator";
      DataRouterStateHook3["UseNavigateStable"] = "useNavigate";
      DataRouterStateHook3["UseRouteId"] = "useRouteId";
      return DataRouterStateHook3;
    }(DataRouterStateHook || {});
    blockerId = 0;
    alreadyWarned = {};
    START_TRANSITION = "startTransition";
    startTransitionImpl = React7[START_TRANSITION];
    AwaitRenderStatus = function(AwaitRenderStatus2) {
      AwaitRenderStatus2[AwaitRenderStatus2["pending"] = 0] = "pending";
      AwaitRenderStatus2[AwaitRenderStatus2["success"] = 1] = "success";
      AwaitRenderStatus2[AwaitRenderStatus2["error"] = 2] = "error";
      return AwaitRenderStatus2;
    }(AwaitRenderStatus || {});
    neverSettledPromise = new Promise(() => {
    });
    AwaitErrorBoundary = class extends React7.Component {
      constructor(props) {
        super(props);
        this.state = {
          error: null
        };
      }
      static getDerivedStateFromError(error) {
        return {
          error
        };
      }
      componentDidCatch(error, errorInfo) {
        console.error("<Await> caught the following error during render", error, errorInfo);
      }
      render() {
        let {
          children,
          errorElement,
          resolve
        } = this.props;
        let promise3 = null;
        let status = AwaitRenderStatus.pending;
        if (!(resolve instanceof Promise)) {
          status = AwaitRenderStatus.success;
          promise3 = Promise.resolve();
          Object.defineProperty(promise3, "_tracked", {
            get: () => true
          });
          Object.defineProperty(promise3, "_data", {
            get: () => resolve
          });
        } else if (this.state.error) {
          status = AwaitRenderStatus.error;
          let renderError = this.state.error;
          promise3 = Promise.reject().catch(() => {
          });
          Object.defineProperty(promise3, "_tracked", {
            get: () => true
          });
          Object.defineProperty(promise3, "_error", {
            get: () => renderError
          });
        } else if (resolve._tracked) {
          promise3 = resolve;
          status = promise3._error !== void 0 ? AwaitRenderStatus.error : promise3._data !== void 0 ? AwaitRenderStatus.success : AwaitRenderStatus.pending;
        } else {
          status = AwaitRenderStatus.pending;
          Object.defineProperty(resolve, "_tracked", {
            get: () => true
          });
          promise3 = resolve.then((data) => Object.defineProperty(resolve, "_data", {
            get: () => data
          }), (error) => Object.defineProperty(resolve, "_error", {
            get: () => error
          }));
        }
        if (status === AwaitRenderStatus.error && promise3._error instanceof AbortedDeferredError) {
          throw neverSettledPromise;
        }
        if (status === AwaitRenderStatus.error && !errorElement) {
          throw promise3._error;
        }
        if (status === AwaitRenderStatus.error) {
          return React7.createElement(AwaitContext.Provider, {
            value: promise3,
            children: errorElement
          });
        }
        if (status === AwaitRenderStatus.success) {
          return React7.createElement(AwaitContext.Provider, {
            value: promise3,
            children
          });
        }
        throw promise3;
      }
    };
  }
});

// node_modules/react-router-dom/dist/index.js
var dist_exports = {};
__export(dist_exports, {
  AbortedDeferredError: () => AbortedDeferredError,
  Await: () => Await,
  BrowserRouter: () => BrowserRouter,
  Form: () => Form,
  HashRouter: () => HashRouter,
  Link: () => Link,
  MemoryRouter: () => MemoryRouter,
  NavLink: () => NavLink,
  Navigate: () => Navigate,
  NavigationType: () => Action,
  Outlet: () => Outlet,
  Route: () => Route,
  Router: () => Router,
  RouterProvider: () => RouterProvider,
  Routes: () => Routes,
  ScrollRestoration: () => ScrollRestoration,
  UNSAFE_DataRouterContext: () => DataRouterContext,
  UNSAFE_DataRouterStateContext: () => DataRouterStateContext,
  UNSAFE_FetchersContext: () => FetchersContext,
  UNSAFE_LocationContext: () => LocationContext,
  UNSAFE_NavigationContext: () => NavigationContext,
  UNSAFE_RouteContext: () => RouteContext,
  UNSAFE_ViewTransitionContext: () => ViewTransitionContext,
  UNSAFE_useRouteId: () => useRouteId,
  UNSAFE_useScrollRestoration: () => useScrollRestoration,
  createBrowserRouter: () => createBrowserRouter,
  createHashRouter: () => createHashRouter,
  createMemoryRouter: () => createMemoryRouter,
  createPath: () => createPath,
  createRoutesFromChildren: () => createRoutesFromChildren,
  createRoutesFromElements: () => createRoutesFromChildren,
  createSearchParams: () => createSearchParams,
  defer: () => defer,
  generatePath: () => generatePath,
  isRouteErrorResponse: () => isRouteErrorResponse,
  json: () => json,
  matchPath: () => matchPath,
  matchRoutes: () => matchRoutes,
  parsePath: () => parsePath,
  redirect: () => redirect,
  redirectDocument: () => redirectDocument,
  renderMatches: () => renderMatches,
  resolvePath: () => resolvePath,
  unstable_HistoryRouter: () => HistoryRouter,
  unstable_usePrompt: () => usePrompt,
  unstable_useViewTransitionState: () => useViewTransitionState,
  useActionData: () => useActionData,
  useAsyncError: () => useAsyncError,
  useAsyncValue: () => useAsyncValue,
  useBeforeUnload: () => useBeforeUnload,
  useBlocker: () => useBlocker,
  useFetcher: () => useFetcher,
  useFetchers: () => useFetchers,
  useFormAction: () => useFormAction,
  useHref: () => useHref,
  useInRouterContext: () => useInRouterContext,
  useLinkClickHandler: () => useLinkClickHandler,
  useLoaderData: () => useLoaderData,
  useLocation: () => useLocation,
  useMatch: () => useMatch,
  useMatches: () => useMatches,
  useNavigate: () => useNavigate,
  useNavigation: () => useNavigation,
  useNavigationType: () => useNavigationType,
  useOutlet: () => useOutlet,
  useOutletContext: () => useOutletContext,
  useParams: () => useParams,
  useResolvedPath: () => useResolvedPath,
  useRevalidator: () => useRevalidator,
  useRouteError: () => useRouteError,
  useRouteLoaderData: () => useRouteLoaderData,
  useRoutes: () => useRoutes,
  useSearchParams: () => useSearchParams,
  useSubmit: () => useSubmit
});
function _extends4() {
  _extends4 = Object.assign ? Object.assign.bind() : function(target) {
    for (var i2 = 1; i2 < arguments.length; i2++) {
      var source = arguments[i2];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends4.apply(this, arguments);
}
function _objectWithoutPropertiesLoose2(source, excluded) {
  if (source == null)
    return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i2;
  for (i2 = 0; i2 < sourceKeys.length; i2++) {
    key = sourceKeys[i2];
    if (excluded.indexOf(key) >= 0)
      continue;
    target[key] = source[key];
  }
  return target;
}
function isHtmlElement(object3) {
  return object3 != null && typeof object3.tagName === "string";
}
function isButtonElement(object3) {
  return isHtmlElement(object3) && object3.tagName.toLowerCase() === "button";
}
function isFormElement(object3) {
  return isHtmlElement(object3) && object3.tagName.toLowerCase() === "form";
}
function isInputElement(object3) {
  return isHtmlElement(object3) && object3.tagName.toLowerCase() === "input";
}
function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}
function shouldProcessLinkClick(event, target) {
  return event.button === 0 && // Ignore everything but left clicks
  (!target || target === "_self") && // Let browser handle "target=_blank" etc.
  !isModifiedEvent(event);
}
function createSearchParams(init) {
  if (init === void 0) {
    init = "";
  }
  return new URLSearchParams(typeof init === "string" || Array.isArray(init) || init instanceof URLSearchParams ? init : Object.keys(init).reduce((memo, key) => {
    let value = init[key];
    return memo.concat(Array.isArray(value) ? value.map((v2) => [key, v2]) : [[key, value]]);
  }, []));
}
function getSearchParamsForLocation(locationSearch, defaultSearchParams) {
  let searchParams = createSearchParams(locationSearch);
  if (defaultSearchParams) {
    defaultSearchParams.forEach((_2, key) => {
      if (!searchParams.has(key)) {
        defaultSearchParams.getAll(key).forEach((value) => {
          searchParams.append(key, value);
        });
      }
    });
  }
  return searchParams;
}
function isFormDataSubmitterSupported() {
  if (_formDataSupportsSubmitter === null) {
    try {
      new FormData(
        document.createElement("form"),
        // @ts-expect-error if FormData supports the submitter parameter, this will throw
        0
      );
      _formDataSupportsSubmitter = false;
    } catch (e2) {
      _formDataSupportsSubmitter = true;
    }
  }
  return _formDataSupportsSubmitter;
}
function getFormEncType(encType) {
  if (encType != null && !supportedFormEncTypes.has(encType)) {
    true ? warning3(false, '"' + encType + '" is not a valid `encType` for `<Form>`/`<fetcher.Form>` ' + ('and will default to "' + defaultEncType + '"')) : void 0;
    return null;
  }
  return encType;
}
function getFormSubmissionInfo(target, basename) {
  let method;
  let action;
  let encType;
  let formData;
  let body;
  if (isFormElement(target)) {
    let attr = target.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(target);
  } else if (isButtonElement(target) || isInputElement(target) && (target.type === "submit" || target.type === "image")) {
    let form = target.form;
    if (form == null) {
      throw new Error('Cannot submit a <button> or <input type="submit"> without a <form>');
    }
    let attr = target.getAttribute("formaction") || form.getAttribute("action");
    action = attr ? stripBasename(attr, basename) : null;
    method = target.getAttribute("formmethod") || form.getAttribute("method") || defaultMethod;
    encType = getFormEncType(target.getAttribute("formenctype")) || getFormEncType(form.getAttribute("enctype")) || defaultEncType;
    formData = new FormData(form, target);
    if (!isFormDataSubmitterSupported()) {
      let {
        name: name10,
        type,
        value
      } = target;
      if (type === "image") {
        let prefix2 = name10 ? name10 + "." : "";
        formData.append(prefix2 + "x", "0");
        formData.append(prefix2 + "y", "0");
      } else if (name10) {
        formData.append(name10, value);
      }
    }
  } else if (isHtmlElement(target)) {
    throw new Error('Cannot submit element that is not <form>, <button>, or <input type="submit|image">');
  } else {
    method = defaultMethod;
    action = null;
    encType = defaultEncType;
    body = target;
  }
  if (formData && encType === "text/plain") {
    body = formData;
    formData = void 0;
  }
  return {
    action,
    method: method.toLowerCase(),
    encType,
    formData,
    body
  };
}
function createBrowserRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends4({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createBrowserHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes,
    mapRouteProperties,
    window: opts == null ? void 0 : opts.window
  }).initialize();
}
function createHashRouter(routes, opts) {
  return createRouter({
    basename: opts == null ? void 0 : opts.basename,
    future: _extends4({}, opts == null ? void 0 : opts.future, {
      v7_prependBasename: true
    }),
    history: createHashHistory({
      window: opts == null ? void 0 : opts.window
    }),
    hydrationData: (opts == null ? void 0 : opts.hydrationData) || parseHydrationData(),
    routes,
    mapRouteProperties,
    window: opts == null ? void 0 : opts.window
  }).initialize();
}
function parseHydrationData() {
  var _window;
  let state = (_window = window) == null ? void 0 : _window.__staticRouterHydrationData;
  if (state && state.errors) {
    state = _extends4({}, state, {
      errors: deserializeErrors(state.errors)
    });
  }
  return state;
}
function deserializeErrors(errors) {
  if (!errors)
    return null;
  let entries = Object.entries(errors);
  let serialized = {};
  for (let [key, val] of entries) {
    if (val && val.__type === "RouteErrorResponse") {
      serialized[key] = new ErrorResponseImpl(val.status, val.statusText, val.data, val.internal === true);
    } else if (val && val.__type === "Error") {
      if (val.__subType) {
        let ErrorConstructor = window[val.__subType];
        if (typeof ErrorConstructor === "function") {
          try {
            let error = new ErrorConstructor(val.message);
            error.stack = "";
            serialized[key] = error;
          } catch (e2) {
          }
        }
      }
      if (serialized[key] == null) {
        let error = new Error(val.message);
        error.stack = "";
        serialized[key] = error;
      }
    } else {
      serialized[key] = val;
    }
  }
  return serialized;
}
function startTransitionSafe(cb) {
  if (startTransitionImpl2) {
    startTransitionImpl2(cb);
  } else {
    cb();
  }
}
function flushSyncSafe(cb) {
  if (flushSyncImpl) {
    flushSyncImpl(cb);
  } else {
    cb();
  }
}
function RouterProvider(_ref) {
  let {
    fallbackElement,
    router,
    future
  } = _ref;
  let [state, setStateImpl] = React8.useState(router.state);
  let [pendingState, setPendingState] = React8.useState();
  let [vtContext, setVtContext] = React8.useState({
    isTransitioning: false
  });
  let [renderDfd, setRenderDfd] = React8.useState();
  let [transition, setTransition] = React8.useState();
  let [interruption, setInterruption] = React8.useState();
  let fetcherData = React8.useRef(/* @__PURE__ */ new Map());
  let {
    v7_startTransition
  } = future || {};
  let optInStartTransition = React8.useCallback((cb) => {
    if (v7_startTransition) {
      startTransitionSafe(cb);
    } else {
      cb();
    }
  }, [v7_startTransition]);
  let setState = React8.useCallback((newState, _ref2) => {
    let {
      deletedFetchers,
      unstable_flushSync: flushSync,
      unstable_viewTransitionOpts: viewTransitionOpts
    } = _ref2;
    deletedFetchers.forEach((key) => fetcherData.current.delete(key));
    newState.fetchers.forEach((fetcher, key) => {
      if (fetcher.data !== void 0) {
        fetcherData.current.set(key, fetcher.data);
      }
    });
    let isViewTransitionUnavailable = router.window == null || typeof router.window.document.startViewTransition !== "function";
    if (!viewTransitionOpts || isViewTransitionUnavailable) {
      if (flushSync) {
        flushSyncSafe(() => setStateImpl(newState));
      } else {
        optInStartTransition(() => setStateImpl(newState));
      }
      return;
    }
    if (flushSync) {
      flushSyncSafe(() => {
        if (transition) {
          renderDfd && renderDfd.resolve();
          transition.skipTransition();
        }
        setVtContext({
          isTransitioning: true,
          flushSync: true,
          currentLocation: viewTransitionOpts.currentLocation,
          nextLocation: viewTransitionOpts.nextLocation
        });
      });
      let t2 = router.window.document.startViewTransition(() => {
        flushSyncSafe(() => setStateImpl(newState));
      });
      t2.finished.finally(() => {
        flushSyncSafe(() => {
          setRenderDfd(void 0);
          setTransition(void 0);
          setPendingState(void 0);
          setVtContext({
            isTransitioning: false
          });
        });
      });
      flushSyncSafe(() => setTransition(t2));
      return;
    }
    if (transition) {
      renderDfd && renderDfd.resolve();
      transition.skipTransition();
      setInterruption({
        state: newState,
        currentLocation: viewTransitionOpts.currentLocation,
        nextLocation: viewTransitionOpts.nextLocation
      });
    } else {
      setPendingState(newState);
      setVtContext({
        isTransitioning: true,
        flushSync: false,
        currentLocation: viewTransitionOpts.currentLocation,
        nextLocation: viewTransitionOpts.nextLocation
      });
    }
  }, [router.window, transition, renderDfd, fetcherData, optInStartTransition]);
  React8.useLayoutEffect(() => router.subscribe(setState), [router, setState]);
  React8.useEffect(() => {
    if (vtContext.isTransitioning && !vtContext.flushSync) {
      setRenderDfd(new Deferred());
    }
  }, [vtContext]);
  React8.useEffect(() => {
    if (renderDfd && pendingState && router.window) {
      let newState = pendingState;
      let renderPromise = renderDfd.promise;
      let transition2 = router.window.document.startViewTransition(async () => {
        optInStartTransition(() => setStateImpl(newState));
        await renderPromise;
      });
      transition2.finished.finally(() => {
        setRenderDfd(void 0);
        setTransition(void 0);
        setPendingState(void 0);
        setVtContext({
          isTransitioning: false
        });
      });
      setTransition(transition2);
    }
  }, [optInStartTransition, pendingState, renderDfd, router.window]);
  React8.useEffect(() => {
    if (renderDfd && pendingState && state.location.key === pendingState.location.key) {
      renderDfd.resolve();
    }
  }, [renderDfd, transition, state.location, pendingState]);
  React8.useEffect(() => {
    if (!vtContext.isTransitioning && interruption) {
      setPendingState(interruption.state);
      setVtContext({
        isTransitioning: true,
        flushSync: false,
        currentLocation: interruption.currentLocation,
        nextLocation: interruption.nextLocation
      });
      setInterruption(void 0);
    }
  }, [vtContext.isTransitioning, interruption]);
  React8.useEffect(() => {
    true ? warning3(fallbackElement == null || !router.future.v7_partialHydration, "`<RouterProvider fallbackElement>` is deprecated when using `v7_partialHydration`, use a `HydrateFallback` component instead") : void 0;
  }, []);
  let navigator = React8.useMemo(() => {
    return {
      createHref: router.createHref,
      encodeLocation: router.encodeLocation,
      go: (n2) => router.navigate(n2),
      push: (to, state2, opts) => router.navigate(to, {
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      }),
      replace: (to, state2, opts) => router.navigate(to, {
        replace: true,
        state: state2,
        preventScrollReset: opts == null ? void 0 : opts.preventScrollReset
      })
    };
  }, [router]);
  let basename = router.basename || "/";
  let dataRouterContext = React8.useMemo(() => ({
    router,
    navigator,
    static: false,
    basename
  }), [router, navigator, basename]);
  return React8.createElement(React8.Fragment, null, React8.createElement(DataRouterContext.Provider, {
    value: dataRouterContext
  }, React8.createElement(DataRouterStateContext.Provider, {
    value: state
  }, React8.createElement(FetchersContext.Provider, {
    value: fetcherData.current
  }, React8.createElement(ViewTransitionContext.Provider, {
    value: vtContext
  }, React8.createElement(Router, {
    basename,
    location: state.location,
    navigationType: state.historyAction,
    navigator,
    future: {
      v7_relativeSplatPath: router.future.v7_relativeSplatPath
    }
  }, state.initialized || router.future.v7_partialHydration ? React8.createElement(DataRoutes, {
    routes: router.routes,
    future: router.future,
    state
  }) : fallbackElement))))), null);
}
function DataRoutes(_ref3) {
  let {
    routes,
    future,
    state
  } = _ref3;
  return useRoutesImpl(routes, void 0, state, future);
}
function BrowserRouter(_ref4) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref4;
  let historyRef = React8.useRef();
  if (historyRef.current == null) {
    historyRef.current = createBrowserHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React8.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React8.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React8.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return React8.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function HashRouter(_ref5) {
  let {
    basename,
    children,
    future,
    window: window2
  } = _ref5;
  let historyRef = React8.useRef();
  if (historyRef.current == null) {
    historyRef.current = createHashHistory({
      window: window2,
      v5Compat: true
    });
  }
  let history = historyRef.current;
  let [state, setStateImpl] = React8.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React8.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React8.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return React8.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function HistoryRouter(_ref6) {
  let {
    basename,
    children,
    future,
    history
  } = _ref6;
  let [state, setStateImpl] = React8.useState({
    action: history.action,
    location: history.location
  });
  let {
    v7_startTransition
  } = future || {};
  let setState = React8.useCallback((newState) => {
    v7_startTransition && startTransitionImpl2 ? startTransitionImpl2(() => setStateImpl(newState)) : setStateImpl(newState);
  }, [setStateImpl, v7_startTransition]);
  React8.useLayoutEffect(() => history.listen(setState), [history, setState]);
  return React8.createElement(Router, {
    basename,
    children,
    location: state.location,
    navigationType: state.action,
    navigator: history,
    future
  });
}
function ScrollRestoration(_ref10) {
  let {
    getKey,
    storageKey
  } = _ref10;
  useScrollRestoration({
    getKey,
    storageKey
  });
  return null;
}
function getDataRouterConsoleError2(hookName) {
  return hookName + " must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.";
}
function useDataRouterContext2(hookName) {
  let ctx = React8.useContext(DataRouterContext);
  !ctx ? true ? invariant2(false, getDataRouterConsoleError2(hookName)) : invariant2(false) : void 0;
  return ctx;
}
function useDataRouterState2(hookName) {
  let state = React8.useContext(DataRouterStateContext);
  !state ? true ? invariant2(false, getDataRouterConsoleError2(hookName)) : invariant2(false) : void 0;
  return state;
}
function useLinkClickHandler(to, _temp) {
  let {
    target,
    replace: replaceProp,
    state,
    preventScrollReset,
    relative,
    unstable_viewTransition
  } = _temp === void 0 ? {} : _temp;
  let navigate = useNavigate();
  let location = useLocation();
  let path = useResolvedPath(to, {
    relative
  });
  return React8.useCallback((event) => {
    if (shouldProcessLinkClick(event, target)) {
      event.preventDefault();
      let replace = replaceProp !== void 0 ? replaceProp : createPath(location) === createPath(path);
      navigate(to, {
        replace,
        state,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
    }
  }, [location, navigate, path, replaceProp, state, target, to, preventScrollReset, relative, unstable_viewTransition]);
}
function useSearchParams(defaultInit) {
  true ? warning3(typeof URLSearchParams !== "undefined", "You cannot use the `useSearchParams` hook in a browser that does not support the URLSearchParams API. If you need to support Internet Explorer 11, we recommend you load a polyfill such as https://github.com/ungap/url-search-params\n\nIf you're unsure how to load polyfills, we recommend you check out https://polyfill.io/v3/ which provides some recommendations about how to load polyfills only for users that need them, instead of for every user.") : void 0;
  let defaultSearchParamsRef = React8.useRef(createSearchParams(defaultInit));
  let hasSetSearchParamsRef = React8.useRef(false);
  let location = useLocation();
  let searchParams = React8.useMemo(() => (
    // Only merge in the defaults if we haven't yet called setSearchParams.
    // Once we call that we want those to take precedence, otherwise you can't
    // remove a param with setSearchParams({}) if it has an initial value
    getSearchParamsForLocation(location.search, hasSetSearchParamsRef.current ? null : defaultSearchParamsRef.current)
  ), [location.search]);
  let navigate = useNavigate();
  let setSearchParams = React8.useCallback((nextInit, navigateOptions) => {
    const newSearchParams = createSearchParams(typeof nextInit === "function" ? nextInit(searchParams) : nextInit);
    hasSetSearchParamsRef.current = true;
    navigate("?" + newSearchParams, navigateOptions);
  }, [navigate, searchParams]);
  return [searchParams, setSearchParams];
}
function validateClientSideSubmission() {
  if (typeof document === "undefined") {
    throw new Error("You are calling submit during the server render. Try calling submit within a `useEffect` or callback instead.");
  }
}
function useSubmit() {
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseSubmit);
  let {
    basename
  } = React8.useContext(NavigationContext);
  let currentRouteId = useRouteId();
  return React8.useCallback(function(target, options) {
    if (options === void 0) {
      options = {};
    }
    validateClientSideSubmission();
    let {
      action,
      method,
      encType,
      formData,
      body
    } = getFormSubmissionInfo(target, basename);
    if (options.navigate === false) {
      let key = options.fetcherKey || getUniqueFetcherId();
      router.fetch(key, currentRouteId, options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        unstable_flushSync: options.unstable_flushSync
      });
    } else {
      router.navigate(options.action || action, {
        preventScrollReset: options.preventScrollReset,
        formData,
        body,
        formMethod: options.method || method,
        formEncType: options.encType || encType,
        replace: options.replace,
        state: options.state,
        fromRouteId: currentRouteId,
        unstable_flushSync: options.unstable_flushSync,
        unstable_viewTransition: options.unstable_viewTransition
      });
    }
  }, [router, basename, currentRouteId]);
}
function useFormAction(action, _temp2) {
  let {
    relative
  } = _temp2 === void 0 ? {} : _temp2;
  let {
    basename
  } = React8.useContext(NavigationContext);
  let routeContext = React8.useContext(RouteContext);
  !routeContext ? true ? invariant2(false, "useFormAction must be used inside a RouteContext") : invariant2(false) : void 0;
  let [match2] = routeContext.matches.slice(-1);
  let path = _extends4({}, useResolvedPath(action ? action : ".", {
    relative
  }));
  let location = useLocation();
  if (action == null) {
    path.search = location.search;
    let params = new URLSearchParams(path.search);
    if (params.has("index") && params.get("index") === "") {
      params.delete("index");
      path.search = params.toString() ? "?" + params.toString() : "";
    }
  }
  if ((!action || action === ".") && match2.route.index) {
    path.search = path.search ? path.search.replace(/^\?/, "?index&") : "?index";
  }
  if (basename !== "/") {
    path.pathname = path.pathname === "/" ? basename : joinPaths([basename, path.pathname]);
  }
  return createPath(path);
}
function useFetcher(_temp3) {
  var _route$matches;
  let {
    key
  } = _temp3 === void 0 ? {} : _temp3;
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseFetcher);
  let state = useDataRouterState2(DataRouterStateHook2.UseFetcher);
  let fetcherData = React8.useContext(FetchersContext);
  let route = React8.useContext(RouteContext);
  let routeId = (_route$matches = route.matches[route.matches.length - 1]) == null ? void 0 : _route$matches.route.id;
  !fetcherData ? true ? invariant2(false, "useFetcher must be used inside a FetchersContext") : invariant2(false) : void 0;
  !route ? true ? invariant2(false, "useFetcher must be used inside a RouteContext") : invariant2(false) : void 0;
  !(routeId != null) ? true ? invariant2(false, 'useFetcher can only be used on routes that contain a unique "id"') : invariant2(false) : void 0;
  let defaultKey = useIdImpl ? useIdImpl() : "";
  let [fetcherKey, setFetcherKey] = React8.useState(key || defaultKey);
  if (key && key !== fetcherKey) {
    setFetcherKey(key);
  } else if (!fetcherKey) {
    setFetcherKey(getUniqueFetcherId());
  }
  React8.useEffect(() => {
    router.getFetcher(fetcherKey);
    return () => {
      router.deleteFetcher(fetcherKey);
    };
  }, [router, fetcherKey]);
  let load = React8.useCallback((href, opts) => {
    !routeId ? true ? invariant2(false, "No routeId available for fetcher.load()") : invariant2(false) : void 0;
    router.fetch(fetcherKey, routeId, href, opts);
  }, [fetcherKey, routeId, router]);
  let submitImpl = useSubmit();
  let submit = React8.useCallback((target, opts) => {
    submitImpl(target, _extends4({}, opts, {
      navigate: false,
      fetcherKey
    }));
  }, [fetcherKey, submitImpl]);
  let FetcherForm = React8.useMemo(() => {
    let FetcherForm2 = React8.forwardRef((props, ref) => {
      return React8.createElement(Form, _extends4({}, props, {
        navigate: false,
        fetcherKey,
        ref
      }));
    });
    if (true) {
      FetcherForm2.displayName = "fetcher.Form";
    }
    return FetcherForm2;
  }, [fetcherKey]);
  let fetcher = state.fetchers.get(fetcherKey) || IDLE_FETCHER;
  let data = fetcherData.get(fetcherKey);
  let fetcherWithComponents = React8.useMemo(() => _extends4({
    Form: FetcherForm,
    submit,
    load
  }, fetcher, {
    data
  }), [FetcherForm, submit, load, fetcher, data]);
  return fetcherWithComponents;
}
function useFetchers() {
  let state = useDataRouterState2(DataRouterStateHook2.UseFetchers);
  return Array.from(state.fetchers.entries()).map((_ref11) => {
    let [key, fetcher] = _ref11;
    return _extends4({}, fetcher, {
      key
    });
  });
}
function useScrollRestoration(_temp4) {
  let {
    getKey,
    storageKey
  } = _temp4 === void 0 ? {} : _temp4;
  let {
    router
  } = useDataRouterContext2(DataRouterHook2.UseScrollRestoration);
  let {
    restoreScrollPosition,
    preventScrollReset
  } = useDataRouterState2(DataRouterStateHook2.UseScrollRestoration);
  let {
    basename
  } = React8.useContext(NavigationContext);
  let location = useLocation();
  let matches = useMatches();
  let navigation = useNavigation();
  React8.useEffect(() => {
    window.history.scrollRestoration = "manual";
    return () => {
      window.history.scrollRestoration = "auto";
    };
  }, []);
  usePageHide(React8.useCallback(() => {
    if (navigation.state === "idle") {
      let key = (getKey ? getKey(location, matches) : null) || location.key;
      savedScrollPositions[key] = window.scrollY;
    }
    try {
      sessionStorage.setItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY, JSON.stringify(savedScrollPositions));
    } catch (error) {
      true ? warning3(false, "Failed to save scroll positions in sessionStorage, <ScrollRestoration /> will not work properly (" + error + ").") : void 0;
    }
    window.history.scrollRestoration = "auto";
  }, [storageKey, getKey, navigation.state, location, matches]));
  if (typeof document !== "undefined") {
    React8.useLayoutEffect(() => {
      try {
        let sessionPositions = sessionStorage.getItem(storageKey || SCROLL_RESTORATION_STORAGE_KEY);
        if (sessionPositions) {
          savedScrollPositions = JSON.parse(sessionPositions);
        }
      } catch (e2) {
      }
    }, [storageKey]);
    React8.useLayoutEffect(() => {
      let getKeyWithoutBasename = getKey && basename !== "/" ? (location2, matches2) => getKey(
        // Strip the basename to match useLocation()
        _extends4({}, location2, {
          pathname: stripBasename(location2.pathname, basename) || location2.pathname
        }),
        matches2
      ) : getKey;
      let disableScrollRestoration = router == null ? void 0 : router.enableScrollRestoration(savedScrollPositions, () => window.scrollY, getKeyWithoutBasename);
      return () => disableScrollRestoration && disableScrollRestoration();
    }, [router, basename, getKey]);
    React8.useLayoutEffect(() => {
      if (restoreScrollPosition === false) {
        return;
      }
      if (typeof restoreScrollPosition === "number") {
        window.scrollTo(0, restoreScrollPosition);
        return;
      }
      if (location.hash) {
        let el = document.getElementById(decodeURIComponent(location.hash.slice(1)));
        if (el) {
          el.scrollIntoView();
          return;
        }
      }
      if (preventScrollReset === true) {
        return;
      }
      window.scrollTo(0, 0);
    }, [location, restoreScrollPosition, preventScrollReset]);
  }
}
function useBeforeUnload(callback, options) {
  let {
    capture
  } = options || {};
  React8.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    window.addEventListener("beforeunload", callback, opts);
    return () => {
      window.removeEventListener("beforeunload", callback, opts);
    };
  }, [callback, capture]);
}
function usePageHide(callback, options) {
  let {
    capture
  } = options || {};
  React8.useEffect(() => {
    let opts = capture != null ? {
      capture
    } : void 0;
    window.addEventListener("pagehide", callback, opts);
    return () => {
      window.removeEventListener("pagehide", callback, opts);
    };
  }, [callback, capture]);
}
function usePrompt(_ref12) {
  let {
    when,
    message
  } = _ref12;
  let blocker = useBlocker(when);
  React8.useEffect(() => {
    if (blocker.state === "blocked") {
      let proceed = window.confirm(message);
      if (proceed) {
        setTimeout(blocker.proceed, 0);
      } else {
        blocker.reset();
      }
    }
  }, [blocker, message]);
  React8.useEffect(() => {
    if (blocker.state === "blocked" && !when) {
      blocker.reset();
    }
  }, [blocker, when]);
}
function useViewTransitionState(to, opts) {
  if (opts === void 0) {
    opts = {};
  }
  let vtContext = React8.useContext(ViewTransitionContext);
  !(vtContext != null) ? true ? invariant2(false, "`unstable_useViewTransitionState` must be used within `react-router-dom`'s `RouterProvider`.  Did you accidentally import `RouterProvider` from `react-router`?") : invariant2(false) : void 0;
  let {
    basename
  } = useDataRouterContext2(DataRouterHook2.useViewTransitionState);
  let path = useResolvedPath(to, {
    relative: opts.relative
  });
  if (!vtContext.isTransitioning) {
    return false;
  }
  let currentPath = stripBasename(vtContext.currentLocation.pathname, basename) || vtContext.currentLocation.pathname;
  let nextPath = stripBasename(vtContext.nextLocation.pathname, basename) || vtContext.nextLocation.pathname;
  return matchPath(path.pathname, nextPath) != null || matchPath(path.pathname, currentPath) != null;
}
var React8, ReactDOM2, defaultMethod, defaultEncType, _formDataSupportsSubmitter, supportedFormEncTypes, _excluded77, _excluded228, _excluded316, REACT_ROUTER_VERSION, ViewTransitionContext, FetchersContext, START_TRANSITION2, startTransitionImpl2, FLUSH_SYNC, flushSyncImpl, USE_ID, useIdImpl, Deferred, isBrowser, ABSOLUTE_URL_REGEX2, Link, NavLink, Form, DataRouterHook2, DataRouterStateHook2, fetcherId, getUniqueFetcherId, SCROLL_RESTORATION_STORAGE_KEY, savedScrollPositions;
var init_dist2 = __esm({
  "node_modules/react-router-dom/dist/index.js"() {
    React8 = __toESM(require_react());
    ReactDOM2 = __toESM(require_react_dom());
    init_dist();
    init_dist();
    init_router();
    defaultMethod = "get";
    defaultEncType = "application/x-www-form-urlencoded";
    _formDataSupportsSubmitter = null;
    supportedFormEncTypes = /* @__PURE__ */ new Set(["application/x-www-form-urlencoded", "multipart/form-data", "text/plain"]);
    _excluded77 = ["onClick", "relative", "reloadDocument", "replace", "state", "target", "to", "preventScrollReset", "unstable_viewTransition"];
    _excluded228 = ["aria-current", "caseSensitive", "className", "end", "style", "to", "unstable_viewTransition", "children"];
    _excluded316 = ["fetcherKey", "navigate", "reloadDocument", "replace", "state", "method", "action", "onSubmit", "relative", "preventScrollReset", "unstable_viewTransition"];
    REACT_ROUTER_VERSION = "6";
    try {
      window.__reactRouterVersion = REACT_ROUTER_VERSION;
    } catch (e2) {
    }
    ViewTransitionContext = React8.createContext({
      isTransitioning: false
    });
    if (true) {
      ViewTransitionContext.displayName = "ViewTransition";
    }
    FetchersContext = React8.createContext(/* @__PURE__ */ new Map());
    if (true) {
      FetchersContext.displayName = "Fetchers";
    }
    START_TRANSITION2 = "startTransition";
    startTransitionImpl2 = React8[START_TRANSITION2];
    FLUSH_SYNC = "flushSync";
    flushSyncImpl = ReactDOM2[FLUSH_SYNC];
    USE_ID = "useId";
    useIdImpl = React8[USE_ID];
    Deferred = class {
      constructor() {
        this.status = "pending";
        this.promise = new Promise((resolve, reject) => {
          this.resolve = (value) => {
            if (this.status === "pending") {
              this.status = "resolved";
              resolve(value);
            }
          };
          this.reject = (reason) => {
            if (this.status === "pending") {
              this.status = "rejected";
              reject(reason);
            }
          };
        });
      }
    };
    if (true) {
      HistoryRouter.displayName = "unstable_HistoryRouter";
    }
    isBrowser = typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined";
    ABSOLUTE_URL_REGEX2 = /^(?:[a-z][a-z0-9+.-]*:|\/\/)/i;
    Link = React8.forwardRef(function LinkWithRef(_ref7, ref) {
      let {
        onClick,
        relative,
        reloadDocument,
        replace,
        state,
        target,
        to,
        preventScrollReset,
        unstable_viewTransition
      } = _ref7, rest = _objectWithoutPropertiesLoose2(_ref7, _excluded77);
      let {
        basename
      } = React8.useContext(NavigationContext);
      let absoluteHref;
      let isExternal = false;
      if (typeof to === "string" && ABSOLUTE_URL_REGEX2.test(to)) {
        absoluteHref = to;
        if (isBrowser) {
          try {
            let currentUrl = new URL(window.location.href);
            let targetUrl = to.startsWith("//") ? new URL(currentUrl.protocol + to) : new URL(to);
            let path = stripBasename(targetUrl.pathname, basename);
            if (targetUrl.origin === currentUrl.origin && path != null) {
              to = path + targetUrl.search + targetUrl.hash;
            } else {
              isExternal = true;
            }
          } catch (e2) {
            true ? warning3(false, '<Link to="' + to + '"> contains an invalid URL which will probably break when clicked - please update to a valid URL path.') : void 0;
          }
        }
      }
      let href = useHref(to, {
        relative
      });
      let internalOnClick = useLinkClickHandler(to, {
        replace,
        state,
        target,
        preventScrollReset,
        relative,
        unstable_viewTransition
      });
      function handleClick(event) {
        if (onClick)
          onClick(event);
        if (!event.defaultPrevented) {
          internalOnClick(event);
        }
      }
      return (
        // eslint-disable-next-line jsx-a11y/anchor-has-content
        React8.createElement("a", _extends4({}, rest, {
          href: absoluteHref || href,
          onClick: isExternal || reloadDocument ? onClick : handleClick,
          ref,
          target
        }))
      );
    });
    if (true) {
      Link.displayName = "Link";
    }
    NavLink = React8.forwardRef(function NavLinkWithRef(_ref8, ref) {
      let {
        "aria-current": ariaCurrentProp = "page",
        caseSensitive = false,
        className: classNameProp = "",
        end = false,
        style: styleProp,
        to,
        unstable_viewTransition,
        children
      } = _ref8, rest = _objectWithoutPropertiesLoose2(_ref8, _excluded228);
      let path = useResolvedPath(to, {
        relative: rest.relative
      });
      let location = useLocation();
      let routerState = React8.useContext(DataRouterStateContext);
      let {
        navigator,
        basename
      } = React8.useContext(NavigationContext);
      let isTransitioning = routerState != null && // Conditional usage is OK here because the usage of a data router is static
      // eslint-disable-next-line react-hooks/rules-of-hooks
      useViewTransitionState(path) && unstable_viewTransition === true;
      let toPathname = navigator.encodeLocation ? navigator.encodeLocation(path).pathname : path.pathname;
      let locationPathname = location.pathname;
      let nextLocationPathname = routerState && routerState.navigation && routerState.navigation.location ? routerState.navigation.location.pathname : null;
      if (!caseSensitive) {
        locationPathname = locationPathname.toLowerCase();
        nextLocationPathname = nextLocationPathname ? nextLocationPathname.toLowerCase() : null;
        toPathname = toPathname.toLowerCase();
      }
      if (nextLocationPathname && basename) {
        nextLocationPathname = stripBasename(nextLocationPathname, basename) || nextLocationPathname;
      }
      const endSlashPosition = toPathname !== "/" && toPathname.endsWith("/") ? toPathname.length - 1 : toPathname.length;
      let isActive = locationPathname === toPathname || !end && locationPathname.startsWith(toPathname) && locationPathname.charAt(endSlashPosition) === "/";
      let isPending = nextLocationPathname != null && (nextLocationPathname === toPathname || !end && nextLocationPathname.startsWith(toPathname) && nextLocationPathname.charAt(toPathname.length) === "/");
      let renderProps = {
        isActive,
        isPending,
        isTransitioning
      };
      let ariaCurrent = isActive ? ariaCurrentProp : void 0;
      let className;
      if (typeof classNameProp === "function") {
        className = classNameProp(renderProps);
      } else {
        className = [classNameProp, isActive ? "active" : null, isPending ? "pending" : null, isTransitioning ? "transitioning" : null].filter(Boolean).join(" ");
      }
      let style = typeof styleProp === "function" ? styleProp(renderProps) : styleProp;
      return React8.createElement(Link, _extends4({}, rest, {
        "aria-current": ariaCurrent,
        className,
        ref,
        style,
        to,
        unstable_viewTransition
      }), typeof children === "function" ? children(renderProps) : children);
    });
    if (true) {
      NavLink.displayName = "NavLink";
    }
    Form = React8.forwardRef((_ref9, forwardedRef) => {
      let {
        fetcherKey,
        navigate,
        reloadDocument,
        replace,
        state,
        method = defaultMethod,
        action,
        onSubmit,
        relative,
        preventScrollReset,
        unstable_viewTransition
      } = _ref9, props = _objectWithoutPropertiesLoose2(_ref9, _excluded316);
      let submit = useSubmit();
      let formAction = useFormAction(action, {
        relative
      });
      let formMethod = method.toLowerCase() === "get" ? "get" : "post";
      let submitHandler = (event) => {
        onSubmit && onSubmit(event);
        if (event.defaultPrevented)
          return;
        event.preventDefault();
        let submitter = event.nativeEvent.submitter;
        let submitMethod = (submitter == null ? void 0 : submitter.getAttribute("formmethod")) || method;
        submit(submitter || event.currentTarget, {
          fetcherKey,
          method: submitMethod,
          navigate,
          replace,
          state,
          relative,
          preventScrollReset,
          unstable_viewTransition
        });
      };
      return React8.createElement("form", _extends4({
        ref: forwardedRef,
        method: formMethod,
        action: formAction,
        onSubmit: reloadDocument ? onSubmit : submitHandler
      }, props));
    });
    if (true) {
      Form.displayName = "Form";
    }
    if (true) {
      ScrollRestoration.displayName = "ScrollRestoration";
    }
    (function(DataRouterHook3) {
      DataRouterHook3["UseScrollRestoration"] = "useScrollRestoration";
      DataRouterHook3["UseSubmit"] = "useSubmit";
      DataRouterHook3["UseSubmitFetcher"] = "useSubmitFetcher";
      DataRouterHook3["UseFetcher"] = "useFetcher";
      DataRouterHook3["useViewTransitionState"] = "useViewTransitionState";
    })(DataRouterHook2 || (DataRouterHook2 = {}));
    (function(DataRouterStateHook3) {
      DataRouterStateHook3["UseFetcher"] = "useFetcher";
      DataRouterStateHook3["UseFetchers"] = "useFetchers";
      DataRouterStateHook3["UseScrollRestoration"] = "useScrollRestoration";
    })(DataRouterStateHook2 || (DataRouterStateHook2 = {}));
    fetcherId = 0;
    getUniqueFetcherId = () => "__" + String(++fetcherId) + "__";
    SCROLL_RESTORATION_STORAGE_KEY = "react-router-scroll-positions";
    savedScrollPositions = {};
  }
});

// node_modules/react/package.json
var require_package = __commonJS({
  "node_modules/react/package.json"(exports, module) {
    module.exports = {
      name: "react",
      description: "React is a JavaScript library for building user interfaces.",
      keywords: [
        "react"
      ],
      version: "18.2.0",
      homepage: "https://reactjs.org/",
      bugs: "https://github.com/facebook/react/issues",
      license: "MIT",
      files: [
        "LICENSE",
        "README.md",
        "index.js",
        "cjs/",
        "umd/",
        "jsx-runtime.js",
        "jsx-dev-runtime.js",
        "react.shared-subset.js"
      ],
      main: "index.js",
      exports: {
        ".": {
          "react-server": "./react.shared-subset.js",
          default: "./index.js"
        },
        "./package.json": "./package.json",
        "./jsx-runtime": "./jsx-runtime.js",
        "./jsx-dev-runtime": "./jsx-dev-runtime.js"
      },
      repository: {
        type: "git",
        url: "https://github.com/facebook/react.git",
        directory: "packages/react"
      },
      engines: {
        node: ">=0.10.0"
      },
      dependencies: {
        "loose-envify": "^1.1.0"
      },
      browserify: {
        transform: [
          "loose-envify"
        ]
      }
    };
  }
});

// node_modules/@frontegg/react/index.js
var require_react2 = __commonJS({
  "node_modules/@frontegg/react/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    function _interopDefault(ex) {
      return ex && typeof ex === "object" && "default" in ex ? ex["default"] : ex;
    }
    var React9 = require_react();
    var React__default = _interopDefault(React9);
    var js = (init_js(), __toCommonJS(js_exports));
    var reactHooks = (init_react_hooks(), __toCommonJS(react_hooks_exports));
    var ReactRouterDom = (init_dist2(), __toCommonJS(dist_exports));
    var restApi = (init_rest_api(), __toCommonJS(rest_api_exports));
    var AppHolder2 = (init_AppHolder(), __toCommonJS(AppHolder_exports));
    var reduxStore = (init_redux_store(), __toCommonJS(redux_store_exports));
    var ReactPkg = _interopDefault(require_package());
    var types = (init_types4(), __toCommonJS(types_exports));
    var __assign = function() {
      __assign = Object.assign || function __assign2(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p2))
              t2[p2] = s2[p2];
        }
        return t2;
      };
      return __assign.apply(this, arguments);
    };
    function __rest(s2, e2) {
      var t2 = {};
      for (var p2 in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
          t2[p2] = s2[p2];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) {
          if (e2.indexOf(p2[i2]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p2[i2]))
            t2[p2[i2]] = s2[p2[i2]];
        }
      return t2;
    }
    var BrowserRouter2 = ReactRouterDom.BrowserRouter;
    var useHistory = function() {
      var _a, _b, _c;
      var navigate = ((_a = ReactRouterDom.useInRouterContext) === null || _a === void 0 ? void 0 : _a.call(ReactRouterDom)) ? (_b = ReactRouterDom.useNavigate) === null || _b === void 0 ? void 0 : _b.call(ReactRouterDom) : null;
      var history = (_c = ReactRouterDom.useHistory) === null || _c === void 0 ? void 0 : _c.call(ReactRouterDom);
      if (navigate) {
        var push = function(path, state) {
          if (state) {
            navigate(path, { state });
          } else {
            navigate(path);
          }
        };
        var replace = function(path, state) {
          navigate(path, { state, replace: true });
        };
        return { push, replace };
      }
      return history;
    };
    var sdkVersion = { version: "6.0.28" };
    var removeRedirectUrlFromQuery = function(query) {
      var q2 = new URLSearchParams(query);
      q2.delete("redirectUrl");
      return q2.toString();
    };
    var useQueryKeeper = function(_a) {
      var routes = _a.routes, history = _a.history;
      var queryParams = React9.useRef();
      var prevPathname = React9.useRef();
      var _b = ReactRouterDom.useLocation(), pathname = _b.pathname, search = _b.search;
      React9.useEffect(function() {
        if (!!search) {
          queryParams.current = search;
          prevPathname.current = pathname;
        }
      }, []);
      React9.useEffect(function() {
        var shouldKeepQuery = !!Object.values(routes).find(function(route) {
          return route === prevPathname.current;
        });
        if (!search && !!queryParams.current && shouldKeepQuery) {
          var query = removeRedirectUrlFromQuery(queryParams.current);
          history.push(pathname + ("?" + query));
        }
        prevPathname.current = pathname;
      }, [pathname, search, routes]);
    };
    var QueryKeeperWrapper = function(_a) {
      var history = _a.history;
      var signUpUrl = reactHooks.useAuthRoutes().signUpUrl;
      useQueryKeeper({ routes: { signUpUrl }, history });
      return React__default.createElement(React__default.Fragment, null);
    };
    var AlwaysRenderInProvider = function(_a) {
      var isExternalHistory = _a.isExternalHistory, app = _a.app, themeOptions = _a.themeOptions, history = _a.history;
      return React__default.createElement(
        React__default.Fragment,
        null,
        React__default.createElement(reactHooks.CustomComponentRegister, { app, themeOptions }),
        !isExternalHistory && React__default.createElement(QueryKeeperWrapper, { history })
      );
    };
    var ConnectorHistory = function(props) {
      var history = useHistory();
      return React__default.createElement(Connector, __assign({ history }, props));
    };
    function isBypassReactRoute(path, routes) {
      var stepUpUrl = (routes === null || routes === void 0 ? void 0 : routes.stepUpUrl) || reduxStore.defaultFronteggRoutes.stepUpUrl;
      return stepUpUrl && path.startsWith(stepUpUrl);
    }
    var Connector = function(_a) {
      var _b, _c;
      var history = _a.history, appName = _a.appName, _d = _a.isExternalHistory, isExternalHistory = _d === void 0 ? false : _d, props = __rest(_a, ["history", "appName", "isExternalHistory"]);
      var isSSR = typeof window === "undefined";
      var version = "@frontegg/react@" + sdkVersion.version;
      var baseName = (_b = props.basename) !== null && _b !== void 0 ? _b : "";
      var isAuthRouteRef = React9.useRef(function() {
        return false;
      });
      React9.useEffect(function() {
        isAuthRouteRef.current = function(path) {
          var _a2;
          return reduxStore.isAuthRoute(path, (_a2 = props.authOptions) === null || _a2 === void 0 ? void 0 : _a2.routes);
        };
      }, [(_c = props.authOptions) === null || _c === void 0 ? void 0 : _c.routes]);
      var onRedirectTo = React9.useCallback(function(_path, opts) {
        var _a2, _b2;
        var path = _path;
        if (baseName && typeof baseName === "string" && baseName.length > 0 && path.startsWith(baseName)) {
          path = path.substring(baseName.length);
        }
        if ((opts === null || opts === void 0 ? void 0 : opts.preserveQueryParams) || isAuthRouteRef.current(path)) {
          path = "" + path + window.location.search;
        }
        if (isBypassReactRoute(path, (_a2 = props.authOptions) === null || _a2 === void 0 ? void 0 : _a2.routes)) {
          (_b2 = window === null || window === void 0 ? void 0 : window.history) === null || _b2 === void 0 ? void 0 : _b2.pushState(null, "", path);
          return;
        }
        if ((opts === null || opts === void 0 ? void 0 : opts.refresh) && !isSSR) {
          window.Cypress ? history.push(path) : window.location.href = path;
        } else {
          (opts === null || opts === void 0 ? void 0 : opts.replace) ? history.replace(path) : history.push(path);
        }
      }, []);
      var app = React9.useMemo(function() {
        var _a2;
        try {
          return AppHolder2.AppHolder.getInstance(appName !== null && appName !== void 0 ? appName : "default");
        } catch (e2) {
          return js.initialize(__assign(__assign({}, props), { basename: (_a2 = props.basename) !== null && _a2 !== void 0 ? _a2 : baseName, contextOptions: __assign({ requestCredentials: "include", metadataHeaders: {
            //TODO: remove this ts-ignore after updating rest-api context options type to accept string.
            //@ts-ignore
            framework: restApi.FronteggFrameworks.React + "@" + ReactPkg.version,
            fronteggSdkVersion: version
          } }, props.contextOptions), onRedirectTo }), appName !== null && appName !== void 0 ? appName : "default");
        }
      }, []);
      restApi.ContextHolder.setOnRedirectTo(onRedirectTo);
      return React__default.createElement(reactHooks.FronteggStoreProvider, __assign({}, __assign(__assign({}, props), { app }), { alwaysVisibleChildren: React__default.createElement(AlwaysRenderInProvider, { app, themeOptions: props.themeOptions, history, isExternalHistory }) }));
    };
    var FronteggProvider = function(props) {
      var history = useHistory();
      if (props.history || history) {
        return React__default.createElement(Connector, __assign({ history: props.history || history, isExternalHistory: !!props.history }, props), props.children);
      }
      return React__default.createElement(
        BrowserRouter2,
        { basename: props.basename },
        React__default.createElement(ConnectorHistory, __assign({}, props), props.children)
      );
    };
    var AuthorizedContent = function(props) {
      var _a, _b;
      var isAuthorized = true;
      var user = reactHooks.useAuthUserOrNull();
      if (!(user === null || user === void 0 ? void 0 : user.superUser)) {
        if (props.requiredPermissions) {
          isAuthorized = false;
          var _loop_1 = function(permission2) {
            if ((_a = user === null || user === void 0 ? void 0 : user.permissions) === null || _a === void 0 ? void 0 : _a.find(function(_a2) {
              var key = _a2.key;
              return key === permission2;
            })) {
              isAuthorized = true;
            }
          };
          for (var _i = 0, _c = props.requiredPermissions; _i < _c.length; _i++) {
            var permission = _c[_i];
            _loop_1(permission);
          }
        }
        if (props.requiredRoles) {
          isAuthorized = false;
          var _loop_2 = function(role2) {
            if ((_b = user === null || user === void 0 ? void 0 : user.roles) === null || _b === void 0 ? void 0 : _b.find(function(_a2) {
              var key = _a2.key;
              return key === role2;
            })) {
              isAuthorized = true;
            }
          };
          for (var _d = 0, _e = props.requiredRoles; _d < _e.length; _d++) {
            var role = _e[_d];
            _loop_2(role);
          }
        }
      }
      if (typeof props.render === "function") {
        return React__default.createElement(React__default.Fragment, null, props.render(isAuthorized));
      }
      return isAuthorized ? React__default.createElement(React__default.Fragment, null, props.children) : null;
    };
    var useCheckoutDialog = function(appName) {
      if (appName === void 0) {
        appName = "default";
      }
      var _a = React9.useState({
        open: false,
        error: null,
        success: false
      }), _b = _a[0], open = _b.open, error = _b.error, success = _b.success, setState = _a[1];
      var handleError2 = React9.useCallback(function(error2) {
        setState({
          open: true,
          success: false,
          error: error2
        });
      }, []);
      var handleSuccess = React9.useCallback(function() {
        setState({
          open: false,
          success: true,
          error: null
        });
      }, []);
      var showDialog = React9.useCallback(function(plan) {
        js.CheckoutDialog.show({
          plan,
          onClose: hideDialog,
          onError: handleError2,
          onSuccess: handleSuccess
        }, appName);
        setState({
          open: true,
          success: false,
          error: null
        });
      }, [appName]);
      var hideDialog = React9.useCallback(function() {
        js.CheckoutDialog.hide(appName);
        setState({
          open: false,
          error: null,
          success: false
        });
      }, [appName]);
      return React9.useMemo(function() {
        return {
          open,
          showDialog,
          hideDialog,
          error,
          success
        };
      }, [open, showDialog, hideDialog, error, success]);
    };
    var SteppedUpContent = function(props) {
      var isAuthenticated = reactHooks.useIsAuthenticated();
      if (!isAuthenticated)
        return null;
      return React__default.createElement(SteppedUpContentInternal, __assign({}, props));
    };
    var SteppedUpContentInternal = function(_a) {
      var maxAge = _a.maxAge, preventSteppingUp = _a.preventSteppingUp, render = _a.render, children = _a.children;
      var isSteppedUp2 = reactHooks.useIsSteppedUp({ maxAge });
      var stepUp = reactHooks.useStepUp();
      var isStepUpCalled = React9.useRef(false);
      React9.useEffect(function() {
        if (isSteppedUp2) {
          isStepUpCalled.current = false;
          return;
        }
        if (isStepUpCalled.current)
          return;
        if (!preventSteppingUp) {
          stepUp({ maxAge });
        }
        isStepUpCalled.current = true;
      }, [isSteppedUp2, maxAge, preventSteppingUp, stepUp]);
      if (typeof render === "function") {
        return React__default.createElement(React__default.Fragment, null, render(isSteppedUp2));
      }
      return isSteppedUp2 ? React__default.createElement(React__default.Fragment, null, children) : null;
    };
    Object.keys(reactHooks).forEach(function(k2) {
      if (k2 !== "default")
        Object.defineProperty(exports, k2, {
          enumerable: true,
          get: function() {
            return reactHooks[k2];
          }
        });
    });
    Object.keys(types).forEach(function(k2) {
      if (k2 !== "default")
        Object.defineProperty(exports, k2, {
          enumerable: true,
          get: function() {
            return types[k2];
          }
        });
    });
    Object.defineProperty(exports, "AdminPortal", {
      enumerable: true,
      get: function() {
        return js.AdminPortal;
      }
    });
    Object.defineProperty(exports, "CheckoutDialog", {
      enumerable: true,
      get: function() {
        return js.CheckoutDialog;
      }
    });
    Object.defineProperty(exports, "HostedLogin", {
      enumerable: true,
      get: function() {
        return js.HostedLogin;
      }
    });
    Object.defineProperty(exports, "ContextHolder", {
      enumerable: true,
      get: function() {
        return restApi.ContextHolder;
      }
    });
    exports.AuthorizedContent = AuthorizedContent;
    exports.Connector = Connector;
    exports.ConnectorHistory = ConnectorHistory;
    exports.FronteggProvider = FronteggProvider;
    exports.SteppedUpContent = SteppedUpContent;
    exports.useCheckoutDialog = useCheckoutDialog;
  }
});
export default require_react2();
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)

@frontegg/rest-api/index.js:
  (** @license Frontegg v3.1.59
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@frontegg/redux-store/utils/sha256.js:
  (**
   *
   * THIS IS CUSTOM VERSION OF JS-SHA256 that will be used only
   * on non-secure domain due to the native `crypto.subtle.digest`
   * isn't accessible from non-secure domains.
   *
   * NOTE: Changes from 0.9.0:
   * - Remove any usage of eval scripts
   * - Remove support for UMD and AMD exports
   * - Remove support for CommonJS
   * - Make it typescript
   *
   * [js-sha256]{@link https://github.com/emn178/js-sha256}
   *
   * @version 0.9.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2014-2017
   * @license MIT
   *)

@frontegg/redux-store/index.js:
  (** @license Frontegg v6.179.0
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@frontegg/types/index.js:
  (** @license Frontegg v6.179.0
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@frontegg/js/index.js:
  (** @license Frontegg v6.179.0
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.development.js:
  (** @license React v17.0.2
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

isobject/index.js:
  (*!
   * isobject <https://github.com/jonschlinkert/isobject>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)

get-value/index.js:
  (*!
   * get-value <https://github.com/jonschlinkert/get-value>
   *
   * Copyright (c) 2014-2018, Jon Schlinkert.
   * Released under the MIT License.
   *)

@frontegg/react-hooks/index.js:
  (** @license Frontegg v6.179.0
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@remix-run/router/dist/router.js:
  (**
   * @remix-run/router v1.15.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router/dist/index.js:
  (**
   * React Router v6.22.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

react-router-dom/dist/index.js:
  (**
   * React Router DOM v6.22.1
   *
   * Copyright (c) Remix Software Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.md file in the root directory of this source tree.
   *
   * @license MIT
   *)

@frontegg/react/index.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
//# sourceMappingURL=@frontegg_react.js.map
